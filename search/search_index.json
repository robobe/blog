{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".md-typeset .cover { display: none; } .md-typeset .cover + hr { display: none; } .md-typeset h1, .md-typeset h2 { color: orangered; } .md-typeset .cards .card { border-radius: 1em; padding: 1em; } .md-typeset .cards .col:first-of-type { margin-left: -1em; } .md-typeset .cards .col:last-of-type { margin-right: -1em; } .md-typeset .cards .card h2 { margin-top: 0; } Robots Inside # First steps in robotics Systems. From hardware to applications Last action # Move to zsh Start dev in .devcontainers Learn Behavior Trees Blog # Each post is what I\u2019ve learned, and I wrote them down to share. Hope you\u2019ll find something interesting there. Read news Projects # A list of my projects which are done for learning and practicing in free time. See projects ROS2 # Enter Igition # Enter","title":"Home"},{"location":"#robots-inside","text":"First steps in robotics Systems. From hardware to applications","title":"Robots Inside"},{"location":"#last-action","text":"Move to zsh Start dev in .devcontainers Learn Behavior Trees","title":"Last action"},{"location":"#blog","text":"Each post is what I\u2019ve learned, and I wrote them down to share. Hope you\u2019ll find something interesting there. Read news","title":" Blog"},{"location":"#projects","text":"A list of my projects which are done for learning and practicing in free time. See projects","title":" Projects"},{"location":"#ros2","text":"Enter","title":" ROS2"},{"location":"#igition","text":"Enter","title":" Igition"},{"location":"blog/","text":"","title":"Recent posts"},{"location":"blog/AI/ai_start_here/","tags":["ai","101","pytorch"],"text":"Introduction to Deep Learning # Introduction to Deep Learning Youtube github # Computer Vision III: Detection, Segmentation and Tracking (CV3DST) Youtube Reference # Get Started with AI and Machine Learning in 3 Months 8 Free Resources To Learn PyTorch In 2021 sentdex Deep SORT","title":"AI Start here"},{"location":"blog/AI/ai_start_here/#introduction-to-deep-learning","text":"Introduction to Deep Learning Youtube github","title":"Introduction to Deep Learning"},{"location":"blog/AI/ai_start_here/#_1","text":"Computer Vision III: Detection, Segmentation and Tracking (CV3DST) Youtube","title":""},{"location":"blog/AI/ai_start_here/#reference","text":"Get Started with AI and Machine Learning in 3 Months 8 Free Resources To Learn PyTorch In 2021 sentdex Deep SORT","title":"Reference"},{"location":"blog/AI/must_dog_classification/","tags":["pytorch","classification","101"],"text":"Reference # PyTorch for Beginners: Image Classification using Pre-trained models PyTorch for Beginners: Comparison of pre-trained models for Image Classification","title":"PyTorch simple classification"},{"location":"blog/AI/must_dog_classification/#reference","text":"PyTorch for Beginners: Image Classification using Pre-trained models PyTorch for Beginners: Comparison of pre-trained models for Image Classification","title":"Reference"},{"location":"blog/AI/pc_nvidia_install/","tags":["nvidia","cuda","install"],"text":"Install driver # ubuntu-drivers devices sudo ubuntu-drivers autoinstall reboot Tip set /etc/apt/sources.list to us.archive.ubuntu.com Check after install # nvidia-smi +-----------------------------------------------------------------------------+ | NVIDIA-SMI 510.60.02 Driver Version: 510.60.02 CUDA Version: 11.6 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 NVIDIA GeForce ... Off | 00000000:58:00.0 Off | N/A | | N/A 43C P0 N/A / N/A | 9MiB / 2048MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | 0 N/A N/A 991 G /usr/lib/xorg/Xorg 4MiB | | 0 N/A N/A 1634 G /usr/lib/xorg/Xorg 4MiB | +-----------------------------------------------------------------------------+ Warning After Kernel/OS update the driver stop working sometimes Reinstall the driver solve the problem # 510 - driver version sudo apt install --reinstall nvidia-driver-510 sudo apt install --reinstall nvidia-dkms-510 cuda toolkit # Nvidia install page Environment # .bashrc export PATH = /usr/local/cuda-11.6/bin ${ PATH :+: ${ PATH }} export LD_LIBRARY_PATH = /usr/local/cuda-11.6/lib64 ${ LD_LIBRARY_PATH :+: ${ LD_LIBRARY_PATH }} export CUDA_HOME = /usr/local/cuda Tip trick to avoid adding an extra : when $PATH is not set. ${PATH:+:${PATH}} cuDNN # NVIDIA cuDNN is a GPU-accelerated library of primitives for deep neural networks. Nvidia download Warning Need nvidia membership to download cuDNN Install # install-guide sudo dpkg -i cudnn-local-repo-ubuntu2004-8.4.0.27_1.0-1_amd64.deb sudo apt-key add /var/cudnn-local-repo-*/7fa2af80.pub sudo apt-get update sudo apt install libcudnn8=8.4.0.27-1+cuda11.6","title":"NVIDIA - install on ubuntu 20.04"},{"location":"blog/AI/pc_nvidia_install/#install-driver","text":"ubuntu-drivers devices sudo ubuntu-drivers autoinstall reboot Tip set /etc/apt/sources.list to us.archive.ubuntu.com","title":"Install driver"},{"location":"blog/AI/pc_nvidia_install/#check-after-install","text":"nvidia-smi +-----------------------------------------------------------------------------+ | NVIDIA-SMI 510.60.02 Driver Version: 510.60.02 CUDA Version: 11.6 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 NVIDIA GeForce ... Off | 00000000:58:00.0 Off | N/A | | N/A 43C P0 N/A / N/A | 9MiB / 2048MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | 0 N/A N/A 991 G /usr/lib/xorg/Xorg 4MiB | | 0 N/A N/A 1634 G /usr/lib/xorg/Xorg 4MiB | +-----------------------------------------------------------------------------+ Warning After Kernel/OS update the driver stop working sometimes Reinstall the driver solve the problem # 510 - driver version sudo apt install --reinstall nvidia-driver-510 sudo apt install --reinstall nvidia-dkms-510","title":"Check after install"},{"location":"blog/AI/pc_nvidia_install/#cuda-toolkit","text":"Nvidia install page","title":"cuda toolkit"},{"location":"blog/AI/pc_nvidia_install/#environment","text":".bashrc export PATH = /usr/local/cuda-11.6/bin ${ PATH :+: ${ PATH }} export LD_LIBRARY_PATH = /usr/local/cuda-11.6/lib64 ${ LD_LIBRARY_PATH :+: ${ LD_LIBRARY_PATH }} export CUDA_HOME = /usr/local/cuda Tip trick to avoid adding an extra : when $PATH is not set. ${PATH:+:${PATH}}","title":"Environment"},{"location":"blog/AI/pc_nvidia_install/#cudnn","text":"NVIDIA cuDNN is a GPU-accelerated library of primitives for deep neural networks. Nvidia download Warning Need nvidia membership to download cuDNN","title":"cuDNN"},{"location":"blog/AI/pc_nvidia_install/#install","text":"install-guide sudo dpkg -i cudnn-local-repo-ubuntu2004-8.4.0.27_1.0-1_amd64.deb sudo apt-key add /var/cudnn-local-repo-*/7fa2af80.pub sudo apt-get update sudo apt install libcudnn8=8.4.0.27-1+cuda11.6","title":"Install"},{"location":"blog/AI/pytorch_install/","tags":["pytorch","cuda","install"],"text":"Install # pytorch.org Note PyTorch wheel came with it\u2019s on cuda and cuDNN check torch installation import torch >>> torch . __version__ 1.5.1 + cu101 >>> torch . version . cuda 10.1 >>> torch . cuda . current_device () 0 >>> torch . cuda . device_count () 1 >>> torch . backends . cudnn . version () 7603 >>> torch . cuda . is_available () True","title":"PyTorch install"},{"location":"blog/AI/pytorch_install/#install","text":"pytorch.org Note PyTorch wheel came with it\u2019s on cuda and cuDNN check torch installation import torch >>> torch . __version__ 1.5.1 + cu101 >>> torch . version . cuda 10.1 >>> torch . cuda . current_device () 0 >>> torch . cuda . device_count () 1 >>> torch . backends . cudnn . version () 7603 >>> torch . cuda . is_available () True","title":"Install"},{"location":"blog/AI/nvidia/tensorrt_step1/","tags":["nvidia","tensorrt"],"text":"TensorRT is a machine learning framework that is published by Nvidia to run inference. TensorRT is highly optimized to run on NVIDIA GPUs Install # Install on x86 ubuntu 20.04 machine Prerequisite # nvidia driver (check with nvidia-smi if working) cuda Install TensorRT # Download version from nvidia dev site (authentication needed) EA vs GA EA: Early access GA: Stable version # sudo dpkg -i nv-tensorrt-repo-<ubuntu version>-<cuda version>-<...> sudo dpkg -i nv-tensorrt-repo-ubuntu2004-cuda11.4-trt8.2.5.1-ga-20220505_1-1_amd64.deb sudo apt-key add /var/nv-tensorrt-repo-ubuntu2004-cuda11.4-trt8.2.5.1-ga-20220505/82307095.pub sudo apt update sudo apt install tensorrt sudo apt-get install python3-libnvinfer-dev sudo apt-get install onnx-graphsurgeon References # What is TensorRT?","title":"TensorRT first step"},{"location":"blog/AI/nvidia/tensorrt_step1/#install","text":"Install on x86 ubuntu 20.04 machine","title":"Install"},{"location":"blog/AI/nvidia/tensorrt_step1/#prerequisite","text":"nvidia driver (check with nvidia-smi if working) cuda","title":"Prerequisite"},{"location":"blog/AI/nvidia/tensorrt_step1/#install-tensorrt","text":"Download version from nvidia dev site (authentication needed) EA vs GA EA: Early access GA: Stable version # sudo dpkg -i nv-tensorrt-repo-<ubuntu version>-<cuda version>-<...> sudo dpkg -i nv-tensorrt-repo-ubuntu2004-cuda11.4-trt8.2.5.1-ga-20220505_1-1_amd64.deb sudo apt-key add /var/nv-tensorrt-repo-ubuntu2004-cuda11.4-trt8.2.5.1-ga-20220505/82307095.pub sudo apt update sudo apt install tensorrt sudo apt-get install python3-libnvinfer-dev sudo apt-get install onnx-graphsurgeon","title":"Install TensorRT"},{"location":"blog/AI/nvidia/tensorrt_step1/#references","text":"What is TensorRT?","title":"References"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/","tags":["yolo","cuda"],"text":"Using openCV dnn module to run yolo5 models Convert pytorch models to onnx model using export.py from yolo5 repository project # All the code and module are download from LearnOpenCV \u251c\u2500\u2500 coco.names \u251c\u2500\u2500 detect.py \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 yolov5n.onnx \u2502 \u2514\u2500\u2500 yolov5s.onnx \u2514\u2500\u2500 sample.jpg detect code # Warning When use cuda, first image initialize the pipe between the cpu memory and gpu Tip using dnn cuda support from opencv 4.2 net . setPreferableBackend ( cv2 . dnn . DNN_BACKEND_CUDA ) net . setPreferableTarget ( cv2 . dnn . DNN_TARGET_CUDA ) -- 8 <-- blog / examples / open_cv / dnn / yolo5 / detect . py Run sample # small model # cpu # run time: 130 ms gpu # run time: 39 ms References # Object Detection using YOLOv5 Object Detection using YOLOv5 github How to use OpenCV DNN Module with NVIDIA GPUs","title":"YOLOv5"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#project","text":"All the code and module are download from LearnOpenCV \u251c\u2500\u2500 coco.names \u251c\u2500\u2500 detect.py \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 yolov5n.onnx \u2502 \u2514\u2500\u2500 yolov5s.onnx \u2514\u2500\u2500 sample.jpg","title":"project"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#detect-code","text":"Warning When use cuda, first image initialize the pipe between the cpu memory and gpu Tip using dnn cuda support from opencv 4.2 net . setPreferableBackend ( cv2 . dnn . DNN_BACKEND_CUDA ) net . setPreferableTarget ( cv2 . dnn . DNN_TARGET_CUDA ) -- 8 <-- blog / examples / open_cv / dnn / yolo5 / detect . py","title":"detect code"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#run-sample","text":"","title":"Run sample"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#small-model","text":"","title":"small model"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#cpu","text":"run time: 130 ms","title":"cpu"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#gpu","text":"run time: 39 ms","title":"gpu"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#references","text":"Object Detection using YOLOv5 Object Detection using YOLOv5 github How to use OpenCV DNN Module with NVIDIA GPUs","title":"References"},{"location":"blog/Ardupilot/","tags":["ardupilot","None"],"text":"Tutorial # Run SITL and Ignition simulator Reference # ros-gz-rover Ardupilot SITL models for gazebo and ignition BlueROV2 in Ignition Gazebo","title":"Ardupilot"},{"location":"blog/Ardupilot/#tutorial","text":"Run SITL and Ignition simulator","title":"Tutorial"},{"location":"blog/Ardupilot/#reference","text":"ros-gz-rover Ardupilot SITL models for gazebo and ignition BlueROV2 in Ignition Gazebo","title":"Reference"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/","tags":["ardupilot","sitl","plugin"],"text":"Objective # Run Ardupilot (copter) SITL and ignition simulation - fortress - ardupilot_gazebo (plugin) - MAVProxy ardupilot_gazebo # clone https://github.com/ArduPilot/ardupilot_gazebo.git ignition-garden branch build check instruction https://github.com/ArduPilot/ardupilot_gazebo#installation- # Clone ardupilot_gazebo repository branch ignition-fortress # git subfolder mkdir ~/git cd git git clone -b <branchname> <remote-repo-url> git clone -b ignition-garden https://github.com/ArduPilot/ardupilot_gazebo.git Run # terminal1 export IGN_GAZEBO_SYSTEM_PLUGIN_PATH = $HOME /git/ardupilot_gazebo/build: ${ IGN_GAZEBO_SYSTEM_PLUGIN_PATH } export IGN_GAZEBO_RESOURCE_PATH = $HOME /git/ardupilot_gazebo/models: $HOME /git/ardupilot_gazebo/worlds: ${ IGN_GAZEBO_RESOURCE_PATH } # note remove sky tag from sdf ign gazebo -v 1 -r iris_arducopter_runway.world SITL # terminal2 - run SITL ./arducopter -S --model JSON \\ --speedup 1 \\ --defaults copter.parm,gazebo-iris.parm \\ -I0 MAVProxy # mavproxy mavproxy.py --master tcp:127.0.0.1:5760 # Arm and takeoff mode guided arm throttle takeoff 5 iris with gimbal and camera # Use iris_with_ardupilot model Add Sensors plugin to world Load model from fule change camera sensor topic to /gimbal/camera Run bridge View camera image in rqt_image_view Add sensors plugin to world <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> fule dashboard load model from fule <include> <name> gimbal_small_2d </name> <uri> https://fuel.gazebosim.org/1.0/OpenRobotics/models/Gimbal Small 2D </uri> <pose> 0 -0.01 0.070 1.57 0 1.57 </pose> </include> gz cache location ~/.ignition/fuel # ~/.ignition/fuel/fuel.gazebosim.org/openrobotics/models run bridge ros2 run ros_gz_bridge parameter_bridge /gimbal/camera@sensor_msgs/msg/Image@ignition.msgs.Image run RQT ros2 run rqt_image_view rqt_image_view /gimbal/camera Reference # ardupilot_gazebo ros gz bridge","title":"Ardupilot SITL with ignition simulator"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#objective","text":"Run Ardupilot (copter) SITL and ignition simulation - fortress - ardupilot_gazebo (plugin) - MAVProxy","title":"Objective"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#ardupilot_gazebo","text":"clone https://github.com/ArduPilot/ardupilot_gazebo.git ignition-garden branch build check instruction https://github.com/ArduPilot/ardupilot_gazebo#installation- # Clone ardupilot_gazebo repository branch ignition-fortress # git subfolder mkdir ~/git cd git git clone -b <branchname> <remote-repo-url> git clone -b ignition-garden https://github.com/ArduPilot/ardupilot_gazebo.git","title":"ardupilot_gazebo"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#run","text":"terminal1 export IGN_GAZEBO_SYSTEM_PLUGIN_PATH = $HOME /git/ardupilot_gazebo/build: ${ IGN_GAZEBO_SYSTEM_PLUGIN_PATH } export IGN_GAZEBO_RESOURCE_PATH = $HOME /git/ardupilot_gazebo/models: $HOME /git/ardupilot_gazebo/worlds: ${ IGN_GAZEBO_RESOURCE_PATH } # note remove sky tag from sdf ign gazebo -v 1 -r iris_arducopter_runway.world","title":"Run"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#sitl","text":"terminal2 - run SITL ./arducopter -S --model JSON \\ --speedup 1 \\ --defaults copter.parm,gazebo-iris.parm \\ -I0","title":"SITL"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#mavproxy","text":"mavproxy mavproxy.py --master tcp:127.0.0.1:5760 # Arm and takeoff mode guided arm throttle takeoff 5","title":"MAVProxy"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#iris-with-gimbal-and-camera","text":"Use iris_with_ardupilot model Add Sensors plugin to world Load model from fule change camera sensor topic to /gimbal/camera Run bridge View camera image in rqt_image_view Add sensors plugin to world <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> fule dashboard load model from fule <include> <name> gimbal_small_2d </name> <uri> https://fuel.gazebosim.org/1.0/OpenRobotics/models/Gimbal Small 2D </uri> <pose> 0 -0.01 0.070 1.57 0 1.57 </pose> </include> gz cache location ~/.ignition/fuel # ~/.ignition/fuel/fuel.gazebosim.org/openrobotics/models run bridge ros2 run ros_gz_bridge parameter_bridge /gimbal/camera@sensor_msgs/msg/Image@ignition.msgs.Image run RQT ros2 run rqt_image_view rqt_image_view /gimbal/camera","title":"iris with gimbal and camera"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#reference","text":"ardupilot_gazebo ros gz bridge","title":"Reference"},{"location":"blog/Ardupilot/debug_sitl/","tags":["ardupilot","SITL","debug"],"text":"Debug Ardupilot # Ardupilot Debugging with GDB using VSCode Setting up SITL # Config and Build # ./waf configure --debug build with debug symbol # # ardupilot/Tools/autotest ./sim_vehicle.py -v ArduCopter -f quad -D # -D, --debug build with debugging check if has debug symbols file arducopter # arducopter: ELF 64 -bit LSB pie executable, x86-64, version 1 ( GNU/Linux ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID [ sha1 ]= eb51dfafe7a6f361a1f661d012e9cdd8006b4595, for GNU/Linux 3 .2.0, with debug_info, not stripped Add VSCode launch config # attach { \"name\" : \"(gdb) Attach Copter\" , \"type\" : \"cppdbg\" , \"request\" : \"attach\" , \"program\" : \"${workspaceFolder}/build/sitl/bin/arducopter\" , \"processId\" : \"${command:pickProcess}\" , \"MIMode\" : \"gdb\" , \"setupCommands\" : [ { \"description\" : \"Enable pretty-printing for gdb\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ] } Set breakpoint # Demo handleMessage # Entry points from mavlink message from GCS or CC Ardupilot code stuct with common function for all type of vehicles (copter, plan, rover ..) and specific implementation for vehicle (ArduCopter) ArduCopter/GCS_Mavlink.cpp libraries/GCS_MAVLink/GCS_Common To catch entry point for message handler place breakpoint at: Set breakpoint at GCS_MAVLINK::handle_common_message file: GCS_Common.cpp Set breakpoint at GCS_MAVLINK_Copter::handleMessage file: ArduCopter/GCS_Mavlink.cpp The above function has case conditions the default one call the GCS_MAVLINK::handle_common_message function: handle_common_message","title":"Debug Ardupilot"},{"location":"blog/Ardupilot/debug_sitl/#debug-ardupilot","text":"Ardupilot Debugging with GDB using VSCode","title":"Debug Ardupilot"},{"location":"blog/Ardupilot/debug_sitl/#setting-up-sitl","text":"","title":"Setting up SITL"},{"location":"blog/Ardupilot/debug_sitl/#config-and-build","text":"./waf configure --debug","title":"Config and Build"},{"location":"blog/Ardupilot/debug_sitl/#build-with-debug-symbol","text":"# ardupilot/Tools/autotest ./sim_vehicle.py -v ArduCopter -f quad -D # -D, --debug build with debugging check if has debug symbols file arducopter # arducopter: ELF 64 -bit LSB pie executable, x86-64, version 1 ( GNU/Linux ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID [ sha1 ]= eb51dfafe7a6f361a1f661d012e9cdd8006b4595, for GNU/Linux 3 .2.0, with debug_info, not stripped","title":"build with debug symbol"},{"location":"blog/Ardupilot/debug_sitl/#add-vscode-launch-config","text":"attach { \"name\" : \"(gdb) Attach Copter\" , \"type\" : \"cppdbg\" , \"request\" : \"attach\" , \"program\" : \"${workspaceFolder}/build/sitl/bin/arducopter\" , \"processId\" : \"${command:pickProcess}\" , \"MIMode\" : \"gdb\" , \"setupCommands\" : [ { \"description\" : \"Enable pretty-printing for gdb\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ] }","title":"Add VSCode launch config"},{"location":"blog/Ardupilot/debug_sitl/#set-breakpoint","text":"","title":"Set breakpoint"},{"location":"blog/Ardupilot/debug_sitl/#demo-handlemessage","text":"Entry points from mavlink message from GCS or CC Ardupilot code stuct with common function for all type of vehicles (copter, plan, rover ..) and specific implementation for vehicle (ArduCopter) ArduCopter/GCS_Mavlink.cpp libraries/GCS_MAVLink/GCS_Common To catch entry point for message handler place breakpoint at: Set breakpoint at GCS_MAVLINK::handle_common_message file: GCS_Common.cpp Set breakpoint at GCS_MAVLINK_Copter::handleMessage file: ArduCopter/GCS_Mavlink.cpp The above function has case conditions the default one call the GCS_MAVLINK::handle_common_message function: handle_common_message","title":"Demo handleMessage"},{"location":"blog/Ardupilot/precise_landing/","tags":["ardupilot"],"text":"Reference # patrickpoirier51","title":"precise landing"},{"location":"blog/Ardupilot/precise_landing/#reference","text":"patrickpoirier51","title":"Reference"},{"location":"blog/Ardupilot/rangefinder/","tags":["ardupilot","rangefinder","pymavlink","mavros","gazebo","SITL","distance sensor"],"text":"Add rangefinder using SITL and gazebo # Distance / Rangefinder has two type of message - Distance sensor #132 (common) - Rangefinder #173 (ardupilotmega) (reporting) Distance sensor #132 # Distance sensor mavlink message - Distance sensor #132 Demo (using pymavlink) # Config SITL with RANGE FINDER Send mavlink distance using pymavlink params RNGFND1_TYPE 10 # mavlink RNGFND1_ORIENT 25 # down RNGFND1_MAX_CM 1000 # cm RNGFND1_MIN_CM 10 # cm script import time from pymavlink import mavutil from pymavlink.dialects.v20 import ardupilotmega TO_MS = 1e3 UPDATE_RATE = 0.5 RNGFND_TYPE_MAVLINK = 10 SENSOR_ID = 1 SENSOR_MAX_CM = 1000 SENSOR_MIN_CM = 10 SENSOR_COVARIANCE = 0 SIM_CURRENT_READING_CM = 200 # Create the connection master = mavutil . mavlink_connection ( \"udp:127.0.0.1:14550\" ) # Wait a heartbeat before sending commands master . wait_heartbeat () t_start = time . time () while True : time . sleep ( UPDATE_RATE ) boot_time = int (( time . time () - t_start ) * TO_MS ) master . mav . distance_sensor_send ( boot_time , SENSOR_MIN_CM , SENSOR_MAX_CM , SIM_CURRENT_READING_CM , ardupilotmega . MAV_DISTANCE_SENSOR_UNKNOWN , SENSOR_ID , ardupilotmega . MAV_SENSOR_ROTATION_PITCH_270 , SENSOR_COVARIANCE , ) SITL/ sim_vehicle ./sim_vehicle.py -v ArduCopter \\ -f quad -D \\ --console \\ --add-param-file /home/user/apm_ws/src/apm_bringup/config/range_finder.parm params file Add param file to sitl --add-param-file <file path> MAVROS # Mavros has two plugins distance_sensor (common msg #132) rangefinder (ardupilot msg #173) Demo # Send distance using distance_sensor plugin (msg #132) mavros open subscriber for each distance sensor declare as subscriber: true see config file example Read data using rangefinder plugin (msg #173) Echo distance data from fcu using cli (/mavros/rangfinder_pub) publish distance data # demo send random distance data import rclpy from rclpy.node import Node from rclpy.qos import qos_profile_sensor_data from sensor_msgs.msg import Range TOPIC_DISTANCE_READ = \"/mavros/rangefinder_pub\" TOPIC_DISTANCE_WRITE = \"/mavros/rangefinder_sub\" TOPIC_APM_RANGEFINDER = \"/mavros/rangefinder/rangefinder\" DRONE_NO = 1 MIN_RANGE = 0.0 MAX_RANGE = 4.0 RANGE_SENSOR_TYPE = 1 SENSOR_ID = 1 COVARIANCE = 0 PUB_INTERVAL = 1 / 10 class RangeFinderNode ( Node ): def __init__ ( self ): node_name = \"range_finder\" super () . __init__ ( node_name ) #mavros open subscriber, our node pub to it self . __range_pub = self . create_publisher ( Range , TOPIC_DISTANCE_WRITE , qos_profile = qos_profile_sensor_data ) self . create_subscription ( Range , TOPIC_APM_RANGEFINDER , self . __apm_rangefinder_message_handler , qos_profile = qos_profile_sensor_data ) self . create_timer ( PUB_INTERVAL , self . __send_range_message ) def __apm_rangefinder_message_handler ( self , msg : Range ): self . get_logger () . info ( f \"apm rangefinder: { msg . range } \" ) def __send_range_message ( self , distance = 2.0 ): sec , nanosec = self . get_clock () . now () . seconds_nanoseconds () range_msg = Range () range_msg . header . frame_id = \"rangefinder\" range_msg . header . stamp . sec = sec range_msg . header . stamp . nanosec = nanosec range_msg . range = float ( distance ) range_msg . radiation_type = RANGE_SENSOR_TYPE range_msg . min_range = MIN_RANGE range_msg . max_range = MAX_RANGE self . __range_pub . publish ( range_msg ) def main ( args = None ): rclpy . init ( args = args ) node = RangeFinderNode () try : rclpy . spin ( node ) except KeyboardInterrupt : print ( \"User exit\" ) finally : node . destroy_node () rclpy . try_shutdown () if __name__ == \"__main__\" : main () echo distance data # ros2 topic echo /mavros/rangefinder_pub config parma config param expend settings as YAML config multiple sensors # /mavros/**/distance_sensor : ros__parameters : config : | rangefinder_pub: id: 0 frame_id: \"lidar\" #orientation: PITCH_270 # sended by FCU field_of_view: 0.0 # XXX TODO send_tf: false sensor_position: {x: 0.0, y: 0.0, z: -0.1} rangefinder_sub: subscriber: true id: 1 orientation: PITCH_270 rangefinder_fwd: subscriber: true id: 2 orientation: PITCH_180 orientation declare at /mavros/src/lib/enum_sensor_orientation.cpp Demo to delete # sitl sim_vehicle.py -v ArduCopter -f gazebo-iris -A \"--defaults /home/user/wasp_ws/src/wasp_bringup/config/copter.parm,/home/user/wasp_ws/src/wasp_bringup/config/gazebo-iris.parm\" -I0 -m \"--out=127.0.0.1:14552\" -m \"--load-module graph\"","title":"Add rangefinder using SITL and gazebo"},{"location":"blog/Ardupilot/rangefinder/#add-rangefinder-using-sitl-and-gazebo","text":"Distance / Rangefinder has two type of message - Distance sensor #132 (common) - Rangefinder #173 (ardupilotmega) (reporting)","title":"Add rangefinder using SITL and gazebo"},{"location":"blog/Ardupilot/rangefinder/#distance-sensor-132","text":"Distance sensor mavlink message - Distance sensor #132","title":"Distance sensor #132"},{"location":"blog/Ardupilot/rangefinder/#demo-using-pymavlink","text":"Config SITL with RANGE FINDER Send mavlink distance using pymavlink params RNGFND1_TYPE 10 # mavlink RNGFND1_ORIENT 25 # down RNGFND1_MAX_CM 1000 # cm RNGFND1_MIN_CM 10 # cm script import time from pymavlink import mavutil from pymavlink.dialects.v20 import ardupilotmega TO_MS = 1e3 UPDATE_RATE = 0.5 RNGFND_TYPE_MAVLINK = 10 SENSOR_ID = 1 SENSOR_MAX_CM = 1000 SENSOR_MIN_CM = 10 SENSOR_COVARIANCE = 0 SIM_CURRENT_READING_CM = 200 # Create the connection master = mavutil . mavlink_connection ( \"udp:127.0.0.1:14550\" ) # Wait a heartbeat before sending commands master . wait_heartbeat () t_start = time . time () while True : time . sleep ( UPDATE_RATE ) boot_time = int (( time . time () - t_start ) * TO_MS ) master . mav . distance_sensor_send ( boot_time , SENSOR_MIN_CM , SENSOR_MAX_CM , SIM_CURRENT_READING_CM , ardupilotmega . MAV_DISTANCE_SENSOR_UNKNOWN , SENSOR_ID , ardupilotmega . MAV_SENSOR_ROTATION_PITCH_270 , SENSOR_COVARIANCE , ) SITL/ sim_vehicle ./sim_vehicle.py -v ArduCopter \\ -f quad -D \\ --console \\ --add-param-file /home/user/apm_ws/src/apm_bringup/config/range_finder.parm params file Add param file to sitl --add-param-file <file path>","title":"Demo (using pymavlink)"},{"location":"blog/Ardupilot/rangefinder/#mavros","text":"Mavros has two plugins distance_sensor (common msg #132) rangefinder (ardupilot msg #173)","title":"MAVROS"},{"location":"blog/Ardupilot/rangefinder/#demo","text":"Send distance using distance_sensor plugin (msg #132) mavros open subscriber for each distance sensor declare as subscriber: true see config file example Read data using rangefinder plugin (msg #173) Echo distance data from fcu using cli (/mavros/rangfinder_pub)","title":"Demo"},{"location":"blog/Ardupilot/rangefinder/#publish-distance-data","text":"demo send random distance data import rclpy from rclpy.node import Node from rclpy.qos import qos_profile_sensor_data from sensor_msgs.msg import Range TOPIC_DISTANCE_READ = \"/mavros/rangefinder_pub\" TOPIC_DISTANCE_WRITE = \"/mavros/rangefinder_sub\" TOPIC_APM_RANGEFINDER = \"/mavros/rangefinder/rangefinder\" DRONE_NO = 1 MIN_RANGE = 0.0 MAX_RANGE = 4.0 RANGE_SENSOR_TYPE = 1 SENSOR_ID = 1 COVARIANCE = 0 PUB_INTERVAL = 1 / 10 class RangeFinderNode ( Node ): def __init__ ( self ): node_name = \"range_finder\" super () . __init__ ( node_name ) #mavros open subscriber, our node pub to it self . __range_pub = self . create_publisher ( Range , TOPIC_DISTANCE_WRITE , qos_profile = qos_profile_sensor_data ) self . create_subscription ( Range , TOPIC_APM_RANGEFINDER , self . __apm_rangefinder_message_handler , qos_profile = qos_profile_sensor_data ) self . create_timer ( PUB_INTERVAL , self . __send_range_message ) def __apm_rangefinder_message_handler ( self , msg : Range ): self . get_logger () . info ( f \"apm rangefinder: { msg . range } \" ) def __send_range_message ( self , distance = 2.0 ): sec , nanosec = self . get_clock () . now () . seconds_nanoseconds () range_msg = Range () range_msg . header . frame_id = \"rangefinder\" range_msg . header . stamp . sec = sec range_msg . header . stamp . nanosec = nanosec range_msg . range = float ( distance ) range_msg . radiation_type = RANGE_SENSOR_TYPE range_msg . min_range = MIN_RANGE range_msg . max_range = MAX_RANGE self . __range_pub . publish ( range_msg ) def main ( args = None ): rclpy . init ( args = args ) node = RangeFinderNode () try : rclpy . spin ( node ) except KeyboardInterrupt : print ( \"User exit\" ) finally : node . destroy_node () rclpy . try_shutdown () if __name__ == \"__main__\" : main ()","title":"publish distance data"},{"location":"blog/Ardupilot/rangefinder/#echo-distance-data","text":"ros2 topic echo /mavros/rangefinder_pub config parma config param expend settings as YAML","title":"echo distance data"},{"location":"blog/Ardupilot/rangefinder/#config-multiple-sensors","text":"/mavros/**/distance_sensor : ros__parameters : config : | rangefinder_pub: id: 0 frame_id: \"lidar\" #orientation: PITCH_270 # sended by FCU field_of_view: 0.0 # XXX TODO send_tf: false sensor_position: {x: 0.0, y: 0.0, z: -0.1} rangefinder_sub: subscriber: true id: 1 orientation: PITCH_270 rangefinder_fwd: subscriber: true id: 2 orientation: PITCH_180 orientation declare at /mavros/src/lib/enum_sensor_orientation.cpp","title":"config multiple sensors"},{"location":"blog/Ardupilot/rangefinder/#demo-to-delete","text":"sitl sim_vehicle.py -v ArduCopter -f gazebo-iris -A \"--defaults /home/user/wasp_ws/src/wasp_bringup/config/copter.parm,/home/user/wasp_ws/src/wasp_bringup/config/gazebo-iris.parm\" -I0 -m \"--out=127.0.0.1:14552\" -m \"--load-module graph\"","title":"Demo to delete"},{"location":"blog/Ardupilot/system_time/","tags":["ardupilot","system_time"],"text":"SYSTEM_TIME # mavlink.io Ardupilot send and received this message Sending # Implement by GCS_Common send_system_time method the unix time calc from RTC class and return only if we have time source the rtc_source_type is set by logic in AP_RTC::set_utc_usec that call by - GPS when we have 3D fix lock or better - Mavlink message SYSTEM_TIME - ? ardupilot time source enum // ordering is important in source_type; lower-numbered is // considered a better time source. These values are documented // and used in the parameters! enum source_type : uint8_t { SOURCE_GPS = 0 , SOURCE_MAVLINK_SYSTEM_TIME = 1 , SOURCE_HW = 2 , SOURCE_NONE , } Demo # Listen to SYSTEM_TIME message with and without GPS source BRD_RTC_TYPES 0 GPS_TYPE 0 without gps 2023 -04-16 19 :23:29,160 - __main__ - INFO - param_name: BRD_RTC_TYPES value: 1 .0 2023 -04-16 19 :23:30,151 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 2154028 } 2023 -04-16 19 :23:31,152 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 2155028 } 2023 -04-16 19 :23:32,155 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 2156028 } 2023 -04-16 19 :23:33,154 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 2157028 } 2023 -04-16 19 :23:34,152 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 2158028 } BRD_RTC_TYPES 1 GPS_TYPE 1 with gps 2023 -04-16 19 :27:05,833 - __main__ - INFO - Set SYSRM_TIME message interval to 1sec 2023 -04-16 19 :27:05,840 - __main__ - INFO - param_name: BRD_RTC_TYPES value: 1 .0 2023 -04-16 19 :27:06,836 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 4028 } 2023 -04-16 19 :27:07,841 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 5028 } 2023 -04-16 19 :27:08,837 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 6028 } 2023 -04-16 19 :27:09,836 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 7028 } 2023 -04-16 19 :27:10,837 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 8028 } 2023 -04-16 19 :27:11,842 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681662430861592 , 'time_boot_ms' : 9028 } 2023 -04-16 19 :27:12,837 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681662431861192 , 'time_boot_ms' : 10028 } 2023 -04-16 19 :27:13,840 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681662432861625 , 'time_boot_ms' : 11028 } time_unix No epoc time until GPS has 3D fix Demo II # Send SYSTEM_TIME message to send ardupilot with time source when no GPS found BRD_RTC_TYPES 2 GPS_TYPE 0 BRD_RTC_TYPES BRD_RTC_TYPES must be SOURCE_HW and not SOURCE_MAVLINK_SYSTEM_TIME to pass the condition if ( ! ( allowed_types & ( 1 << type ))) { return ; } from AP_RTC.cpp file 2023 -04-16 22 :07:18,843 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681671783248796 , 'time_boot_ms' : 573026 } 2023 -04-16 22 :07:18,844 - __main__ - INFO - param_name: BRD_RTC_TYPES value: 2 .0 2023 -04-16 22 :07:19,839 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681671784248396 , 'time_boot_ms' : 574026 } 2023 -04-16 22 :07:20,840 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681671785248829 , 'time_boot_ms' : 575026 } 2023 -04-16 22 :07:21,838 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681671786248429 , 'time_boot_ms' : 576026 } BRD_RTC_TYPES BRD_RTC_TYPES must be SOURCE_HW for ardupilot accept mavlink message \u201cSYSTEM_TIME\u201d check code import time import logging import os os . environ [ \"MAVLINK20\" ] = \"1\" from pymavlink import mavutil from pymavlink.dialects.v20 import ardupilotmega FMT = \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" logging . basicConfig ( format = FMT , level = logging . INFO ) log = logging . getLogger ( __name__ ) # Create the connection # master = mavutil.mavlink_connection(\"/dev/ttyACM0\") # master = mavutil.mavlink_connection(\"tcp:0.0.0.0:5760\") master = mavutil . mavlink_connection ( \"udp:127.0.0.1:14550\" ) ONE_SEC = 1e6 def set_message_interval ( interval_us ): master . mav . command_long_send ( master . target_system , master . target_component , ardupilotmega . MAV_CMD_SET_MESSAGE_INTERVAL , 0 , ardupilotmega . MAVLINK_MSG_ID_SYSTEM_TIME , interval_us , 0 , 0 , 0 , 0 , 0 ) def set_system_time (): # while True: current = int ( time . time () * 1e6 ) log . info ( \" %s \" , current ) master . mav . system_time_send ( current , 0 ) time . sleep ( 1 / 1 ) # Wait a heartbeat before sending commands master . wait_heartbeat () set_message_interval ( ONE_SEC ) set_system_time () USE_PARAM_ID = - 1 master . mav . param_request_read_send ( master . target_system , master . target_component , b \"BRD_RTC_TYPES\" , USE_PARAM_ID ) while True : msg = master . recv_match () if not msg : continue if msg . get_type () == \"SYSTEM_TIME\" : log . info ( \" %s \" , msg . to_dict ()) if msg . get_type () == \"PARAM_VALUE\" : message = msg . to_dict () param_name = message [ \"param_id\" ] if param_name == \"BRD_RTC_TYPES\" : param_value = message [ \"param_value\" ] log . info ( \"param_name: %s value: %s \" , param_name , param_value )","title":"SYSTEM_TIME"},{"location":"blog/Ardupilot/system_time/#system_time","text":"mavlink.io Ardupilot send and received this message","title":"SYSTEM_TIME"},{"location":"blog/Ardupilot/system_time/#sending","text":"Implement by GCS_Common send_system_time method the unix time calc from RTC class and return only if we have time source the rtc_source_type is set by logic in AP_RTC::set_utc_usec that call by - GPS when we have 3D fix lock or better - Mavlink message SYSTEM_TIME - ? ardupilot time source enum // ordering is important in source_type; lower-numbered is // considered a better time source. These values are documented // and used in the parameters! enum source_type : uint8_t { SOURCE_GPS = 0 , SOURCE_MAVLINK_SYSTEM_TIME = 1 , SOURCE_HW = 2 , SOURCE_NONE , }","title":"Sending"},{"location":"blog/Ardupilot/system_time/#demo","text":"Listen to SYSTEM_TIME message with and without GPS source BRD_RTC_TYPES 0 GPS_TYPE 0 without gps 2023 -04-16 19 :23:29,160 - __main__ - INFO - param_name: BRD_RTC_TYPES value: 1 .0 2023 -04-16 19 :23:30,151 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 2154028 } 2023 -04-16 19 :23:31,152 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 2155028 } 2023 -04-16 19 :23:32,155 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 2156028 } 2023 -04-16 19 :23:33,154 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 2157028 } 2023 -04-16 19 :23:34,152 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 2158028 } BRD_RTC_TYPES 1 GPS_TYPE 1 with gps 2023 -04-16 19 :27:05,833 - __main__ - INFO - Set SYSRM_TIME message interval to 1sec 2023 -04-16 19 :27:05,840 - __main__ - INFO - param_name: BRD_RTC_TYPES value: 1 .0 2023 -04-16 19 :27:06,836 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 4028 } 2023 -04-16 19 :27:07,841 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 5028 } 2023 -04-16 19 :27:08,837 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 6028 } 2023 -04-16 19 :27:09,836 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 7028 } 2023 -04-16 19 :27:10,837 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 0 , 'time_boot_ms' : 8028 } 2023 -04-16 19 :27:11,842 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681662430861592 , 'time_boot_ms' : 9028 } 2023 -04-16 19 :27:12,837 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681662431861192 , 'time_boot_ms' : 10028 } 2023 -04-16 19 :27:13,840 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681662432861625 , 'time_boot_ms' : 11028 } time_unix No epoc time until GPS has 3D fix","title":"Demo"},{"location":"blog/Ardupilot/system_time/#demo-ii","text":"Send SYSTEM_TIME message to send ardupilot with time source when no GPS found BRD_RTC_TYPES 2 GPS_TYPE 0 BRD_RTC_TYPES BRD_RTC_TYPES must be SOURCE_HW and not SOURCE_MAVLINK_SYSTEM_TIME to pass the condition if ( ! ( allowed_types & ( 1 << type ))) { return ; } from AP_RTC.cpp file 2023 -04-16 22 :07:18,843 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681671783248796 , 'time_boot_ms' : 573026 } 2023 -04-16 22 :07:18,844 - __main__ - INFO - param_name: BRD_RTC_TYPES value: 2 .0 2023 -04-16 22 :07:19,839 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681671784248396 , 'time_boot_ms' : 574026 } 2023 -04-16 22 :07:20,840 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681671785248829 , 'time_boot_ms' : 575026 } 2023 -04-16 22 :07:21,838 - __main__ - INFO - { 'mavpackettype' : 'SYSTEM_TIME' , 'time_unix_usec' : 1681671786248429 , 'time_boot_ms' : 576026 } BRD_RTC_TYPES BRD_RTC_TYPES must be SOURCE_HW for ardupilot accept mavlink message \u201cSYSTEM_TIME\u201d check code import time import logging import os os . environ [ \"MAVLINK20\" ] = \"1\" from pymavlink import mavutil from pymavlink.dialects.v20 import ardupilotmega FMT = \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" logging . basicConfig ( format = FMT , level = logging . INFO ) log = logging . getLogger ( __name__ ) # Create the connection # master = mavutil.mavlink_connection(\"/dev/ttyACM0\") # master = mavutil.mavlink_connection(\"tcp:0.0.0.0:5760\") master = mavutil . mavlink_connection ( \"udp:127.0.0.1:14550\" ) ONE_SEC = 1e6 def set_message_interval ( interval_us ): master . mav . command_long_send ( master . target_system , master . target_component , ardupilotmega . MAV_CMD_SET_MESSAGE_INTERVAL , 0 , ardupilotmega . MAVLINK_MSG_ID_SYSTEM_TIME , interval_us , 0 , 0 , 0 , 0 , 0 ) def set_system_time (): # while True: current = int ( time . time () * 1e6 ) log . info ( \" %s \" , current ) master . mav . system_time_send ( current , 0 ) time . sleep ( 1 / 1 ) # Wait a heartbeat before sending commands master . wait_heartbeat () set_message_interval ( ONE_SEC ) set_system_time () USE_PARAM_ID = - 1 master . mav . param_request_read_send ( master . target_system , master . target_component , b \"BRD_RTC_TYPES\" , USE_PARAM_ID ) while True : msg = master . recv_match () if not msg : continue if msg . get_type () == \"SYSTEM_TIME\" : log . info ( \" %s \" , msg . to_dict ()) if msg . get_type () == \"PARAM_VALUE\" : message = msg . to_dict () param_name = message [ \"param_id\" ] if param_name == \"BRD_RTC_TYPES\" : param_value = message [ \"param_value\" ] log . info ( \"param_name: %s value: %s \" , param_name , param_value )","title":"Demo II"},{"location":"blog/Ardupilot/timesync/","tags":["ardupilot","timesync"],"text":"Clock/Time Synchronized # The flight controller and companion computer clocks can be synchronized using MAVLink\u2019s SYSTEM_TIME and TIMESYNC messages. This is important so that each side can blend data from the other side into its EKF. Time Synchronization Protocol # This protocol is used to synchronize clocks on MAVLink components by estimating their time offset. A component that wants to synchronize clocks sends out a TIMESYNC request with its current timestamp in ts1 . A remote system that supports the protocol sends a TIMESYNC response, including both the original timestamp in ts1 field and its own timestamp in tc1 . Demo: sync between CC and SITL/Ardupilot # Reference # Clock/Time synchronized Time Synchronization Protocol v2","title":"Clock/Time Synchronized"},{"location":"blog/Ardupilot/timesync/#clocktime-synchronized","text":"The flight controller and companion computer clocks can be synchronized using MAVLink\u2019s SYSTEM_TIME and TIMESYNC messages. This is important so that each side can blend data from the other side into its EKF.","title":"Clock/Time Synchronized"},{"location":"blog/Ardupilot/timesync/#time-synchronization-protocol","text":"This protocol is used to synchronize clocks on MAVLink components by estimating their time offset. A component that wants to synchronize clocks sends out a TIMESYNC request with its current timestamp in ts1 . A remote system that supports the protocol sends a TIMESYNC response, including both the original timestamp in ts1 field and its own timestamp in tc1 .","title":"Time Synchronization Protocol"},{"location":"blog/Ardupilot/timesync/#demo-sync-between-cc-and-sitlardupilot","text":"","title":"Demo: sync between CC and SITL/Ardupilot"},{"location":"blog/Ardupilot/timesync/#reference","text":"Clock/Time synchronized Time Synchronization Protocol v2","title":"Reference"},{"location":"blog/CPP/cpp_vscode/","tags":["cmake","gtest","ctest"],"text":"","title":"C++ VSCode project with cmake and gtests"},{"location":"blog/CPP/cmake/cmake_hello/","tags":["cmake","101"],"text":"CMAKE beginner step # build system is a set of programs that build a software codebase -> producing a final products from source code: executable files, share object (.so) files, static libraries (.a) for example: Ninja , Make cma cmake hello # cmake_minimum_required ( VERSION 3.11 ) project ( HelloWorld ) add_executable ( hello_world hello_world . c ) Add compiler option # add_compile_options ( - Wall - Wextra - Wpedantic ) Reference # CMake: Best Practices More Modern CMake","title":"CMAKE beginner step"},{"location":"blog/CPP/cmake/cmake_hello/#cmake-beginner-step","text":"build system is a set of programs that build a software codebase -> producing a final products from source code: executable files, share object (.so) files, static libraries (.a) for example: Ninja , Make cma","title":"CMAKE beginner step"},{"location":"blog/CPP/cmake/cmake_hello/#cmake-hello","text":"cmake_minimum_required ( VERSION 3.11 ) project ( HelloWorld ) add_executable ( hello_world hello_world . c )","title":"cmake hello"},{"location":"blog/CPP/cmake/cmake_hello/#add-compiler-option","text":"add_compile_options ( - Wall - Wextra - Wpedantic )","title":"Add compiler option"},{"location":"blog/CPP/cmake/cmake_hello/#reference","text":"CMake: Best Practices More Modern CMake","title":"Reference"},{"location":"blog/CPP/gtest/","tags":["cpp","gtest","cmake"],"text":"LAB objective # Build cpp project with library using cmake Create testing with GTest Config VSCode install # sudo apt install libgtest-dev \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.cpp \u251c\u2500\u2500 helper \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 helper \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 helper.cpp \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u2514\u2500\u2500 test_helper.cpp \u2502 \u2514\u2500\u2500 CMakeLists.txt lib # header file (definition) cpp file (declaration) cmake file include/helper/helper.h #pragma once namespace helper { int add ( int x , int y ); } src/helper.cpp #include \"helper.h\" namespace helper { int add ( int x , int y ) { return x + y ; } } CMakeLists.txt set ( SOURCES src / helper . cpp ) add_library ( helper $ { SOURCES }) target_include_directories ( helper PUBLIC include / helper ) app # cpp file cmake file app/src/main.cpp #include <iostream> #include <helper.h> using namespace std ; int main ( int argc , char const * argv []) { cout << helper :: add ( 1 , 1 ) << endl ; return 0 ; } CMakeLists.txt add_executable ( main src / main . cpp ) target_link_libraries ( main helper ) test # Test file example cmake file test_helper #include <gtest/gtest.h> #include <helper.h> TEST ( helper , add ){ EXPECT_EQ ( 0 , helper :: add ( 1 , -1 )); } tests/CMakeList.txt add_subdirectory ( / usr / src / gtest $ { PROJECT_BINARY_DIR } / gtest ) include ( CTest ) set ( TEST_BINARY $ { PROJECT_NAME } _test ) add_executable ( $ { TEST_BINARY } test_helper . cpp ) target_link_libraries ( $ { TEST_BINARY } helper gtest gtest_main ) add_test ( NAME $ { TEST_BINARY } COMMAND $ { EXECUTABLE_OUTPUT_PATH } / $ { TEST_BINARY } ) root # Root cmake file root cmake must contain enable_testing cmake function for testing tests/CMakeList.txt cmake_minimum_required ( VERSION 3.10 ) project ( demo ) enable_testing () add_subdirectory ( helper ) add_subdirectory ( app ) add_subdirectory ( tests ) usage # command line # ctest -VV # ... test 1 Start 1 : demo_test 1 : Test command: /home/user/projects/gtest_tutorial/build/tests/demo_test 1 : Test timeout computed to be: 1500 1 : Running main () from /usr/src/gtest/src/gtest_main.cc 1 : [==========] Running 1 test from 1 test suite. 1 : [ ---------- ] Global test environment set-up. 1 : [ ---------- ] 1 test from helper 1 : [ RUN ] helper.add 1 : [ OK ] helper.add ( 0 ms ) 1 : [ ---------- ] 1 test from helper ( 0 ms total ) 1 : 1 : [ ---------- ] Global test environment tear-down 1 : [==========] 1 test from 1 test suite ran. ( 0 ms total ) 1 : [ PASSED ] 1 test. 1 /1 Test #1: demo_test ........................ Passed 0.00 sec VSCode # VSCode marketplace Usage #","title":"GTest with cmake and VSCode"},{"location":"blog/CPP/gtest/#lab-objective","text":"Build cpp project with library using cmake Create testing with GTest Config VSCode","title":"LAB objective"},{"location":"blog/CPP/gtest/#install","text":"sudo apt install libgtest-dev \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.cpp \u251c\u2500\u2500 helper \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 helper \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 helper.cpp \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u2514\u2500\u2500 test_helper.cpp \u2502 \u2514\u2500\u2500 CMakeLists.txt","title":"install"},{"location":"blog/CPP/gtest/#lib","text":"header file (definition) cpp file (declaration) cmake file include/helper/helper.h #pragma once namespace helper { int add ( int x , int y ); } src/helper.cpp #include \"helper.h\" namespace helper { int add ( int x , int y ) { return x + y ; } } CMakeLists.txt set ( SOURCES src / helper . cpp ) add_library ( helper $ { SOURCES }) target_include_directories ( helper PUBLIC include / helper )","title":"lib"},{"location":"blog/CPP/gtest/#app","text":"cpp file cmake file app/src/main.cpp #include <iostream> #include <helper.h> using namespace std ; int main ( int argc , char const * argv []) { cout << helper :: add ( 1 , 1 ) << endl ; return 0 ; } CMakeLists.txt add_executable ( main src / main . cpp ) target_link_libraries ( main helper )","title":"app"},{"location":"blog/CPP/gtest/#test","text":"Test file example cmake file test_helper #include <gtest/gtest.h> #include <helper.h> TEST ( helper , add ){ EXPECT_EQ ( 0 , helper :: add ( 1 , -1 )); } tests/CMakeList.txt add_subdirectory ( / usr / src / gtest $ { PROJECT_BINARY_DIR } / gtest ) include ( CTest ) set ( TEST_BINARY $ { PROJECT_NAME } _test ) add_executable ( $ { TEST_BINARY } test_helper . cpp ) target_link_libraries ( $ { TEST_BINARY } helper gtest gtest_main ) add_test ( NAME $ { TEST_BINARY } COMMAND $ { EXECUTABLE_OUTPUT_PATH } / $ { TEST_BINARY } )","title":"test"},{"location":"blog/CPP/gtest/#root","text":"Root cmake file root cmake must contain enable_testing cmake function for testing tests/CMakeList.txt cmake_minimum_required ( VERSION 3.10 ) project ( demo ) enable_testing () add_subdirectory ( helper ) add_subdirectory ( app ) add_subdirectory ( tests )","title":"root"},{"location":"blog/CPP/gtest/#usage","text":"","title":"usage"},{"location":"blog/CPP/gtest/#command-line","text":"ctest -VV # ... test 1 Start 1 : demo_test 1 : Test command: /home/user/projects/gtest_tutorial/build/tests/demo_test 1 : Test timeout computed to be: 1500 1 : Running main () from /usr/src/gtest/src/gtest_main.cc 1 : [==========] Running 1 test from 1 test suite. 1 : [ ---------- ] Global test environment set-up. 1 : [ ---------- ] 1 test from helper 1 : [ RUN ] helper.add 1 : [ OK ] helper.add ( 0 ms ) 1 : [ ---------- ] 1 test from helper ( 0 ms total ) 1 : 1 : [ ---------- ] Global test environment tear-down 1 : [==========] 1 test from 1 test suite ran. ( 0 ms total ) 1 : [ PASSED ] 1 test. 1 /1 Test #1: demo_test ........................ Passed 0.00 sec","title":"command line"},{"location":"blog/CPP/gtest/#vscode","text":"VSCode marketplace","title":"VSCode"},{"location":"blog/CPP/gtest/#usage_1","text":"","title":"Usage"},{"location":"blog/CPP/learn/","tags":["cpp","c++"],"text":"code base on the following youtube channel hands-on # macros","title":"C++ learn by doing"},{"location":"blog/CPP/learn/#hands-on","text":"macros","title":"hands-on"},{"location":"blog/CPP/learn/macros/","tags":["cpp","c++"],"text":"Macros are section of text that replace by the compiler preprocessor stage, it\u2019s very useful in DEBUGGING for example Demo # Control with macro to use main.cpp #include <iostream> #if MY_DEBUG == 1 #define LOG(x) std::cout << x << std::endl; #else #define LOG(x) #endif int main () { LOG ( \"HELLO\" ) } build and run # terminal g++ main.cpp -o main -DMY_DEBUG = 0 ./main # print nothing g++ main.cpp -o main -DMY_DEBUG = 1 ./main HELLO CMakeLists.txt # cmake_minimum_required ( VERSION 3.1 ) project ( demo_macros ) add_definitions ( - DMY_DEBUG = 0 ) add_executable ( main main . cpp ) CMakeLists with options # cmake_minimum_required ( VERSION 3.1 ) project ( demo_macros ) option ( USE_DEBUG \"Enter debug mode\" OFF ) if ( USE_DEBUG ) add_definitions ( - DMY_DEBUG = 1 ) endif () add_executable ( main main . cpp ) usage # options cmake -LA .. # ... CMAKE_STRIP:FILEPATH = /usr/bin/strip CMAKE_VERBOSE_MAKEFILE:BOOL = FALSE USE_DEBUG:BOOL = OFF # cmake -DUSE_DEBUG = ON .. References # Macros in c++","title":"C++ MACROS learn by doing"},{"location":"blog/CPP/learn/macros/#demo","text":"Control with macro to use main.cpp #include <iostream> #if MY_DEBUG == 1 #define LOG(x) std::cout << x << std::endl; #else #define LOG(x) #endif int main () { LOG ( \"HELLO\" ) }","title":"Demo"},{"location":"blog/CPP/learn/macros/#build-and-run","text":"terminal g++ main.cpp -o main -DMY_DEBUG = 0 ./main # print nothing g++ main.cpp -o main -DMY_DEBUG = 1 ./main HELLO","title":"build and run"},{"location":"blog/CPP/learn/macros/#cmakeliststxt","text":"cmake_minimum_required ( VERSION 3.1 ) project ( demo_macros ) add_definitions ( - DMY_DEBUG = 0 ) add_executable ( main main . cpp )","title":"CMakeLists.txt"},{"location":"blog/CPP/learn/macros/#cmakelists-with-options","text":"cmake_minimum_required ( VERSION 3.1 ) project ( demo_macros ) option ( USE_DEBUG \"Enter debug mode\" OFF ) if ( USE_DEBUG ) add_definitions ( - DMY_DEBUG = 1 ) endif () add_executable ( main main . cpp )","title":"CMakeLists with options"},{"location":"blog/CPP/learn/macros/#usage","text":"options cmake -LA .. # ... CMAKE_STRIP:FILEPATH = /usr/bin/strip CMAKE_VERBOSE_MAKEFILE:BOOL = FALSE USE_DEBUG:BOOL = OFF # cmake -DUSE_DEBUG = ON ..","title":"usage"},{"location":"blog/CPP/learn/macros/#references","text":"Macros in c++","title":"References"},{"location":"blog/CPP/learn/pointer/","tags":["cpp","c++"],"text":"base on Pointer are just integer that point to memory address Pointer are type less, we provide types to pointer just to help the compiler to memory manipulation when we read and write to memory Demo # point to zero #include <iostream> #define LOG(x) std::cout << x << std::endl; int main () { int a = 10 ; void * ptr = nullptr ; LOG ( ptr ); } point to variable on the stack #include <iostream> #define LOG(x) std::cout << x << std::endl; int main () { int a = 10 ; void * ptr = & a ; LOG ( ptr ); } Install memeory view vscode extension: nateageek.memory-viewer #include <iostream> #define LOG(x) std::cout << x << std::endl; int main () { int a = 10 ; int * ptr = & a ; * ptr = 20 ; LOG ( a ); }","title":"C++ pointers learn by doing"},{"location":"blog/CPP/learn/pointer/#demo","text":"point to zero #include <iostream> #define LOG(x) std::cout << x << std::endl; int main () { int a = 10 ; void * ptr = nullptr ; LOG ( ptr ); } point to variable on the stack #include <iostream> #define LOG(x) std::cout << x << std::endl; int main () { int a = 10 ; void * ptr = & a ; LOG ( ptr ); } Install memeory view vscode extension: nateageek.memory-viewer #include <iostream> #define LOG(x) std::cout << x << std::endl; int main () { int a = 10 ; int * ptr = & a ; * ptr = 20 ; LOG ( a ); }","title":"Demo"},{"location":"blog/CPP/learn/ref/","tags":["cpp","c++"],"text":"Ref are just reference to variable unlike pointer reference can\u2019t contain NULL value, they must reference to some variable They can\u2019t reassign, they don\u2019t have memory allocate for them #include <iostream> #define LOG(x) std::cout << x << std::endl; int main () { int a = 5 ; int & ref = a ; ref = 2 ; LOG ( a ); } pass veritable as a reference to function #include <iostream> #define LOG(x) std::cout << x << std::endl; void counter ( int & counter ) { counter ++ ; } int main () { int a = 5 ; counter ( a ); LOG ( a ); }","title":"C++ ref learn by doing"},{"location":"blog/CPP/modern/","text":"Courses # uni-bonn modern cpp 2018","title":"modern cpp"},{"location":"blog/CPP/modern/#courses","text":"uni-bonn modern cpp 2018","title":"Courses"},{"location":"blog/CPP/modern/casting/","tags":["cpp"],"text":"static_cast reinterpret_cast dynamic_cast static_cast # Convert type of variable at compile time Rarely need to be use explicit Drive class can be upcast to its base class static_cast < NewType > ( variable ) reinterpret_cast # Reinterpret the bytes of a variable as another type Mostly used when writing binary data reinterpret_cast < NewType > ( variable ) dynamic_cast # Google-style - AVOID","title":"casting"},{"location":"blog/CPP/modern/casting/#static_cast","text":"Convert type of variable at compile time Rarely need to be use explicit Drive class can be upcast to its base class static_cast < NewType > ( variable )","title":"static_cast"},{"location":"blog/CPP/modern/casting/#reinterpret_cast","text":"Reinterpret the bytes of a variable as another type Mostly used when writing binary data reinterpret_cast < NewType > ( variable )","title":"reinterpret_cast"},{"location":"blog/CPP/modern/casting/#dynamic_cast","text":"Google-style - AVOID","title":"dynamic_cast"},{"location":"blog/CPP/modern/filesystem_hello/","tags":["cpp"],"text":"create_directories directory_iterator path filename extension stem exists #include <filesystem> #include <iostream> using namespace std ; namespace fs = std :: filesystem ; int main (){ std :: string ppath = \"/tmp/fs_demo\" ; fs :: create_directories ( ppath ); for ( auto p : fs :: directory_iterator ( ppath )) { std :: cout << p . path () << std :: endl ; cout << fs :: path ( p . path ()). filename () << endl ; cout << fs :: path ( p . path ()). extension () << endl ; cout << fs :: path ( p . path ()). stem () << endl ; } cout << boolalpha << fs :: exists ( ppath ) << endl ; return 0 ; }","title":"filesystem hello"},{"location":"blog/CPP/modern/fmt_hello/","tags":["cpp","format","fmt"],"text":"install # sudo apt install libfmt-dev Demo # fmt_hello.cpp #include <iostream> #include <fmt/core.h> using namespace std ; int main ( int argc , char const * argv []) { string s = \"world\" ; fmt :: print ( \"hello {} \\n \" , s ); auto data = fmt :: format ( \"{1} {0}\" , \"hello\" , 1 , 2 , 3 ); cout << data << endl ; return 0 ; } CMakeLists.txt find_package ( fmt REQUIRED ) add_executable ( fmt_hello fmt_hello . cpp ) target_link_libraries ( fmt_hello PRIVATE fmt :: fmt ) Resource # {fmt} Formatting & Printing Library","title":"fmt"},{"location":"blog/CPP/modern/fmt_hello/#install","text":"sudo apt install libfmt-dev","title":"install"},{"location":"blog/CPP/modern/fmt_hello/#demo","text":"fmt_hello.cpp #include <iostream> #include <fmt/core.h> using namespace std ; int main ( int argc , char const * argv []) { string s = \"world\" ; fmt :: print ( \"hello {} \\n \" , s ); auto data = fmt :: format ( \"{1} {0}\" , \"hello\" , 1 , 2 , 3 ); cout << data << endl ; return 0 ; } CMakeLists.txt find_package ( fmt REQUIRED ) add_executable ( fmt_hello fmt_hello . cpp ) target_link_libraries ( fmt_hello PRIVATE fmt :: fmt )","title":"Demo"},{"location":"blog/CPP/modern/fmt_hello/#resource","text":"{fmt} Formatting & Printing Library","title":"Resource"},{"location":"blog/CPP/modern/move_hello/","tags":["cpp"],"text":"Move object ownership #include <iostream> #include <vector> using namespace std ; int main ( int argc , char const * argv []) { string str = \"Hello\" ; vector < string > v ; v . push_back ( str ); cout << \"str After copy is: \" << str << endl ; // move str into vector , str might no be empty v . push_back ( move ( str )); cout << \"str After copy is: \" << str << endl ; return 0 ; }","title":"Move"},{"location":"blog/CPP/modern/smart_pointer/","tags":["cpp"],"text":"Unique Pointers # release it\u2019s memory when out of scope Unique pointer has no copy constructor Cannot be copied, can be moved Guarantees that memory is always owned by a single unique pointer scope #include <iostream> #include <memory> using std :: cout ; using std :: endl ; class Basic { public : Basic (){ cout << \"construct\" << endl ; } ~ Basic (){ cout << \"de construct\" << endl ; } int a = 10 ; }; void run (){ auto a_ptr = std :: make_unique < Basic > (); cout << a_ptr -> a << endl ; } int main ( int argc , char const * argv []) { cout << \"run call\" << endl ; run (); cout << \"run exit\" << endl ; return 0 ; } owner #include <iostream> #include <memory> using std :: cout ; using std :: endl ; class Basic { public : int a = 10 ; }; int main ( int argc , char const * argv []) { auto a_ptr = std :: make_unique < Basic > (); cout << a_ptr -> a << endl ; auto b_ptr = std :: move ( a_ptr ); cout << b_ptr -> a << endl ; return 0 ; } Smart pointer # Store a usage counter and a raw pointer Increases usage counter when copied Decreases when destructed #include <iostream> #include <memory> using std :: cout ; using std :: endl ; class Basic { public : Basic ( int a ) : a_ ( a ){ cout << \"construct\" << endl ; } ~ Basic (){ cout << \"de construct\" << endl ;} private : int a_ ; }; int main ( int argc , char const * argv []) { auto a_ptr = std :: make_shared < Basic > ( 10 ); cout << a_ptr . use_count () << endl ; { // auto b_ptr = std::move(a_ptr); auto b_ptr = a_ptr ; cout << b_ptr . use_count () << endl ; } return 0 ; }","title":"Smart pointer"},{"location":"blog/CPP/modern/smart_pointer/#unique-pointers","text":"release it\u2019s memory when out of scope Unique pointer has no copy constructor Cannot be copied, can be moved Guarantees that memory is always owned by a single unique pointer scope #include <iostream> #include <memory> using std :: cout ; using std :: endl ; class Basic { public : Basic (){ cout << \"construct\" << endl ; } ~ Basic (){ cout << \"de construct\" << endl ; } int a = 10 ; }; void run (){ auto a_ptr = std :: make_unique < Basic > (); cout << a_ptr -> a << endl ; } int main ( int argc , char const * argv []) { cout << \"run call\" << endl ; run (); cout << \"run exit\" << endl ; return 0 ; } owner #include <iostream> #include <memory> using std :: cout ; using std :: endl ; class Basic { public : int a = 10 ; }; int main ( int argc , char const * argv []) { auto a_ptr = std :: make_unique < Basic > (); cout << a_ptr -> a << endl ; auto b_ptr = std :: move ( a_ptr ); cout << b_ptr -> a << endl ; return 0 ; }","title":"Unique Pointers"},{"location":"blog/CPP/modern/smart_pointer/#smart-pointer","text":"Store a usage counter and a raw pointer Increases usage counter when copied Decreases when destructed #include <iostream> #include <memory> using std :: cout ; using std :: endl ; class Basic { public : Basic ( int a ) : a_ ( a ){ cout << \"construct\" << endl ; } ~ Basic (){ cout << \"de construct\" << endl ;} private : int a_ ; }; int main ( int argc , char const * argv []) { auto a_ptr = std :: make_shared < Basic > ( 10 ); cout << a_ptr . use_count () << endl ; { // auto b_ptr = std::move(a_ptr); auto b_ptr = a_ptr ; cout << b_ptr . use_count () << endl ; } return 0 ; }","title":"Smart pointer"},{"location":"blog/CPP/multithreading/","tags":["cpp","multithreading"],"text":"Reference # Bo Qian Concurrent Programing list","title":"CPP Multithreading"},{"location":"blog/CPP/multithreading/#reference","text":"Bo Qian Concurrent Programing list","title":"Reference"},{"location":"blog/CPP/multithreading/async_future_promise/","tags":["multithreading","cpp"],"text":"async_future.cpp #include <iostream> #include <future> using std :: cout ; using std :: endl ; int factorial ( int N ){ int res = 1 ; for ( int i = N ; i > 1 ; i -- ) { res *= i ; } return res ; } int main ( int argc , char const * argv []) { std :: future < int > fu = std :: async ( factorial , 4 ); //call with a profile , force a new thread //std::future<int> fu = std::async(std::launch::async, factorial, 4); // wait for result from async int x = fu . get (); cout << x << endl ; return 0 ; } Async profile # launch::deferred: Deferred the call in the same thread only when get call launch::async: Call the function in new thread launch::deferred | launch::async (default) promise # async_future_promise.cpp #include <iostream> #include <future> #include <chrono> #include <thread> using std :: cout ; using std :: endl ; int factorial ( std :: future < int >& f ){ int res = 1 ; // wait for promise value int N = f . get (); for ( int i = N ; i > 1 ; i -- ) { res *= i ; } return res ; } int main ( int argc , char const * argv []) { std :: promise < int > p ; std :: future < int > f = p . get_future (); // promise a value in the future std :: future < int > fu = std :: async ( std :: launch :: async , factorial , std :: ref ( f )); std :: this_thread :: sleep_for ( std :: chrono :: milliseconds ( 20 )); // send the promise value p . set_value ( 4 ); int x = fu . get (); cout << x << endl ; return 0 ; } Reference # C++ Threading #7: Future, Promise and async()","title":"Async Future and Promise"},{"location":"blog/CPP/multithreading/async_future_promise/#async-profile","text":"launch::deferred: Deferred the call in the same thread only when get call launch::async: Call the function in new thread launch::deferred | launch::async (default)","title":"Async profile"},{"location":"blog/CPP/multithreading/async_future_promise/#promise","text":"async_future_promise.cpp #include <iostream> #include <future> #include <chrono> #include <thread> using std :: cout ; using std :: endl ; int factorial ( std :: future < int >& f ){ int res = 1 ; // wait for promise value int N = f . get (); for ( int i = N ; i > 1 ; i -- ) { res *= i ; } return res ; } int main ( int argc , char const * argv []) { std :: promise < int > p ; std :: future < int > f = p . get_future (); // promise a value in the future std :: future < int > fu = std :: async ( std :: launch :: async , factorial , std :: ref ( f )); std :: this_thread :: sleep_for ( std :: chrono :: milliseconds ( 20 )); // send the promise value p . set_value ( 4 ); int x = fu . get (); cout << x << endl ; return 0 ; }","title":"promise"},{"location":"blog/CPP/multithreading/async_future_promise/#reference","text":"C++ Threading #7: Future, Promise and async()","title":"Reference"},{"location":"blog/CPP/spdlog/","tags":["spdlog"],"text":"install # sudo apt install libspdlog-dev basic usage # hello_spd #include <spdlog/spdlog.h> int main ( int argc , char const * argv []) { spdlog :: set_level ( spdlog :: level :: debug ); spdlog :: debug ( \"debug {}\" , \"more data\" ); spdlog :: info ( \"info {} {}\" , \"data\" , 1 ); spdlog :: warn ( \"warn\" ); spdlog :: error ( \"error\" ); return 0 ; } CMakeLists.txt find_package ( spdlog REQUIRED ) add_executable ( hello_spd hello_spd . cpp ) target_link_libraries ( hello_spd PRIVATE spdlog :: spdlog_header_only )","title":"spdlog hello"},{"location":"blog/CPP/spdlog/#install","text":"sudo apt install libspdlog-dev","title":"install"},{"location":"blog/CPP/spdlog/#basic-usage","text":"hello_spd #include <spdlog/spdlog.h> int main ( int argc , char const * argv []) { spdlog :: set_level ( spdlog :: level :: debug ); spdlog :: debug ( \"debug {}\" , \"more data\" ); spdlog :: info ( \"info {} {}\" , \"data\" , 1 ); spdlog :: warn ( \"warn\" ); spdlog :: error ( \"error\" ); return 0 ; } CMakeLists.txt find_package ( spdlog REQUIRED ) add_executable ( hello_spd hello_spd . cpp ) target_link_libraries ( hello_spd PRIVATE spdlog :: spdlog_header_only )","title":"basic usage"},{"location":"blog/CPP/spdlog/log_to_file/","tags":["spdlog"],"text":"#include <spdlog/spdlog.h> #include <spdlog/sinks/basic_file_sink.h> int main ( int argc , char const * argv []) { auto my_logger = spdlog :: basic_logger_mt ( \"my_logger\" , \"log.txt\" ); my_logger -> set_level ( spdlog :: level :: debug ); my_logger -> debug ( \"debug {}\" , \"more data\" ); my_logger -> info ( \"info {} {}\" , \"data\" , 1 ); my_logger -> warn ( \"warn\" ); my_logger -> error ( \"error\" ); return 0 ; } CMakeLists.txt find_package ( spdlog REQUIRED ) add_executable ( hello_spd hello_spd . cpp ) target_link_libraries ( hello_spd PRIVATE spdlog :: spdlog_header_only )","title":"spdlog log to file"},{"location":"blog/CV/camera_world_coordinate/","tags":["camera","coordinate system"],"text":"cx optical center width / 2 cy optical center height / 2 fx focal length fx=fy fy","title":"Camera world coordinate system"},{"location":"blog/CV/matching/orb_matcher/","tags":["orb","matching","opencv"],"text":"Hamming Distance # Hamming Distance measures the similarity between two strings of the same length. Hamming distance is the number of bit positions in which the two bits are different. BFMatcher # Brute-Force matching take each feature from image query and compares it to all the other/train image Matcher result # match method DMatch distance imgIdx: train image index queryIdx: query descriptor index trainIdx: train descriptor index Basic Demo # import numpy as np import cv2 # Read the query image as query_img # and train image This query image # is what you need to find in train image # Save it in the same directory # with the name image.jpg query_img = cv2 . imread ( 'query.jpg' ) train_img = cv2 . imread ( 'train.jpg' ) # Convert it to grayscale query_img_bw = cv2 . cvtColor ( query_img , cv2 . COLOR_BGR2GRAY ) train_img_bw = cv2 . cvtColor ( train_img , cv2 . COLOR_BGR2GRAY ) # Initialize the ORB detector algorithm orb = cv2 . ORB_create () # Now detect the keypoints and compute # the descriptors for the query image # and train image queryKeypoints , queryDescriptors = orb . detectAndCompute ( query_img_bw , mask = None ) trainKeypoints , trainDescriptors = orb . detectAndCompute ( train_img_bw , mask = None ) # Initialize the Matcher for matching # the keypoints and then match the # keypoints matcher = cv2 . BFMatcher () matches = matcher . match ( queryDescriptors , trainDescriptors ) # draw the matches to the final image # containing both the images the drawMatches() # function takes both images and keypoints # and outputs the matched query image with # its train image final_img = cv2 . drawMatches ( query_img , queryKeypoints , train_img , trainKeypoints , matches [: 20 ], None ) final_img = cv2 . resize ( final_img , ( 1000 , 650 )) # Show the final image cv2 . imshow ( \"Matches\" , final_img ) cv2 . waitKey ( 3000 ) # Reference # OpenCV-python-tests Different types of distance used in Machine Learning. comparing_images","title":"opencv feature matching"},{"location":"blog/CV/matching/orb_matcher/#hamming-distance","text":"Hamming Distance measures the similarity between two strings of the same length. Hamming distance is the number of bit positions in which the two bits are different.","title":"Hamming Distance"},{"location":"blog/CV/matching/orb_matcher/#bfmatcher","text":"Brute-Force matching take each feature from image query and compares it to all the other/train image","title":"BFMatcher"},{"location":"blog/CV/matching/orb_matcher/#matcher-result","text":"match method DMatch distance imgIdx: train image index queryIdx: query descriptor index trainIdx: train descriptor index","title":"Matcher result"},{"location":"blog/CV/matching/orb_matcher/#basic-demo","text":"","title":"Basic Demo"},{"location":"blog/CV/matching/orb_matcher/#import-numpy-as-npimport-cv2-read-the-query-image-as-query_img-and-train-image-this-query-image-is-what-you-need-to-find-in-train-image-save-it-in-the-same-directory-with-the-name-imagejpg-query_img--cv2imreadqueryjpgtrain_img--cv2imreadtrainjpg-convert-it-to-grayscalequery_img_bw--cv2cvtcolorquery_imgcv2color_bgr2graytrain_img_bw--cv2cvtcolortrain_img-cv2color_bgr2gray-initialize-the-orb-detector-algorithmorb--cv2orb_create-now-detect-the-keypoints-and-compute-the-descriptors-for-the-query-image-and-train-imagequerykeypoints-querydescriptors--orbdetectandcomputequery_img_bw-masknonetrainkeypoints-traindescriptors--orbdetectandcomputetrain_img_bw-masknone-initialize-the-matcher-for-matching-the-keypoints-and-then-match-the-keypointsmatcher--cv2bfmatchermatches--matchermatchquerydescriptorstraindescriptors-draw-the-matches-to-the-final-image-containing-both-the-images-the-drawmatches-function-takes-both-images-and-keypoints-and-outputs-the-matched-query-image-with-its-train-imagefinal_img--cv2drawmatchesquery_img-querykeypointstrain_img-trainkeypoints-matches20nonefinal_img--cv2resizefinal_img-1000650-show-the-final-imagecv2imshowmatches-final_imgcv2waitkey3000","text":"","title":"import numpy as np\nimport cv2\n\n\n# Read the query image as query_img\n# and train image This query image\n# is what you need to find in train image\n# Save it in the same directory\n# with the name image.jpg \nquery_img = cv2.imread(&#39;query.jpg&#39;)\ntrain_img = cv2.imread(&#39;train.jpg&#39;)\n\n# Convert it to grayscale\nquery_img_bw = cv2.cvtColor(query_img,cv2.COLOR_BGR2GRAY)\ntrain_img_bw = cv2.cvtColor(train_img, cv2.COLOR_BGR2GRAY)\n\n# Initialize the ORB detector algorithm\norb = cv2.ORB_create()\n\n# Now detect the keypoints and compute\n# the descriptors for the query image\n# and train image\nqueryKeypoints, queryDescriptors = orb.detectAndCompute(query_img_bw, mask=None)\ntrainKeypoints, trainDescriptors = orb.detectAndCompute(train_img_bw, mask=None)\n\n# Initialize the Matcher for matching\n# the keypoints and then match the\n# keypoints\nmatcher = cv2.BFMatcher()\nmatches = matcher.match(queryDescriptors,trainDescriptors)\n\n# draw the matches to the final image\n# containing both the images the drawMatches()\n# function takes both images and keypoints\n# and outputs the matched query image with\n# its train image\nfinal_img = cv2.drawMatches(query_img, queryKeypoints,\ntrain_img, trainKeypoints, matches[:20],None)\n\nfinal_img = cv2.resize(final_img, (1000,650))\n\n# Show the final image\ncv2.imshow(&quot;Matches&quot;, final_img)\ncv2.waitKey(3000)\n"},{"location":"blog/CV/matching/orb_matcher/#reference","text":"OpenCV-python-tests Different types of distance used in Machine Learning. comparing_images","title":"Reference"},{"location":"blog/CV/opencv/build_with_cuda_support/","tags":["opencv","build","cuda"],"text":"Build OpenCV on x64 ubuntu machine Prerequisites # install nvidia driver \u2026 install cudnn \u2026 install cmake gui install all opencv dependencies sudo apt install cmake-qt-gui install dependencies sudo apt-get update sudo apt-get upgrade sudo apt-get install build-essential cmake unzip pkg-config sudo apt-get install libjpeg-dev libpng-dev libtiff-dev sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev sudo apt-get install libv4l-dev libxvidcore-dev libx264-dev sudo apt-get install libgtk-3-dev sudo apt-get install libblas-dev liblapack-dev gfortran sudo apt-get install python3-dev Download source # wget https://github.com/opencv/opencv/archive/4.5.5.zip wget https://github.com/opencv/opencv_contrib/archive/4.5.5.zip # unzip build process # set all option run configure run generate run make -j 8 from/on build folder check config # Select source and build folder config python config cuda gpu arch wikipedia cuda gpu support dnn blas fast math contrib pkgconfig config result # show my changes Commandline options: -DOPENCV_EXTRA_MODULES_PATH:PATH=\"/home/user/opencv/opencv_contrib-4.5.5/modules\" \\ -DOPENCV_GENERATE_PKGCONFIG:BOOL=\"1\" \\ -DWITH_CUDA:BOOL=\"1\" \\ -DCUDA_ARCH_BIN:STRING=\"7.5\" \\ -DOPENCV_DNN_CUDA:BOOL=\"1\" \\ -DENABLE_FAST_MATH:BOOL=\"1\" \\ -DPYTHON3_EXECUTABLE:FILEPATH=\"/usr/bin/python3\" -DBUILD_opencv_world:BOOL=\"1\" \\ -DCUDA_FAST_MATH:BOOL=\"1\" Cache file: OPENCV_EXTRA_MODULES_PATH:PATH=/home/user/opencv/opencv_contrib-4.5.5/modules OPENCV_GENERATE_PKGCONFIG:BOOL=1 WITH_CUDA:BOOL=1 CUDA_ARCH_BIN:STRING=7.5 OPENCV_DNN_CUDA:BOOL=1 ENABLE_FAST_MATH:BOOL=1 PYTHON3_EXECUTABLE:FILEPATH=/usr/bin/python3 BUILD_opencv_world:BOOL=1 CUDA_FAST_MATH:BOOL=1 Check # create new virtual env and activate run setup.py from build/python_loader folder import cv2 cv2 . __version__ cv2 . cuda . getCudaEnabledDeviceCount ()","title":"Build OpenCV with CUDA"},{"location":"blog/CV/opencv/build_with_cuda_support/#prerequisites","text":"install nvidia driver \u2026 install cudnn \u2026 install cmake gui install all opencv dependencies sudo apt install cmake-qt-gui install dependencies sudo apt-get update sudo apt-get upgrade sudo apt-get install build-essential cmake unzip pkg-config sudo apt-get install libjpeg-dev libpng-dev libtiff-dev sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev sudo apt-get install libv4l-dev libxvidcore-dev libx264-dev sudo apt-get install libgtk-3-dev sudo apt-get install libblas-dev liblapack-dev gfortran sudo apt-get install python3-dev","title":"Prerequisites"},{"location":"blog/CV/opencv/build_with_cuda_support/#download-source","text":"wget https://github.com/opencv/opencv/archive/4.5.5.zip wget https://github.com/opencv/opencv_contrib/archive/4.5.5.zip # unzip","title":"Download source"},{"location":"blog/CV/opencv/build_with_cuda_support/#build-process","text":"set all option run configure run generate run make -j 8 from/on build folder check","title":"build process"},{"location":"blog/CV/opencv/build_with_cuda_support/#config","text":"Select source and build folder config python config cuda gpu arch wikipedia cuda gpu support dnn blas fast math contrib pkgconfig","title":"config"},{"location":"blog/CV/opencv/build_with_cuda_support/#config-result","text":"show my changes Commandline options: -DOPENCV_EXTRA_MODULES_PATH:PATH=\"/home/user/opencv/opencv_contrib-4.5.5/modules\" \\ -DOPENCV_GENERATE_PKGCONFIG:BOOL=\"1\" \\ -DWITH_CUDA:BOOL=\"1\" \\ -DCUDA_ARCH_BIN:STRING=\"7.5\" \\ -DOPENCV_DNN_CUDA:BOOL=\"1\" \\ -DENABLE_FAST_MATH:BOOL=\"1\" \\ -DPYTHON3_EXECUTABLE:FILEPATH=\"/usr/bin/python3\" -DBUILD_opencv_world:BOOL=\"1\" \\ -DCUDA_FAST_MATH:BOOL=\"1\" Cache file: OPENCV_EXTRA_MODULES_PATH:PATH=/home/user/opencv/opencv_contrib-4.5.5/modules OPENCV_GENERATE_PKGCONFIG:BOOL=1 WITH_CUDA:BOOL=1 CUDA_ARCH_BIN:STRING=7.5 OPENCV_DNN_CUDA:BOOL=1 ENABLE_FAST_MATH:BOOL=1 PYTHON3_EXECUTABLE:FILEPATH=/usr/bin/python3 BUILD_opencv_world:BOOL=1 CUDA_FAST_MATH:BOOL=1","title":"config result"},{"location":"blog/CV/opencv/build_with_cuda_support/#check","text":"create new virtual env and activate run setup.py from build/python_loader folder import cv2 cv2 . __version__ cv2 . cuda . getCudaEnabledDeviceCount ()","title":"Check"},{"location":"blog/CV/opencv/cpp/","tags":["opencv","cpp"],"text":"include <opencv2/opencv.hpp> Namespace cv:: ```cpp main=\u201d\u201c include # include # int main(int argc, char** argv ) { cv::Mat image; image = cv::imread(\u201clana.png\u201d); if ( !image.data ) { printf(\u201cNo image data n\u201c); return -1; } cv::namedWindow(\u201cDisplay Image\u201d, cv::WINDOW_AUTOSIZE ); cv::imshow(\u201cDisplay Image\u201d, image); cv::waitKey(0); return 0; } ```c title=\"CMakeLists.txt\" cmake_minimum_required(VERSION 3.22) project(cpp_tutorial) find_package( OpenCV REQUIRED ) include_directories( ${OpenCV_INCLUDE_DIRS} ) add_executable( cv_hello main.cpp ) target_link_libraries( cv_hello ${OpenCV_LIBS} )","title":"OpenCV cpp tutorial"},{"location":"blog/CV/opencv/cpp/#include","text":"","title":"include "},{"location":"blog/CV/opencv/cpp/#include_1","text":"int main(int argc, char** argv ) { cv::Mat image; image = cv::imread(\u201clana.png\u201d); if ( !image.data ) { printf(\u201cNo image data n\u201c); return -1; } cv::namedWindow(\u201cDisplay Image\u201d, cv::WINDOW_AUTOSIZE ); cv::imshow(\u201cDisplay Image\u201d, image); cv::waitKey(0); return 0; } ```c title=\"CMakeLists.txt\" cmake_minimum_required(VERSION 3.22) project(cpp_tutorial) find_package( OpenCV REQUIRED ) include_directories( ${OpenCV_INCLUDE_DIRS} ) add_executable( cv_hello main.cpp ) target_link_libraries( cv_hello ${OpenCV_LIBS} )","title":"include "},{"location":"blog/CV/opencv/image_trasformation/","tags":["transformation","computer vision"],"text":"Translation # opencv demo # import cv2 import numpy as np image = cv2 . imread ( '/home/user/projects/blog/examples/open_cv/homography/images/lana.png' ) height , width = image . shape [: 2 ] tx = 100 ty = 100 T = np . float32 ([[ 1 , 0 , tx ], [ 0 , 1 , ty ]]) img_translation = cv2 . warpAffine ( image , T , ( width , height )) cv2 . imshow ( \"src\" , image ) cv2 . imshow ( \"dst\" , img_translation ) cv2 . warpAffine ( image , T , ( width , height )) cv2 . waitKey ( 0 ) Rotation # rotate import cv2 import numpy as np image = cv2 . imread ( '/home/user/projects/blog/examples/open_cv/homography/images/lana.png' ) height , width = image . shape [: 2 ] center = ( width / 2 , height / 2 ) angle = 45 scale = 1 M = cv2 . getRotationMatrix2D ( center , angle , scale ) img_translation = cv2 . warpAffine ( image , M , ( width , height )) cv2 . imshow ( \"src\" , image ) cv2 . imshow ( \"dst\" , img_translation ) cv2 . waitKey ( 0 ) Scale # Reference # Pratik jain computer vision How to resize, translate, flip and rotate an image with OpenCV understanding-geometric-transformation","title":"Image Transforms and Rotation"},{"location":"blog/CV/opencv/image_trasformation/#translation","text":"","title":"Translation"},{"location":"blog/CV/opencv/image_trasformation/#opencv-demo","text":"import cv2 import numpy as np image = cv2 . imread ( '/home/user/projects/blog/examples/open_cv/homography/images/lana.png' ) height , width = image . shape [: 2 ] tx = 100 ty = 100 T = np . float32 ([[ 1 , 0 , tx ], [ 0 , 1 , ty ]]) img_translation = cv2 . warpAffine ( image , T , ( width , height )) cv2 . imshow ( \"src\" , image ) cv2 . imshow ( \"dst\" , img_translation ) cv2 . warpAffine ( image , T , ( width , height )) cv2 . waitKey ( 0 )","title":"opencv demo"},{"location":"blog/CV/opencv/image_trasformation/#rotation","text":"rotate import cv2 import numpy as np image = cv2 . imread ( '/home/user/projects/blog/examples/open_cv/homography/images/lana.png' ) height , width = image . shape [: 2 ] center = ( width / 2 , height / 2 ) angle = 45 scale = 1 M = cv2 . getRotationMatrix2D ( center , angle , scale ) img_translation = cv2 . warpAffine ( image , M , ( width , height )) cv2 . imshow ( \"src\" , image ) cv2 . imshow ( \"dst\" , img_translation ) cv2 . waitKey ( 0 )","title":"Rotation"},{"location":"blog/CV/opencv/image_trasformation/#scale","text":"","title":"Scale"},{"location":"blog/CV/opencv/image_trasformation/#reference","text":"Pratik jain computer vision How to resize, translate, flip and rotate an image with OpenCV understanding-geometric-transformation","title":"Reference"},{"location":"blog/CV/opencv/image_trasformation/homography/","tags":["homography","computer vision"],"text":"Demo # import cv2 import numpy as np rotXdeg = 90 rotYdeg = 90 rotZdeg = 90 f = 500 dist = 500 def onRotXChange ( val ): global rotXdeg rotXdeg = val def onRotYChange ( val ): global rotYdeg rotYdeg = val def onRotZChange ( val ): global rotZdeg rotZdeg = val def onFchange ( val ): global f f = val def onDistChange ( val ): global dist dist = val if __name__ == '__main__' : #Read input image, and create output image src = cv2 . imread ( '/home/user/projects/blog/examples/open_cv/homography/images/lana.png' ) dst = np . ndarray ( shape = src . shape , dtype = src . dtype ) #Create user interface with trackbars that will allow to modify the parameters of the transformation wndname1 = \"Source:\" wndname2 = \"WarpPerspective: \" cv2 . namedWindow ( wndname1 , 1 ) cv2 . namedWindow ( wndname2 , 1 ) cv2 . createTrackbar ( \"Rotation X\" , wndname2 , rotXdeg , 180 , onRotXChange ) cv2 . createTrackbar ( \"Rotation Y\" , wndname2 , rotYdeg , 180 , onRotYChange ) cv2 . createTrackbar ( \"Rotation Z\" , wndname2 , rotZdeg , 180 , onRotZChange ) cv2 . createTrackbar ( \"f\" , wndname2 , f , 2000 , onFchange ) cv2 . createTrackbar ( \"Distance\" , wndname2 , dist , 2000 , onDistChange ) #Show original image cv2 . imshow ( wndname1 , src ) h , w = src . shape [: 2 ] while True : rotX = ( rotXdeg - 90 ) * np . pi / 180 rotY = ( rotYdeg - 90 ) * np . pi / 180 rotZ = ( rotZdeg - 90 ) * np . pi / 180 #Projection 2D -> 3D matrix A1 = np . matrix ([[ 1 , 0 , - w / 2 ], [ 0 , 1 , - h / 2 ], [ 0 , 0 , 0 ], [ 0 , 0 , 1 ]]) # Rotation matrices around the X,Y,Z axis RX = np . matrix ([[ 1 , 0 , 0 , 0 ], [ 0 , np . cos ( rotX ), - np . sin ( rotX ), 0 ], [ 0 , np . sin ( rotX ), np . cos ( rotX ) , 0 ], [ 0 , 0 , 0 , 1 ]]) RY = np . matrix ([[ np . cos ( rotY ), 0 , np . sin ( rotY ), 0 ], [ 0 , 1 , 0 , 0 ], [ - np . sin ( rotY ), 0 , np . cos ( rotY ), 0 ], [ 0 , 0 , 0 , 1 ]]) RZ = np . matrix ([[ np . cos ( rotZ ), - np . sin ( rotZ ), 0 , 0 ], [ np . sin ( rotZ ), np . cos ( rotZ ), 0 , 0 ], [ 0 , 0 , 1 , 0 ], [ 0 , 0 , 0 , 1 ]]) #Composed rotation matrix with (RX,RY,RZ) R = RX * RY * RZ #Translation matrix on the Z axis change dist will change the height T = np . matrix ([[ 1 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 0 ], [ 0 , 0 , 1 , dist ], [ 0 , 0 , 0 , 1 ]]) #Camera Intrisecs matrix 3D -> 2D A2 = np . matrix ([[ f , 0 , w / 2 , 0 ], [ 0 , f , h / 2 , 0 ], [ 0 , 0 , 1 , 0 ]]) # Final and overall transformation matrix H = A2 * ( T * ( R * A1 )) # Apply matrix transformation cv2 . warpPerspective ( src , H , ( w , h ), dst , cv2 . INTER_CUBIC ) #Show the image cv2 . imshow ( wndname2 , dst ) cv2 . waitKey ( 1 ) Reference # Compute homograph for virtual camera with opencv Python create image with new camera position","title":"Image Homography"},{"location":"blog/CV/opencv/image_trasformation/homography/#demo","text":"import cv2 import numpy as np rotXdeg = 90 rotYdeg = 90 rotZdeg = 90 f = 500 dist = 500 def onRotXChange ( val ): global rotXdeg rotXdeg = val def onRotYChange ( val ): global rotYdeg rotYdeg = val def onRotZChange ( val ): global rotZdeg rotZdeg = val def onFchange ( val ): global f f = val def onDistChange ( val ): global dist dist = val if __name__ == '__main__' : #Read input image, and create output image src = cv2 . imread ( '/home/user/projects/blog/examples/open_cv/homography/images/lana.png' ) dst = np . ndarray ( shape = src . shape , dtype = src . dtype ) #Create user interface with trackbars that will allow to modify the parameters of the transformation wndname1 = \"Source:\" wndname2 = \"WarpPerspective: \" cv2 . namedWindow ( wndname1 , 1 ) cv2 . namedWindow ( wndname2 , 1 ) cv2 . createTrackbar ( \"Rotation X\" , wndname2 , rotXdeg , 180 , onRotXChange ) cv2 . createTrackbar ( \"Rotation Y\" , wndname2 , rotYdeg , 180 , onRotYChange ) cv2 . createTrackbar ( \"Rotation Z\" , wndname2 , rotZdeg , 180 , onRotZChange ) cv2 . createTrackbar ( \"f\" , wndname2 , f , 2000 , onFchange ) cv2 . createTrackbar ( \"Distance\" , wndname2 , dist , 2000 , onDistChange ) #Show original image cv2 . imshow ( wndname1 , src ) h , w = src . shape [: 2 ] while True : rotX = ( rotXdeg - 90 ) * np . pi / 180 rotY = ( rotYdeg - 90 ) * np . pi / 180 rotZ = ( rotZdeg - 90 ) * np . pi / 180 #Projection 2D -> 3D matrix A1 = np . matrix ([[ 1 , 0 , - w / 2 ], [ 0 , 1 , - h / 2 ], [ 0 , 0 , 0 ], [ 0 , 0 , 1 ]]) # Rotation matrices around the X,Y,Z axis RX = np . matrix ([[ 1 , 0 , 0 , 0 ], [ 0 , np . cos ( rotX ), - np . sin ( rotX ), 0 ], [ 0 , np . sin ( rotX ), np . cos ( rotX ) , 0 ], [ 0 , 0 , 0 , 1 ]]) RY = np . matrix ([[ np . cos ( rotY ), 0 , np . sin ( rotY ), 0 ], [ 0 , 1 , 0 , 0 ], [ - np . sin ( rotY ), 0 , np . cos ( rotY ), 0 ], [ 0 , 0 , 0 , 1 ]]) RZ = np . matrix ([[ np . cos ( rotZ ), - np . sin ( rotZ ), 0 , 0 ], [ np . sin ( rotZ ), np . cos ( rotZ ), 0 , 0 ], [ 0 , 0 , 1 , 0 ], [ 0 , 0 , 0 , 1 ]]) #Composed rotation matrix with (RX,RY,RZ) R = RX * RY * RZ #Translation matrix on the Z axis change dist will change the height T = np . matrix ([[ 1 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 0 ], [ 0 , 0 , 1 , dist ], [ 0 , 0 , 0 , 1 ]]) #Camera Intrisecs matrix 3D -> 2D A2 = np . matrix ([[ f , 0 , w / 2 , 0 ], [ 0 , f , h / 2 , 0 ], [ 0 , 0 , 1 , 0 ]]) # Final and overall transformation matrix H = A2 * ( T * ( R * A1 )) # Apply matrix transformation cv2 . warpPerspective ( src , H , ( w , h ), dst , cv2 . INTER_CUBIC ) #Show the image cv2 . imshow ( wndname2 , dst ) cv2 . waitKey ( 1 )","title":"Demo"},{"location":"blog/CV/opencv/image_trasformation/homography/#reference","text":"Compute homograph for virtual camera with opencv Python create image with new camera position","title":"Reference"},{"location":"blog/CV/optical_flow/lk_sparse_demo/","tags":["optical flow","of","opencv"],"text":"lk_sparse_demo.py import numpy as np import cv2 from os import path # https://www.bogotobogo.com/python/OpenCV_Python/images/mean_shift_tracking/ url = path . join ( path . dirname ( __file__ ), \"slow_traffic_small.mp4\" ) cap = cv2 . VideoCapture ( url ) font = cv2 . FONT_HERSHEY_SIMPLEX # params for ShiTomasi corner detection feature_params = dict ( maxCorners = 100 , qualityLevel = 0.3 , minDistance = 7 , blockSize = 7 ) # Parameters for lucas kanade optical flow lk_params = dict ( winSize = ( 15 , 15 ), maxLevel = 2 , criteria = ( cv2 . TERM_CRITERIA_EPS | cv2 . TERM_CRITERIA_COUNT , 10 , 0.03 )) color = np . random . randint ( 0 , 255 , ( 100 , 3 )) ret , first_frame = cap . read () #roi variable will save xy coordinate of left top corner and bottom right corner point of bounding box roi = cv2 . selectROI ( \"select\" , first_frame ) cv2 . destroyWindow ( \"select\" ) old_gray = cv2 . cvtColor ( first_frame , cv2 . COLOR_BGR2GRAY ) mask = np . zeros_like ( old_gray ) mask [ int ( roi [ 1 ]): int ( roi [ 1 ] + roi [ 3 ]), int ( roi [ 0 ]): int ( roi [ 0 ] + roi [ 2 ])] = 255 p0 = cv2 . goodFeaturesToTrack ( old_gray , mask = mask , ** feature_params ) mask = np . zeros_like ( first_frame ) while True : ret , frame = cap . read () if not ret : print ( \"no frame grabbed\" ) break gray_frame = cv2 . cvtColor ( frame , cv2 . COLOR_BGR2GRAY ) p1 , st , err = cv2 . calcOpticalFlowPyrLK ( old_gray , gray_frame , p0 , None , ** lk_params ) # Select good points if p1 is not None : good_new = p1 [ st == 1 ] good_old = p0 [ st == 1 ] for i , ( new , old ) in enumerate ( zip ( good_new , good_old )): a , b = new . ravel () c , d = old . ravel () # mask not renew each frame, lines draw from the first image mask = cv2 . line ( mask , ( int ( a ), int ( b )), ( int ( c ), int ( d )), color [ i ] . tolist (), 2 ) frame = cv2 . circle ( frame , ( int ( a ), int ( b )), 5 , color [ i ] . tolist (), - 1 ) img = cv2 . add ( frame , mask ) cv2 . putText ( img , f 'good_new: { good_new . size / 2 } ' ,( 10 , 60 ), font , 0.7 ,( 0 , 255 , 0 ), 1 , cv2 . LINE_AA ) cv2 . putText ( img , f 'good_old: { good_old . size / 2 } ' ,( 10 , 80 ), font , 0.7 ,( 0 , 255 , 0 ), 1 , cv2 . LINE_AA ) cv2 . imshow ( \"lk\" , img ) k = cv2 . waitKey ( 30 ) & 0xFF if k == 27 : break # Now update the previous frame and previous points old_gray = gray_frame . copy () p0 = good_new . reshape ( - 1 , 1 , 2 ) cap . release () cv2 . destroyAllWindows ()","title":"opencv lk optical flow demo"},{"location":"blog/CV/optical_flow/open_cv_optical_flow_lk_sparse/","tags":["optical flow","of","opencv"],"text":"api link Reference # Introduction to Motion Estimation with Optical Flow above code - github","title":"opencv lk optical flow"},{"location":"blog/CV/optical_flow/open_cv_optical_flow_lk_sparse/#reference","text":"Introduction to Motion Estimation with Optical Flow above code - github","title":"Reference"},{"location":"blog/CV/trackers/siam_mask/","tags":["ai","trackers","cv"],"text":"SiamMask # SiamMask used to tracking and segment objects from videos in each frame, initializing a single bounding box and outputing binary segmentation mask and rotated objects boxes SiamMask needs to be initialized with a single bounding box so it can track the desired object. However, this also means that multiple object tracking (MOT) is not viable with SiamMask alias # VOT: Visual Object Tracking MOT: Multiple Object Tracking VOS: Video Object Segmentation SOT: Signal Object Tracking Demo # Clone project Setup environment Download model Run clone git clone https://github.com/augmentedstartups/SiamMask.git !!! Note title=\u201drequirements.txt\u201d Running different python package version from github settings Cython==0.29.28 colorama==0.4.4 numpy==1.21.5 requests==2.22.0 fire==0.4.0 torch==1.5.1+cu101 matplotlib==3.5.1 numba==0.55.1 scipy==1.7.3 h5py==3.6.0 pandas==1.4.0 tqdm==4.64.0 tensorboardX==2.5 torchvision==0.6.1+cu101 **build from source** opencv 4.5.4 cd SiamMask bash make.sh setp env # Add SiamMask root project and demo folder siammask_sharp folder to PYTHONPATH cd SiamMask export PYTHONPATH = ` pwd ` : $PYTHONPATH cd experiments/siammask_sharp export PYTHONPATH = ` pwd ` : $PYTHONPATH download models cd SiamMask/experiments/siammask_sharp wget http://www.robots.ox.ac.uk/~qwang/SiamMask_VOT.pth wget http://www.robots.ox.ac.uk/~qwang/SiamMask_DAVIS.pth bash title=\"run python ../../tools/demo.py --resume SiamMask_DAVIS.pth --config config_davis.json Note DAVIS_2016: Video object segmentation dataset DAVIS16 is a dataset for video object segmentation which consists of 50 videos in total (30 videos for training and 20 for testing). Per-frame pixel-wise annotations are offered. dataset Reference # SiamMask Siam Mask Object Tracking and Segmentation in OpenCV Python SiamMask github To check # SenseTime Research platform for single object tracking, implementing algorithms like SiamRPN and SiamMask - pysot","title":"SiamMask"},{"location":"blog/CV/trackers/siam_mask/#siammask","text":"SiamMask used to tracking and segment objects from videos in each frame, initializing a single bounding box and outputing binary segmentation mask and rotated objects boxes SiamMask needs to be initialized with a single bounding box so it can track the desired object. However, this also means that multiple object tracking (MOT) is not viable with SiamMask","title":"SiamMask"},{"location":"blog/CV/trackers/siam_mask/#alias","text":"VOT: Visual Object Tracking MOT: Multiple Object Tracking VOS: Video Object Segmentation SOT: Signal Object Tracking","title":"alias"},{"location":"blog/CV/trackers/siam_mask/#demo","text":"Clone project Setup environment Download model Run clone git clone https://github.com/augmentedstartups/SiamMask.git !!! Note title=\u201drequirements.txt\u201d Running different python package version from github settings Cython==0.29.28 colorama==0.4.4 numpy==1.21.5 requests==2.22.0 fire==0.4.0 torch==1.5.1+cu101 matplotlib==3.5.1 numba==0.55.1 scipy==1.7.3 h5py==3.6.0 pandas==1.4.0 tqdm==4.64.0 tensorboardX==2.5 torchvision==0.6.1+cu101 **build from source** opencv 4.5.4 cd SiamMask bash make.sh setp env # Add SiamMask root project and demo folder siammask_sharp folder to PYTHONPATH cd SiamMask export PYTHONPATH = ` pwd ` : $PYTHONPATH cd experiments/siammask_sharp export PYTHONPATH = ` pwd ` : $PYTHONPATH download models cd SiamMask/experiments/siammask_sharp wget http://www.robots.ox.ac.uk/~qwang/SiamMask_VOT.pth wget http://www.robots.ox.ac.uk/~qwang/SiamMask_DAVIS.pth bash title=\"run python ../../tools/demo.py --resume SiamMask_DAVIS.pth --config config_davis.json Note DAVIS_2016: Video object segmentation dataset DAVIS16 is a dataset for video object segmentation which consists of 50 videos in total (30 videos for training and 20 for testing). Per-frame pixel-wise annotations are offered. dataset","title":"Demo"},{"location":"blog/CV/trackers/siam_mask/#reference","text":"SiamMask Siam Mask Object Tracking and Segmentation in OpenCV Python SiamMask github","title":"Reference"},{"location":"blog/CV/trackers/siam_mask/#to-check","text":"SenseTime Research platform for single object tracking, implementing algorithms like SiamRPN and SiamMask - pysot","title":"To check"},{"location":"blog/DDS/cyclondds/python-bindings/","tags":["dds","cyclonedds"],"text":"LAB # Install cyclonedds on lxc container, config vscode as remote container Install cyclonedds python bindings from pip Config VSCode remote container Run Hello world example rtspsrc location=rtsp://<user></user>:<pass>@<ip>:<port>/<channel> caps=\u201capplication/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H264\u201d latency=100 ! queue ! rtph264depay ! avdec_h264 ! videoconvert ! video/x-raw,format=BGRA ! appsink name=outsink","title":"Eclipse cyclonedds python bindings"},{"location":"blog/DDS/cyclondds/python-bindings/#lab","text":"Install cyclonedds on lxc container, config vscode as remote container Install cyclonedds python bindings from pip Config VSCode remote container Run Hello world example rtspsrc location=rtsp://<user></user>:<pass>@<ip>:<port>/<channel> caps=\u201capplication/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H264\u201d latency=100 ! queue ! rtph264depay ! avdec_h264 ! videoconvert ! video/x-raw,format=BGRA ! appsink name=outsink","title":"LAB"},{"location":"blog/DDS/eprosima/fastdds-hello/","tags":["dds","eprosima","fastdds"],"text":"Objective # Run fastdds basic example Setup # Download eprosima fastdds docker download Load docker docker load -i <path>/ubuntu-fastdds v2.7.1.tar Run docker docker run -it --privileged ubuntu-fastdds:v2.7.1 Run Hello example # Hello world example locate at /usr/local/eprosima/fastrtps/examples/cpp/dds/HelloWorldExample/bin Run tmux start new session Split window Run publisher in Pane1 Run subscriber in Pane2 tmux new session tmux new-session # # press c-b and \" to split horizontal publisher # -s number of samples # -i interval in ms ./DDSHelloWorldExample publisher -s 20 -i 500 Starting Publisher running 20 samples. Publisher matched. Message: HelloWorld with index: 1 SENT Message: HelloWorld with index: 2 SENT Message: HelloWorld with index: 3 SENT Message: HelloWorld with index: 4 SENT subscriber ./DDSHelloWorldExample subscriber # Subscriber matched. Message HelloWorld 1 RECEIVED Message HelloWorld 2 RECEIVED Message HelloWorld 3 RECEIVED Message HelloWorld 4 RECEIVED Profiles # export FASTRTPS_DEFAULT_PROFILES_FILE = /usr/local/eprosima/fastrtps/examples/cpp/dds/HelloWorldExample/bin/DEFAULT_FASTRTPS_PROFILES.xml","title":"eprosima fastdds hello"},{"location":"blog/DDS/eprosima/fastdds-hello/#objective","text":"Run fastdds basic example","title":"Objective"},{"location":"blog/DDS/eprosima/fastdds-hello/#setup","text":"Download eprosima fastdds docker download Load docker docker load -i <path>/ubuntu-fastdds v2.7.1.tar Run docker docker run -it --privileged ubuntu-fastdds:v2.7.1","title":"Setup"},{"location":"blog/DDS/eprosima/fastdds-hello/#run-hello-example","text":"Hello world example locate at /usr/local/eprosima/fastrtps/examples/cpp/dds/HelloWorldExample/bin Run tmux start new session Split window Run publisher in Pane1 Run subscriber in Pane2 tmux new session tmux new-session # # press c-b and \" to split horizontal publisher # -s number of samples # -i interval in ms ./DDSHelloWorldExample publisher -s 20 -i 500 Starting Publisher running 20 samples. Publisher matched. Message: HelloWorld with index: 1 SENT Message: HelloWorld with index: 2 SENT Message: HelloWorld with index: 3 SENT Message: HelloWorld with index: 4 SENT subscriber ./DDSHelloWorldExample subscriber # Subscriber matched. Message HelloWorld 1 RECEIVED Message HelloWorld 2 RECEIVED Message HelloWorld 3 RECEIVED Message HelloWorld 4 RECEIVED","title":"Run Hello example"},{"location":"blog/DDS/eprosima/fastdds-hello/#profiles","text":"export FASTRTPS_DEFAULT_PROFILES_FILE = /usr/local/eprosima/fastrtps/examples/cpp/dds/HelloWorldExample/bin/DEFAULT_FASTRTPS_PROFILES.xml","title":"Profiles"},{"location":"blog/Ignition/","tags":["simulation","gazebo"],"text":"All tutorial run on Fortress version Newer version garden for example move from ign to gz official site # gazebo sim IGN_GAZEBO_RESOURCE_PATH IGN_GAZEBO_SYSTEM_PLUGIN_PATH export IGN_GAZEBO_RESOURCE_PATH=~/projects/ign_tutorial/worlds:~/projects/ign_tutorial/models $ ign topic -t \"/model/vehicle_blue/cmd_vel\" -m ignition.msgs.Twist -p \"linear: {x: 0.5}, angular: {z: 0.05}\" /usr/share/ignition/ignition-gazebo6/worlds Resource # fortress LTS docs gazebodoc Tutorials # hello ignition gazebo/sim gui config ignition tutorial - building your own robot (gazebosim) ignition tutorial - moving the robot (gazebosim) moving robot using ros_gz camera sensor imu lidar and more (gazebosim)","title":"Ignition simulator"},{"location":"blog/Ignition/#official-site","text":"gazebo sim IGN_GAZEBO_RESOURCE_PATH IGN_GAZEBO_SYSTEM_PLUGIN_PATH export IGN_GAZEBO_RESOURCE_PATH=~/projects/ign_tutorial/worlds:~/projects/ign_tutorial/models $ ign topic -t \"/model/vehicle_blue/cmd_vel\" -m ignition.msgs.Twist -p \"linear: {x: 0.5}, angular: {z: 0.05}\" /usr/share/ignition/ignition-gazebo6/worlds","title":"official site"},{"location":"blog/Ignition/#resource","text":"fortress LTS docs gazebodoc","title":"Resource"},{"location":"blog/Ignition/#tutorials","text":"hello ignition gazebo/sim gui config ignition tutorial - building your own robot (gazebosim) ignition tutorial - moving the robot (gazebosim) moving robot using ros_gz camera sensor imu lidar and more (gazebosim)","title":"Tutorials"},{"location":"blog/Ignition/gui-control/","tags":["config"],"text":"Resource # GUI Configuration","title":"ignition gui control"},{"location":"blog/Ignition/gui-control/#resource","text":"GUI Configuration","title":"Resource"},{"location":"blog/Ignition/hello/","tags":["gazebo"],"text":"First try # Run gazebo with empty world from install worlds install worlds /usr/share/ignition/ignition-gazebo6 ign gazebo empty.sdf -v 4 # -v 4 => verbose ign cli # ign cli hello run custom world control gui options spawn and delete entities from cli ign command # ign --help The 'ign' command provides a command line interface to the ignition tools. ign <command> [ options ] List of available commands : help: Print this help text. ... gazebo: Run and manage Gazebo. msg: Print information about messages. ... topic: Print information about topics. service: Print information about services. ... ign gazebo command # ign gazebo --help -r Run simulation on start. -v [ --verbose ] [ arg ] Adjust the level of console output ( 0 ~4 ) . --gui-config [ arg ] Ignition GUI configuration file to load. Environment variables # Variable Description IGN_GAZEBO_RESOURCE_PATH Colon separated paths used to locate resources such as worlds and models. IGN_GAZEBO_SYSTEM_PLUGIN_PATH Colon separated paths used to locate system plugins. for more check ign gazebo \u2013help Custom world.sdf # load minimal world control gui layout spawn / delete model from cli Set ignition resource path export IGN_GAZEBO_RESOURCE_PATH = /home/user/projects/ign_tutorial/ my_empty.sdf <sdf version= \"1.6\" > <world name= \"empty\" > <physics name= \"1ms\" type= \"ignored\" > <max_step_size> 0.001 </max_step_size> <real_time_factor> 1.0 </real_time_factor> </physics> <gui> <plugin filename= \"GzScene3D\" name= \"3D View\" > <ignition-gui> <title> 3D View </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> <engine> ogre2 </engine> <scene> scene </scene> <ambient_light> 0.4 0.4 0.4 </ambient_light> <background_color> 0.8 0.8 0.8 </background_color> </plugin> </gui> <plugin filename= \"ignition-gazebo-physics-system\" name= \"ignition::gazebo::systems::Physics\" > </plugin> <plugin filename= \"ignition-gazebo-user-commands-system\" name= \"ignition::gazebo::systems::UserCommands\" > </plugin> <plugin filename= \"ignition-gazebo-scene-broadcaster-system\" name= \"ignition::gazebo::systems::SceneBroadcaster\" > </plugin> <plugin filename= \"ignition-gazebo-contact-system\" name= \"ignition::gazebo::systems::Contact\" > </plugin> <light type= \"directional\" name= \"sun\" > <cast_shadows> true </cast_shadows> <pose> 0 0 10 0 0 0 </pose> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.2 0.2 0.2 1 </specular> <attenuation> <range> 1000 </range> <constant> 0.9 </constant> <linear> 0.01 </linear> <quadratic> 0.001 </quadratic> </attenuation> <direction> -0.5 0.1 -0.9 </direction> </light> <model name= \"ground_plane\" > <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> </collision> <visual name= \"visual\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> <material> <ambient> 0.8 0.8 0.8 1 </ambient> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.8 0.8 0.8 1 </specular> </material> </visual> </link> </model> </world> </sdf> Everything control by plugin Spawn and remove models # user-commands-system # Allow user control from cli <plugin filename= \"ignition-gazebo-user-commands-system\" name= \"ignition::gazebo::systems::UserCommands\" > </plugin> ign service / msg command # # list services ign service --list ... /world/empty/create ... /world/empty/remove ... # more info about the service ign service --info --service /world/empty/remove # result Service providers [ Address, Request Message Type, Response Message Type ] : tcp://172.18.0.1:45365, ignition.msgs.Entity, ignition.msgs.Boolean # Service has two type of message # request: ignition.msgs.Entity # response: ignition.msgs.Boolean # message fields ## serach for boolean msg ign msg --list | grep Boolean ign_msgs.Boolean # show msg fields with --info argument user@lap2:~/projects/blog$ ign msg --info ign_msgs.Boolean Name: ignition.msgs.Boolean File: ignition/msgs/boolean.proto message Boolean { .ignition.msgs.Header header = 1 ; bool data = 2 ; } Spawn SDF # using ign service to Spawn and remove entities from SDF file ign service -s /world/empty/create --reqtype ignition.msgs.EntityFactory --reptype ignition.msgs.Boolean --timeout 300 --req 'sdf_filename: \"models/my_ball/model.sdf\" pose: {position: {z: 5}} name: \"new_name\"' from SDF string Remove # ign service -s /world/empty/remove \\ --reqtype ignition.msgs.Entity \\ --reptype ignition.msgs.Boolean \\ --timeout 300 \\ --req 'name: \"new_name\" type: MODEL' models/my_ball/model.sdf <sdf version= \"1.6\" > <model name= \"spawned_model\" > <link name= \"link\" > <visual name= \"visual\" > <geometry> <sphere> <radius> 2.0 </radius> </sphere> </geometry> </visual> <collision name= \"visual\" > <geometry> <sphere> <radius> 2.0 </radius> </sphere> </geometry> </collision> </link> </model> </sdf>","title":"gazebo ignition hello world"},{"location":"blog/Ignition/hello/#first-try","text":"Run gazebo with empty world from install worlds install worlds /usr/share/ignition/ignition-gazebo6 ign gazebo empty.sdf -v 4 # -v 4 => verbose","title":"First try"},{"location":"blog/Ignition/hello/#ign-cli","text":"ign cli hello run custom world control gui options spawn and delete entities from cli","title":"ign cli"},{"location":"blog/Ignition/hello/#ign-command","text":"ign --help The 'ign' command provides a command line interface to the ignition tools. ign <command> [ options ] List of available commands : help: Print this help text. ... gazebo: Run and manage Gazebo. msg: Print information about messages. ... topic: Print information about topics. service: Print information about services. ...","title":"ign command"},{"location":"blog/Ignition/hello/#ign-gazebo-command","text":"ign gazebo --help -r Run simulation on start. -v [ --verbose ] [ arg ] Adjust the level of console output ( 0 ~4 ) . --gui-config [ arg ] Ignition GUI configuration file to load.","title":"ign gazebo command"},{"location":"blog/Ignition/hello/#environment-variables","text":"Variable Description IGN_GAZEBO_RESOURCE_PATH Colon separated paths used to locate resources such as worlds and models. IGN_GAZEBO_SYSTEM_PLUGIN_PATH Colon separated paths used to locate system plugins. for more check ign gazebo \u2013help","title":"Environment variables"},{"location":"blog/Ignition/hello/#custom-worldsdf","text":"load minimal world control gui layout spawn / delete model from cli Set ignition resource path export IGN_GAZEBO_RESOURCE_PATH = /home/user/projects/ign_tutorial/ my_empty.sdf <sdf version= \"1.6\" > <world name= \"empty\" > <physics name= \"1ms\" type= \"ignored\" > <max_step_size> 0.001 </max_step_size> <real_time_factor> 1.0 </real_time_factor> </physics> <gui> <plugin filename= \"GzScene3D\" name= \"3D View\" > <ignition-gui> <title> 3D View </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> <engine> ogre2 </engine> <scene> scene </scene> <ambient_light> 0.4 0.4 0.4 </ambient_light> <background_color> 0.8 0.8 0.8 </background_color> </plugin> </gui> <plugin filename= \"ignition-gazebo-physics-system\" name= \"ignition::gazebo::systems::Physics\" > </plugin> <plugin filename= \"ignition-gazebo-user-commands-system\" name= \"ignition::gazebo::systems::UserCommands\" > </plugin> <plugin filename= \"ignition-gazebo-scene-broadcaster-system\" name= \"ignition::gazebo::systems::SceneBroadcaster\" > </plugin> <plugin filename= \"ignition-gazebo-contact-system\" name= \"ignition::gazebo::systems::Contact\" > </plugin> <light type= \"directional\" name= \"sun\" > <cast_shadows> true </cast_shadows> <pose> 0 0 10 0 0 0 </pose> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.2 0.2 0.2 1 </specular> <attenuation> <range> 1000 </range> <constant> 0.9 </constant> <linear> 0.01 </linear> <quadratic> 0.001 </quadratic> </attenuation> <direction> -0.5 0.1 -0.9 </direction> </light> <model name= \"ground_plane\" > <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> </collision> <visual name= \"visual\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> <material> <ambient> 0.8 0.8 0.8 1 </ambient> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.8 0.8 0.8 1 </specular> </material> </visual> </link> </model> </world> </sdf> Everything control by plugin","title":"Custom world.sdf"},{"location":"blog/Ignition/hello/#spawn-and-remove-models","text":"","title":"Spawn and remove models"},{"location":"blog/Ignition/hello/#user-commands-system","text":"Allow user control from cli <plugin filename= \"ignition-gazebo-user-commands-system\" name= \"ignition::gazebo::systems::UserCommands\" > </plugin>","title":"user-commands-system"},{"location":"blog/Ignition/hello/#ign-service--msg-command","text":"# list services ign service --list ... /world/empty/create ... /world/empty/remove ... # more info about the service ign service --info --service /world/empty/remove # result Service providers [ Address, Request Message Type, Response Message Type ] : tcp://172.18.0.1:45365, ignition.msgs.Entity, ignition.msgs.Boolean # Service has two type of message # request: ignition.msgs.Entity # response: ignition.msgs.Boolean # message fields ## serach for boolean msg ign msg --list | grep Boolean ign_msgs.Boolean # show msg fields with --info argument user@lap2:~/projects/blog$ ign msg --info ign_msgs.Boolean Name: ignition.msgs.Boolean File: ignition/msgs/boolean.proto message Boolean { .ignition.msgs.Header header = 1 ; bool data = 2 ; }","title":"ign service / msg command"},{"location":"blog/Ignition/hello/#spawn-sdf","text":"using ign service to Spawn and remove entities from SDF file ign service -s /world/empty/create --reqtype ignition.msgs.EntityFactory --reptype ignition.msgs.Boolean --timeout 300 --req 'sdf_filename: \"models/my_ball/model.sdf\" pose: {position: {z: 5}} name: \"new_name\"' from SDF string","title":"Spawn SDF"},{"location":"blog/Ignition/hello/#remove","text":"ign service -s /world/empty/remove \\ --reqtype ignition.msgs.Entity \\ --reptype ignition.msgs.Boolean \\ --timeout 300 \\ --req 'name: \"new_name\" type: MODEL' models/my_ball/model.sdf <sdf version= \"1.6\" > <model name= \"spawned_model\" > <link name= \"link\" > <visual name= \"visual\" > <geometry> <sphere> <radius> 2.0 </radius> </sphere> </geometry> </visual> <collision name= \"visual\" > <geometry> <sphere> <radius> 2.0 </radius> </sphere> </geometry> </collision> </link> </model> </sdf>","title":"Remove"},{"location":"blog/Ignition/moving_robot_ex/","tags":["ros2","ignition","bridge"],"text":"sudo apt install ros-humble-ros-ign diff drive # ros2 command ros2 topic pub -1 /model/vehicle_blue/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0}}\" ign command ign topic -t \"/model/vehicle_green/cmd_vel\" -m ignition.msgs.Twist -p \"linear: {x: 0.5}, angular: {z: 0.05}\" launch # bridge # bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/model/vehicle_blue/cmd_vel@geometry_msgs/msg/Twist@ignition.msgs.Twist' , '/model/vehicle_blue/odometry@nav_msgs/msg/Odometry@ignition.msgs.Odometry' , '/model/vehicle_green/cmd_vel@geometry_msgs/msg/Twist@ignition.msgs.Twist' , '/model/vehicle_green/odometry@nav_msgs/msg/Odometry@ignition.msgs.Odometry' ], parameters = [{ 'qos_overrides./model/vehicle_blue.subscriber.reliability' : 'reliable' , 'qos_overrides./model/vehicle_green.subscriber.reliability' : 'reliable' }], output = 'screen' ) # topic@ros2 msg type@ignition msg type / model / vehicle_blue / cmd_vel @geometry_msgs / msg / Twist @ignition . msgs . Twist","title":"ignition ros2 bridge"},{"location":"blog/Ignition/moving_robot_ex/#diff-drive","text":"ros2 command ros2 topic pub -1 /model/vehicle_blue/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0}}\" ign command ign topic -t \"/model/vehicle_green/cmd_vel\" -m ignition.msgs.Twist -p \"linear: {x: 0.5}, angular: {z: 0.05}\"","title":"diff drive"},{"location":"blog/Ignition/moving_robot_ex/#launch","text":"","title":"launch"},{"location":"blog/Ignition/moving_robot_ex/#bridge","text":"bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/model/vehicle_blue/cmd_vel@geometry_msgs/msg/Twist@ignition.msgs.Twist' , '/model/vehicle_blue/odometry@nav_msgs/msg/Odometry@ignition.msgs.Odometry' , '/model/vehicle_green/cmd_vel@geometry_msgs/msg/Twist@ignition.msgs.Twist' , '/model/vehicle_green/odometry@nav_msgs/msg/Odometry@ignition.msgs.Odometry' ], parameters = [{ 'qos_overrides./model/vehicle_blue.subscriber.reliability' : 'reliable' , 'qos_overrides./model/vehicle_green.subscriber.reliability' : 'reliable' }], output = 'screen' ) # topic@ros2 msg type@ignition msg type / model / vehicle_blue / cmd_vel @geometry_msgs / msg / Twist @ignition . msgs . Twist","title":"bridge"},{"location":"blog/Ignition/physics/","text":"Reference # Physics simulation concepts Louise Pouble","title":"Reference"},{"location":"blog/Ignition/physics/#reference","text":"Physics simulation concepts Louise Pouble","title":"Reference"},{"location":"blog/Ignition/tips/","tags":["sdf","tips"],"text":"validate / check sdf file # ign sdf -k <sdf.file>","title":"SDF specification and tools"},{"location":"blog/Ignition/tips/#validate--check-sdf-file","text":"ign sdf -k <sdf.file>","title":"validate / check sdf file"},{"location":"blog/Ignition/programing/","text":"demos # ignition dev stand alone, hello example","title":"Index"},{"location":"blog/Ignition/programing/#demos","text":"ignition dev stand alone, hello example","title":"demos"},{"location":"blog/Ignition/programing/ignition_dev_hello/","tags":["ignition","ign-transport"],"text":"Objective # Subscriber to ign topic demo # project # \u251c\u2500\u2500 build \u251c\u2500\u2500 main.cpp \u2514\u2500\u2500 CMakeLists.txt code # main.cpp #include <iostream> #include \"ignition/msgs/clock.pb.h\" #include \"ignition/transport/Node.hh\" void cb ( const ignition :: msgs :: Clock & msg ) { std :: cout << msg . DebugString () << std :: endl ; } int main ( int , char ** ) { std :: cout << \"Hello, ignition ! \\n \" ; std :: string topic = \"/clock\" ; ignition :: transport :: Node node ; node . Subscribe ( topic , cb ); ignition :: transport :: waitForShutdown (); } CMakeLists.txt cmake_minimum_required ( VERSION 3.10.0 ) project ( ign_demos VERSION 0.1.0 ) find_package ( ignition - transport11 QUIET REQUIRED OPTIONAL_COMPONENTS log ) set ( IGN_TRANSPORT_VER $ { ignition - transport11_VERSION_MAJOR }) add_executable ( main main . cpp ) target_link_libraries ( main ignition - transport$ { IGN_TRANSPORT_VER } :: core ) Run demo # terminal1 ign gazebo -r terminal2 ./main system { sec: 1666468493 nsec: 778510659 } real { sec: 15 nsec: 459216049 } sim { sec: 14 nsec: 393000000 } Clock topic # ign topic --info -t /clock # Publishers [ Address, Message Type ] : tcp://172.18.0.1:34283, ignition.msgs.Clock ign msg --info ignition.msgs.Clock # Name: ignition.msgs.Clock File: ignition/msgs/clock.proto message Clock { .ignition.msgs.Header header = 1 ; .ignition.msgs.Time system = 2 ; .ignition.msgs.Time real = 3 ; .ignition.msgs.Time sim = 4 ; }","title":"Ignition programing"},{"location":"blog/Ignition/programing/ignition_dev_hello/#objective","text":"Subscriber to ign topic","title":"Objective"},{"location":"blog/Ignition/programing/ignition_dev_hello/#demo","text":"","title":"demo"},{"location":"blog/Ignition/programing/ignition_dev_hello/#project","text":"\u251c\u2500\u2500 build \u251c\u2500\u2500 main.cpp \u2514\u2500\u2500 CMakeLists.txt","title":"project"},{"location":"blog/Ignition/programing/ignition_dev_hello/#code","text":"main.cpp #include <iostream> #include \"ignition/msgs/clock.pb.h\" #include \"ignition/transport/Node.hh\" void cb ( const ignition :: msgs :: Clock & msg ) { std :: cout << msg . DebugString () << std :: endl ; } int main ( int , char ** ) { std :: cout << \"Hello, ignition ! \\n \" ; std :: string topic = \"/clock\" ; ignition :: transport :: Node node ; node . Subscribe ( topic , cb ); ignition :: transport :: waitForShutdown (); } CMakeLists.txt cmake_minimum_required ( VERSION 3.10.0 ) project ( ign_demos VERSION 0.1.0 ) find_package ( ignition - transport11 QUIET REQUIRED OPTIONAL_COMPONENTS log ) set ( IGN_TRANSPORT_VER $ { ignition - transport11_VERSION_MAJOR }) add_executable ( main main . cpp ) target_link_libraries ( main ignition - transport$ { IGN_TRANSPORT_VER } :: core )","title":"code"},{"location":"blog/Ignition/programing/ignition_dev_hello/#run-demo","text":"terminal1 ign gazebo -r terminal2 ./main system { sec: 1666468493 nsec: 778510659 } real { sec: 15 nsec: 459216049 } sim { sec: 14 nsec: 393000000 }","title":"Run demo"},{"location":"blog/Ignition/programing/ignition_dev_hello/#clock-topic","text":"ign topic --info -t /clock # Publishers [ Address, Message Type ] : tcp://172.18.0.1:34283, ignition.msgs.Clock ign msg --info ignition.msgs.Clock # Name: ignition.msgs.Clock File: ignition/msgs/clock.proto message Clock { .ignition.msgs.Header header = 1 ; .ignition.msgs.Time system = 2 ; .ignition.msgs.Time real = 3 ; .ignition.msgs.Time sim = 4 ; }","title":"Clock topic"},{"location":"blog/Ignition/sensors/camera/","tags":["camera","sensors"],"text":"check camera_sensor.sdf at example worlds don\u2019t forget world sensors plugin <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> <sensor name= \"camera\" type= \"camera\" > <camera> <horizontal_fov> 1.047 </horizontal_fov> <image> <width> 320 </width> <height> 240 </height> </image> <clip> <near> 0.1 </near> <far> 100 </far> </clip> </camera> <always_on> 1 </always_on> <update_rate> 15 </update_rate> <visualize> true </visualize> <topic> /vehicle/front_camera </topic> </sensor> ign topic --list | grep camera # result /gui/camera/pose /vehicle/camera_info /vehicle/front_camera # info ign topic --info --topic /vehicle/front_camera Publishers [ Address, Message Type ] : tcp://172.18.0.1:45921, ignition.msgs.Image # echo ign topic --echo -t /vehicle/front_camera # msg ign msg --info ign_msgs.Image Name: ignition.msgs.Image File: ignition/msgs/image.proto message Image { .ignition.msgs.Header header = 1 ; uint32 width = 2 ; uint32 height = 3 ; uint32 step = 4 ; bytes data = 5 ; .ignition.msgs.PixelFormatType pixel_format_type = 6 ; } ignition image_display # Add ImageDisplay to sdf # Add ImageDisplay plugin under gui tag <plugin filename= \"ImageDisplay\" name= \"Image Display\" > <ignition-gui> <property key= \"state\" type= \"string\" > docked </property> </ignition-gui> </plugin> ros2 bridge # ros_gz_bridge https://github.com/gazebosim/ros_gz/tree/humble/ros_gz_bridge don\u2019t forget to hit play, or Gazebo Sim won\u2019t generate any images terminal2 ros2 run ros_gz_bridge parameter_bridge /vehicle/front_camera@sensor_msgs/msg/Image@ignition.msgs.Image terminal3 ros2 run rqt_image_view rqt_image_view /vehicle/front_camera","title":"ignition camera sensor"},{"location":"blog/Ignition/sensors/camera/#ignition-image_display","text":"","title":"ignition image_display"},{"location":"blog/Ignition/sensors/camera/#add-imagedisplay-to-sdf","text":"Add ImageDisplay plugin under gui tag <plugin filename= \"ImageDisplay\" name= \"Image Display\" > <ignition-gui> <property key= \"state\" type= \"string\" > docked </property> </ignition-gui> </plugin>","title":"Add ImageDisplay to sdf"},{"location":"blog/Ignition/sensors/camera/#ros2-bridge","text":"ros_gz_bridge https://github.com/gazebosim/ros_gz/tree/humble/ros_gz_bridge don\u2019t forget to hit play, or Gazebo Sim won\u2019t generate any images terminal2 ros2 run ros_gz_bridge parameter_bridge /vehicle/front_camera@sensor_msgs/msg/Image@ignition.msgs.Image terminal3 ros2 run rqt_image_view rqt_image_view /vehicle/front_camera","title":"ros2 bridge"},{"location":"blog/Ignition/sensors/lidar/","tags":["lidar","sensors"],"text":"Add sensor plugin under <world> tag <plugin filename= \"libignition-gazebo-sensors-system.so\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> LIDAR sensor example # <sensor name= 'gpu_lidar' type= 'gpu_lidar' > \" <pose relative_to= 'lidar_frame' > 0 0 0 0 0 0 </pose> <topic> lidar </topic> <update_rate> 10 </update_rate> <lidar> <scan> <horizontal> <samples> 640 </samples> <resolution> 1 </resolution> <min_angle> -1.396263 </min_angle> <max_angle> 1.396263 </max_angle> </horizontal> <vertical> <samples> 1 </samples> <resolution> 1 </resolution> <min_angle> 0.0 </min_angle> <max_angle> 0.0 </max_angle> </vertical> </scan> <range> <min> 0.08 </min> <max> 10.0 </max> <resolution> 0.01 </resolution> </range> </lidar> <always_on> 1 </always_on> <visualize> true </visualize> </sensor> ign LaserScan msg # ign msg --info ign_msgs.LaserScan # Name: ignition.msgs.LaserScan File: ignition/msgs/laserscan.proto message LaserScan { .ignition.msgs.Header header = 1 ; string frame = 2 ; .ignition.msgs.Pose world_pose = 3 ; double angle_min = 4 ; double angle_max = 5 ; double angle_step = 6 ; double range_min = 7 ; double range_max = 8 ; uint32 count = 9 ; double vertical_angle_min = 10 ; double vertical_angle_max = 11 ; double vertical_angle_step = 12 ; uint32 vertical_count = 13 ; repeated double ranges = 14 ; repeated double intensities = 15 ; show in rviz # using ros_gz_bridge ros_gz_bridge ros2 run ros_gz_bridge parameter_bridge /lidar@sensor_msgs/msg/LaserScan@ignition.msgs.LaserScan ros2 run rviz2 rviz2 settings # field value Fixed Frame Topic size 0.1 # get frame from message ign topic --echo -t /lidar | grep -i frame","title":"ignition lidar sensor"},{"location":"blog/Ignition/sensors/lidar/#lidar-sensor-example","text":"<sensor name= 'gpu_lidar' type= 'gpu_lidar' > \" <pose relative_to= 'lidar_frame' > 0 0 0 0 0 0 </pose> <topic> lidar </topic> <update_rate> 10 </update_rate> <lidar> <scan> <horizontal> <samples> 640 </samples> <resolution> 1 </resolution> <min_angle> -1.396263 </min_angle> <max_angle> 1.396263 </max_angle> </horizontal> <vertical> <samples> 1 </samples> <resolution> 1 </resolution> <min_angle> 0.0 </min_angle> <max_angle> 0.0 </max_angle> </vertical> </scan> <range> <min> 0.08 </min> <max> 10.0 </max> <resolution> 0.01 </resolution> </range> </lidar> <always_on> 1 </always_on> <visualize> true </visualize> </sensor>","title":"LIDAR sensor example"},{"location":"blog/Ignition/sensors/lidar/#ign-laserscan-msg","text":"ign msg --info ign_msgs.LaserScan # Name: ignition.msgs.LaserScan File: ignition/msgs/laserscan.proto message LaserScan { .ignition.msgs.Header header = 1 ; string frame = 2 ; .ignition.msgs.Pose world_pose = 3 ; double angle_min = 4 ; double angle_max = 5 ; double angle_step = 6 ; double range_min = 7 ; double range_max = 8 ; uint32 count = 9 ; double vertical_angle_min = 10 ; double vertical_angle_max = 11 ; double vertical_angle_step = 12 ; uint32 vertical_count = 13 ; repeated double ranges = 14 ; repeated double intensities = 15 ;","title":"ign LaserScan msg"},{"location":"blog/Ignition/sensors/lidar/#show-in-rviz","text":"using ros_gz_bridge ros_gz_bridge ros2 run ros_gz_bridge parameter_bridge /lidar@sensor_msgs/msg/LaserScan@ignition.msgs.LaserScan ros2 run rviz2 rviz2","title":"show in rviz"},{"location":"blog/Ignition/sensors/lidar/#settings","text":"field value Fixed Frame Topic size 0.1 # get frame from message ign topic --echo -t /lidar | grep -i frame","title":"settings"},{"location":"blog/Misl/aptly/","tags":["aptly","apt"],"text":"Aptly is a free Debian repository management tool that allows you to mirror remote repositories, manage local package repositories, take snapshots, pull new versions of packages along with dependencies LAB - create local repo # aptly -distribution = \"focal\" -architectures = amd64 repo create my_local_repo gpg using gpg version 1 replace all the gpg command with gpg1 command Reference # tutorials","title":"Aptly Swiss army knife for Debian repository management"},{"location":"blog/Misl/aptly/#lab---create-local-repo","text":"aptly -distribution = \"focal\" -architectures = amd64 repo create my_local_repo gpg using gpg version 1 replace all the gpg command with gpg1 command","title":"LAB - create local repo"},{"location":"blog/Misl/aptly/#reference","text":"tutorials","title":"Reference"},{"location":"blog/Misl/crypt/veracrypt/","tags":["encryption","pgp"],"text":"Reference # veracrypt download How to Verify PGP Signature of Downloaded Software on Linux Use veracrypt ubuntu 22.04 How to Use VeraCrypt on Command Line to Encrypt Drives on Ubuntu","title":"Hello VeraCrypt"},{"location":"blog/Misl/crypt/veracrypt/#reference","text":"veracrypt download How to Verify PGP Signature of Downloaded Software on Linux Use veracrypt ubuntu 22.04 How to Use VeraCrypt on Command Line to Encrypt Drives on Ubuntu","title":"Reference"},{"location":"blog/Misl/docker/","tags":["docker"],"text":"Docker image with none root user Run X11 app on docker image Docker with nvida support Reference # Docker Build: A Beginner\u2019s Guide to Building Docker Images","title":"Docker"},{"location":"blog/Misl/docker/#reference","text":"Docker Build: A Beginner\u2019s Guide to Building Docker Images","title":"Reference"},{"location":"blog/Misl/docker/docker_gui_tester/","tags":["docker"],"text":"Run x11 app on docker image Dockerfile # Install x11-app package Run xeyes FROM ubuntu:22.04 AS base ENV DEBIAN_FRONTEND = noninteractive ARG USERNAME = user ARG USER_UID = 1000 ARG USER_GID = $USER_UID # Create a non-root user RUN groupadd --gid $USER_GID $USERNAME \\ && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\ # [ Optional ] Add sudo support for the non-root user && apt-get update \\ && apt-get install -y sudo \\ && echo $USERNAME ALL = \\( root \\) NOPASSWD:ALL > /etc/sudoers.d/ $USERNAME \\ && chmod 0440 /etc/sudoers.d/ $USERNAME \\ # Cleanup && rm -rf /var/lib/apt/lists/* \\ && echo 'export PS1=\"\ud83d\udc33 \\u@\\h: \\w\\a\\ # \"' > /home/ $USERNAME /.bashrc RUN apt-get update \\ && apt-get install -y x11-apps CMD [ \"/usr/bin/xeyes\" ] Usage # !!! tip Don\u2019t forget The xhost command adds or deletes host names on the list of machines from which the X Server accepts connections. xhost + local:docker cli # docker run -it \\ --rm \\ --user user \\ --workdir /home/user \\ --hostname dev \\ -e DISPLAY=$DISPLAY \\ -v /tmp/.X11-unix:/tmp/.X11-unix \\ ubuntu:gui docker-compose # docker-compose.yaml version : \"3.0\" services : ubuntu : image : ubuntu:gui hostname : dev user : user working_dir : /home/user environment : - DISPLAY=${DISPLAY} volumes : - /tmp/.X11-unix:/tmp/.X11-unix network_mode : host","title":"Run GUI application on docker"},{"location":"blog/Misl/docker/docker_gui_tester/#dockerfile","text":"Install x11-app package Run xeyes FROM ubuntu:22.04 AS base ENV DEBIAN_FRONTEND = noninteractive ARG USERNAME = user ARG USER_UID = 1000 ARG USER_GID = $USER_UID # Create a non-root user RUN groupadd --gid $USER_GID $USERNAME \\ && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\ # [ Optional ] Add sudo support for the non-root user && apt-get update \\ && apt-get install -y sudo \\ && echo $USERNAME ALL = \\( root \\) NOPASSWD:ALL > /etc/sudoers.d/ $USERNAME \\ && chmod 0440 /etc/sudoers.d/ $USERNAME \\ # Cleanup && rm -rf /var/lib/apt/lists/* \\ && echo 'export PS1=\"\ud83d\udc33 \\u@\\h: \\w\\a\\ # \"' > /home/ $USERNAME /.bashrc RUN apt-get update \\ && apt-get install -y x11-apps CMD [ \"/usr/bin/xeyes\" ]","title":"Dockerfile"},{"location":"blog/Misl/docker/docker_gui_tester/#usage","text":"!!! tip Don\u2019t forget The xhost command adds or deletes host names on the list of machines from which the X Server accepts connections. xhost + local:docker","title":"Usage"},{"location":"blog/Misl/docker/docker_gui_tester/#cli","text":"docker run -it \\ --rm \\ --user user \\ --workdir /home/user \\ --hostname dev \\ -e DISPLAY=$DISPLAY \\ -v /tmp/.X11-unix:/tmp/.X11-unix \\ ubuntu:gui","title":"cli"},{"location":"blog/Misl/docker/docker_gui_tester/#docker-compose","text":"docker-compose.yaml version : \"3.0\" services : ubuntu : image : ubuntu:gui hostname : dev user : user working_dir : /home/user environment : - DISPLAY=${DISPLAY} volumes : - /tmp/.X11-unix:/tmp/.X11-unix network_mode : host","title":"docker-compose"},{"location":"blog/Misl/docker/docker_none_root_user/","tags":["docker"],"text":"Create docker image base on ubuntu 22.04 Add user user to image Dockerfile # Add user user to image Install sudo Add user to sudoers Set prompt FROM ubuntu:22.04 AS base ENV DEBIAN_FRONTEND = noninteractive ARG USERNAME = user ARG USER_UID = 1000 ARG USER_GID = $USER_UID # Create a non-root user RUN groupadd --gid $USER_GID $USERNAME \\ && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\ # [ Optional ] Add sudo support for the non-root user && apt-get update \\ && apt-get install -y sudo \\ && echo $USERNAME ALL = \\( root \\) NOPASSWD:ALL > /etc/sudoers.d/ $USERNAME \\ && chmod 0440 /etc/sudoers.d/ $USERNAME \\ # Cleanup && rm -rf /var/lib/apt/lists/* Usage # Run image with user context set hostname and workdir cli # docker run -it \\ --rm \\ --user user \\ --workdir /home/user \\ --hostname dev \\ ubuntu:user \\ docker-compose # version: \"3.0\" services: ubuntu: image: ubuntu:user hostname: dev user: user working_dir: /home/user","title":"Docker with none ROOT user"},{"location":"blog/Misl/docker/docker_none_root_user/#dockerfile","text":"Add user user to image Install sudo Add user to sudoers Set prompt FROM ubuntu:22.04 AS base ENV DEBIAN_FRONTEND = noninteractive ARG USERNAME = user ARG USER_UID = 1000 ARG USER_GID = $USER_UID # Create a non-root user RUN groupadd --gid $USER_GID $USERNAME \\ && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\ # [ Optional ] Add sudo support for the non-root user && apt-get update \\ && apt-get install -y sudo \\ && echo $USERNAME ALL = \\( root \\) NOPASSWD:ALL > /etc/sudoers.d/ $USERNAME \\ && chmod 0440 /etc/sudoers.d/ $USERNAME \\ # Cleanup && rm -rf /var/lib/apt/lists/*","title":"Dockerfile"},{"location":"blog/Misl/docker/docker_none_root_user/#usage","text":"Run image with user context set hostname and workdir","title":"Usage"},{"location":"blog/Misl/docker/docker_none_root_user/#cli","text":"docker run -it \\ --rm \\ --user user \\ --workdir /home/user \\ --hostname dev \\ ubuntu:user \\","title":"cli"},{"location":"blog/Misl/docker/docker_none_root_user/#docker-compose","text":"version: \"3.0\" services: ubuntu: image: ubuntu:user hostname: dev user: user working_dir: /home/user","title":"docker-compose"},{"location":"blog/Misl/docker/docker_nvidia_install/","tags":["docker","nvidia"],"text":"Prerequisite Install nvidia driver on host machine Install docker follow digitalocean Install nvidia-container-toolkit Check Install # nvidia-container-toolkit # distribution = $( . /etc/os-release ; echo $ID$VERSION_ID ) # key curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - # apt curl -s -L https://nvidia.github.io/nvidia-docker/ $distribution /nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list # install sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit Note nvidia-docker.list point to ubuntu 18.04 Checking # first run docker run --gpus all nvidia/cuda:10.0-base nvidia-smi Unable to find image 'nvidia/cuda:10.0-base' locally 10 .0-base: Pulling from nvidia/cuda 25fa05cd42bd: Pull complete 2d6e353a95ec: Pull complete df0051b6f25d: Pull complete ad1e3e71b0c0: Pull complete d26e14de793e: Pull complete Digest: sha256:2f608ac9f6c6a9abb34112ccd85058877f669d4c976d7e3fc1c7cafcf5ef7dff Status: Downloaded newer image for nvidia/cuda:10.0-base Fri Jun 3 05 :56:41 2022 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 510 .73.05 Driver Version: 510 .73.05 CUDA Version: 11 .6 | | -------------------------------+----------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | | =============================== + ====================== + ====================== | | 0 NVIDIA GeForce ... Off | 00000000 :58:00.0 Off | N/A | | N/A 46C P0 N/A / N/A | 9MiB / 2048MiB | 0 % Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | | ============================================================================= | +-----------------------------------------------------------------------------+ Note --gps all arg in docker run command gui # xhost +local:docker docker run --gpus all -it \\ -e DISPLAY = $DISPLAY \\ -v /tmp/.X11-unix:/tmp/.X11-unix \\ nathzi1505:darknet bash Reference # How To Install and Use Docker on Ubuntu 20.04 nvidia docker docker nvidia How to get your CUDA application running in a Docker container","title":"Install docker with nvidia support"},{"location":"blog/Misl/docker/docker_nvidia_install/#install","text":"","title":"Install"},{"location":"blog/Misl/docker/docker_nvidia_install/#nvidia-container-toolkit","text":"distribution = $( . /etc/os-release ; echo $ID$VERSION_ID ) # key curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - # apt curl -s -L https://nvidia.github.io/nvidia-docker/ $distribution /nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list # install sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit Note nvidia-docker.list point to ubuntu 18.04","title":"nvidia-container-toolkit"},{"location":"blog/Misl/docker/docker_nvidia_install/#checking","text":"first run docker run --gpus all nvidia/cuda:10.0-base nvidia-smi Unable to find image 'nvidia/cuda:10.0-base' locally 10 .0-base: Pulling from nvidia/cuda 25fa05cd42bd: Pull complete 2d6e353a95ec: Pull complete df0051b6f25d: Pull complete ad1e3e71b0c0: Pull complete d26e14de793e: Pull complete Digest: sha256:2f608ac9f6c6a9abb34112ccd85058877f669d4c976d7e3fc1c7cafcf5ef7dff Status: Downloaded newer image for nvidia/cuda:10.0-base Fri Jun 3 05 :56:41 2022 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 510 .73.05 Driver Version: 510 .73.05 CUDA Version: 11 .6 | | -------------------------------+----------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | | =============================== + ====================== + ====================== | | 0 NVIDIA GeForce ... Off | 00000000 :58:00.0 Off | N/A | | N/A 46C P0 N/A / N/A | 9MiB / 2048MiB | 0 % Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | | ============================================================================= | +-----------------------------------------------------------------------------+ Note --gps all arg in docker run command","title":"Checking"},{"location":"blog/Misl/docker/docker_nvidia_install/#gui","text":"xhost +local:docker docker run --gpus all -it \\ -e DISPLAY = $DISPLAY \\ -v /tmp/.X11-unix:/tmp/.X11-unix \\ nathzi1505:darknet bash","title":"gui"},{"location":"blog/Misl/docker/docker_nvidia_install/#reference","text":"How To Install and Use Docker on Ubuntu 20.04 nvidia docker docker nvidia How to get your CUDA application running in a Docker container","title":"Reference"},{"location":"blog/Misl/git/git_bundle/","tags":["git","bundle"],"text":"Git bundle is a utility that allow you to pack repository, branch, specific commit to signal file and expend them easily. Demo: Bundle Range of commits # bundle # view commits git log --oneline origin/master..master bundle commits git bundle create patch.bundle origin/master..master Unbundling # git branch temp git switch temp git fetch -u patch.bundle master:temp git switch master git merge temp git branch --delete temp Reference # A Guide for Bundling Git Repos","title":"git bundle"},{"location":"blog/Misl/git/git_bundle/#demo-bundle-range-of-commits","text":"","title":"Demo: Bundle Range of commits"},{"location":"blog/Misl/git/git_bundle/#bundle","text":"view commits git log --oneline origin/master..master bundle commits git bundle create patch.bundle origin/master..master","title":"bundle"},{"location":"blog/Misl/git/git_bundle/#unbundling","text":"git branch temp git switch temp git fetch -u patch.bundle master:temp git switch master git merge temp git branch --delete temp","title":"Unbundling"},{"location":"blog/Misl/git/git_bundle/#reference","text":"A Guide for Bundling Git Repos","title":"Reference"},{"location":"blog/Misl/git/github_pro_tips/","tags":["github"],"text":"Fuzzy file finder # Press t in any repository to access it and start typing the name of the file you want to find Browse files and directories with ease # Great browser extension called Octotree helps you navigate directories, and open files with a familiar tree-like structure. Reference # GitHub Protips: Tips, tricks, hacks, and secrets from Lee Reilly","title":"github pro tips"},{"location":"blog/Misl/git/github_pro_tips/#fuzzy-file-finder","text":"Press t in any repository to access it and start typing the name of the file you want to find","title":"Fuzzy file finder"},{"location":"blog/Misl/git/github_pro_tips/#browse-files-and-directories-with-ease","text":"Great browser extension called Octotree helps you navigate directories, and open files with a familiar tree-like structure.","title":"Browse files and directories with ease"},{"location":"blog/Misl/git/github_pro_tips/#reference","text":"GitHub Protips: Tips, tricks, hacks, and secrets from Lee Reilly","title":"Reference"},{"location":"blog/Misl/git/pre_commit/","tags":["git","hooks","pre-commit"],"text":"git pre-commit # All Git hooks are ordinary scripts that Git executes when certain events occur in the repository git hooks locate in .git/hooks folder pre-commit is a library that help us manage the pre-commit hook Install # python -m pip install pre-commit #or from pyz # Download from release python pre-commit-#.#.#.pyz pre-commit # pre-commit is a tool that help us config and install git hook for pre-commit event. usage # Install Create config file at project root folder Add hooks Install hooks Test / Run hooks config hooks # touch .pre-commit-config.yaml repos : - repo : https://github.com/psf/black rev : 23.3.0 hooks : - id : black supported hooks rev can take from github project releases page supported hooks Get hooks list from pre-commit install hook # pre-commit install Test/ run # #-a all-files pre-commit run -a Tips # Action order 1. config modify action hooks 2. config check action hooks References # pre-commit 4 Tools to Format & Check your Code with Pre-Commit","title":"git pre-commit"},{"location":"blog/Misl/git/pre_commit/#git-pre-commit","text":"All Git hooks are ordinary scripts that Git executes when certain events occur in the repository git hooks locate in .git/hooks folder pre-commit is a library that help us manage the pre-commit hook","title":"git pre-commit"},{"location":"blog/Misl/git/pre_commit/#install","text":"python -m pip install pre-commit #or from pyz # Download from release python pre-commit-#.#.#.pyz","title":"Install"},{"location":"blog/Misl/git/pre_commit/#pre-commit","text":"pre-commit is a tool that help us config and install git hook for pre-commit event.","title":"pre-commit"},{"location":"blog/Misl/git/pre_commit/#usage","text":"Install Create config file at project root folder Add hooks Install hooks Test / Run hooks","title":"usage"},{"location":"blog/Misl/git/pre_commit/#config-hooks","text":"touch .pre-commit-config.yaml repos : - repo : https://github.com/psf/black rev : 23.3.0 hooks : - id : black supported hooks rev can take from github project releases page supported hooks Get hooks list from pre-commit","title":"config hooks"},{"location":"blog/Misl/git/pre_commit/#install-hook","text":"pre-commit install","title":"install hook"},{"location":"blog/Misl/git/pre_commit/#test-run","text":"#-a all-files pre-commit run -a","title":"Test/ run"},{"location":"blog/Misl/git/pre_commit/#tips","text":"Action order 1. config modify action hooks 2. config check action hooks","title":"Tips"},{"location":"blog/Misl/git/pre_commit/#references","text":"pre-commit 4 Tools to Format & Check your Code with Pre-Commit","title":"References"},{"location":"blog/Misl/lxd/","tags":["lxd","container"],"text":"LXD system container and virtual machine manager. Virtual machines emulate a physical machine, using the hardware of the host system from a full and completely isolated operating system implemented through the use of qemu. System containers , on the other hand, use the OS kernel of the host system instead of creating their own environment Install # sudo apt update sudo apt install lxd # pick version 4.0 Add user to lxd group # sudo adduser $USER lxd # check with id command id uid = 1000 ( user ) gid = 1000 ( user ) groups = 1000 ( user ) ,4 ( adm ) ,20 ( dialout ) ,24 ( cdrom ) ,27 ( sudo ) ,132 ( lxd ) ,998 ( docker ) Init LXD # lxd init Create first container # launch # launch Create and start instances from images lxc launch images: { distro } / { version } / { arch } { container-name } launch ubuntu 22.04 lxc launch images:ubuntu/22.04/amd64 ubuntu2204 lxc list # result +------------+---------+--------------------+-----------------------------------------------+-----------+-----------+ | NAME | STATE | IPV4 | IPV6 | TYPE | SNAPSHOTS | +------------+---------+--------------------+-----------------------------------------------+-----------+-----------+ | ubuntu2204 | RUNNING | 10 .10.10.62 ( eth0 ) | fd42:5179:549e:e81d:216:3eff:fe3f:5b92 ( eth0 ) | CONTAINER | 0 | +------------+---------+--------------------+-----------------------------------------------+-----------+-----------+ Get shell # lxc exec ubuntu2204 -- /bin/bash root@ubuntu2204:~# id uid=0(root) gid=0(root) groups=0(root) root@ubuntu2204:~# cat /etc/lsb-release DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION=\"Ubuntu 22.04.1 LTS\" login as none root # lxc exec ubuntu2204 --user 1000 /bin/bash # ubuntu@ubuntu2204:/$ id uid = 1000 ( ubuntu ) gid = 0 ( root ) groups = 0 ( root ) Basic lxc # lxc list lxc info <container name> lxc exec <container name> <command> lxc stop <container name> lxc move <container name> < new container name> lxc copy <container name> < new container name> lxc delete <container name> lxc config lxc file push source <container name>/dest lxc file pull <container name>/source dest lxc file edit <container name>/file path alias / custom commands lxc list -c n,s,4,image.description:image login with ssh # install openssh-server in container sudo apt install openssh-server Copy host pub key to container cp ~/.ssh/id_rsa.pub /tmp/authorized_keys lxc file push /tmp/authorized_keys ubuntu2204/home/ubuntu/.ssh/authorized_keys -p Snapshot # lxc snapshot <container name> lxc info <container name> # more info about the snapshot lxc restore <container name> <snap name> lxc delete <container name>/<snap name> # sharing # https://www.cyberciti.biz/faq/how-to-add-or-mount-directory-in-lxd-linux-container/ mkdir ~/share lxc config device add ubuntu2204 share disk source = ~/share path = /home/ubuntu/share # Device share added to ubuntu2204 # show lxc config device show ubuntu2204 # result share: path: /home/ubuntu/share source: /home/user/share type: disk # show on container ll /home/user/ubuntu # ... drwxrwxr-x 2 nobody nogroup 4096 Jul 28 15 :42 share/ # fix permission # lxc config set ubuntu2204 raw.idmap \"both 1000 1000\" # restart container lxc restart ubuntu2204 Reference # LXD LXD getting started The LXD 2.0: Blog post series [0/12] Install ROS 2 Humble in Ubuntu 20.04 or 18.04 using LXD containers ROS Development with LXD","title":"LXD hello"},{"location":"blog/Misl/lxd/#install","text":"sudo apt update sudo apt install lxd # pick version 4.0","title":"Install"},{"location":"blog/Misl/lxd/#add-user-to-lxd-group","text":"sudo adduser $USER lxd # check with id command id uid = 1000 ( user ) gid = 1000 ( user ) groups = 1000 ( user ) ,4 ( adm ) ,20 ( dialout ) ,24 ( cdrom ) ,27 ( sudo ) ,132 ( lxd ) ,998 ( docker )","title":"Add user to lxd group"},{"location":"blog/Misl/lxd/#init-lxd","text":"lxd init","title":"Init LXD"},{"location":"blog/Misl/lxd/#create-first-container","text":"","title":"Create first container"},{"location":"blog/Misl/lxd/#launch","text":"launch Create and start instances from images lxc launch images: { distro } / { version } / { arch } { container-name } launch ubuntu 22.04 lxc launch images:ubuntu/22.04/amd64 ubuntu2204 lxc list # result +------------+---------+--------------------+-----------------------------------------------+-----------+-----------+ | NAME | STATE | IPV4 | IPV6 | TYPE | SNAPSHOTS | +------------+---------+--------------------+-----------------------------------------------+-----------+-----------+ | ubuntu2204 | RUNNING | 10 .10.10.62 ( eth0 ) | fd42:5179:549e:e81d:216:3eff:fe3f:5b92 ( eth0 ) | CONTAINER | 0 | +------------+---------+--------------------+-----------------------------------------------+-----------+-----------+","title":"launch"},{"location":"blog/Misl/lxd/#get-shell","text":"lxc exec ubuntu2204 -- /bin/bash root@ubuntu2204:~# id uid=0(root) gid=0(root) groups=0(root) root@ubuntu2204:~# cat /etc/lsb-release DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION=\"Ubuntu 22.04.1 LTS\"","title":"Get shell"},{"location":"blog/Misl/lxd/#login-as-none-root","text":"lxc exec ubuntu2204 --user 1000 /bin/bash # ubuntu@ubuntu2204:/$ id uid = 1000 ( ubuntu ) gid = 0 ( root ) groups = 0 ( root )","title":"login as none root"},{"location":"blog/Misl/lxd/#basic-lxc","text":"lxc list lxc info <container name> lxc exec <container name> <command> lxc stop <container name> lxc move <container name> < new container name> lxc copy <container name> < new container name> lxc delete <container name> lxc config lxc file push source <container name>/dest lxc file pull <container name>/source dest lxc file edit <container name>/file path alias / custom commands lxc list -c n,s,4,image.description:image","title":"Basic lxc"},{"location":"blog/Misl/lxd/#login-with-ssh","text":"install openssh-server in container sudo apt install openssh-server Copy host pub key to container cp ~/.ssh/id_rsa.pub /tmp/authorized_keys lxc file push /tmp/authorized_keys ubuntu2204/home/ubuntu/.ssh/authorized_keys -p","title":"login with ssh"},{"location":"blog/Misl/lxd/#snapshot","text":"","title":"Snapshot"},{"location":"blog/Misl/lxd/#lxc-snapshot-container-namelxc-info-container-name--more-info-about-the-snapshotlxc-restore-container-name-snap-name-lxc-delete-container-namesnap-name","text":"","title":"lxc snapshot &lt;container name&gt;\nlxc info &lt;container name&gt; # more info about the snapshot\nlxc restore &lt;container name&gt; &lt;snap name&gt; \nlxc delete &lt;container name&gt;/&lt;snap name&gt; \n"},{"location":"blog/Misl/lxd/#sharing","text":"https://www.cyberciti.biz/faq/how-to-add-or-mount-directory-in-lxd-linux-container/ mkdir ~/share lxc config device add ubuntu2204 share disk source = ~/share path = /home/ubuntu/share # Device share added to ubuntu2204 # show lxc config device show ubuntu2204 # result share: path: /home/ubuntu/share source: /home/user/share type: disk # show on container ll /home/user/ubuntu # ... drwxrwxr-x 2 nobody nogroup 4096 Jul 28 15 :42 share/ # fix permission # lxc config set ubuntu2204 raw.idmap \"both 1000 1000\" # restart container lxc restart ubuntu2204","title":"sharing"},{"location":"blog/Misl/lxd/#reference","text":"LXD LXD getting started The LXD 2.0: Blog post series [0/12] Install ROS 2 Humble in Ubuntu 20.04 or 18.04 using LXD containers ROS Development with LXD","title":"Reference"},{"location":"blog/Misl/lxd/container_configuration/","tags":["lxd","lxc"],"text":"Config # lxc config set <container> <key> <value> Profile # lxc profile list lxc profile show lxc profile edit <profile lxc profile add , lxc profile assign ,","title":"LXD - Container configuration and profile"},{"location":"blog/Misl/lxd/container_configuration/#config","text":"lxc config set <container> <key> <value>","title":"Config"},{"location":"blog/Misl/lxd/container_configuration/#profile","text":"lxc profile list lxc profile show lxc profile edit <profile lxc profile add , lxc profile assign ,","title":"Profile"},{"location":"blog/Misl/lxd/lxd_with_x11/","tags":["lxd","lxc","x11","profile"],"text":"x11.profile config : environment . DISPLAY : : 0 environment . PULSE_SERVER : unix :/ home / ubuntu / pulse - native nvidia . driver . capabilities : all nvidia . runtime : \"true\" user . user - data : | #cloud-config runcmd : - ' sed - i \"s/; enable-shm = yes/enable-shm = no/g\" / etc / pulse / client . conf ' packages : - x11 - apps - mesa - utils - pulseaudio description : GUI LXD profile devices : PASocket1 : bind : container connect : unix :/ run / user / 1000 / pulse / native listen : unix :/ home / ubuntu / pulse - native security . gid : \"1000\" security . uid : \"1000\" uid : \"1000\" gid : \"1000\" mode : \"0777\" type : proxy X0 : bind : container connect : unix : @ / tmp / . X11 - unix / X1 listen : unix : @ / tmp / . X11 - unix / X0 security . gid : \"1000\" security . uid : \"1000\" type : proxy mygpu : type : gpu name : x11 used_by : [] $DISPLAY X0: bind: container connect: unix:@/tmp/.X11-unix/X1 The number X1 drive from $DISPLAY environment variable # Create profile lxc profile create x11 # Edit/load profile cat x11.profile | lxc profile edit x11 # add profile to container lxc profile add ubuntu2204 x11 # or launch with profile lxc launch ubuntu2204 --user 1000 --profile default --profile x11 /bin/bash Check # Reference # Running X11 software in LXD containers","title":"LXD - Running GUI application"},{"location":"blog/Misl/lxd/lxd_with_x11/#check","text":"","title":"Check"},{"location":"blog/Misl/lxd/lxd_with_x11/#reference","text":"Running X11 software in LXD containers","title":"Reference"},{"location":"blog/Misl/lxd/nvidia_gpu/","tags":["nvidia","lxc","lxd"],"text":"Objective # Run cuda app inside lxc LAB # Using the pervious container add nvidia and cuda capabilities Note Nvidia and cuda installed on the host machine lxc config set ubuntu2204 nvidia.runtime=true lxc config device add ubuntu2204 gpu gpu # restart container lxc restart ubuntu2204 # attach shell lxc exec ubuntu2204 --user 1000 /bin/bash # run nvidia-smi nvidia-smi Test cuda # copy bandwidthTest binary from host to container and run Note My Host installed with cuda 11.6 version lxc file push /usr/local/cuda-11.6/extras/demo_suite/bandwidthTest ubuntu2204/home/ubuntu/ # from container shell run ./bandwidthTest [ CUDA Bandwidth Test ] - Starting... Running on... Device 0 : NVIDIA GeForce MX450 Quick Mode Host to Device Bandwidth, 1 Device ( s ) PINNED Memory Transfers Transfer Size ( Bytes ) Bandwidth ( MB/s ) 33554432 3076 .7 Device to Host Bandwidth, 1 Device ( s ) PINNED Memory Transfers Transfer Size ( Bytes ) Bandwidth ( MB/s ) 33554432 3214 .5 Device to Device Bandwidth, 1 Device ( s ) PINNED Memory Transfers Transfer Size ( Bytes ) Bandwidth ( MB/s ) 33554432 70878 .8 Result = PASS Reference # GPU data processing inside LXD","title":"Nvida GPU inside LXD"},{"location":"blog/Misl/lxd/nvidia_gpu/#objective","text":"Run cuda app inside lxc","title":"Objective"},{"location":"blog/Misl/lxd/nvidia_gpu/#lab","text":"Using the pervious container add nvidia and cuda capabilities Note Nvidia and cuda installed on the host machine lxc config set ubuntu2204 nvidia.runtime=true lxc config device add ubuntu2204 gpu gpu # restart container lxc restart ubuntu2204 # attach shell lxc exec ubuntu2204 --user 1000 /bin/bash # run nvidia-smi nvidia-smi","title":"LAB"},{"location":"blog/Misl/lxd/nvidia_gpu/#test-cuda","text":"copy bandwidthTest binary from host to container and run Note My Host installed with cuda 11.6 version lxc file push /usr/local/cuda-11.6/extras/demo_suite/bandwidthTest ubuntu2204/home/ubuntu/ # from container shell run ./bandwidthTest [ CUDA Bandwidth Test ] - Starting... Running on... Device 0 : NVIDIA GeForce MX450 Quick Mode Host to Device Bandwidth, 1 Device ( s ) PINNED Memory Transfers Transfer Size ( Bytes ) Bandwidth ( MB/s ) 33554432 3076 .7 Device to Host Bandwidth, 1 Device ( s ) PINNED Memory Transfers Transfer Size ( Bytes ) Bandwidth ( MB/s ) 33554432 3214 .5 Device to Device Bandwidth, 1 Device ( s ) PINNED Memory Transfers Transfer Size ( Bytes ) Bandwidth ( MB/s ) 33554432 70878 .8 Result = PASS","title":"Test cuda"},{"location":"blog/Misl/lxd/nvidia_gpu/#reference","text":"GPU data processing inside LXD","title":"Reference"},{"location":"blog/Misl/marp/","tags":["vscode","marpit","presentation","marp","markdown","mermaid"],"text":"Marpit: Markdown presentation # Usage # slides.md --- marp: true size: 4:3 --- # Headings ## Heading 2 ### Heading 3 --- # Basic Formatting This should be **bold** and *italic* . **Unorder list** - item 1 - item 2 - item 3 --- **Order list** 1. item 1 1. item 2 1. item 3 Preview # View Marpit presentation Use command: Markdown: Open Preview to the side and not the command that belong to Markdown Preview Enhanced Toggle marpit # Export # marp export to: HTML, PDF, PPTX \"markdown.marp.exportType\" : \"pdf\" How to and Tips # theme # --- title : demo marpit presentation description : example slide marp : true size : 4:3 paginate : true theme : gaia --- settings # paginate : Shows page number on the slide or not size : Images # --- ![bg left](https://picsum.photos/720?image=29) - image on the left, with text on the right --- ![bg left:33%](https://picsum.photos/720?image=29) - same of above, but image is 33% of the slide) --- Reference # Unleash Your Creativity with Marp Presentation Customization","title":"Marpit: Markdown presentation"},{"location":"blog/Misl/marp/#marpit-markdown-presentation","text":"","title":"Marpit: Markdown presentation"},{"location":"blog/Misl/marp/#usage","text":"slides.md --- marp: true size: 4:3 --- # Headings ## Heading 2 ### Heading 3 --- # Basic Formatting This should be **bold** and *italic* . **Unorder list** - item 1 - item 2 - item 3 --- **Order list** 1. item 1 1. item 2 1. item 3","title":"Usage"},{"location":"blog/Misl/marp/#preview","text":"View Marpit presentation Use command: Markdown: Open Preview to the side and not the command that belong to Markdown Preview Enhanced","title":"Preview"},{"location":"blog/Misl/marp/#toggle-marpit","text":"","title":"Toggle marpit"},{"location":"blog/Misl/marp/#export","text":"marp export to: HTML, PDF, PPTX \"markdown.marp.exportType\" : \"pdf\"","title":"Export"},{"location":"blog/Misl/marp/#how-to-and-tips","text":"","title":"How to and Tips"},{"location":"blog/Misl/marp/#theme","text":"--- title : demo marpit presentation description : example slide marp : true size : 4:3 paginate : true theme : gaia ---","title":"theme"},{"location":"blog/Misl/marp/#settings","text":"paginate : Shows page number on the slide or not size :","title":"settings"},{"location":"blog/Misl/marp/#images","text":"--- ![bg left](https://picsum.photos/720?image=29) - image on the left, with text on the right --- ![bg left:33%](https://picsum.photos/720?image=29) - same of above, but image is 33% of the slide) ---","title":"Images"},{"location":"blog/Misl/marp/#reference","text":"Unleash Your Creativity with Marp Presentation Customization","title":"Reference"},{"location":"blog/Misl/video/examples/","tags":["video","ffmpeg","gstreamer","cheat-sheet"],"text":"jpeg # Stream jpeg stream over udp using gstreamer Play stream using FFPlay and sdp file Terminal1: gstreamer udp stream gst-launch-1.0 -v videotestsrc \\ ! video/x-raw,width=640,height=480 \\ ! timeoverlay \\ ! tee name=\"local\" \\ ! queue \\ ! videoconvert \\ ! autovideosink sync=false\\ local. \\ ! queue \\ ! jpegenc \\ ! rtpjpegpay \\ ! udpsink host=127.0.0.1 port= 5000 udp.sdp m=video 5000 RTP/AVP 26 a=rtpmap:26 JPEG/90000; c=IN IP4 127.0.0.1 Terminal 2: ffplay ffplay \\ -protocol_whitelist file,rtp,udp \\ -fflags nobuffer \\ -flags low_delay \\ -framedrop \\ -i udp.sdp","title":"FFMpeg and Gstreamer Examples"},{"location":"blog/Misl/video/examples/#jpeg","text":"Stream jpeg stream over udp using gstreamer Play stream using FFPlay and sdp file Terminal1: gstreamer udp stream gst-launch-1.0 -v videotestsrc \\ ! video/x-raw,width=640,height=480 \\ ! timeoverlay \\ ! tee name=\"local\" \\ ! queue \\ ! videoconvert \\ ! autovideosink sync=false\\ local. \\ ! queue \\ ! jpegenc \\ ! rtpjpegpay \\ ! udpsink host=127.0.0.1 port= 5000 udp.sdp m=video 5000 RTP/AVP 26 a=rtpmap:26 JPEG/90000; c=IN IP4 127.0.0.1 Terminal 2: ffplay ffplay \\ -protocol_whitelist file,rtp,udp \\ -fflags nobuffer \\ -flags low_delay \\ -framedrop \\ -i udp.sdp","title":"jpeg"},{"location":"blog/Misl/video/ffmpeg/","tags":["video","ffmpeg","sdp"],"text":"SDP # Session Description Protocol Refernces # RTP (I): Intro to RTP and SDP","title":"FFMpeg"},{"location":"blog/Misl/video/ffmpeg/#sdp","text":"Session Description Protocol","title":"SDP"},{"location":"blog/Misl/video/ffmpeg/#refernces","text":"RTP (I): Intro to RTP and SDP","title":"Refernces"},{"location":"blog/Misl/video/gstreamer/","tags":["video","gstreamer","nvidia"],"text":"Install # sudo apt-get install libgstreamer1.0-0 \\ gstreamer1.0-dev \\ gstreamer1.0-tools \\ gstreamer1.0-doc sudo apt-get install gstreamer1.0-plugins-base \\ gstreamer1.0-plugins-good # nvidia plugs sudo apt-install deepstream-6.0 Demos # very basic sample gst-launch-1.0 videotestsrc \\ ! videoconvert \\ ! autovideosink Streaming # streaming source # H265 gst-launch-1.0 videotestsrc \\ ! video/x-raw,width = 640 ,height = 480 ,framerate = 25 /1,format = I420 \\ ! timeoverlay valignment = 4 halignment = 1 \\ ! nvvidconv \\ ! 'video/x-raw(memory:NVMM),width=640,height=480' \\ ! nvv4l2h265enc insert-sps-pps = 1 idrinterval = 15 \\ ! h265parse \\ ! rtph265pay \\ ! udpsink port = 5000 host = \"192.168.1.207\" read vide with sdp file # sdp c = IN IP4 192 .168.1.207 m = video 5000 RTP/AVP 96 a = rtpmap:96 H265/90000 rtsp client # ```bash title=\u201dffprob\u201d ffprobe rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4","title":"Gstreamer"},{"location":"blog/Misl/video/gstreamer/#install","text":"sudo apt-get install libgstreamer1.0-0 \\ gstreamer1.0-dev \\ gstreamer1.0-tools \\ gstreamer1.0-doc sudo apt-get install gstreamer1.0-plugins-base \\ gstreamer1.0-plugins-good # nvidia plugs sudo apt-install deepstream-6.0","title":"Install"},{"location":"blog/Misl/video/gstreamer/#demos","text":"very basic sample gst-launch-1.0 videotestsrc \\ ! videoconvert \\ ! autovideosink","title":"Demos"},{"location":"blog/Misl/video/gstreamer/#streaming","text":"","title":"Streaming"},{"location":"blog/Misl/video/gstreamer/#streaming-source","text":"H265 gst-launch-1.0 videotestsrc \\ ! video/x-raw,width = 640 ,height = 480 ,framerate = 25 /1,format = I420 \\ ! timeoverlay valignment = 4 halignment = 1 \\ ! nvvidconv \\ ! 'video/x-raw(memory:NVMM),width=640,height=480' \\ ! nvv4l2h265enc insert-sps-pps = 1 idrinterval = 15 \\ ! h265parse \\ ! rtph265pay \\ ! udpsink port = 5000 host = \"192.168.1.207\"","title":"streaming source"},{"location":"blog/Misl/video/gstreamer/#read-vide-with-sdp-file","text":"sdp c = IN IP4 192 .168.1.207 m = video 5000 RTP/AVP 96 a = rtpmap:96 H265/90000","title":"read vide with sdp file"},{"location":"blog/Misl/video/gstreamer/#rtsp-client","text":"```bash title=\u201dffprob\u201d ffprobe rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4","title":"rtsp client"},{"location":"blog/Misl/video/gstreamer/virtual_camera/","tags":["gstreamer","v4l2loopback"],"text":"Demo # Create virtual device Create pipe write to virtual device Create pipe read from device create virtual camera sudo modprobe v4l2loopback video_nr = \"42\" \\ 'card_label=virtcam' \\ exclusive_caps = 1 \\ max_buffers = 2 terminal1 gst-launch-1.0 videotestsrc \\ ! videoconvert \\ ! v4l2sink device = /dev/video42 terminal2 gst-launch-1.0 v4l2src device = /dev/video42 \\ ! videoconvert \\ ! autovideosink remove virtual camera sudo modprobe -r v4l2loopback","title":"gstreamer and virtual camera"},{"location":"blog/Misl/video/gstreamer/virtual_camera/#demo","text":"Create virtual device Create pipe write to virtual device Create pipe read from device create virtual camera sudo modprobe v4l2loopback video_nr = \"42\" \\ 'card_label=virtcam' \\ exclusive_caps = 1 \\ max_buffers = 2 terminal1 gst-launch-1.0 videotestsrc \\ ! videoconvert \\ ! v4l2sink device = /dev/video42 terminal2 gst-launch-1.0 v4l2src device = /dev/video42 \\ ! videoconvert \\ ! autovideosink remove virtual camera sudo modprobe -r v4l2loopback","title":"Demo"},{"location":"blog/Misl/video/gstreamer/python_binding/gst_appsink_demo/","tags":["video","gstreamer","gi"],"text":"appsrc demo import sys import numpy as np import traceback import time import gi gi . require_version ( 'Gst' , '1.0' ) from gi.repository import Gst , GLib # Initializes Gstreamer, it's variables, paths Gst . init ( sys . argv ) PIPELINE = \"\"\"videotestsrc num-buffers=100 \\ ! video/x-raw, width=320, height=240 \\ ! queue \\ ! video/x-raw, format=BGR ! appsink name=sink sync=true max-buffers=1 drop=true emit-signals=true\"\"\" def on_new_sample ( app_sink ): sample = app_sink . emit ( 'pull-sample' ) caps = sample . get_caps () # Extract the width and height info from the sample's caps height = caps . get_structure ( 0 ) . get_value ( \"height\" ) width = caps . get_structure ( 0 ) . get_value ( \"width\" ) buf = sample . get_buffer () array = np . ndarray (( height , width , 3 ), buffer = buf . extract_dup ( 0 , buf . get_size ()), dtype = np . uint8 ) print ( array . shape ) return Gst . FlowReturn . OK def on_message ( bus : Gst . Bus , message : Gst . Message , loop : GLib . MainLoop ): mtype = message . type if mtype == Gst . MessageType . EOS : print ( \"End of stream\" ) loop . quit () elif mtype == Gst . MessageType . ERROR : err , debug = message . parse_error () print ( err , debug ) loop . quit () elif mtype == Gst . MessageType . WARNING : err , debug = message . parse_warning () print ( err , debug ) return True pipeline = Gst . parse_launch ( PIPELINE ) bus = pipeline . get_bus () # allow bus to emit messages to main thread bus . add_signal_watch () # Start pipeline pipeline . set_state ( Gst . State . PLAYING ) # Init GObject loop to handle Gstreamer Bus Events loop = GLib . MainLoop () # Add handler to specific signal bus . connect ( \"message\" , on_message , loop ) appsink = pipeline . get_by_name ( \"sink\" ) handler_id = appsink . connect ( \"new-sample\" , on_new_sample ) try : loop . run () except Exception : traceback . print_exc () loop . quit () # Stop Pipeline pipeline . set_state ( Gst . State . NULL ) Reference # ardusub Receive and display stream","title":"Gstreamer python binding appsink pipe"},{"location":"blog/Misl/video/gstreamer/python_binding/gst_appsink_demo/#reference","text":"ardusub Receive and display stream","title":"Reference"},{"location":"blog/Misl/video/gstreamer/python_binding/gst_appsrc_demo/","tags":["video","gstreamer","gi"],"text":"appsrc demo import sys import numpy as np import traceback import time import gi gi . require_version ( 'Gst' , '1.0' ) from gi.repository import Gst , GLib # Initializes Gstreamer, it's variables, paths Gst . init ( sys . argv ) PIPELINE = \"appsrc name=app_src ! video/x-raw,width=640,height=480,format=BGR,framerate=10/1 ! videoconvert ! autovideosink\" def ndarray_to_gst_buffer ( array : np . ndarray ) -> Gst . Buffer : \"\"\"Converts numpy array to Gst.Buffer\"\"\" return Gst . Buffer . new_wrapped ( array . tobytes ()) def on_message ( bus : Gst . Bus , message : Gst . Message , loop : GLib . MainLoop ): mtype = message . type if mtype == Gst . MessageType . EOS : print ( \"End of stream\" ) loop . quit () elif mtype == Gst . MessageType . ERROR : err , debug = message . parse_error () print ( err , debug ) loop . quit () elif mtype == Gst . MessageType . WARNING : err , debug = message . parse_warning () print ( err , debug ) return True pipeline = Gst . parse_launch ( PIPELINE ) appsource = pipeline . get_by_name ( \"app_src\" ) bus = pipeline . get_bus () # allow bus to emit messages to main thread bus . add_signal_watch () # Start pipeline pipeline . set_state ( Gst . State . PLAYING ) # Init GObject loop to handle Gstreamer Bus Events loop = GLib . MainLoop () # Add handler to specific signal bus . connect ( \"message\" , on_message , loop ) # Push buffer and check for _ in range ( 10 ): arr = np . random . randint ( low = 0 , high = 255 , size = ( 480 , 640 , 3 ), dtype = np . uint8 ) appsource . emit ( \"push-buffer\" , ndarray_to_gst_buffer ( arr )) time . sleep ( 1 / 10 ) appsource . emit ( \"end-of-stream\" ) try : loop . run () except Exception : traceback . print_exc () loop . quit () # Stop Pipeline pipeline . set_state ( Gst . State . NULL )","title":"Gstreamer python binding appsrc pipe"},{"location":"blog/Misl/video/gstreamer/python_binding/gst_simple_demo/","tags":["video","gstreamer","gi"],"text":"basic gst binding import sys import traceback import gi gi . require_version ( 'Gst' , '1.0' ) from gi.repository import Gst , GLib # Initializes Gstreamer, it's variables, paths Gst . init ( sys . argv ) PIPELINE = \"videotestsrc num-buffers=100 ! autovideosink\" def on_message ( bus : Gst . Bus , message : Gst . Message , loop : GLib . MainLoop ): mtype = message . type if mtype == Gst . MessageType . EOS : print ( \"End of stream\" ) loop . quit () elif mtype == Gst . MessageType . ERROR : err , debug = message . parse_error () print ( err , debug ) loop . quit () elif mtype == Gst . MessageType . WARNING : err , debug = message . parse_warning () print ( err , debug ) return True pipeline = Gst . parse_launch ( PIPELINE ) bus = pipeline . get_bus () # allow bus to emit messages to main thread bus . add_signal_watch () # Start pipeline pipeline . set_state ( Gst . State . PLAYING ) # Init GObject loop to handle Gstreamer Bus Events loop = GLib . MainLoop () # Add handler to specific signal bus . connect ( \"message\" , on_message , loop ) try : loop . run () except Exception : traceback . print_exc () loop . quit () # Stop Pipeline pipeline . set_state ( Gst . State . NULL )","title":"Gstreamer python binding basic pipe"},{"location":"blog/Misl/video/gstreamer/python_binding/python_binding_hello/","tags":["video","gstreamer","gi"],"text":"Install # Gstreamer python bindings implement by PyGObject Note PyGObject is a Python package which provides bindings for GObject based libraries such as GTK, GStreamer and many more. install # Install mark library installed other dependencies sudo apt install \\ libgirepository1.0-dev \\ libcairo2-dev \\ python3-dev \\ gir1.2-gtk-3.0 pip3 install pycairo pip3 install PyGObject PyGObject site ubuntu Install instruction Simple example # gst import gi gi . require_version ( 'Gst' , '1.0' ) from gi.repository import Gst , GLib import sys import traceback Gst . init ( sys . argv ) command = \"videotestsrc ! autovideosink\" pipeline = Gst . parse_launch ( command ) pipeline . set_state ( Gst . State . PLAYING ) loop = GLib . MainLoop () try : loop . run () except : traceback . print_exc () Reference # demo to check","title":"Gstreamer python binding"},{"location":"blog/Misl/video/gstreamer/python_binding/python_binding_hello/#install","text":"Gstreamer python bindings implement by PyGObject Note PyGObject is a Python package which provides bindings for GObject based libraries such as GTK, GStreamer and many more. install # Install mark library installed other dependencies sudo apt install \\ libgirepository1.0-dev \\ libcairo2-dev \\ python3-dev \\ gir1.2-gtk-3.0 pip3 install pycairo pip3 install PyGObject PyGObject site ubuntu Install instruction","title":"Install"},{"location":"blog/Misl/video/gstreamer/python_binding/python_binding_hello/#simple-example","text":"gst import gi gi . require_version ( 'Gst' , '1.0' ) from gi.repository import Gst , GLib import sys import traceback Gst . init ( sys . argv ) command = \"videotestsrc ! autovideosink\" pipeline = Gst . parse_launch ( command ) pipeline . set_state ( Gst . State . PLAYING ) loop = GLib . MainLoop () try : loop . run () except : traceback . print_exc ()","title":"Simple example"},{"location":"blog/Misl/video/gstreamer/python_binding/python_binding_hello/#reference","text":"demo to check","title":"Reference"},{"location":"blog/Python/snippets/","tags":["snippets","cheat Sheet"],"text":"log # log to console log = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO , format = \"[ %(asctime)s ] [ %(name)s ] %(levelname)s - %(message)s \" , datefmt = '%H:%M:%S' )","title":"Python snippets"},{"location":"blog/Python/snippets/#log","text":"log to console log = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO , format = \"[ %(asctime)s ] [ %(name)s ] %(levelname)s - %(message)s \" , datefmt = '%H:%M:%S' )","title":"log"},{"location":"blog/Python/asyncio/future_demo/","tags":["python","asyncio","future"],"text":"future_demo import asyncio import time import threading import logging logging . basicConfig ( format = \"[ %(levelname)s ] %(asctime)s %(message)s \" , level = logging . DEBUG ) log = logging . getLogger ( __name__ ) start = None def fetch ( with_time : int ) -> None : log . info ( threading . current_thread () . name ) time . sleep ( with_time ) async def do_work ( delay , work ): await asyncio . sleep ( delay ) log . info ( work ) def callback ( future : asyncio . Future ) -> None : end = time . time () log . info ( f \"callback run after: { end - start } \" ) async def main (): log . info ( threading . current_thread () . name ) my_loop = asyncio . get_event_loop () asyncio . create_task ( do_work ( 1 , \"hello\" )) asyncio . create_task ( do_work ( 2 , \"hello2\" )) future = my_loop . run_in_executor ( None , fetch , 3 ) global start start = time . time () future . add_done_callback ( callback ) await future end = time . time () log . info ( f \"continue run after await time { end - start } \" ) await asyncio . create_task ( do_work ( 1 , \"hello end \" )) asyncio . run ( main ())","title":"future demo"},{"location":"blog/Python/asyncio/hello_asyncio/","tags":["python","asyncio"],"text":"Reference # Guide to Concurrency in Python with Asyncio","title":"python asyncio"},{"location":"blog/Python/asyncio/hello_asyncio/#reference","text":"Guide to Concurrency in Python with Asyncio","title":"Reference"},{"location":"blog/Python/click/","tags":["python","click","cli"],"text":"Click # Click is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary. It\u2019s the \u201cCommand Line Interface Creation Kit\u201d. click web site install # pip install click Demo # A function becomes a Click command line tool by decorating it through click.command() import click @click . command () def hello (): print ( \"hello\" ) if __name__ == \"__main__\" : hello () usage python hello_click.py --help Usage: hello_click.py [ OPTIONS ] Options: --help Show this message and exit. Add option # Option has a lot of options \u2026 Options import click @click . command () @click . option ( \"--count\" , default = 1 , help = \"No. of hello's\" ) def hello ( count = 0 ): for _ in range ( count ): print ( \"hello\" ) if __name__ == \"__main__\" : hello () Function default value Add default value in function just for lint , to disabled errors click option decorate is charge for default add pass the argument from command line usage python hello_click.py --help Usage: hello_click.py [ OPTIONS ] Options: --count INTEGER No. of hello ' s --help Show this message and exit. python hello_click.py --count = 3 Add arguments # Arguments work similarly to options but are positional, they has less features and click will not create document for them more import click @click . command () @click . option ( \"--count\" , default = 1 , help = \"No. of hello's\" ) @click . argument ( \"name\" ) def hello ( name = \"\" , count = 0 ): for _ in range ( count ): print ( name ) if __name__ == \"__main__\" : hello () usage python hello_click.py --help Usage: hello_click.py [ OPTIONS ] NAME Options: --count INTEGER No. of hello ' s --help Show this message and exit. Group commands # Commands and Groups import click @click . group () def cli (): pass @cli . command ( help = \"create dummy\" ) def create (): print ( \"create\" ) @cli . command ( help = \"remove dummy\" ) def remove (): print ( \"remove\" ) if __name__ == \"__main__\" : cli () Assing command to group Replace click decorate with group function name for example cli usage python hello_click.py --help Usage: hello_click.py [ OPTIONS ] COMMAND [ ARGS ] ... Options: --help Show this message and exit. Commands: create create dummy remove remove dummy","title":"Click"},{"location":"blog/Python/click/#click","text":"Click is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary. It\u2019s the \u201cCommand Line Interface Creation Kit\u201d. click web site","title":"Click"},{"location":"blog/Python/click/#install","text":"pip install click","title":"install"},{"location":"blog/Python/click/#demo","text":"A function becomes a Click command line tool by decorating it through click.command() import click @click . command () def hello (): print ( \"hello\" ) if __name__ == \"__main__\" : hello () usage python hello_click.py --help Usage: hello_click.py [ OPTIONS ] Options: --help Show this message and exit.","title":"Demo"},{"location":"blog/Python/click/#add-option","text":"Option has a lot of options \u2026 Options import click @click . command () @click . option ( \"--count\" , default = 1 , help = \"No. of hello's\" ) def hello ( count = 0 ): for _ in range ( count ): print ( \"hello\" ) if __name__ == \"__main__\" : hello () Function default value Add default value in function just for lint , to disabled errors click option decorate is charge for default add pass the argument from command line usage python hello_click.py --help Usage: hello_click.py [ OPTIONS ] Options: --count INTEGER No. of hello ' s --help Show this message and exit. python hello_click.py --count = 3","title":"Add option"},{"location":"blog/Python/click/#add-arguments","text":"Arguments work similarly to options but are positional, they has less features and click will not create document for them more import click @click . command () @click . option ( \"--count\" , default = 1 , help = \"No. of hello's\" ) @click . argument ( \"name\" ) def hello ( name = \"\" , count = 0 ): for _ in range ( count ): print ( name ) if __name__ == \"__main__\" : hello () usage python hello_click.py --help Usage: hello_click.py [ OPTIONS ] NAME Options: --count INTEGER No. of hello ' s --help Show this message and exit.","title":"Add arguments"},{"location":"blog/Python/click/#group-commands","text":"Commands and Groups import click @click . group () def cli (): pass @cli . command ( help = \"create dummy\" ) def create (): print ( \"create\" ) @cli . command ( help = \"remove dummy\" ) def remove (): print ( \"remove\" ) if __name__ == \"__main__\" : cli () Assing command to group Replace click decorate with group function name for example cli usage python hello_click.py --help Usage: hello_click.py [ OPTIONS ] COMMAND [ ARGS ] ... Options: --help Show this message and exit. Commands: create create dummy remove remove dummy","title":"Group commands"},{"location":"blog/Python/multithreading/","text":"barrier","title":"Index"},{"location":"blog/Python/multithreading/barrier/","tags":["multithreading"],"text":"Barrier objects are used to wait for a fixed number of thread to complete execution before any particular thread can proceed forward with is execution Demo # sleep function simulate to work load init barrier for 2 threads thread t2 wait for t1 on barrier when t1 reach the barrier both threads t1, t2 can continue barrier import threading import logging import time log = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO , format = \"[ %(asctime)s ] [ %(name)s ] %(levelname)s - %(message)s \" , datefmt = \"%H:%M:%S\" , ) def job ( name : str , wait_time : int ) -> None : log . info ( f \"Thread { name } running\" ) time . sleep ( wait_time ) log . info ( f \"Thread { name } wait on barrier\" ) barrier . wait () log . info ( f \"Thread { name } continue running\" ) barrier = threading . Barrier ( 2 ) t1 = threading . Thread ( target = job , args = ( \"t1\" , 5 )) t2 = threading . Thread ( target = job , args = ( \"t2\" , 3 )) t1 . start () t2 . start () result # [07:17:58] [__main__] INFO - Thread t1 running [07:17:58] [__main__] INFO - Thread t2 running [07:18:01] [__main__] INFO - Thread t2 wait on barrier [07:18:03] [__main__] INFO - Thread t1 wait on barrier [07:18:03] [__main__] INFO - Thread t1 continue running [07:18:03] [__main__] INFO - Thread t2 continue running Reference # Python\u2019s Thread Barriers in 8 mins","title":"Multithreading - barrier"},{"location":"blog/Python/multithreading/barrier/#demo","text":"sleep function simulate to work load init barrier for 2 threads thread t2 wait for t1 on barrier when t1 reach the barrier both threads t1, t2 can continue barrier import threading import logging import time log = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO , format = \"[ %(asctime)s ] [ %(name)s ] %(levelname)s - %(message)s \" , datefmt = \"%H:%M:%S\" , ) def job ( name : str , wait_time : int ) -> None : log . info ( f \"Thread { name } running\" ) time . sleep ( wait_time ) log . info ( f \"Thread { name } wait on barrier\" ) barrier . wait () log . info ( f \"Thread { name } continue running\" ) barrier = threading . Barrier ( 2 ) t1 = threading . Thread ( target = job , args = ( \"t1\" , 5 )) t2 = threading . Thread ( target = job , args = ( \"t2\" , 3 )) t1 . start () t2 . start ()","title":"Demo"},{"location":"blog/Python/multithreading/barrier/#result","text":"[07:17:58] [__main__] INFO - Thread t1 running [07:17:58] [__main__] INFO - Thread t2 running [07:18:01] [__main__] INFO - Thread t2 wait on barrier [07:18:03] [__main__] INFO - Thread t1 wait on barrier [07:18:03] [__main__] INFO - Thread t1 continue running [07:18:03] [__main__] INFO - Thread t2 continue running","title":"result"},{"location":"blog/Python/multithreading/barrier/#reference","text":"Python\u2019s Thread Barriers in 8 mins","title":"Reference"},{"location":"blog/Python/numpy/numpy_reshape/","tags":["python","numpy"],"text":"The new shape should be compatible with the original shape\u2019 Tips Set one of the reshape parameters as -1 Allow numpy to figure unknown dimension keep the above criteria s = np . array ([[ 1 , 2 , 3 , 4 ], [ 5 , 6 , 7 , 8 ], [ 9 , 10 , 11 , 12 ]]) s . shape ( 3 , 4 ) s1 = np . reshape ( s , - 1 ) s1 . shape ( 12 ,) s2 = s . reshape ( 1 , - 1 ) s2 . shape ( 1 , 12 ) s3 = s . reshape ( - 1 , 1 , 2 ) ( 6 , 1 , 2 ) s3 array ([ [[ 1 , 2 ]], [[ 3 , 4 ]], [[ 5 , 6 ]], [[ 7 , 8 ]], [[ 9 , 10 ]], [[ 11 , 12 ]]]) Reference # Numpy Tutorial \u2013 Your first numpy guide to build python coding foundations Python NumPy For Your Grandma","title":"numpy reshape"},{"location":"blog/Python/numpy/numpy_reshape/#reference","text":"Numpy Tutorial \u2013 Your first numpy guide to build python coding foundations Python NumPy For Your Grandma","title":"Reference"},{"location":"blog/Python/project_template/","tags":["python","project"],"text":"Python project template # This post explain project structure and how to create github template repository Other post show how to config virtual environment install package unittest and tools usage part 1: this post part 2: venv and pip part 3: unitest using pytest Tools: part 4: pylint part 5: flake8 config isort, black, mypy and pylint with pre-commit hook project tree # py_template/ \u251c\u2500\u2500 .vscode \u251c\u2500\u2500 docs \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 py_template \u251c\u2500\u2500 README.md \u251c\u2500\u2500 .pylintrc \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests | \u2514\u2500\u2500 requirements.txt \u251c\u2500\u2500 venv \u2514\u2500\u2500 version.py file name description Makefile automate validation and running tests .pylintrc pylint rules GitHUB # Set project as a Template my python projct template on github Reference # template example Python Dev Environment","title":"Python project template"},{"location":"blog/Python/project_template/#python-project-template","text":"This post explain project structure and how to create github template repository Other post show how to config virtual environment install package unittest and tools usage part 1: this post part 2: venv and pip part 3: unitest using pytest Tools: part 4: pylint part 5: flake8 config isort, black, mypy and pylint with pre-commit hook","title":"Python project template"},{"location":"blog/Python/project_template/#project-tree","text":"py_template/ \u251c\u2500\u2500 .vscode \u251c\u2500\u2500 docs \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 py_template \u251c\u2500\u2500 README.md \u251c\u2500\u2500 .pylintrc \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests | \u2514\u2500\u2500 requirements.txt \u251c\u2500\u2500 venv \u2514\u2500\u2500 version.py file name description Makefile automate validation and running tests .pylintrc pylint rules","title":"project tree"},{"location":"blog/Python/project_template/#github","text":"Set project as a Template my python projct template on github","title":"GitHUB"},{"location":"blog/Python/project_template/#reference","text":"template example Python Dev Environment","title":"Reference"},{"location":"blog/Python/project_template/black/","tags":["python","project","template","black","isort"],"text":"VSCode settings # settings.json { \"editor.formatOnSave\" : true , \"[python]\" : { \"editor.codeActionsOnSave\" : { \"source.organizeImports\" : true } }, \"python.formatting.provider\" : \"black\" , } black and isort args/settings # pyproject.toml [tool.black] line-length = 99 # override black's default line-length exclude = ''' /( \\.git | \\.mypy_cache | \\.tox | venv | \\.venv | _build | buck-out | build | dist )/ ''' [tool.isort] # make it compatible with black profile = \"black\"","title":"Python project template - black and isort"},{"location":"blog/Python/project_template/black/#vscode-settings","text":"settings.json { \"editor.formatOnSave\" : true , \"[python]\" : { \"editor.codeActionsOnSave\" : { \"source.organizeImports\" : true } }, \"python.formatting.provider\" : \"black\" , }","title":"VSCode settings"},{"location":"blog/Python/project_template/black/#black-and-isort-argssettings","text":"pyproject.toml [tool.black] line-length = 99 # override black's default line-length exclude = ''' /( \\.git | \\.mypy_cache | \\.tox | venv | \\.venv | _build | buck-out | build | dist )/ ''' [tool.isort] # make it compatible with black profile = \"black\"","title":"black and isort args/settings"},{"location":"blog/Python/project_template/docs/","tags":["python","project","template","docs","project document","docstrings"],"text":"Python project template - docs # Install # pip install mkdocs-material pip install mkdocstrings pip install mkdocstrings-python pip install mkdocs-click Init docs # Create docs folder Create mkdocs.yml in project root # from project root run mkdocs new . mkdocs.yml site_name : My Docs theme : name : \"readthedocs\" plugins : - search - mkdocstrings markdown_extensions : - mkdocs-click watch : - . # reload docs for any file changes Simple Demo # # Reference ::: my_library.my_module.my_class index.md ::: demo_pkg.demo_module demo_pkg.demo_module \"\"\" module doctring \"\"\" def foo () -> None : \"\"\"_summary_ \"\"\" def hello ( a : List , b : int = 0 ) -> bool : \"\"\"_summary_ Args: a (List): _description_ b (int, optional): _description_. Defaults to 0. Raises: Exception: _description_ Returns: bool: _description_ \"\"\" print ( a ) print ( b ) if b : raise Exception ( \"new demo exception\" ) return True VSCode # Install and use autoDocstring extension # Reference # mkdocstrings mkdocstrings usage","title":"Python project template - docs"},{"location":"blog/Python/project_template/docs/#python-project-template---docs","text":"","title":"Python project template - docs"},{"location":"blog/Python/project_template/docs/#install","text":"pip install mkdocs-material pip install mkdocstrings pip install mkdocstrings-python pip install mkdocs-click","title":"Install"},{"location":"blog/Python/project_template/docs/#init-docs","text":"Create docs folder Create mkdocs.yml in project root # from project root run mkdocs new . mkdocs.yml site_name : My Docs theme : name : \"readthedocs\" plugins : - search - mkdocstrings markdown_extensions : - mkdocs-click watch : - . # reload docs for any file changes","title":"Init docs"},{"location":"blog/Python/project_template/docs/#simple-demo","text":"# Reference ::: my_library.my_module.my_class index.md ::: demo_pkg.demo_module demo_pkg.demo_module \"\"\" module doctring \"\"\" def foo () -> None : \"\"\"_summary_ \"\"\" def hello ( a : List , b : int = 0 ) -> bool : \"\"\"_summary_ Args: a (List): _description_ b (int, optional): _description_. Defaults to 0. Raises: Exception: _description_ Returns: bool: _description_ \"\"\" print ( a ) print ( b ) if b : raise Exception ( \"new demo exception\" ) return True","title":"Simple Demo"},{"location":"blog/Python/project_template/docs/#vscode","text":"Install and use autoDocstring extension","title":"VSCode"},{"location":"blog/Python/project_template/docs/#_1","text":"","title":""},{"location":"blog/Python/project_template/docs/#reference","text":"mkdocstrings mkdocstrings usage","title":"Reference"},{"location":"blog/Python/project_template/flake8/","tags":["python","project","template","flake8","linter","git-hook"],"text":"Python project template - flake8 # Flake8 acts as a linter and checking cod against code styling given by PEP8 Flake8 is a wrapper which verifies pep8, pyflakes, and circular complexity. install # python -m pip install flake8 config # Flake8 supports storing its configuration in your project in one of setup.cfg , tox.ini , or .flake8 . .flake8 [flake8] extend-ignore = E121 max-line-length = 120 exclude = .git,__pycache__,docs/source/conf.py,old,build,dist Error / Violation Codes demo # check code from command line For demoing add config file to ignore F841 Run again code example class Demo : def demo_method ( self ): x = 2 # pylint: disable=unused-variable run manual ~/.local/bin/flake8 pylint_demo.py pylint_demo.py:3:9: F841 local variable 'x' is assigned to but never used Add flake8 config # .flake8 [flake8] extend-ignore = F841 exclude = .git,__pycache__,docs/source/conf.py,old,build,dist max-line-length = 120 git hook # Config flake8 as local repo repos : - repo : local hooks : - id : flake8 name : flake8 entry : /home/user/.local/bin/flake8 language : system types : [ python ] args : [ \"--config=.flake8\" ]","title":"Python project template - flake8"},{"location":"blog/Python/project_template/flake8/#python-project-template---flake8","text":"Flake8 acts as a linter and checking cod against code styling given by PEP8 Flake8 is a wrapper which verifies pep8, pyflakes, and circular complexity.","title":"Python project template - flake8"},{"location":"blog/Python/project_template/flake8/#install","text":"python -m pip install flake8","title":"install"},{"location":"blog/Python/project_template/flake8/#config","text":"Flake8 supports storing its configuration in your project in one of setup.cfg , tox.ini , or .flake8 . .flake8 [flake8] extend-ignore = E121 max-line-length = 120 exclude = .git,__pycache__,docs/source/conf.py,old,build,dist Error / Violation Codes","title":"config"},{"location":"blog/Python/project_template/flake8/#demo","text":"check code from command line For demoing add config file to ignore F841 Run again code example class Demo : def demo_method ( self ): x = 2 # pylint: disable=unused-variable run manual ~/.local/bin/flake8 pylint_demo.py pylint_demo.py:3:9: F841 local variable 'x' is assigned to but never used","title":"demo"},{"location":"blog/Python/project_template/flake8/#add-flake8-config","text":".flake8 [flake8] extend-ignore = F841 exclude = .git,__pycache__,docs/source/conf.py,old,build,dist max-line-length = 120","title":"Add flake8 config"},{"location":"blog/Python/project_template/flake8/#git-hook","text":"Config flake8 as local repo repos : - repo : local hooks : - id : flake8 name : flake8 entry : /home/user/.local/bin/flake8 language : system types : [ python ] args : [ \"--config=.flake8\" ]","title":"git hook"},{"location":"blog/Python/project_template/mypy/","tags":["python","project","template","mypy"],"text":"install # pip install mypy demo # demo.py def func ( a , b ): return a + b usage # from cli # shell mypy demo.py Success: no issues found in 1 source file ## Strict mode mypy --strict demo.py error: Function is missing a type annotation Found 1 error in 1 file ( checked 1 source file ) VSCode # Enabled mypy Set strict argument settings.json \"python.linting.mypyEnabled\" : true config # pyproject.toml [tool.mypy] strict = true","title":"Python project template - mypy"},{"location":"blog/Python/project_template/mypy/#install","text":"pip install mypy","title":"install"},{"location":"blog/Python/project_template/mypy/#demo","text":"demo.py def func ( a , b ): return a + b","title":"demo"},{"location":"blog/Python/project_template/mypy/#usage","text":"","title":"usage"},{"location":"blog/Python/project_template/mypy/#from-cli","text":"shell mypy demo.py Success: no issues found in 1 source file ## Strict mode mypy --strict demo.py error: Function is missing a type annotation Found 1 error in 1 file ( checked 1 source file )","title":"from cli"},{"location":"blog/Python/project_template/mypy/#vscode","text":"Enabled mypy Set strict argument settings.json \"python.linting.mypyEnabled\" : true","title":"VSCode"},{"location":"blog/Python/project_template/mypy/#config","text":"pyproject.toml [tool.mypy] strict = true","title":"config"},{"location":"blog/Python/project_template/pre_commit/","tags":["python","project","template","pre-commit","git-hook","isort","black","mypy","flake8"],"text":"Python project template - pre-commit # Demo of usage pre-commit tool Install pre-commit tool and config it with four tools isort black mypy flake8 pre-commit # Install pre-commit Add config file Install hooks Add hooks Run install python -m pip install pre-commit config touch .pre-commit-config.yaml install hook pre-commit install hooks # isort # isort is a Python utility / library to sort imports alphabetically, and automatically separated into sections and by type. config pre-commit add isort config to pyproject.toml install and run .pre-commit-config.yaml repos : - repo : https://github.com/PyCQA/isort rev : 5.12.0 hooks : - id : isort pyproject.toml [settings] [tool.black] line-length = 120 [tool.isort] profile = \"black\" install and run pre-commit install # Run pre-commit run -a config with black config isort with black profile black # Black is a PEP 8 compliant opinionated formatter. Black reformats entire files in place. config pre-commit add isort config to pyproject.toml install and run .pre-commit-config.yaml repos : - repo : https://github.com/psf/black rev : 23.3.0 hooks : - id : black language_version : python3.10 pyproject.toml [settings] [tool.black] line-length = 120 [tool.isort] profile = \"black\" install and run pre-commit install # Run pre-commit run -a config isort config isort with black profile black and isort format import different, if both config as pre-commit action they interrupt each other disable fmt format for code section # fmt: off ... # fmt: on mypy # config pre-commit add mypy section to pyproject.toml config install and run .pre-commit-config.yaml repos : - repo : https://github.com/pre-commit/mirrors-mypy rev : v0.942 hooks : - id : mypy pyproject.toml [settings] [tool.black] line-length = 120 [tool.mypy] add inline ignore # type: ignore flake8 # config pre-commit add .flake8 config code style checker for PEP8 .pre-commit-config.yaml repos : - repo : https://github.com/PyCQA/flake8 rev : 6.0.0 hooks : - id : flake8 .flake8 [flake8] max-line-length = 120 max-complexity = 10 exclude = src/apm_demos/test/* Recap # isort, black and mypy config from myproject.toml flake8 config with its on file .flake8 isort must be config with black profile disabled pre-commit git commit --no-verify .pre-commit-config.yaml # files : src/apm_demos repos : - repo : https://github.com/PyCQA/isort rev : 5.12.0 hooks : - id : isort - repo : https://github.com/psf/black rev : 23.3.0 hooks : - id : black language_version : python3.10 - repo : https://github.com/pre-commit/mirrors-mypy rev : v0.942 hooks : - id : mypy - repo : https://github.com/PyCQA/flake8 rev : 6.0.0 hooks : - id : flake8 Reference # pre-commit schema","title":"Python project template - pre-commit"},{"location":"blog/Python/project_template/pre_commit/#python-project-template---pre-commit","text":"Demo of usage pre-commit tool Install pre-commit tool and config it with four tools isort black mypy flake8","title":"Python project template - pre-commit"},{"location":"blog/Python/project_template/pre_commit/#pre-commit","text":"Install pre-commit Add config file Install hooks Add hooks Run install python -m pip install pre-commit config touch .pre-commit-config.yaml install hook pre-commit install","title":"pre-commit"},{"location":"blog/Python/project_template/pre_commit/#hooks","text":"","title":"hooks"},{"location":"blog/Python/project_template/pre_commit/#isort","text":"isort is a Python utility / library to sort imports alphabetically, and automatically separated into sections and by type. config pre-commit add isort config to pyproject.toml install and run .pre-commit-config.yaml repos : - repo : https://github.com/PyCQA/isort rev : 5.12.0 hooks : - id : isort pyproject.toml [settings] [tool.black] line-length = 120 [tool.isort] profile = \"black\" install and run pre-commit install # Run pre-commit run -a config with black config isort with black profile","title":"isort"},{"location":"blog/Python/project_template/pre_commit/#black","text":"Black is a PEP 8 compliant opinionated formatter. Black reformats entire files in place. config pre-commit add isort config to pyproject.toml install and run .pre-commit-config.yaml repos : - repo : https://github.com/psf/black rev : 23.3.0 hooks : - id : black language_version : python3.10 pyproject.toml [settings] [tool.black] line-length = 120 [tool.isort] profile = \"black\" install and run pre-commit install # Run pre-commit run -a config isort config isort with black profile black and isort format import different, if both config as pre-commit action they interrupt each other disable fmt format for code section # fmt: off ... # fmt: on","title":"black"},{"location":"blog/Python/project_template/pre_commit/#mypy","text":"config pre-commit add mypy section to pyproject.toml config install and run .pre-commit-config.yaml repos : - repo : https://github.com/pre-commit/mirrors-mypy rev : v0.942 hooks : - id : mypy pyproject.toml [settings] [tool.black] line-length = 120 [tool.mypy] add inline ignore # type: ignore","title":"mypy"},{"location":"blog/Python/project_template/pre_commit/#flake8","text":"config pre-commit add .flake8 config code style checker for PEP8 .pre-commit-config.yaml repos : - repo : https://github.com/PyCQA/flake8 rev : 6.0.0 hooks : - id : flake8 .flake8 [flake8] max-line-length = 120 max-complexity = 10 exclude = src/apm_demos/test/*","title":"flake8"},{"location":"blog/Python/project_template/pre_commit/#recap","text":"isort, black and mypy config from myproject.toml flake8 config with its on file .flake8 isort must be config with black profile disabled pre-commit git commit --no-verify","title":"Recap"},{"location":"blog/Python/project_template/pre_commit/#pre-commit-configyaml","text":"files : src/apm_demos repos : - repo : https://github.com/PyCQA/isort rev : 5.12.0 hooks : - id : isort - repo : https://github.com/psf/black rev : 23.3.0 hooks : - id : black language_version : python3.10 - repo : https://github.com/pre-commit/mirrors-mypy rev : v0.942 hooks : - id : mypy - repo : https://github.com/PyCQA/flake8 rev : 6.0.0 hooks : - id : flake8","title":".pre-commit-config.yaml"},{"location":"blog/Python/project_template/pre_commit/#reference","text":"pre-commit schema","title":"Reference"},{"location":"blog/Python/project_template/project_unittest/","tags":["python","project","template","unittest","pytest"],"text":"Install and Setup # Add pytest to requirements-dev.txt Run pip install -r requirements-dev.txt again Create tests sub folder under root project folder Add tests modules files prefix with test_ Add function to modules start also with test_ prefix Install project using pip install -e . Run pytest demo # demp_proj project py_template/ \u251c\u2500\u2500 .vscode \u251c\u2500\u2500 py_template | \u2514\u2500\u2500 example.py \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests | \u2514\u2500\u2500 test_example.py \u251c\u2500\u2500 venv \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 requirements-dev.txt \u2514\u2500\u2500 version.py test_example.py # import pytest # from py_template import example # \"\"\" # # Run only tests mark as foo # python -m pytest -m foo # \"\"\" # @pytest.mark.foo # def test_foo() -> None: # result = example.foo() # assert result is True # @pytest.mark.foo # def test_foo_with_assert_description() -> None: # result = example.foo() # assert result is True, \"assert description\" # def test_bar() -> None: # result = example.bar(1) # assert result == 2.0 # def test_bar_with_exception() -> None: # with pytest.raises(ZeroDivisionError): # example.bar(0) # def test_bar_with_exception_II() -> None: # \"\"\" # catch general exception # check exception type with assert # \"\"\" # with pytest.raises(Exception) as e: # example.bar(0) # assert e.type == ZeroDivisionError example.py from queue import Queue import logging import threading import time from collections import deque from threading import Event log = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO , format = \"[ %(asctime)s ] [ %(name)s ] %(levelname)s - %(message)s \" , datefmt = '%H:%M:%S' ) # some_queue: Queue = Queue(1) some_queue : deque = deque ( maxlen = 1 ) sync_event = Event () def pub () -> None : counter = 0 while True : try : some_queue . append ( counter ) sync_event . set () sync_event . clear () time . sleep ( 1 / 5 ) counter += 1 except Exception : pass def sub () -> None : while True : try : sync_event . wait () data = some_queue . popleft () # sync_event.clear() if data % 2 : raise Exception ( \"odd exception\" ) log . info ( data ) except Exception : pass # log.warning(\"Exception handling\", exc_info=True) # time.sleep(1) if __name__ == \"__main__\" : t1 = threading . Thread ( target = pub ) t2 = threading . Thread ( target = sub ) t1 . start () t2 . start () t1 . join () t2 . join ()","title":"Python project template - unittest"},{"location":"blog/Python/project_template/project_unittest/#install-and-setup","text":"Add pytest to requirements-dev.txt Run pip install -r requirements-dev.txt again Create tests sub folder under root project folder Add tests modules files prefix with test_ Add function to modules start also with test_ prefix Install project using pip install -e . Run pytest","title":"Install and Setup"},{"location":"blog/Python/project_template/project_unittest/#demo","text":"demp_proj project py_template/ \u251c\u2500\u2500 .vscode \u251c\u2500\u2500 py_template | \u2514\u2500\u2500 example.py \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests | \u2514\u2500\u2500 test_example.py \u251c\u2500\u2500 venv \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 requirements-dev.txt \u2514\u2500\u2500 version.py test_example.py # import pytest # from py_template import example # \"\"\" # # Run only tests mark as foo # python -m pytest -m foo # \"\"\" # @pytest.mark.foo # def test_foo() -> None: # result = example.foo() # assert result is True # @pytest.mark.foo # def test_foo_with_assert_description() -> None: # result = example.foo() # assert result is True, \"assert description\" # def test_bar() -> None: # result = example.bar(1) # assert result == 2.0 # def test_bar_with_exception() -> None: # with pytest.raises(ZeroDivisionError): # example.bar(0) # def test_bar_with_exception_II() -> None: # \"\"\" # catch general exception # check exception type with assert # \"\"\" # with pytest.raises(Exception) as e: # example.bar(0) # assert e.type == ZeroDivisionError example.py from queue import Queue import logging import threading import time from collections import deque from threading import Event log = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO , format = \"[ %(asctime)s ] [ %(name)s ] %(levelname)s - %(message)s \" , datefmt = '%H:%M:%S' ) # some_queue: Queue = Queue(1) some_queue : deque = deque ( maxlen = 1 ) sync_event = Event () def pub () -> None : counter = 0 while True : try : some_queue . append ( counter ) sync_event . set () sync_event . clear () time . sleep ( 1 / 5 ) counter += 1 except Exception : pass def sub () -> None : while True : try : sync_event . wait () data = some_queue . popleft () # sync_event.clear() if data % 2 : raise Exception ( \"odd exception\" ) log . info ( data ) except Exception : pass # log.warning(\"Exception handling\", exc_info=True) # time.sleep(1) if __name__ == \"__main__\" : t1 = threading . Thread ( target = pub ) t2 = threading . Thread ( target = sub ) t1 . start () t2 . start () t1 . join () t2 . join ()","title":"demo"},{"location":"blog/Python/project_template/pylint/","tags":["python","project","template","pylint","linter","git-hook"],"text":"Python project template - pylint # Linting is the automated source code checking for programmatic and stylistic errors. A lint tool is a basic static code analyzer pylint is default VSCode linter and it enable by default install # install pip install pylint VSCode # Setings # vscode settings \"python.linting.pylintEnabled\" : true Extensions # pylint extension for Visual Studio Code Execute pylint automatically on python file bundle with pylint can changed by settings pylint.path Control # control pylint with rules file .pylintrc pylintrc file location /etc/pylintrc ~/pylintrc <project_path>/pylintrc create pylintrc pylint --generate-rcfile > pylintrc VSCode VSCode look automaticly for pylintrc at the project root pylintrc pre-commit git hook not found the pylintrc file if we prefix it with dot ( .pylintrc ) VSCode file mapping map pylintrc file to ini type \"files.associations\": { \"pylintrc\": \"ini\" }, Demo # minimal pylintrc file to disabled checker message [MASTER] disable= C0114, # (missing-module-docstring) C0115, # (missing-class-docstring) Demo II # Add rules inline Add comment to end of line # pylint: disable=[problem-code] # pylint: disable=unused-private-member Run manual # ~/.local/bin/pylint <file full path> ~/.local/bin/pylint --rcfile=<config_file> <file full path> demo ~/.local/bin/pylint --rcfile pylintrc pylint_demo.py ************* Module pylint_demo pylint_demo.py:2:4: R0201: Method could be a function ( no-self-use ) pylint_demo.py:1:0: R0903: Too few public methods ( 1 /2 ) ( too-few-public-methods ) git hook # Install pre-commit python util Add .pre-commit-config.yaml Run pre-commit install Add files to stage Run pre-commit run or try commit stage files install pip install pre-commit .pre-commit-config.yaml repos : - repo : local hooks : - id : pylint name : pylint entry : pylint language : system types : [ python ] args : [ \"--rcfile=pylintrc\" ] Demo # ~/.local/bin/pre-commit run [ WARNING ] Unstaged files detected. [ INFO ] Stashing unstaged files to /home/user/.cache/pre-commit/patch1681097484-36170. pylint...................................................................Failed - hook id: pylint - exit code: 8 ************* Module pylint_demo linters/pylint_demo.py:1:0: R0903: Too few public methods ( 1 /2 ) ( too-few-public-methods ) ------------------------------------------------------------------- Your code has been rated at 6 .67/10 ( previous run: 10 .00/10, -3.33 ) [ INFO ] Restored changes from /home/user/.cache/pre-commit/patch1681097484-36170. pylintrc template # [MASTER] disable = C0114, # (missing-module-docstring) C0115, # (missing-class-docstring) C0116, # (missing-function-docstring) [FORMAT] # Maximum number of characters on a single line. max-line-length = 120 [BASIC] # Good variable names which should always be accepted, separated by a comma good-names = x,y Reference # pyline error codes","title":"Python project template - pylint"},{"location":"blog/Python/project_template/pylint/#python-project-template---pylint","text":"Linting is the automated source code checking for programmatic and stylistic errors. A lint tool is a basic static code analyzer pylint is default VSCode linter and it enable by default","title":"Python project template - pylint"},{"location":"blog/Python/project_template/pylint/#install","text":"install pip install pylint","title":"install"},{"location":"blog/Python/project_template/pylint/#vscode","text":"","title":"VSCode"},{"location":"blog/Python/project_template/pylint/#setings","text":"vscode settings \"python.linting.pylintEnabled\" : true","title":"Setings"},{"location":"blog/Python/project_template/pylint/#extensions","text":"pylint extension for Visual Studio Code Execute pylint automatically on python file bundle with pylint can changed by settings pylint.path","title":"Extensions"},{"location":"blog/Python/project_template/pylint/#control","text":"control pylint with rules file .pylintrc pylintrc file location /etc/pylintrc ~/pylintrc <project_path>/pylintrc create pylintrc pylint --generate-rcfile > pylintrc VSCode VSCode look automaticly for pylintrc at the project root pylintrc pre-commit git hook not found the pylintrc file if we prefix it with dot ( .pylintrc ) VSCode file mapping map pylintrc file to ini type \"files.associations\": { \"pylintrc\": \"ini\" },","title":"Control"},{"location":"blog/Python/project_template/pylint/#demo","text":"minimal pylintrc file to disabled checker message [MASTER] disable= C0114, # (missing-module-docstring) C0115, # (missing-class-docstring)","title":"Demo"},{"location":"blog/Python/project_template/pylint/#demo-ii","text":"Add rules inline Add comment to end of line # pylint: disable=[problem-code] # pylint: disable=unused-private-member","title":"Demo II"},{"location":"blog/Python/project_template/pylint/#run-manual","text":"~/.local/bin/pylint <file full path> ~/.local/bin/pylint --rcfile=<config_file> <file full path> demo ~/.local/bin/pylint --rcfile pylintrc pylint_demo.py ************* Module pylint_demo pylint_demo.py:2:4: R0201: Method could be a function ( no-self-use ) pylint_demo.py:1:0: R0903: Too few public methods ( 1 /2 ) ( too-few-public-methods )","title":"Run manual"},{"location":"blog/Python/project_template/pylint/#git-hook","text":"Install pre-commit python util Add .pre-commit-config.yaml Run pre-commit install Add files to stage Run pre-commit run or try commit stage files install pip install pre-commit .pre-commit-config.yaml repos : - repo : local hooks : - id : pylint name : pylint entry : pylint language : system types : [ python ] args : [ \"--rcfile=pylintrc\" ]","title":"git hook"},{"location":"blog/Python/project_template/pylint/#demo_1","text":"~/.local/bin/pre-commit run [ WARNING ] Unstaged files detected. [ INFO ] Stashing unstaged files to /home/user/.cache/pre-commit/patch1681097484-36170. pylint...................................................................Failed - hook id: pylint - exit code: 8 ************* Module pylint_demo linters/pylint_demo.py:1:0: R0903: Too few public methods ( 1 /2 ) ( too-few-public-methods ) ------------------------------------------------------------------- Your code has been rated at 6 .67/10 ( previous run: 10 .00/10, -3.33 ) [ INFO ] Restored changes from /home/user/.cache/pre-commit/patch1681097484-36170.","title":"Demo"},{"location":"blog/Python/project_template/pylint/#pylintrc-template","text":"[MASTER] disable = C0114, # (missing-module-docstring) C0115, # (missing-class-docstring) C0116, # (missing-function-docstring) [FORMAT] # Maximum number of characters on a single line. max-line-length = 120 [BASIC] # Good variable names which should always be accepted, separated by a comma good-names = x,y","title":"pylintrc template"},{"location":"blog/Python/project_template/pylint/#reference","text":"pyline error codes","title":"Reference"},{"location":"blog/Python/project_template/venv_pip_and_requirements/","tags":["python","project"],"text":"venv # create python -m venv venv usage # Clear all outside reference unset PYTHONPATH source venv/bin/activate virtual env Clear all other reference to python libraries by unset PYTHONPATH variable pip # auto complation pip complation --bash >> ~/.bashrc source ~/.bashrc Dependencies # Using pip to install project dependencies Separate dependencies to two or more files dev packages prod packages(reference prod file from setup.py) project source reference project # Install / Reference project from virtualenv pip install -e . Tip pip install -e . require setup.py file requirements # Tip Call prod file from dev using -r option -r requirements.txt prod # requirements.txt # Add project requirements here dev # requirements-dev.txt -r requirements.txt black mypy isort usage pip install -r requirements-dev.txt setup.py # minimal setup from setuptools import setup , find_packages setup ( name = 'MyPackageName' , version = '1.0.0' , url = 'https://github.com/mypackage.git' , author = 'Author Name' , author_email = 'author@gmail.com' , description = 'Description of my package' , packages = find_packages (), install_requires = [], )","title":"Python project template - venv"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#venv","text":"create python -m venv venv usage # Clear all outside reference unset PYTHONPATH source venv/bin/activate virtual env Clear all other reference to python libraries by unset PYTHONPATH variable","title":"venv"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#pip","text":"auto complation pip complation --bash >> ~/.bashrc source ~/.bashrc","title":"pip"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#dependencies","text":"Using pip to install project dependencies Separate dependencies to two or more files dev packages prod packages(reference prod file from setup.py) project source reference","title":"Dependencies"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#project","text":"Install / Reference project from virtualenv pip install -e . Tip pip install -e . require setup.py file","title":"project"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#requirements","text":"Tip Call prod file from dev using -r option -r requirements.txt","title":"requirements"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#prod","text":"requirements.txt # Add project requirements here","title":"prod"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#dev","text":"requirements-dev.txt -r requirements.txt black mypy isort usage pip install -r requirements-dev.txt","title":"dev"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#setuppy","text":"minimal setup from setuptools import setup , find_packages setup ( name = 'MyPackageName' , version = '1.0.0' , url = 'https://github.com/mypackage.git' , author = 'Author Name' , author_email = 'author@gmail.com' , description = 'Description of my package' , packages = find_packages (), install_requires = [], )","title":"setup.py"},{"location":"blog/Python/project_template/vscode/","tags":["python","project","template","vscode"],"text":"Python project template - VSCode # VSCode setting and extensions for python project Settings # Project explorer # exclude files \"files.exclude\" : { \"venv/\" : true , \"**/__pycache__\" : true , } Extensions # Tasks # Load VSCode Tasks into Status Bar. Demo # config isort as task Task extension add statusbar to task config option { \"version\" : \"2.0.0\" , \"tasks\" : [ { \"label\" : \"isort\" , \"type\" : \"shell\" , \"command\" : \"isort ${file}\" , \"options\" : { \"statusbar\" : { \"color\" : \"#22C1D6\" , \"tooltip\" : \"run isort\" , \"label\" : \"isort\" , \"filePattern\" : \"py\" } } } ] } task useful links task Variables Reference for task bar icons global tasks.json Place task file at ~/.config/Code/User/tasks.json","title":"Python project template - VSCode"},{"location":"blog/Python/project_template/vscode/#python-project-template---vscode","text":"VSCode setting and extensions for python project","title":"Python project template - VSCode"},{"location":"blog/Python/project_template/vscode/#settings","text":"","title":"Settings"},{"location":"blog/Python/project_template/vscode/#project-explorer","text":"exclude files \"files.exclude\" : { \"venv/\" : true , \"**/__pycache__\" : true , }","title":"Project explorer"},{"location":"blog/Python/project_template/vscode/#extensions","text":"","title":"Extensions"},{"location":"blog/Python/project_template/vscode/#tasks","text":"Load VSCode Tasks into Status Bar.","title":"Tasks"},{"location":"blog/Python/project_template/vscode/#demo","text":"config isort as task Task extension add statusbar to task config option { \"version\" : \"2.0.0\" , \"tasks\" : [ { \"label\" : \"isort\" , \"type\" : \"shell\" , \"command\" : \"isort ${file}\" , \"options\" : { \"statusbar\" : { \"color\" : \"#22C1D6\" , \"tooltip\" : \"run isort\" , \"label\" : \"isort\" , \"filePattern\" : \"py\" } } } ] } task useful links task Variables Reference for task bar icons global tasks.json Place task file at ~/.config/Code/User/tasks.json","title":"Demo"},{"location":"blog/Python/pytest/","tags":["pytest","unittest","python"],"text":"Test # Arrange (setup) Act (object/method under test) Assert Cleanup Groping Tests # Custom markers # Using pytest.mark decorator we can group tests Idea for custom marker - sanity - regression import pytest @pytest . mark . g1 def test_demo (): assert True python -m pytest -m g1 g2 Builtin markers # pytest --markers ... @pytest.mark.skip ( reason = None ) @pytest.mark.skipif ( condition, ..., *, reason = ... ) @pytest.mark.xfail ( condition, ..., *, reason = ..., run = True, raises = None, strict = xfail_strict ) ... xfail # mark the test function as an expected failure for example if function under test not implement yet # Reference # PyTest for Absolute Beginners pytest IndianPythonista","title":"Pytest"},{"location":"blog/Python/pytest/#test","text":"Arrange (setup) Act (object/method under test) Assert Cleanup","title":"Test"},{"location":"blog/Python/pytest/#groping-tests","text":"","title":"Groping Tests"},{"location":"blog/Python/pytest/#custom-markers","text":"Using pytest.mark decorator we can group tests Idea for custom marker - sanity - regression import pytest @pytest . mark . g1 def test_demo (): assert True python -m pytest -m g1 g2","title":"Custom markers"},{"location":"blog/Python/pytest/#builtin-markers","text":"pytest --markers ... @pytest.mark.skip ( reason = None ) @pytest.mark.skipif ( condition, ..., *, reason = ... ) @pytest.mark.xfail ( condition, ..., *, reason = ..., run = True, raises = None, strict = xfail_strict ) ...","title":"Builtin markers"},{"location":"blog/Python/pytest/#xfail","text":"mark the test function as an expected failure","title":"xfail"},{"location":"blog/Python/pytest/#for-example-if-function-under-test-not-implement-yet","text":"","title":"for example if function under test not implement yet"},{"location":"blog/Python/pytest/#reference","text":"PyTest for Absolute Beginners pytest IndianPythonista","title":"Reference"},{"location":"blog/Python/pytest/conftest/","tags":["pytest","unittest","python"],"text":"Using conftest.py to share fixtures and hooks among all tests autouse # conftest.py from typing import Iterator import pytest @pytest . fixture ( autouse = True ) def setup_teardownII () -> Iterator [ None ]: print ( \"run setup fixture before test\" ) yield print ( \"run tear down fixture after test\" ) autouse Set autouse to run this fixture for all tests test_file.py def test_with_fixture () -> None : print ( \"run test III\" ) assert True run pytest verbose python -m pytest -s <test file> Run tests # python -m pytest -s test_file.py # run setup fixture before test run test III .run tear down fixture after test scope # Fixture scopes Fixtures are created when first requested by a test, and are destroyed based on their scope: function: (default) The fixture is destroy at the end of the test, class: module: package: session: The fixture destroy at the end of the last session. scope demo # conftest.py from typing import Iterator import pytest @pytest . fixture ( scope = \"session\" , autouse = True ) def setup_teardownII () -> Iterator [ None ]: print ( \" \\n run setup fixture before session start\" ) yield print ( \"run tear down fixture after session end\" ) test_file.py def test_with_fixture () -> None : print ( \"run test\" ) assert True def test_with_fixture_II () -> None : print ( \"run testII\" ) assert True def test_with_fixtureIII () -> None : print ( \"run test III\" ) assert True run # python -m pytest -s tests/test_file.py # run setup fixture before session start run test .run testII .run test III .run tear down fixture after session end","title":"Pytest conftest"},{"location":"blog/Python/pytest/conftest/#autouse","text":"conftest.py from typing import Iterator import pytest @pytest . fixture ( autouse = True ) def setup_teardownII () -> Iterator [ None ]: print ( \"run setup fixture before test\" ) yield print ( \"run tear down fixture after test\" ) autouse Set autouse to run this fixture for all tests test_file.py def test_with_fixture () -> None : print ( \"run test III\" ) assert True run pytest verbose python -m pytest -s <test file>","title":"autouse"},{"location":"blog/Python/pytest/conftest/#run-tests","text":"python -m pytest -s test_file.py # run setup fixture before test run test III .run tear down fixture after test","title":"Run tests"},{"location":"blog/Python/pytest/conftest/#scope","text":"Fixture scopes Fixtures are created when first requested by a test, and are destroyed based on their scope: function: (default) The fixture is destroy at the end of the test, class: module: package: session: The fixture destroy at the end of the last session.","title":"scope"},{"location":"blog/Python/pytest/conftest/#scope-demo","text":"conftest.py from typing import Iterator import pytest @pytest . fixture ( scope = \"session\" , autouse = True ) def setup_teardownII () -> Iterator [ None ]: print ( \" \\n run setup fixture before session start\" ) yield print ( \"run tear down fixture after session end\" ) test_file.py def test_with_fixture () -> None : print ( \"run test\" ) assert True def test_with_fixture_II () -> None : print ( \"run testII\" ) assert True def test_with_fixtureIII () -> None : print ( \"run test III\" ) assert True","title":"scope demo"},{"location":"blog/Python/pytest/conftest/#run","text":"python -m pytest -s tests/test_file.py # run setup fixture before session start run test .run testII .run test III .run tear down fixture after session end","title":"run"},{"location":"blog/Python/pytest/fixture/","tags":["pytest","unittest","python"],"text":"Fixture are function that help us to arrange the domain/ environment before test and then help us to clean the mess after the test These are accessed by test functions through arguments see demo from typing import Callable from typing import Iterator import pytest @pytest . fixture def setup () -> None : print ( \"run setup fixture before test\" ) @pytest . fixture def setup_teardown () -> Iterator [ None ]: print ( \"run setup fixture before test\" ) yield print ( \"run teardown fixture after test\" ) def test_with_fixture ( setup : Callable ) -> None : print ( \"run test\" ) assert True def test_with_fixture_II ( setup_teardown : Callable ) -> None : print ( \"run testII\" ) assert True run pytest verbose python -m pytest -s <test file>","title":"Pytest fixture"},{"location":"blog/Python/pytest/mock/","tags":["pytest","mock"],"text":"mocking A mock object is a simulated object that mimics the behavior of the smallest testable parts of an application in controlled ways. It\u2019s replace of one or more function or objects calls A mock function call return a predefined value immediately without doing any work In Python mocking implement by unittest.mock module Simple demo # project search \u251c\u2500\u2500 tutorial \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 demo.py \u2514\u2500\u2500 tests \u2514\u2500\u2500 test_demo.py demo.py # method to mock def get_number () -> int : return 5 # function under test def add ( a : int ) -> int : b = get_number () return a + b test_demo.py from unittest.mock import patch , MagicMock @patch ( \"tutorial.demo.get_number\" ) def test_add_mock ( mock_get_number : MagicMock ) -> None : mock_get_number . return_value = 2 result = add ( 1 ) assert result == 3 Warning @path full name of the function or class to patch module_name.func_name for example to path get_number function in demo module. @patch(\"demo.get_number\") MagicMock # Provide a simple mocking interface that allow to mock partial real object that we wont to patch return_value # allows you to choose what the patched callable returns, usually we return the same type of the real callable but controllable side_effect # Change the behavior of the mock side_effect = Iterable # yield the values from defined iterable on subsequent call >>> from unittest.mock import MagicMock >>> m = MagicMock () >>> m.get_data.side_effect = [ 5 , 10 , 15 ] >>> m.get_data () 5 >>> m.get_data () 10 >>> m.get_data () 15 from unittest.mock import patch def my_input () -> int : return 1 def method_to_test (): a = my_input () b = my_input () return a + b @patch ( \"test_demo.my_input\" ) def test_multiple ( mock_my_input ): mock_my_input . side_effect = [ 1 , 2 ] result = method_to_test () assert result == 3 side_effect = Exception # m.check.side_effect = Exception ( \"custom exception\" ) >>> m.check () Traceback ( most recent call last ) : File \"<stdin>\" , line 1 , in <module> File \"/usr/lib/python3.8/unittest/mock.py\" , ... raise effect Exception: custom exception ide_effect = callable # The callable will be executed on each call with the parameters passed when calling the mocked method >>> def call_me ( name ) : ... print ( name ) ... >>> m.run_call.side_effect = call_me >>> m.run_call ( \"a\" ) a >>> m.run_call ( \"b\" ) b >>> m.run_call.call_count 2 >>> m.run_call ( \"b\" ) b >>> m.run_call.call_count 3 Reference # Mock\u2019s return_value & side effect Unit Testing in Python with pytest | Introduction to mock (Part-9) Unit Testing in Python with pytest | Advanced Mocking (Part-10)","title":"PyTest - Mocking"},{"location":"blog/Python/pytest/mock/#simple-demo","text":"project search \u251c\u2500\u2500 tutorial \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 demo.py \u2514\u2500\u2500 tests \u2514\u2500\u2500 test_demo.py demo.py # method to mock def get_number () -> int : return 5 # function under test def add ( a : int ) -> int : b = get_number () return a + b test_demo.py from unittest.mock import patch , MagicMock @patch ( \"tutorial.demo.get_number\" ) def test_add_mock ( mock_get_number : MagicMock ) -> None : mock_get_number . return_value = 2 result = add ( 1 ) assert result == 3 Warning @path full name of the function or class to patch module_name.func_name for example to path get_number function in demo module. @patch(\"demo.get_number\")","title":"Simple demo"},{"location":"blog/Python/pytest/mock/#magicmock","text":"Provide a simple mocking interface that allow to mock partial real object that we wont to patch","title":"MagicMock"},{"location":"blog/Python/pytest/mock/#return_value","text":"allows you to choose what the patched callable returns, usually we return the same type of the real callable but controllable","title":"return_value"},{"location":"blog/Python/pytest/mock/#side_effect","text":"Change the behavior of the mock","title":"side_effect"},{"location":"blog/Python/pytest/mock/#reference","text":"Mock\u2019s return_value & side effect Unit Testing in Python with pytest | Introduction to mock (Part-9) Unit Testing in Python with pytest | Advanced Mocking (Part-10)","title":"Reference"},{"location":"blog/Python/pytest/params/","tags":["pytest","unittest","python"],"text":"fixture # test_with_params.py from typing import Callable import pytest from _pytest.fixtures import SubRequest @pytest . fixture ( params = [ 10 , 20 , 30 ]) def demo_fixture ( request : SubRequest ) -> None : print ( f \" \\n run test with param: { request . param } \" ) def test_with_fixture ( demo_fixture : Callable ) -> None : print ( \"run test\" ) assert True python -m pytest -s tests/test_with_params.py # tests/test_with_params.py run test with param: 10 run test . run test with param: 20 run test . run test with param: 30 run test . marker.parametrize # from typing import Callable import pytest from _pytest.fixtures import SubRequest @pytest . mark . parametrize ( \"a, b, result\" , [( 1 , 2 , 3 ), ( 5 , 5 , 11 ), ( 2 , 2 , 4 )]) def test_add ( a : int , b : int , result : int ) -> None : assert a + b == result run test # python -m pytest -s -v tests/test_with_params.py # tests/test_with_params.py::test_add [ 1 -2-3 ] PASSED tests/test_with_params.py::test_add [ 5 -5-11 ] FAILED tests/test_with_params.py::test_add [ 2 -2-4 ] PASSED ====================================================================== FAILURES ======================================================================= __________________________________________________________________ test_add [ 5 -5-11 ] ___________________________________________________________________ a = 5 , b = 5 , result = 11 @pytest.mark.parametrize ( \"a, b, result\" , [( 1 , 2 , 3 ) , ( 5 , 5 , 11 ) , ( 2 , 2 , 4 )]) def test_add ( a: int, b: int, result: int ) -> None: > assert a + b == result E assert 10 == 11 E -10 E +11 tests/test_with_params.py:18: AssertionError ========================================================= 1 failed, 2 passed in 0 .03 seconds","title":"pytest parameterize tests"},{"location":"blog/Python/pytest/params/#fixture","text":"test_with_params.py from typing import Callable import pytest from _pytest.fixtures import SubRequest @pytest . fixture ( params = [ 10 , 20 , 30 ]) def demo_fixture ( request : SubRequest ) -> None : print ( f \" \\n run test with param: { request . param } \" ) def test_with_fixture ( demo_fixture : Callable ) -> None : print ( \"run test\" ) assert True python -m pytest -s tests/test_with_params.py # tests/test_with_params.py run test with param: 10 run test . run test with param: 20 run test . run test with param: 30 run test .","title":"fixture"},{"location":"blog/Python/pytest/params/#markerparametrize","text":"from typing import Callable import pytest from _pytest.fixtures import SubRequest @pytest . mark . parametrize ( \"a, b, result\" , [( 1 , 2 , 3 ), ( 5 , 5 , 11 ), ( 2 , 2 , 4 )]) def test_add ( a : int , b : int , result : int ) -> None : assert a + b == result","title":"marker.parametrize"},{"location":"blog/Python/pytest/params/#run-test","text":"python -m pytest -s -v tests/test_with_params.py # tests/test_with_params.py::test_add [ 1 -2-3 ] PASSED tests/test_with_params.py::test_add [ 5 -5-11 ] FAILED tests/test_with_params.py::test_add [ 2 -2-4 ] PASSED ====================================================================== FAILURES ======================================================================= __________________________________________________________________ test_add [ 5 -5-11 ] ___________________________________________________________________ a = 5 , b = 5 , result = 11 @pytest.mark.parametrize ( \"a, b, result\" , [( 1 , 2 , 3 ) , ( 5 , 5 , 11 ) , ( 2 , 2 , 4 )]) def test_add ( a: int, b: int, result: int ) -> None: > assert a + b == result E assert 10 == 11 E -10 E +11 tests/test_with_params.py:18: AssertionError ========================================================= 1 failed, 2 passed in 0 .03 seconds","title":"run test"},{"location":"blog/Python/python/iterator_and_generator/","tags":["python","iterator","generator"],"text":"Iterator in Python is simply an object that can be iterated upon. An object which will return data, one element at a time. Python iterator object must implement two special methods (iterator protocol) - iter () - next () iterable An object is called iterable if we can get an iterator from it. Container like list and tuple are iterable object Custom iterators # class Base2 (): def __init__ ( self , max ) -> None : self . __max = max self . __current = 0 def __iter__ ( self ): return self def __next__ ( self ): if self . __current > self . __max : raise StopIteration () result = 2 ** self . __current self . __current += 1 return result iter and next iter(obj) and next(obj) method is the same like calling obj.__next__() and obj.__iter__() method iterator usage # Iterator raise StopIteration exception when it\u2019s ended worker = Base2 ( 2 ) worker_iter = worker . __iter__ () print ( next ( worker_iter )) print ( worker_iter . __next__ ()) print ( next ( worker_iter )) print ( next ( worker_iter )) 1 2 4 Traceback ( most recent call last ): File \"/home/user/projects/blog/examples/python/python/custom_iterators.py\" , line 22 , in < module > print ( next ( worker_iter )) File \"/home/user/projects/blog/examples/python/python/custom_iterators.py\" , line 12 , in __next__ raise StopIteration () StopIteration Generator # def base2 ( max ): for x in range ( max ): yield 2 ** x print ( base2 ( 3 )) for i in base2 ( 3 ): print ( i ) < generator object base2 at 0x7f8aa5cc07b0 > 1 2 4 Generator Expression # g = ( 2 ** x for x in range ( 3 )) print ( g ) for i in g : print ( i ) # < generator object < genexpr > at 0x7f9af03247b0 > 1 2 4 Reference # How to make an iterator in Python","title":"Iterator and Generator hello"},{"location":"blog/Python/python/iterator_and_generator/#custom-iterators","text":"class Base2 (): def __init__ ( self , max ) -> None : self . __max = max self . __current = 0 def __iter__ ( self ): return self def __next__ ( self ): if self . __current > self . __max : raise StopIteration () result = 2 ** self . __current self . __current += 1 return result iter and next iter(obj) and next(obj) method is the same like calling obj.__next__() and obj.__iter__() method","title":"Custom iterators"},{"location":"blog/Python/python/iterator_and_generator/#iterator-usage","text":"Iterator raise StopIteration exception when it\u2019s ended worker = Base2 ( 2 ) worker_iter = worker . __iter__ () print ( next ( worker_iter )) print ( worker_iter . __next__ ()) print ( next ( worker_iter )) print ( next ( worker_iter )) 1 2 4 Traceback ( most recent call last ): File \"/home/user/projects/blog/examples/python/python/custom_iterators.py\" , line 22 , in < module > print ( next ( worker_iter )) File \"/home/user/projects/blog/examples/python/python/custom_iterators.py\" , line 12 , in __next__ raise StopIteration () StopIteration","title":"iterator usage"},{"location":"blog/Python/python/iterator_and_generator/#generator","text":"def base2 ( max ): for x in range ( max ): yield 2 ** x print ( base2 ( 3 )) for i in base2 ( 3 ): print ( i ) < generator object base2 at 0x7f8aa5cc07b0 > 1 2 4","title":"Generator"},{"location":"blog/Python/python/iterator_and_generator/#generator-expression","text":"g = ( 2 ** x for x in range ( 3 )) print ( g ) for i in g : print ( i ) # < generator object < genexpr > at 0x7f9af03247b0 > 1 2 4","title":"Generator Expression"},{"location":"blog/Python/python/iterator_and_generator/#reference","text":"How to make an iterator in Python","title":"Reference"},{"location":"blog/Python/python/bytearray/","tags":["python"],"text":"The bytearray class is a mutable sequence of integers in the range 0 <= x < 256. data = bytearray ( 10 ) data bytearray ( b ' \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ' ) mutable vs immutable A mutable object can be changed after it\u2019s created, and an immutable object can\u2019t. bytearray, bytes and string # bytes and bytearray classes both hold arrays of bytes, where each byte can take on a value between 0 and 255. The primary difference is that a bytes object is immutable , meaning that once created, you cannot modify its elements. By contrast, a bytearray object allows you to modify its elements # create array with 10 bytes data = bytearray ( 10 ) b = bytes ( data ) >>> b b ' \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ' my_str = \"abcd\" >>> my_data = bytearray ( my_str , 'ascii' ) >>> my_data bytearray ( b 'abcd' ) >>> len ( my_data ) 4 >>> my_data = bytearray ( my_str , 'utf-16' ) >>> len ( my_data ) 10 more # >>> data = bytearray ([ 65 , 66 , 67 ]) >>> data bytearray ( b 'ABC' ) # show etch value as hex >>> [ hex ( c ) for c in data ] [ '0x41' , '0x42' , '0x43' ] # append >>> data . append ( 68 ) data bytearray ( b 'ABCD' ) # replace >>> data [ 1 : 3 ] = [ 0x62 , 0x63 ] >>> data bytearray ( b 'AbcD' ) # extend >>> data . extend ([ 0x45 , 0x46 ]) >>> data bytearray ( b 'AbcDEF' ) # extend >>> new_data = bytearray ( b \"GH\" ) >>> new_data bytearray ( b 'GH' ) >>> data + new_data bytearray ( b 'AbcDEFGH' )","title":"Bytearray"},{"location":"blog/Python/python/bytearray/#bytearray-bytes-and-string","text":"bytes and bytearray classes both hold arrays of bytes, where each byte can take on a value between 0 and 255. The primary difference is that a bytes object is immutable , meaning that once created, you cannot modify its elements. By contrast, a bytearray object allows you to modify its elements # create array with 10 bytes data = bytearray ( 10 ) b = bytes ( data ) >>> b b ' \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ' my_str = \"abcd\" >>> my_data = bytearray ( my_str , 'ascii' ) >>> my_data bytearray ( b 'abcd' ) >>> len ( my_data ) 4 >>> my_data = bytearray ( my_str , 'utf-16' ) >>> len ( my_data ) 10","title":"bytearray, bytes and string"},{"location":"blog/Python/python/bytearray/#more","text":">>> data = bytearray ([ 65 , 66 , 67 ]) >>> data bytearray ( b 'ABC' ) # show etch value as hex >>> [ hex ( c ) for c in data ] [ '0x41' , '0x42' , '0x43' ] # append >>> data . append ( 68 ) data bytearray ( b 'ABCD' ) # replace >>> data [ 1 : 3 ] = [ 0x62 , 0x63 ] >>> data bytearray ( b 'AbcD' ) # extend >>> data . extend ([ 0x45 , 0x46 ]) >>> data bytearray ( b 'AbcDEF' ) # extend >>> new_data = bytearray ( b \"GH\" ) >>> new_data bytearray ( b 'GH' ) >>> data + new_data bytearray ( b 'AbcDEFGH' )","title":"more"},{"location":"blog/Python/python/logging/","tags":["python"],"text":"Logging # Add Custom level Color log","title":"Python Logging"},{"location":"blog/Python/python/logging/#logging","text":"Add Custom level Color log","title":"Logging"},{"location":"blog/Python/python/logging/color_log_by_level/","tags":["python","logging"],"text":"Logging Formatting # Formatter enrich the log message by adding more information like: time, python file, logger name and more simple_formatter.py import logging FMT = \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" logging . basicConfig ( format = FMT , level = logging . INFO ) log = logging . getLogger ( \"demo\" ) log . info ( \"formatter example\" ) result 2022 -11-26 07 :10:35,660 - demo - INFO - formatter example name format desc asctime %(asctime)s time when the LogRecord was created name %(name)s Name of the logger used to log the call. levelname %(levelname)s Text logging level for the message (\u2018DEBUG\u2019, \u2018INFO\u2019, \u2018WARNING\u2019, \u2018ERROR\u2019, \u2018CRITICAL\u2019) message %(message)s The logged message, computed as msg % args Tip more log record attribute Custom formatter # Extend the logging.Formatter class and override the format method Color formatter Custom Level logging/color.py import logging FMT = \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" class CustomFormatter ( logging . Formatter ): GRAY = ' \\u001b [38;21m' BLUE = ' \\u001b [38;5;39m' YELLOW = ' \\u001b [38;5;226m' RED = ' \\u001b [38;5;196m' BOLD_RED = ' \\u001b [31;1m' __reset = ' \\u001b [0m' GREEN = \" \\u001b [32m\" MAGENTA = \" \\u001b [35m\" CYAN = \" \\u001b [36m\" BACKGROUND_RED = \" \\u001b [41m\" BACKGROUND_GREEN = \" \\u001b [42m\" def __init__ ( self , fmt ): super () . __init__ () self . fmt = fmt self . __color_formats = { logging . DEBUG : self . GRAY + self . fmt + self . __reset , logging . INFO : self . BLUE + self . fmt + self . __reset , logging . WARNING : self . YELLOW + self . fmt + self . __reset , logging . ERROR : self . RED + self . fmt + self . __reset , logging . CRITICAL : self . BOLD_RED + self . fmt + self . __reset , } def set_level_color ( self , level , color ): \"\"\" Color code: https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html \"\"\" self . __color_formats [ level ] = color + self . fmt + self . __reset def format ( self , record ): log_fmt = self . __color_formats . get ( record . levelno ) formatter = logging . Formatter ( log_fmt ) return formatter . format ( record ) logger = logging . getLogger ( __name__ ) logger . setLevel ( logging . DEBUG ) LOG_LEVEL_CLIENT = 21 logging . CLIENT = LOG_LEVEL_CLIENT logging . addLevelName ( logging . CLIENT , \"CLIENT\" ) logger = logging . getLogger ( \"color_logger\" ) logger . setLevel ( logging . DEBUG ) #create console handler and set level to debug handler = logging . StreamHandler () handler . setLevel ( logging . DEBUG ) color_formatter = CustomFormatter ( FMT ) color_formatter . set_level_color ( logging . CLIENT , CustomFormatter . BACKGROUND_GREEN ) handler . setFormatter ( color_formatter ) logger . addHandler ( handler ) # usage logger . debug ( 'This is a debug-level message' ) logger . info ( 'This is an info-level message' ) logger . warning ( 'This is a warning-level message' ) logger . error ( 'This is an error-level message' ) logger . critical ( 'This is a critical-level message' ) logger . log ( logging . CLIENT , \"this is client\" )","title":"Color log"},{"location":"blog/Python/python/logging/color_log_by_level/#logging-formatting","text":"Formatter enrich the log message by adding more information like: time, python file, logger name and more simple_formatter.py import logging FMT = \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" logging . basicConfig ( format = FMT , level = logging . INFO ) log = logging . getLogger ( \"demo\" ) log . info ( \"formatter example\" ) result 2022 -11-26 07 :10:35,660 - demo - INFO - formatter example name format desc asctime %(asctime)s time when the LogRecord was created name %(name)s Name of the logger used to log the call. levelname %(levelname)s Text logging level for the message (\u2018DEBUG\u2019, \u2018INFO\u2019, \u2018WARNING\u2019, \u2018ERROR\u2019, \u2018CRITICAL\u2019) message %(message)s The logged message, computed as msg % args Tip more log record attribute","title":"Logging Formatting"},{"location":"blog/Python/python/logging/color_log_by_level/#custom-formatter","text":"Extend the logging.Formatter class and override the format method Color formatter Custom Level logging/color.py import logging FMT = \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" class CustomFormatter ( logging . Formatter ): GRAY = ' \\u001b [38;21m' BLUE = ' \\u001b [38;5;39m' YELLOW = ' \\u001b [38;5;226m' RED = ' \\u001b [38;5;196m' BOLD_RED = ' \\u001b [31;1m' __reset = ' \\u001b [0m' GREEN = \" \\u001b [32m\" MAGENTA = \" \\u001b [35m\" CYAN = \" \\u001b [36m\" BACKGROUND_RED = \" \\u001b [41m\" BACKGROUND_GREEN = \" \\u001b [42m\" def __init__ ( self , fmt ): super () . __init__ () self . fmt = fmt self . __color_formats = { logging . DEBUG : self . GRAY + self . fmt + self . __reset , logging . INFO : self . BLUE + self . fmt + self . __reset , logging . WARNING : self . YELLOW + self . fmt + self . __reset , logging . ERROR : self . RED + self . fmt + self . __reset , logging . CRITICAL : self . BOLD_RED + self . fmt + self . __reset , } def set_level_color ( self , level , color ): \"\"\" Color code: https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html \"\"\" self . __color_formats [ level ] = color + self . fmt + self . __reset def format ( self , record ): log_fmt = self . __color_formats . get ( record . levelno ) formatter = logging . Formatter ( log_fmt ) return formatter . format ( record ) logger = logging . getLogger ( __name__ ) logger . setLevel ( logging . DEBUG ) LOG_LEVEL_CLIENT = 21 logging . CLIENT = LOG_LEVEL_CLIENT logging . addLevelName ( logging . CLIENT , \"CLIENT\" ) logger = logging . getLogger ( \"color_logger\" ) logger . setLevel ( logging . DEBUG ) #create console handler and set level to debug handler = logging . StreamHandler () handler . setLevel ( logging . DEBUG ) color_formatter = CustomFormatter ( FMT ) color_formatter . set_level_color ( logging . CLIENT , CustomFormatter . BACKGROUND_GREEN ) handler . setFormatter ( color_formatter ) logger . addHandler ( handler ) # usage logger . debug ( 'This is a debug-level message' ) logger . info ( 'This is an info-level message' ) logger . warning ( 'This is a warning-level message' ) logger . error ( 'This is an error-level message' ) logger . critical ( 'This is a critical-level message' ) logger . log ( logging . CLIENT , \"this is client\" )","title":"Custom formatter"},{"location":"blog/Python/python/logging/custom_level/","tags":["python","logging"],"text":"Python has six log levels with each one assigned a specific integer indicating the severity of the log: NOTSET=0 DEBUG=10 INFO=20 WARN=30 ERROR=40 CRITICAL=50 using setLevel method on logging and handlers we can control/filter the output logging severity Demo # custom_level.py import logging #create new log level LOG_LEVEL_CLIENT = 21 logging . CLIENT = LOG_LEVEL_CLIENT logging . addLevelName ( logging . CLIENT , \"CLIENT\" ) #create logger with \"mylogger\" logger = logging . getLogger ( \"mylogger\" ) logger . setLevel ( logging . DEBUG ) #create console handler and set level to debug handler = logging . StreamHandler () handler . setLevel ( logging . INFO ) logger . addHandler ( handler ) #create formatter formatter = logging . Formatter ( \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" ) handler . setFormatter ( formatter ) logger . debug ( \"this is debug\" ) logger . info ( \"this is info\" ) logger . log ( logging . CLIENT , \"this is client\" ) logger . warning ( \"this is warning\" ) logger . error ( \"this is error\" ) logger . critical ( \"this is critical\" ) Result 2022-11-26 06:44:19,616 - mylogger - INFO -this is info 2022-11-26 06:44:19,616 - mylogger - CLIENT -this is client 2022-11-26 06:44:19,616 - mylogger - WARNING -this is warning 2022-11-26 06:44:19,616 - mylogger - ERROR -this is error 2022-11-26 06:44:19,616 - mylogger - CRITICAL -this is critical setLevel The above example setLevel method set to severity output to Info No DEBUG logging is \u201cprint\u201d","title":"Add custom level"},{"location":"blog/Python/python/logging/custom_level/#demo","text":"custom_level.py import logging #create new log level LOG_LEVEL_CLIENT = 21 logging . CLIENT = LOG_LEVEL_CLIENT logging . addLevelName ( logging . CLIENT , \"CLIENT\" ) #create logger with \"mylogger\" logger = logging . getLogger ( \"mylogger\" ) logger . setLevel ( logging . DEBUG ) #create console handler and set level to debug handler = logging . StreamHandler () handler . setLevel ( logging . INFO ) logger . addHandler ( handler ) #create formatter formatter = logging . Formatter ( \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" ) handler . setFormatter ( formatter ) logger . debug ( \"this is debug\" ) logger . info ( \"this is info\" ) logger . log ( logging . CLIENT , \"this is client\" ) logger . warning ( \"this is warning\" ) logger . error ( \"this is error\" ) logger . critical ( \"this is critical\" ) Result 2022-11-26 06:44:19,616 - mylogger - INFO -this is info 2022-11-26 06:44:19,616 - mylogger - CLIENT -this is client 2022-11-26 06:44:19,616 - mylogger - WARNING -this is warning 2022-11-26 06:44:19,616 - mylogger - ERROR -this is error 2022-11-26 06:44:19,616 - mylogger - CRITICAL -this is critical setLevel The above example setLevel method set to severity output to Info No DEBUG logging is \u201cprint\u201d","title":"Demo"},{"location":"blog/Python/python/named_tuple/named_tuple/","tags":["python","tuple","namedtuple"],"text":"Basic usage # NameTuple from typing import NamedTuple class MyTuple ( NamedTuple ): id : int name : str t1 = MyTuple ( 1 , \"A\" ) t2 = MyTuple ( * ( 2 , \"B\" )) t3 = MyTuple ( ** { \"id\" : 3 , \"name\" : \"C\" }) t4 = MyTuple . _make ([ 4 , \"D\" ]) print ( t1 ) print ( t2 ) print ( t3 ) print ( t4 )","title":"Python NamedTuple 101"},{"location":"blog/Python/python/named_tuple/named_tuple/#basic-usage","text":"NameTuple from typing import NamedTuple class MyTuple ( NamedTuple ): id : int name : str t1 = MyTuple ( 1 , \"A\" ) t2 = MyTuple ( * ( 2 , \"B\" )) t3 = MyTuple ( ** { \"id\" : 3 , \"name\" : \"C\" }) t4 = MyTuple . _make ([ 4 , \"D\" ]) print ( t1 ) print ( t2 ) print ( t3 ) print ( t4 )","title":"Basic usage"},{"location":"blog/Python/typing/","tags":["python","typing","annotation"],"text":"type hinting # from typing import ( Any, Callable, Generic, Optional, Sequence, Type, TypeVar, Union, cast, ) List, Tuple, Dict # from typing import List , Tuple , Dict l : List [ str ] = [ \"a\" , \"b\" , \"c\" ] t : Tuple [ int , str ] = ( 1 , \"a\" ) d : Dict [ str , int ] = { \"a\" : 1 } overload # from collections.abc import Sequence from typing import overload @overload def double ( input_ : int ) -> int : ... @overload def double ( input_ : Sequence [ int ]) -> list [ int ]: ... def double ( input_ : int | Sequence [ int ]) -> int | list [ int ]: if isinstance ( input_ , Sequence ): return [ i * 2 for i in input_ ] return input_ * 2 if __name__ == \"__main__\" : print ( double ( 1 )) print ( double ([ 1 , 2 , 3 ])) generic #","title":"type hinting"},{"location":"blog/Python/typing/#type-hinting","text":"from typing import ( Any, Callable, Generic, Optional, Sequence, Type, TypeVar, Union, cast, )","title":"type hinting"},{"location":"blog/Python/typing/#list-tuple-dict","text":"from typing import List , Tuple , Dict l : List [ str ] = [ \"a\" , \"b\" , \"c\" ] t : Tuple [ int , str ] = ( 1 , \"a\" ) d : Dict [ str , int ] = { \"a\" : 1 }","title":"List, Tuple, Dict"},{"location":"blog/Python/typing/#overload","text":"from collections.abc import Sequence from typing import overload @overload def double ( input_ : int ) -> int : ... @overload def double ( input_ : Sequence [ int ]) -> list [ int ]: ... def double ( input_ : int | Sequence [ int ]) -> int | list [ int ]: if isinstance ( input_ , Sequence ): return [ i * 2 for i in input_ ] return input_ * 2 if __name__ == \"__main__\" : print ( double ( 1 )) print ( double ([ 1 , 2 , 3 ]))","title":"overload"},{"location":"blog/Python/typing/#generic","text":"","title":"generic"},{"location":"blog/Python/typing/generic/","tags":["python","typing","annotation"],"text":"Using Generics in python # from typing import List , Generic , TypeVar T = TypeVar ( \"T\" ) class Items ( Generic [ T ]): def __init__ ( self ) -> None : self . __data : List [ T ] = [] def add_item ( self , item : T ) -> None : self . __data . append ( item ) def first ( self ) -> T | None : if self . __data : return self . __data [ 0 ] return None if __name__ == \"__main__\" : items = Items [ str ]() items . add_item ( \"a\" ) # items.add_item(1) other_items = Items [ int ]() other_items . add_item ( 1 ) Reference # Using Generics in Python Python\u2019s covariance and contravariance","title":"Using Generics in python"},{"location":"blog/Python/typing/generic/#using-generics-in-python","text":"from typing import List , Generic , TypeVar T = TypeVar ( \"T\" ) class Items ( Generic [ T ]): def __init__ ( self ) -> None : self . __data : List [ T ] = [] def add_item ( self , item : T ) -> None : self . __data . append ( item ) def first ( self ) -> T | None : if self . __data : return self . __data [ 0 ] return None if __name__ == \"__main__\" : items = Items [ str ]() items . add_item ( \"a\" ) # items.add_item(1) other_items = Items [ int ]() other_items . add_item ( 1 )","title":"Using Generics in python"},{"location":"blog/Python/typing/generic/#reference","text":"Using Generics in Python Python\u2019s covariance and contravariance","title":"Reference"},{"location":"blog/Python/zmq/","tags":["pyzmq","zmq"],"text":"Cookbook # ZMQ Req/Rep pattern with dataclass and msgpack","title":"PyZmq"},{"location":"blog/Python/zmq/#cookbook","text":"ZMQ Req/Rep pattern with dataclass and msgpack","title":"Cookbook"},{"location":"blog/Python/zmq/req_rep_msgpack/","tags":["python","zmq","msgpack"],"text":"Req/Rep zmq pattern with msgpack # ZMQ Req/Rep zmq pattern with python dataclasses and msgpack install # install dependencies pip install msgpack pip install pyzmq demo # req/rep import multiprocessing import logging from dataclasses import dataclass , asdict import msgpack import zmq FMT = \" %(asctime)s - %(lineno)s - %(levelname)s - %(message)s \" logging . basicConfig ( format = FMT , level = logging . INFO ) log = logging . getLogger ( __name__ ) TOPIC = b \"topic\" SERVICE_PORT = 5555 @dataclass class Data_Request : f_int : int f_float : float f_string : str @dataclass class Data_Response : success : bool def server (): context = zmq . Context () socket = context . socket ( zmq . REP ) socket . bind ( f \"tcp://*: { SERVICE_PORT } \" ) topic , data = socket . recv_multipart () msg = msgpack . unpackb ( data ) log . info ( f \"server get request: { msg } \" ) response = Data_Response ( success = True ) data = msgpack . packb ( asdict ( response )) socket . send ( data ) def client (): context = zmq . Context () socket = context . socket ( zmq . REQ ) socket . connect ( f \"tcp://127.0.0.1: { SERVICE_PORT } \" ) # Create request msg msg = Data_Request ( 1 , 2.0 , \"string\" ) raw = asdict ( msg ) data = msgpack . packb ( raw ) socket . send_multipart ([ TOPIC , data ]) # Recv response from server data = socket . recv () # unpack socket data raw = msgpack . unpackb ( data ) # Convert to msg msg = Data_Response ( ** raw ) log . info ( f \"server response: { msg . success } \" ) if __name__ == \"__main__\" : p_server = multiprocessing . Process ( target = server ) p_client = multiprocessing . Process ( target = client ) p_client . start () p_server . start () p_server . join () p_client . join ()","title":"Req/Rep zmq pattern with msgpack"},{"location":"blog/Python/zmq/req_rep_msgpack/#reqrep-zmq-pattern-with-msgpack","text":"ZMQ Req/Rep zmq pattern with python dataclasses and msgpack","title":"Req/Rep zmq pattern with msgpack"},{"location":"blog/Python/zmq/req_rep_msgpack/#install","text":"install dependencies pip install msgpack pip install pyzmq","title":"install"},{"location":"blog/Python/zmq/req_rep_msgpack/#demo","text":"req/rep import multiprocessing import logging from dataclasses import dataclass , asdict import msgpack import zmq FMT = \" %(asctime)s - %(lineno)s - %(levelname)s - %(message)s \" logging . basicConfig ( format = FMT , level = logging . INFO ) log = logging . getLogger ( __name__ ) TOPIC = b \"topic\" SERVICE_PORT = 5555 @dataclass class Data_Request : f_int : int f_float : float f_string : str @dataclass class Data_Response : success : bool def server (): context = zmq . Context () socket = context . socket ( zmq . REP ) socket . bind ( f \"tcp://*: { SERVICE_PORT } \" ) topic , data = socket . recv_multipart () msg = msgpack . unpackb ( data ) log . info ( f \"server get request: { msg } \" ) response = Data_Response ( success = True ) data = msgpack . packb ( asdict ( response )) socket . send ( data ) def client (): context = zmq . Context () socket = context . socket ( zmq . REQ ) socket . connect ( f \"tcp://127.0.0.1: { SERVICE_PORT } \" ) # Create request msg msg = Data_Request ( 1 , 2.0 , \"string\" ) raw = asdict ( msg ) data = msgpack . packb ( raw ) socket . send_multipart ([ TOPIC , data ]) # Recv response from server data = socket . recv () # unpack socket data raw = msgpack . unpackb ( data ) # Convert to msg msg = Data_Response ( ** raw ) log . info ( f \"server response: { msg . success } \" ) if __name__ == \"__main__\" : p_server = multiprocessing . Process ( target = server ) p_client = multiprocessing . Process ( target = client ) p_client . start () p_server . start () p_server . join () p_client . join ()","title":"demo"},{"location":"blog/ROS2/","text":"CPP # Read news Python # Read news Launch # Ignition # Gazebo # books # A Concise Introduction to Robot Programming with ROS2 good sites # articulatedrobotics packages to check # YASMIN State machine gym-ignition workshop to do # ROS 2 Executor: How to make it efficient, real-time and deterministic? Video to watch # KR Autonomous Flight: An Open Source Flight Stack for GPS-denied UAVs","title":"Index"},{"location":"blog/ROS2/#cpp","text":"Read news","title":" CPP"},{"location":"blog/ROS2/#python","text":"Read news","title":" Python"},{"location":"blog/ROS2/#launch","text":"","title":" Launch"},{"location":"blog/ROS2/#ignition","text":"","title":" Ignition"},{"location":"blog/ROS2/#gazebo","text":"","title":" Gazebo"},{"location":"blog/ROS2/#books","text":"A Concise Introduction to Robot Programming with ROS2","title":"books"},{"location":"blog/ROS2/#good-sites","text":"articulatedrobotics","title":"good sites"},{"location":"blog/ROS2/#packages-to-check","text":"YASMIN State machine gym-ignition","title":"packages to check"},{"location":"blog/ROS2/#workshop-to-do","text":"ROS 2 Executor: How to make it efficient, real-time and deterministic?","title":"workshop to do"},{"location":"blog/ROS2/#video-to-watch","text":"KR Autonomous Flight: An Open Source Flight Stack for GPS-denied UAVs","title":"Video to watch"},{"location":"blog/ROS2/to_read/","tags":["ros2"],"text":"ros-tooling domain bridge build deb # Building a custom Debian package How to build a local Debian ROS2 package cmake # CMake basics","title":"ROS2 pkg to read about and try"},{"location":"blog/ROS2/to_read/#build-deb","text":"Building a custom Debian package How to build a local Debian ROS2 package","title":"build deb"},{"location":"blog/ROS2/to_read/#cmake","text":"CMake basics","title":"cmake"},{"location":"blog/ROS2/cli/action/","tags":["action","cli"],"text":"Demo # ros2 run turtlesim turtlesim_node Check for actions # cli ros2 action list /turtle1/rotate_absolute # -t show action type ros2 action list -t /turtle1/rotate_absolute [ turtlesim/action/RotateAbsolute ] Show interface # ros2 interface show turtlesim/action/RotateAbsolute # Request: The desired heading in radians float32 theta --- # Result: The angular displacement in radians to the starting position float32 delta --- # Feedback: The remaining rotation in radians float32 remaining send goal # # ros2 action send_goal action_name action_type value # -f show feedback ros2 action send_goal -f /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: 1.575} Waiting for an action server to become available... Sending goal: theta: 1.575 Feedback: remaining: 1.5750000476837158 Goal accepted with ID: 8340924a5f1c4e75b36ae3d95f399429 Feedback: remaining: 1.559000015258789 ... Feedback: remaining: 0.007000088691711426 Result: delta: -1.5679999589920044 Goal finished with status: SUCCEEDED","title":"ROS2 action cli"},{"location":"blog/ROS2/cli/action/#demo","text":"ros2 run turtlesim turtlesim_node","title":"Demo"},{"location":"blog/ROS2/cli/action/#check-for-actions","text":"cli ros2 action list /turtle1/rotate_absolute # -t show action type ros2 action list -t /turtle1/rotate_absolute [ turtlesim/action/RotateAbsolute ]","title":"Check for actions"},{"location":"blog/ROS2/cli/action/#show-interface","text":"ros2 interface show turtlesim/action/RotateAbsolute # Request: The desired heading in radians float32 theta --- # Result: The angular displacement in radians to the starting position float32 delta --- # Feedback: The remaining rotation in radians float32 remaining","title":"Show interface"},{"location":"blog/ROS2/cli/action/#send-goal","text":"# ros2 action send_goal action_name action_type value # -f show feedback ros2 action send_goal -f /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: 1.575} Waiting for an action server to become available... Sending goal: theta: 1.575 Feedback: remaining: 1.5750000476837158 Goal accepted with ID: 8340924a5f1c4e75b36ae3d95f399429 Feedback: remaining: 1.559000015258789 ... Feedback: remaining: 0.007000088691711426 Result: delta: -1.5679999589920044 Goal finished with status: SUCCEEDED","title":"send goal"},{"location":"blog/ROS2/cli/run_simple_node/","tags":["ros2","cli","namespace","remap"],"text":"Run ROS2 Node # Run minimal ROS2 node from: cli add namespace remap topic remap node name launch file cli control debug level Run from cli # ros2 run params_demos minimal # [ INFO ] [ 1680205241 .556490384 ] [ simple_param_node ] : my_int: 3 [ INFO ] [ 1680205242 .543293520 ] [ simple_param_node ] : my_int: 2 [ INFO ] [ 1680205243 .543186445 ] [ simple_param_node ] : my_int: 1 [ INFO ] [ 1680205244 .543174591 ] [ simple_param_node ] : close timer ros2 node list # /simple_param_node Add namespace # terminal 1 ros2 run params_demos minimal --ros-args --remap __ns: = /custom terminal 2 ros2 node list # /custom/simple_param_node Remap topic name # terminal 1 # without namespace ros2 run params_demos minimal --ros-args --remap /simple_param_node/my_topic: = /new_topic # with namespace ros2 run params_demos minimal --ros-args --remap /custom/simple_param_node/my_topic: = /new_topic --remap __ns: = /custom terminal 2 ros2 node list # /custom/simple_param_node ros2 topic list # /new_topic Topic absolute name topic name start with forward slash are absolute when you rename topic and the remap topic name are not absolute. namespace add to the topic name as prefix ros2 run params_demos minimal --ros-args --remap /custom/simple_param_node/my_topic: = new_topic --remap __ns: = /custom ros2 topic list # /custom_ns/new_topic ros2 run params_demos minimal --ros-args --remap /custom/simple_param_node/my_topic: = /new_topic --remap __ns: = /custom ros2 topic list # /new_topic Add fqn to topic name Topic and Service name mapping to DDS fqn = self . get_fully_qualified_name () self . get_logger () . info ( f \"node name: { node_name } \" ) self . pub = self . create_publisher ( Int32 , fqn + TOPIC , 10 ) Remap node name # Terminal 1 ros2 run params_demos minimal --ros-args --remap __node: = node_new_name Terminal 2 ros2 node list # /node_new_name ros2 topic list # /node_new_name/my_topic /parameter_events /rosout Remap node name with namespace # Terminal 1 run params_demos minimal --ros-args --remap __node: = node_new_name --remap __ns: = /custom Terminal 2 ros2 node list # /custom/node_new_name ros2 topic list # /custom/node_new_name/my_topic /parameter_events /rosout Note name = self . get_name () ns = self . get_namespace () fqn = self . get_fully_qualified_name () self . get_logger () . info ( f \"node name: { name } \" ) self . get_logger () . info ( f \"ns: { ns } \" ) self . get_logger () . info ( f \"fqn: { fqn } \" ) ros2 run params_demos minimal --ros-args --remap __node: = node_new_name --remap __ns: = /custom [ INFO ] [ 1680233355 .573926310 ] [ custom.node_new_name ] : node name: node_new_name [ INFO ] [ 1680233355 .574155685 ] [ custom.node_new_name ] : ns: /custom [ INFO ] [ 1680233355 .574342657 ] [ custom.node_new_name ] : fqn: /custom/node_new_name launch # from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'params_demos' , namespace = 'custom' , executable = 'minimal' , name = 'simple_node' ) ld . add_action ( sim_node ) return ld ros2 node list /custom/simple_node # ros2 topic list /custom/simple_node/my_topic remap topics # from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'params_demos' , namespace = 'custom' , executable = 'minimal' , name = 'simple_node' , remappings = [ ( \"/custom/simple_node/my_topic\" , \"/new_topic_name\" ) ] ) ld . add_action ( sim_node ) return ld ros2 node list /custom/simple_node # ros2 topic list /new_topic_name cli and launch logging level control # more ros2 logging info cli # loging level: debug info warn error terminal ros2 run params_demos minimal --ros-args --log-level debug launch # from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'params_demos' , namespace = 'custom' , executable = 'minimal' , name = 'simple_node' , remappings = [ ( \"/custom/simple_node/my_topic\" , \"/new_topic_name\" ) ], arguments = [ '--ros-args' , '--log-level' , 'warn' ] ) ld . add_action ( sim_node ) return ld Reference # ROS Command Line Arguments Topic and Service name mapping to DDS","title":"Run ROS2 Node"},{"location":"blog/ROS2/cli/run_simple_node/#run-ros2-node","text":"Run minimal ROS2 node from: cli add namespace remap topic remap node name launch file cli control debug level","title":"Run ROS2 Node"},{"location":"blog/ROS2/cli/run_simple_node/#run-from-cli","text":"ros2 run params_demos minimal # [ INFO ] [ 1680205241 .556490384 ] [ simple_param_node ] : my_int: 3 [ INFO ] [ 1680205242 .543293520 ] [ simple_param_node ] : my_int: 2 [ INFO ] [ 1680205243 .543186445 ] [ simple_param_node ] : my_int: 1 [ INFO ] [ 1680205244 .543174591 ] [ simple_param_node ] : close timer ros2 node list # /simple_param_node","title":"Run from cli"},{"location":"blog/ROS2/cli/run_simple_node/#add-namespace","text":"terminal 1 ros2 run params_demos minimal --ros-args --remap __ns: = /custom terminal 2 ros2 node list # /custom/simple_param_node","title":"Add namespace"},{"location":"blog/ROS2/cli/run_simple_node/#remap-topic-name","text":"terminal 1 # without namespace ros2 run params_demos minimal --ros-args --remap /simple_param_node/my_topic: = /new_topic # with namespace ros2 run params_demos minimal --ros-args --remap /custom/simple_param_node/my_topic: = /new_topic --remap __ns: = /custom terminal 2 ros2 node list # /custom/simple_param_node ros2 topic list # /new_topic Topic absolute name topic name start with forward slash are absolute when you rename topic and the remap topic name are not absolute. namespace add to the topic name as prefix ros2 run params_demos minimal --ros-args --remap /custom/simple_param_node/my_topic: = new_topic --remap __ns: = /custom ros2 topic list # /custom_ns/new_topic ros2 run params_demos minimal --ros-args --remap /custom/simple_param_node/my_topic: = /new_topic --remap __ns: = /custom ros2 topic list # /new_topic Add fqn to topic name Topic and Service name mapping to DDS fqn = self . get_fully_qualified_name () self . get_logger () . info ( f \"node name: { node_name } \" ) self . pub = self . create_publisher ( Int32 , fqn + TOPIC , 10 )","title":"Remap topic name"},{"location":"blog/ROS2/cli/run_simple_node/#remap-node-name","text":"Terminal 1 ros2 run params_demos minimal --ros-args --remap __node: = node_new_name Terminal 2 ros2 node list # /node_new_name ros2 topic list # /node_new_name/my_topic /parameter_events /rosout","title":"Remap node name"},{"location":"blog/ROS2/cli/run_simple_node/#remap-node-name-with-namespace","text":"Terminal 1 run params_demos minimal --ros-args --remap __node: = node_new_name --remap __ns: = /custom Terminal 2 ros2 node list # /custom/node_new_name ros2 topic list # /custom/node_new_name/my_topic /parameter_events /rosout Note name = self . get_name () ns = self . get_namespace () fqn = self . get_fully_qualified_name () self . get_logger () . info ( f \"node name: { name } \" ) self . get_logger () . info ( f \"ns: { ns } \" ) self . get_logger () . info ( f \"fqn: { fqn } \" ) ros2 run params_demos minimal --ros-args --remap __node: = node_new_name --remap __ns: = /custom [ INFO ] [ 1680233355 .573926310 ] [ custom.node_new_name ] : node name: node_new_name [ INFO ] [ 1680233355 .574155685 ] [ custom.node_new_name ] : ns: /custom [ INFO ] [ 1680233355 .574342657 ] [ custom.node_new_name ] : fqn: /custom/node_new_name","title":"Remap node name with namespace"},{"location":"blog/ROS2/cli/run_simple_node/#launch","text":"from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'params_demos' , namespace = 'custom' , executable = 'minimal' , name = 'simple_node' ) ld . add_action ( sim_node ) return ld ros2 node list /custom/simple_node # ros2 topic list /custom/simple_node/my_topic","title":"launch"},{"location":"blog/ROS2/cli/run_simple_node/#remap-topics","text":"from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'params_demos' , namespace = 'custom' , executable = 'minimal' , name = 'simple_node' , remappings = [ ( \"/custom/simple_node/my_topic\" , \"/new_topic_name\" ) ] ) ld . add_action ( sim_node ) return ld ros2 node list /custom/simple_node # ros2 topic list /new_topic_name","title":"remap topics"},{"location":"blog/ROS2/cli/run_simple_node/#cli-and-launch-logging-level-control","text":"more ros2 logging info","title":"cli and launch logging level control"},{"location":"blog/ROS2/cli/run_simple_node/#cli","text":"loging level: debug info warn error terminal ros2 run params_demos minimal --ros-args --log-level debug","title":"cli"},{"location":"blog/ROS2/cli/run_simple_node/#launch_1","text":"from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'params_demos' , namespace = 'custom' , executable = 'minimal' , name = 'simple_node' , remappings = [ ( \"/custom/simple_node/my_topic\" , \"/new_topic_name\" ) ], arguments = [ '--ros-args' , '--log-level' , 'warn' ] ) ld . add_action ( sim_node ) return ld","title":"launch"},{"location":"blog/ROS2/cli/run_simple_node/#reference","text":"ROS Command Line Arguments Topic and Service name mapping to DDS","title":"Reference"},{"location":"blog/ROS2/control2/","tags":["ros2","control2"],"text":"sudo apt install ros-humble-ros2-control sudo apt install ros-humble-ros2-controllers sudo apt install ros-humble-gazebo-ros2-control Demo usage # ros2 control list_hardware_interfaces ros2 run controller_manager spawner diff_cont ros2 run controller_manager spawner joint_broad bash terminal=\"teleop\" ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args -r /cmd_vel:=/diff_cont/cmd_vel_unstamped Resource # #12 - ros2_control Concept & Simulation Solving the problem EVERY robot has (with ros2_control)","title":"ROS2 Control_2"},{"location":"blog/ROS2/control2/#demo-usage","text":"ros2 control list_hardware_interfaces ros2 run controller_manager spawner diff_cont ros2 run controller_manager spawner joint_broad bash terminal=\"teleop\" ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args -r /cmd_vel:=/diff_cont/cmd_vel_unstamped","title":"Demo usage"},{"location":"blog/ROS2/control2/#resource","text":"#12 - ros2_control Concept & Simulation Solving the problem EVERY robot has (with ros2_control)","title":"Resource"},{"location":"blog/ROS2/control2/tutorial/simple_joint/","tags":["ros2","ros2_control"],"text":"Objective # Create simple urdf with two links and one continues joint Define controllers Position Velocity Effort robot.urdf <?xml version=\"1.0\"?> <robot name= \"simple_example\" > <link name= \"world\" /> <material name= \"blue\" > <color rgba= \"0 0 0.8 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 1\" /> </material> <joint name= \"word2base\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <inertial> <mass value= \"10\" /> <inertia ixx= \"0.4\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"0.4\" iyz= \"0.0\" izz= \"0.2\" /> </inertial> <collision> <geometry> <cylinder radius= \"0.05\" length= \"0.24\" /> </geometry> </collision> <visual> <geometry> <cylinder radius= \"0.05\" length= \"0.24\" /> </geometry> <material name= \"black\" /> </visual> </link> <link name= \"second_link\" > <inertial> <mass value= \"0.18\" /> <inertia ixx= \"0.0002835\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"0.0002835\" iyz= \"0.0\" izz= \"0.000324\" /> </inertial> <origin rpy= \"0.0 0.0 0.0\" xyz= \"0.0 0.0 0.0\" /> <collision> <geometry> <box size= \"0.05 0.05 0.15\" /> </geometry> </collision> <visual> <geometry> <box size= \"0.05 0.05 0.15\" /> </geometry> <material name= \"blue\" /> </visual> </link> <joint name= \"base_to_second_joint\" type= \"continuous\" > <parent link= \"base_link\" /> <child link= \"second_link\" /> <axis xyz= \"0 0 1\" /> <origin xyz= \"0.0 0.0 0.2\" rpy= \"0.0 0.0 0.0\" /> </joint> </robot> Position controller # Add ros2_control definition to urdf Add gazebo plugin definition to urdf Add gazebo plugin yaml file Load controller Pub command ros2_control <ros2_control name= \"GazeboSystem\" type= \"system\" > <hardware> <plugin> gazebo_ros2_control/GazeboSystem </plugin> </hardware> <joint name= \"base_to_second_joint\" > <command_interface name= \"position\" /> <state_interface name= \"position\" /> <state_interface name= \"velocity\" /> <state_interface name= \"effort\" /> </joint> </ros2_control> ros2_Control plugin <gazebo> <plugin filename= \"libgazebo_ros2_control.so\" name= \"gazebo_ros2_control\" > <parameters> $(find simple_joint)/config/position.yaml </parameters> </plugin> </gazebo> position.yaml controller_manager : ros__parameters : update_rate : 100 # Hz position_controller : type : position_controllers/JointGroupPositionController joint_state_broadcaster : type : joint_state_broadcaster/JointStateBroadcaster position_controller : ros__parameters : joints : - base_to_second_joint interface_name : position command_interfaces : - position state_interfaces : - position - velocity usage # ```bash load controllers joint_state # ros2 run controller_manager spawner joint_state_broadcaster position controller # ros2 run controller_manager spawner position_controller topics # ros2 topic list /clock /joint_states /parameter_events /performance_metrics /position_controller/commands /position_controller/transition_event /robot_description /rosout /tf /tf_static ```bash title=\"pub position command ros2 topic pub /position_controller/commands std_msgs/msg/Float64MultiArray \"{data: [340]}\"","title":"ROS2 control, simple tutorial base on one continues joint"},{"location":"blog/ROS2/control2/tutorial/simple_joint/#objective","text":"Create simple urdf with two links and one continues joint Define controllers Position Velocity Effort robot.urdf <?xml version=\"1.0\"?> <robot name= \"simple_example\" > <link name= \"world\" /> <material name= \"blue\" > <color rgba= \"0 0 0.8 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 1\" /> </material> <joint name= \"word2base\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <inertial> <mass value= \"10\" /> <inertia ixx= \"0.4\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"0.4\" iyz= \"0.0\" izz= \"0.2\" /> </inertial> <collision> <geometry> <cylinder radius= \"0.05\" length= \"0.24\" /> </geometry> </collision> <visual> <geometry> <cylinder radius= \"0.05\" length= \"0.24\" /> </geometry> <material name= \"black\" /> </visual> </link> <link name= \"second_link\" > <inertial> <mass value= \"0.18\" /> <inertia ixx= \"0.0002835\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"0.0002835\" iyz= \"0.0\" izz= \"0.000324\" /> </inertial> <origin rpy= \"0.0 0.0 0.0\" xyz= \"0.0 0.0 0.0\" /> <collision> <geometry> <box size= \"0.05 0.05 0.15\" /> </geometry> </collision> <visual> <geometry> <box size= \"0.05 0.05 0.15\" /> </geometry> <material name= \"blue\" /> </visual> </link> <joint name= \"base_to_second_joint\" type= \"continuous\" > <parent link= \"base_link\" /> <child link= \"second_link\" /> <axis xyz= \"0 0 1\" /> <origin xyz= \"0.0 0.0 0.2\" rpy= \"0.0 0.0 0.0\" /> </joint> </robot>","title":"Objective"},{"location":"blog/ROS2/control2/tutorial/simple_joint/#position-controller","text":"Add ros2_control definition to urdf Add gazebo plugin definition to urdf Add gazebo plugin yaml file Load controller Pub command ros2_control <ros2_control name= \"GazeboSystem\" type= \"system\" > <hardware> <plugin> gazebo_ros2_control/GazeboSystem </plugin> </hardware> <joint name= \"base_to_second_joint\" > <command_interface name= \"position\" /> <state_interface name= \"position\" /> <state_interface name= \"velocity\" /> <state_interface name= \"effort\" /> </joint> </ros2_control> ros2_Control plugin <gazebo> <plugin filename= \"libgazebo_ros2_control.so\" name= \"gazebo_ros2_control\" > <parameters> $(find simple_joint)/config/position.yaml </parameters> </plugin> </gazebo> position.yaml controller_manager : ros__parameters : update_rate : 100 # Hz position_controller : type : position_controllers/JointGroupPositionController joint_state_broadcaster : type : joint_state_broadcaster/JointStateBroadcaster position_controller : ros__parameters : joints : - base_to_second_joint interface_name : position command_interfaces : - position state_interfaces : - position - velocity","title":"Position controller"},{"location":"blog/ROS2/control2/tutorial/simple_joint/#usage","text":"```bash load controllers","title":"usage"},{"location":"blog/ROS2/control2/tutorial/simple_joint/#joint_state","text":"ros2 run controller_manager spawner joint_state_broadcaster","title":"joint_state"},{"location":"blog/ROS2/control2/tutorial/simple_joint/#position-controller_1","text":"ros2 run controller_manager spawner position_controller","title":"position controller"},{"location":"blog/ROS2/control2/tutorial/simple_joint/#topics","text":"ros2 topic list /clock /joint_states /parameter_events /performance_metrics /position_controller/commands /position_controller/transition_event /robot_description /rosout /tf /tf_static ```bash title=\"pub position command ros2 topic pub /position_controller/commands std_msgs/msg/Float64MultiArray \"{data: [340]}\"","title":"topics"},{"location":"blog/ROS2/cpp/","tags":["ros2","cpp"],"text":"tutorials debug ros2 node post to read # How to create a ROS2 library","title":"ROS2 CPP,"},{"location":"blog/ROS2/cpp/#post-to-read","text":"How to create a ROS2 library","title":"post to read"},{"location":"blog/ROS2/cpp/debug_with_gdb/","tags":["gdb","debug","ros2","cpp"],"text":"Debug ROS2 Node with GDB # Debug ROS2 cpp node with gdb and gdbserver and vscode build # # set debug flag in CMake file set ( CMAKE_BUILD_TYPE Debug ) # set ( CMAKE_BUILD_TYPE RelWithDebInfo ) # or from cli colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = RelWithDebInfo Run # ros2 run --prefix 'gdb --args' package_name executable_name # example ros2 run --prefix 'gdb --args' cpp_demo_pkg oop_node_simple gdb command # layout next l b main VSCode # set VSCode and gdb as debug server ros2 run --prefix 'gdbserver localhost:3000' package_name executable_name # example ros2 run --prefix 'gdbserver localhost:3000' cpp_demo_pkg oop_node_simple vscode config # launch.json { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"C++ Debugger\" , \"request\" : \"launch\" , \"type\" : \"cppdbg\" , \"miDebuggerServerAddress\" : \"localhost:3000\" , \"cwd\" : \"/\" , \"program\" : \"[build-path-executable]\" } ] } Reference # How can I run ROS2 nodes in a debugger","title":"Debug ROS2 Node with GDB"},{"location":"blog/ROS2/cpp/debug_with_gdb/#debug-ros2-node-with-gdb","text":"Debug ROS2 cpp node with gdb and gdbserver and vscode","title":"Debug ROS2 Node with GDB"},{"location":"blog/ROS2/cpp/debug_with_gdb/#build","text":"# set debug flag in CMake file set ( CMAKE_BUILD_TYPE Debug ) # set ( CMAKE_BUILD_TYPE RelWithDebInfo ) # or from cli colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = RelWithDebInfo","title":"build"},{"location":"blog/ROS2/cpp/debug_with_gdb/#run","text":"ros2 run --prefix 'gdb --args' package_name executable_name # example ros2 run --prefix 'gdb --args' cpp_demo_pkg oop_node_simple","title":"Run"},{"location":"blog/ROS2/cpp/debug_with_gdb/#gdb-command","text":"layout next l b main","title":"gdb command"},{"location":"blog/ROS2/cpp/debug_with_gdb/#vscode","text":"set VSCode and gdb as debug server ros2 run --prefix 'gdbserver localhost:3000' package_name executable_name # example ros2 run --prefix 'gdbserver localhost:3000' cpp_demo_pkg oop_node_simple","title":"VSCode"},{"location":"blog/ROS2/cpp/debug_with_gdb/#vscode-config","text":"launch.json { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"C++ Debugger\" , \"request\" : \"launch\" , \"type\" : \"cppdbg\" , \"miDebuggerServerAddress\" : \"localhost:3000\" , \"cwd\" : \"/\" , \"program\" : \"[build-path-executable]\" } ] }","title":"vscode config"},{"location":"blog/ROS2/cpp/debug_with_gdb/#reference","text":"How can I run ROS2 nodes in a debugger","title":"Reference"},{"location":"blog/ROS2/cpp/qos/","tags":["qos"],"text":"ROS 2 offers a rich variety of Quality of Service (QoS) policies that allow you to tune communication between nodes. A set of QoS \u201c policies \u201d combine to form a QoS \u201c profile \u201d. profile can be choose for given scenario (Sensor data for example)","title":"ROS2 QoS"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/","tags":["gtest","ros2"],"text":"LAB # Create GTest for ROS2 package Create ROS2 package as Library Project # my_cpp_library/ \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 my_cpp_library \u2502 \u2514\u2500\u2500 library_header.h \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main.cpp \u2502 \u2514\u2500\u2500 my_cpp_library.cpp \u2514\u2500\u2500 test \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 demo_test.cpp \u2514\u2500\u2500 main.cpp Library # include folder # my_cpp_library/include/my_cpp_library/library_header.h #pragma once namespace demo { int add ( int a , int b ); } src folder # my_cpp_library/src/my_cpp_library.cpp #include \"library_header.h\" namespace demo { int add ( int a , int b ){ return a + b ; } } my_cpp_library/src/main.cpp #include <iostream> #include \"library_header.h\" int main () { std :: cout << demo :: add ( 1 , 2 ) << std :: endl ; return 0 ; } test folder # my_cpp_library/test/main.cpp #include \"gtest/gtest.h\" int main ( int argc , char ** argv ) { :: testing :: InitGoogleTest ( & argc , argv ); return RUN_ALL_TESTS (); } demo_test.cpp #include \"gtest/gtest.h\" #include \"library_header.h\" TEST ( MyFirstTestSuite , DemoTest ) { EXPECT_TRUE ( true ); } TEST ( MyFirstTestSuite , AddTest ) { auto result = demo :: add ( 1 , 2 ); EXPECT_TRUE ( result == 3 ); } test/CMakeLists.txt if ( BUILD_TESTING ) find_package ( ament_cmake_gtest REQUIRED ) set ( TESTFILES main . cpp demo_test . cpp ) # Add gtest executables ament_add_gtest ( $ { PROJECT_NAME } _test $ { TESTFILES }) target_link_libraries ( $ { PROJECT_NAME } _test my_lib ) install ( TARGETS $ { PROJECT_NAME } _test DESTINATION lib / $ { PROJECT_NAME }) endif () package # CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( my_cpp_library ) set ( CMAKE_CXX_STANDARD 17 ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) include_directories ( include / my_cpp_library ) # Create library add_library ( my_lib src / my_cpp_library . cpp ) # main add_executable ( main src / main . cpp ) target_link_libraries ( main my_lib ) install ( TARGETS main DESTINATION lib / $ { PROJECT_NAME } / ) install ( TARGETS my_lib EXPORT my_lib LIBRARY DESTINATION lib ARCHIVE DESTINATION lib RUNTIME DESTINATION bin INCLUDES DESTINATION include ) add_subdirectory ( test ) ament_package () usage # build test test-result build # colcon build --package-select my_cpp_library test # # Run test colcon test --packages-select my_cpp_library # Run test with verbose output colcon test --packages-select my_cpp_library --event-handler = console_direct+ test-result # Show only result summery colcon test-result --test-result-base build/my_cpp_library","title":"ROS2 basic gtest"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#lab","text":"Create GTest for ROS2 package Create ROS2 package as Library","title":"LAB"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#project","text":"my_cpp_library/ \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 my_cpp_library \u2502 \u2514\u2500\u2500 library_header.h \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main.cpp \u2502 \u2514\u2500\u2500 my_cpp_library.cpp \u2514\u2500\u2500 test \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 demo_test.cpp \u2514\u2500\u2500 main.cpp","title":"Project"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#library","text":"","title":"Library"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#include-folder","text":"my_cpp_library/include/my_cpp_library/library_header.h #pragma once namespace demo { int add ( int a , int b ); }","title":"include folder"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#src-folder","text":"my_cpp_library/src/my_cpp_library.cpp #include \"library_header.h\" namespace demo { int add ( int a , int b ){ return a + b ; } } my_cpp_library/src/main.cpp #include <iostream> #include \"library_header.h\" int main () { std :: cout << demo :: add ( 1 , 2 ) << std :: endl ; return 0 ; }","title":"src folder"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#test-folder","text":"my_cpp_library/test/main.cpp #include \"gtest/gtest.h\" int main ( int argc , char ** argv ) { :: testing :: InitGoogleTest ( & argc , argv ); return RUN_ALL_TESTS (); } demo_test.cpp #include \"gtest/gtest.h\" #include \"library_header.h\" TEST ( MyFirstTestSuite , DemoTest ) { EXPECT_TRUE ( true ); } TEST ( MyFirstTestSuite , AddTest ) { auto result = demo :: add ( 1 , 2 ); EXPECT_TRUE ( result == 3 ); } test/CMakeLists.txt if ( BUILD_TESTING ) find_package ( ament_cmake_gtest REQUIRED ) set ( TESTFILES main . cpp demo_test . cpp ) # Add gtest executables ament_add_gtest ( $ { PROJECT_NAME } _test $ { TESTFILES }) target_link_libraries ( $ { PROJECT_NAME } _test my_lib ) install ( TARGETS $ { PROJECT_NAME } _test DESTINATION lib / $ { PROJECT_NAME }) endif ()","title":"test folder"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#package","text":"CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( my_cpp_library ) set ( CMAKE_CXX_STANDARD 17 ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) include_directories ( include / my_cpp_library ) # Create library add_library ( my_lib src / my_cpp_library . cpp ) # main add_executable ( main src / main . cpp ) target_link_libraries ( main my_lib ) install ( TARGETS main DESTINATION lib / $ { PROJECT_NAME } / ) install ( TARGETS my_lib EXPORT my_lib LIBRARY DESTINATION lib ARCHIVE DESTINATION lib RUNTIME DESTINATION bin INCLUDES DESTINATION include ) add_subdirectory ( test ) ament_package ()","title":"package"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#usage","text":"build test test-result","title":"usage"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#build","text":"colcon build --package-select my_cpp_library","title":"build"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#test","text":"# Run test colcon test --packages-select my_cpp_library # Run test with verbose output colcon test --packages-select my_cpp_library --event-handler = console_direct+","title":"test"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#test-result","text":"Show only result summery colcon test-result --test-result-base build/my_cpp_library","title":"test-result"},{"location":"blog/ROS2/cpp/intra-process/","tags":["tag"],"text":"Reference # Setting up efficient intra-process communication intra process demos source code","title":"intra-process"},{"location":"blog/ROS2/cpp/intra-process/#reference","text":"Setting up efficient intra-process communication intra process demos source code","title":"Reference"},{"location":"blog/ROS2/cpp/plugins/","tags":["ros2","plugins","cpp"],"text":"Reference # - Creating and using plugins (C++) - Package Summary","title":"plugins"},{"location":"blog/ROS2/cpp/plugins/#reference","text":"- Creating and using plugins (C++) - Package Summary","title":"Reference"},{"location":"blog/ROS2/cpp/tutorial/","tags":["ros2","cpp"],"text":"Tutorials # minimal: basic node","title":"ROS2 CPP Tutorial"},{"location":"blog/ROS2/cpp/tutorial/#tutorials","text":"minimal: basic node","title":"Tutorials"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/","tags":["msg"],"text":"LAB # Create and use custom msg Custom msg package # create pkg ros2 pkg create custom_interfaces --build-type ament_cmake \\ --dependencies rclcpp msg folder # create msg folder mkdir msg msg file # create txt file name Age.msg # more types float32 age cmake # Add rosidl_default_generators package add rosidl_generate_interfaces macro find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( $ { PROJECT_NAME } \"msg/Age.msg\" ) package.xml # Add the following lines to the package.xml file. <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> usage # Create publisher to pub the new msg cmake # find_package ( custom_interfaces REQUIRED ) # This is the package that contains the custom interface add_executable ( age_publisher_node src / publish_age . cpp ) ament_target_dependencies ( age_publisher_node rclcpp custom_interfaces ) install ( TARGETS age_publisher_node DESTINATION lib / $ { PROJECT_NAME } ) package.xml # Add depend for our new package <depend> custom_interfaces </depend> Reference # About ROS 2 interfaces","title":"ROS2 custom message"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#lab","text":"Create and use custom msg","title":"LAB"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#custom-msg-package","text":"create pkg ros2 pkg create custom_interfaces --build-type ament_cmake \\ --dependencies rclcpp msg folder # create msg folder mkdir msg msg file # create txt file name Age.msg # more types float32 age","title":"Custom msg package"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#cmake","text":"Add rosidl_default_generators package add rosidl_generate_interfaces macro find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( $ { PROJECT_NAME } \"msg/Age.msg\" )","title":"cmake"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#packagexml","text":"Add the following lines to the package.xml file. <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group>","title":"package.xml"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#usage","text":"Create publisher to pub the new msg","title":"usage"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#cmake_1","text":"find_package ( custom_interfaces REQUIRED ) # This is the package that contains the custom interface add_executable ( age_publisher_node src / publish_age . cpp ) ament_target_dependencies ( age_publisher_node rclcpp custom_interfaces ) install ( TARGETS age_publisher_node DESTINATION lib / $ { PROJECT_NAME } )","title":"cmake"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#packagexml_1","text":"Add depend for our new package <depend> custom_interfaces </depend>","title":"package.xml"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#reference","text":"About ROS 2 interfaces","title":"Reference"},{"location":"blog/ROS2/cpp/tutorial/minimal/","tags":["cpp","node"],"text":"Create package # ros2 pkg create <package_name> --build-type ament_cmake --dependencies <package_dependencies> Minimal Node # minimal.cpp #include \"rclcpp/rclcpp.hpp\" class Minimal : rclcpp :: Node { public : Minimal () : Node ( \"Minimal\" ) { RCLCPP_INFO ( this -> get_logger (), \"hello minimal node\" ); } }; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto node = std :: make_shared < Minimal > (); rclcpp :: shutdown (); return 0 ; } CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( cpp_tutorial ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( fmt REQUIRED ) add_executable ( minimal src / minimal . cpp ) ament_target_dependencies ( minimal rclcpp fmt : fmt ) install ( TARGETS minimal DESTINATION lib / $ { PROJECT_NAME }) ament_package () copy/install binaries install(TARGETS <binary name/target> DESTINATION lib/${PROJECT_NAME} ) copy/install folders install(DIRECTORY launch DESTINATION share/${PROJECT_NAME} ) build # # from WS root folder colcon build --package-select <package name> usage # source install/setup.bash ros2 run cpp_tutorial minimal logging # Write log to file Write log file to file ROS2 Demo mkdir /tmp/ros_log export ROS_LOG_DIR = /tmp/ros_log ros2 run cpp_tutorial minimal","title":"Minimal ROS2 Node"},{"location":"blog/ROS2/cpp/tutorial/minimal/#create-package","text":"ros2 pkg create <package_name> --build-type ament_cmake --dependencies <package_dependencies>","title":"Create package"},{"location":"blog/ROS2/cpp/tutorial/minimal/#minimal-node","text":"minimal.cpp #include \"rclcpp/rclcpp.hpp\" class Minimal : rclcpp :: Node { public : Minimal () : Node ( \"Minimal\" ) { RCLCPP_INFO ( this -> get_logger (), \"hello minimal node\" ); } }; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto node = std :: make_shared < Minimal > (); rclcpp :: shutdown (); return 0 ; } CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( cpp_tutorial ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( fmt REQUIRED ) add_executable ( minimal src / minimal . cpp ) ament_target_dependencies ( minimal rclcpp fmt : fmt ) install ( TARGETS minimal DESTINATION lib / $ { PROJECT_NAME }) ament_package () copy/install binaries install(TARGETS <binary name/target> DESTINATION lib/${PROJECT_NAME} ) copy/install folders install(DIRECTORY launch DESTINATION share/${PROJECT_NAME} )","title":"Minimal Node"},{"location":"blog/ROS2/cpp/tutorial/minimal/#build","text":"# from WS root folder colcon build --package-select <package name>","title":"build"},{"location":"blog/ROS2/cpp/tutorial/minimal/#usage","text":"source install/setup.bash ros2 run cpp_tutorial minimal","title":"usage"},{"location":"blog/ROS2/cpp/tutorial/minimal/#logging","text":"Write log to file Write log file to file ROS2 Demo mkdir /tmp/ros_log export ROS_LOG_DIR = /tmp/ros_log ros2 run cpp_tutorial minimal","title":"logging"},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/","tags":["zero-copy","shm","fastdds"],"text":"ros2_shm_demo/ \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 msg \u2502 \u2514\u2500\u2500 ShmTopic.msg \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 src \u251c\u2500\u2500 listener.cpp \u2514\u2500\u2500 talker.cpp msg # ShmTopic.msg # A generic char array allows passing arbitrary data. # char [ 256 ] data uint8 size uint64 counter uint8 MAX_SIZE = 255 src # talker # talker.cpp #include <chrono> #include <cstring> #include <memory> #include <string> #include <utility> #include \"rclcpp/rclcpp.hpp\" #include \"ros2_shm_demo/msg/shm_topic.hpp\" using namespace std :: chrono_literals ; class Talker : public rclcpp :: Node { private : using Topic = ros2_shm_demo :: msg :: ShmTopic ; public : explicit Talker ( const rclcpp :: NodeOptions & options ) : Node ( \"shm_demo_talker\" , options ) { auto publishMessage = [ this ]() -> void { auto loanedMsg = m_publisher -> borrow_loaned_message (); populateLoanedMessage ( loanedMsg ); m_publisher -> publish ( std :: move ( loanedMsg )); m_count ++ ; }; rclcpp :: QoS qos ( rclcpp :: KeepLast ( 10 )); m_publisher = this -> create_publisher < Topic > ( \"chatter\" , qos ); m_timer = this -> create_wall_timer ( 1 s , publishMessage ); } private : uint64_t m_count = 1 ; rclcpp :: Publisher < Topic >:: SharedPtr m_publisher ; rclcpp :: TimerBase :: SharedPtr m_timer ; void populateLoanedMessage ( rclcpp :: LoanedMessage < Topic > & loanedMsg ) { Topic & msg = loanedMsg . get (); // Create the data. // In general this will not be constant. // Ideally we would create it in place but the ROS API does not allow // that. Therefore we need to copy it to the loaned message. std :: string payload { \"Hello World\" }; // We can track a quasi dynamic (bounded) size like this to avoid // copying more data than needed. msg . size = ( uint8_t ) std :: min ( payload . size (), ( size_t ) Topic :: MAX_SIZE ); msg . counter = m_count ; // Note that msg.data is a std::array generated by the IDL compiler std :: memcpy ( msg . data . data (), payload . data (), msg . size ); RCLCPP_INFO ( this -> get_logger (), \"Publishing %s %lu\" , payload . c_str (), msg . counter ); } }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: NodeOptions options ; rclcpp :: spin ( std :: make_shared < Talker > ( options )); rclcpp :: shutdown (); return 0 ; } listener # listener.cpp #include <cstring> #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"ros2_shm_demo/msg/shm_topic.hpp\" class Listener : public rclcpp :: Node { private : using Topic = ros2_shm_demo :: msg :: ShmTopic ; public : explicit Listener ( const rclcpp :: NodeOptions & options ) : Node ( \"shm_demo_listener\" , options ) { // subscription callback to process arriving data auto callback = [ this ]( const Topic :: SharedPtr msg ) -> void { // Read the message and perform operations accordingly. // Here we copy the data and display it. std :: memcpy ( m_lastData , msg -> data . data (), msg -> size ); m_lastData [ Topic :: MAX_SIZE ] = '\\0' ; // in case there was no zero termination RCLCPP_INFO ( this -> get_logger (), \"Received %s %lu\" , m_lastData , msg -> counter ); }; rclcpp :: QoS qos ( rclcpp :: KeepLast ( 10 )); m_subscription = create_subscription < Topic > ( \"chatter\" , qos , callback ); } private : rclcpp :: Subscription < Topic >:: SharedPtr m_subscription ; char m_lastData [ 256 ]; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: NodeOptions options ; rclcpp :: spin ( std :: make_shared < Listener > ( options )); rclcpp :: shutdown (); return 0 ; } CMakeLists # cmake_minimum_required ( VERSION 3.8 ) project ( ros2_shm_demo ) # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) find_package ( rclcpp REQUIRED ) include_directories ( include ) #msg set ( msg_files \"msg/ShmTopic.msg\" ) rosidl_generate_interfaces ( $ { PROJECT_NAME } $ { msg_files } ) ament_export_dependencies ( rosidl_default_runtime ) # talker add_executable ( talker src / talker . cpp ) ament_target_dependencies ( talker \"rclcpp\" ) rosidl_get_typesupport_target ( cpp_typesupport_target \"${PROJECT_NAME}\" \"rosidl_typesupport_cpp\" ) target_link_libraries ( talker $ { cpp_typesupport_target } ) install ( TARGETS talker DESTINATION lib / $ { PROJECT_NAME }) # listener add_executable ( listener src / listener . cpp ) ament_target_dependencies ( listener \"rclcpp\" ) rosidl_get_typesupport_target ( cpp_typesupport_target \"${PROJECT_NAME}\" \"rosidl_typesupport_cpp\" ) target_link_libraries ( listener $ { cpp_typesupport_target } ) install ( TARGETS listener DESTINATION lib / $ { PROJECT_NAME }) endif () ament_package ()","title":"zero copy shm fastdds"},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#msg","text":"ShmTopic.msg # A generic char array allows passing arbitrary data. # char [ 256 ] data uint8 size uint64 counter uint8 MAX_SIZE = 255","title":"msg"},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#src","text":"","title":"src"},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#talker","text":"talker.cpp #include <chrono> #include <cstring> #include <memory> #include <string> #include <utility> #include \"rclcpp/rclcpp.hpp\" #include \"ros2_shm_demo/msg/shm_topic.hpp\" using namespace std :: chrono_literals ; class Talker : public rclcpp :: Node { private : using Topic = ros2_shm_demo :: msg :: ShmTopic ; public : explicit Talker ( const rclcpp :: NodeOptions & options ) : Node ( \"shm_demo_talker\" , options ) { auto publishMessage = [ this ]() -> void { auto loanedMsg = m_publisher -> borrow_loaned_message (); populateLoanedMessage ( loanedMsg ); m_publisher -> publish ( std :: move ( loanedMsg )); m_count ++ ; }; rclcpp :: QoS qos ( rclcpp :: KeepLast ( 10 )); m_publisher = this -> create_publisher < Topic > ( \"chatter\" , qos ); m_timer = this -> create_wall_timer ( 1 s , publishMessage ); } private : uint64_t m_count = 1 ; rclcpp :: Publisher < Topic >:: SharedPtr m_publisher ; rclcpp :: TimerBase :: SharedPtr m_timer ; void populateLoanedMessage ( rclcpp :: LoanedMessage < Topic > & loanedMsg ) { Topic & msg = loanedMsg . get (); // Create the data. // In general this will not be constant. // Ideally we would create it in place but the ROS API does not allow // that. Therefore we need to copy it to the loaned message. std :: string payload { \"Hello World\" }; // We can track a quasi dynamic (bounded) size like this to avoid // copying more data than needed. msg . size = ( uint8_t ) std :: min ( payload . size (), ( size_t ) Topic :: MAX_SIZE ); msg . counter = m_count ; // Note that msg.data is a std::array generated by the IDL compiler std :: memcpy ( msg . data . data (), payload . data (), msg . size ); RCLCPP_INFO ( this -> get_logger (), \"Publishing %s %lu\" , payload . c_str (), msg . counter ); } }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: NodeOptions options ; rclcpp :: spin ( std :: make_shared < Talker > ( options )); rclcpp :: shutdown (); return 0 ; }","title":"talker"},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#listener","text":"listener.cpp #include <cstring> #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"ros2_shm_demo/msg/shm_topic.hpp\" class Listener : public rclcpp :: Node { private : using Topic = ros2_shm_demo :: msg :: ShmTopic ; public : explicit Listener ( const rclcpp :: NodeOptions & options ) : Node ( \"shm_demo_listener\" , options ) { // subscription callback to process arriving data auto callback = [ this ]( const Topic :: SharedPtr msg ) -> void { // Read the message and perform operations accordingly. // Here we copy the data and display it. std :: memcpy ( m_lastData , msg -> data . data (), msg -> size ); m_lastData [ Topic :: MAX_SIZE ] = '\\0' ; // in case there was no zero termination RCLCPP_INFO ( this -> get_logger (), \"Received %s %lu\" , m_lastData , msg -> counter ); }; rclcpp :: QoS qos ( rclcpp :: KeepLast ( 10 )); m_subscription = create_subscription < Topic > ( \"chatter\" , qos , callback ); } private : rclcpp :: Subscription < Topic >:: SharedPtr m_subscription ; char m_lastData [ 256 ]; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: NodeOptions options ; rclcpp :: spin ( std :: make_shared < Listener > ( options )); rclcpp :: shutdown (); return 0 ; }","title":"listener"},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#cmakelists","text":"cmake_minimum_required ( VERSION 3.8 ) project ( ros2_shm_demo ) # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) find_package ( rclcpp REQUIRED ) include_directories ( include ) #msg set ( msg_files \"msg/ShmTopic.msg\" ) rosidl_generate_interfaces ( $ { PROJECT_NAME } $ { msg_files } ) ament_export_dependencies ( rosidl_default_runtime ) # talker add_executable ( talker src / talker . cpp ) ament_target_dependencies ( talker \"rclcpp\" ) rosidl_get_typesupport_target ( cpp_typesupport_target \"${PROJECT_NAME}\" \"rosidl_typesupport_cpp\" ) target_link_libraries ( talker $ { cpp_typesupport_target } ) install ( TARGETS talker DESTINATION lib / $ { PROJECT_NAME }) # listener add_executable ( listener src / listener . cpp ) ament_target_dependencies ( listener \"rclcpp\" ) rosidl_get_typesupport_target ( cpp_typesupport_target \"${PROJECT_NAME}\" \"rosidl_typesupport_cpp\" ) target_link_libraries ( listener $ { cpp_typesupport_target } ) install ( TARGETS listener DESTINATION lib / $ { PROJECT_NAME }) endif () ament_package ()","title":"CMakeLists"},{"location":"blog/ROS2/demos/","tags":["ros2"],"text":"Demos # Mix Cpp and Python in same pkg","title":"ROS2 demos and tips"},{"location":"blog/ROS2/demos/#demos","text":"Mix Cpp and Python in same pkg","title":"Demos"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/","tags":["ros2"],"text":"Objective # Create pkg with python and cpp code Project # Create new pkg cmake_ament Add python src folder name like the package name Add __init__.py file to mark this folder as a python package mix_pkg \u2502 \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 mix_pkg \u251c\u2500\u2500 mix_pkg \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 simple_sub.py \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 src \u2514\u2500\u2500 simple_pub.cpp CMake # The pkg is a standard cmake pkg with python support Add ament_cmake_python package to use Use ament_python_install_package macro from this pkg to install the python files Copy the python scripts to pkg `install<project_name>lib folder cmake_minimum_required ( VERSION 3.8 ) project ( mix_pkg ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () find_package ( ament_cmake REQUIRED ) find_package ( ament_cmake_python REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( rclpy REQUIRED ) find_package ( std_msgs REQUIRED ) add_executable ( simple_pub src / simple_pub . cpp ) ament_target_dependencies ( simple_pub rclcpp std_msgs ) # Install Cpp executables install ( TARGETS simple_pub DESTINATION lib / $ { PROJECT_NAME } ) # Install Python modules ament_python_install_package ( $ { PROJECT_NAME }) # Install Python executables install ( PROGRAMS mix_pkg / simple_sub . py DESTINATION lib / $ { PROJECT_NAME } ) ament_package () package.xml # Add build and other dependencies <buildtool_depend> ament_cmake </buildtool_depend> <buildtool_depend> ament_cmake_python </buildtool_depend> <depend> rclcpp </depend> <depend> rclpy </depend> code # mix_pkg/simple_sub.py #!/usr/bin/env python3 import rclpy from rclpy.node import Node from std_msgs.msg import String class SimpleSub ( Node ): def __init__ ( self ): super () . __init__ ( \"simple_sub_py\" ) self . subscription = self . create_subscription ( String , \"topic\" , self . listener_callback , 10 ) self . subscription def listener_callback ( self , msg ): self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) def main ( args = None ): rclpy . init ( args = args ) node = SimpleSub () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () src/simple_pub.cpp #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; class SimplePublisher : public rclcpp :: Node { public : SimplePublisher () : Node ( \"simple_cpp_pub\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & SimplePublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } private : rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < SimplePublisher > ()); rclcpp :: shutdown (); return 0 ; } Build and usage # Warning cmake_python_ament set the Python permission script under install/lib/ If we build the package with --symlink-install no permission has set usage # terminal 1 ros2 run mix_pkg simple_pub terminal 2 ros2 run mix_pkg simple_sub.py Note Run the python node with the py extension Reference # ament_cmake_python","title":"ROS2 pkg with python and cpp"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#objective","text":"Create pkg with python and cpp code","title":"Objective"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#project","text":"Create new pkg cmake_ament Add python src folder name like the package name Add __init__.py file to mark this folder as a python package mix_pkg \u2502 \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 mix_pkg \u251c\u2500\u2500 mix_pkg \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 simple_sub.py \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 src \u2514\u2500\u2500 simple_pub.cpp","title":"Project"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#cmake","text":"The pkg is a standard cmake pkg with python support Add ament_cmake_python package to use Use ament_python_install_package macro from this pkg to install the python files Copy the python scripts to pkg `install<project_name>lib folder cmake_minimum_required ( VERSION 3.8 ) project ( mix_pkg ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () find_package ( ament_cmake REQUIRED ) find_package ( ament_cmake_python REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( rclpy REQUIRED ) find_package ( std_msgs REQUIRED ) add_executable ( simple_pub src / simple_pub . cpp ) ament_target_dependencies ( simple_pub rclcpp std_msgs ) # Install Cpp executables install ( TARGETS simple_pub DESTINATION lib / $ { PROJECT_NAME } ) # Install Python modules ament_python_install_package ( $ { PROJECT_NAME }) # Install Python executables install ( PROGRAMS mix_pkg / simple_sub . py DESTINATION lib / $ { PROJECT_NAME } ) ament_package ()","title":"CMake"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#packagexml","text":"Add build and other dependencies <buildtool_depend> ament_cmake </buildtool_depend> <buildtool_depend> ament_cmake_python </buildtool_depend> <depend> rclcpp </depend> <depend> rclpy </depend>","title":"package.xml"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#code","text":"mix_pkg/simple_sub.py #!/usr/bin/env python3 import rclpy from rclpy.node import Node from std_msgs.msg import String class SimpleSub ( Node ): def __init__ ( self ): super () . __init__ ( \"simple_sub_py\" ) self . subscription = self . create_subscription ( String , \"topic\" , self . listener_callback , 10 ) self . subscription def listener_callback ( self , msg ): self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) def main ( args = None ): rclpy . init ( args = args ) node = SimpleSub () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () src/simple_pub.cpp #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; class SimplePublisher : public rclcpp :: Node { public : SimplePublisher () : Node ( \"simple_cpp_pub\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & SimplePublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } private : rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < SimplePublisher > ()); rclcpp :: shutdown (); return 0 ; }","title":"code"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#build-and-usage","text":"Warning cmake_python_ament set the Python permission script under install/lib/ If we build the package with --symlink-install no permission has set","title":"Build and usage"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#usage","text":"terminal 1 ros2 run mix_pkg simple_pub terminal 2 ros2 run mix_pkg simple_sub.py Note Run the python node with the py extension","title":"usage"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#reference","text":"ament_cmake_python","title":"Reference"},{"location":"blog/ROS2/demos/articubot_one/","tags":["tutorial"],"text":"Resource # articulatedrobotics","title":"articubot_one"},{"location":"blog/ROS2/demos/articubot_one/#resource","text":"articulatedrobotics","title":"Resource"},{"location":"blog/ROS2/demos/bug0/","tags":["ros2","algorithm"],"text":"The Bug0 Algorithm is an autonomous navigation algorithm that uses only the sensor\u2019s data without any map. The algorithm has basically two different behaviors: Behavior 1 : Head to goal Behavior 2 : Follow the obstacle Behavior 1 # Reference # BUG Algorithm Application","title":"BUG0 Algorithm"},{"location":"blog/ROS2/demos/bug0/#behavior-1","text":"","title":"Behavior 1"},{"location":"blog/ROS2/demos/bug0/#reference","text":"BUG Algorithm Application","title":"Reference"},{"location":"blog/ROS2/demos/camera_calibration/","tags":["calibration"],"text":"Dependencies # sudo apt install ros-humble-usb-cam camera_calibration pkg from image-pipeline repository Checkerboard # 9*6 Checkerboard Count 9 (brown) Count 6 (blue) calibrate # Run video source Run calibration Node usb camera ros2 run usb_cam usb_cam_node_exe --ros-args \\ -p video_device: = /dev/video4 \\ -p image_width: = 800 \\ -p image_height: = 600 bash title=\"calibration node\" run camera_calibration cameracalibrator \\ --size 8x6 \\ --square 0.03 \\ --ros-args -r image:=image_raw save data to /tmp/calibrationdata.tar.gz Resource # checkerboard-collection calibration tutorial","title":"ROS2 camera calibration"},{"location":"blog/ROS2/demos/camera_calibration/#dependencies","text":"sudo apt install ros-humble-usb-cam camera_calibration pkg from image-pipeline repository","title":"Dependencies"},{"location":"blog/ROS2/demos/camera_calibration/#checkerboard","text":"9*6 Checkerboard Count 9 (brown) Count 6 (blue)","title":"Checkerboard"},{"location":"blog/ROS2/demos/camera_calibration/#calibrate","text":"Run video source Run calibration Node usb camera ros2 run usb_cam usb_cam_node_exe --ros-args \\ -p video_device: = /dev/video4 \\ -p image_width: = 800 \\ -p image_height: = 600 bash title=\"calibration node\" run camera_calibration cameracalibrator \\ --size 8x6 \\ --square 0.03 \\ --ros-args -r image:=image_raw save data to /tmp/calibrationdata.tar.gz","title":"calibrate"},{"location":"blog/ROS2/demos/camera_calibration/#resource","text":"checkerboard-collection calibration tutorial","title":"Resource"},{"location":"blog/ROS2/demos/diff_drive/","tags":["diff"],"text":"Reference # Igt One move from here c++ and python pkg dolly ardupilot","title":"diff drive ignition and ros2"},{"location":"blog/ROS2/demos/diff_drive/#reference","text":"Igt One move from here c++ and python pkg dolly ardupilot","title":"Reference"},{"location":"blog/ROS2/demos/pid/","tags":["ros2","pid"],"text":"Reference # rocketbot","title":"PID Implementation"},{"location":"blog/ROS2/demos/pid/#reference","text":"rocketbot","title":"Reference"},{"location":"blog/ROS2/dev_environment/","tags":["ros2","dev"],"text":"linters From code to package deploy # - From code to package deploy # Reference # Autoware.Auto guides Code style and language versions","title":"ROS2 developer environment settings"},{"location":"blog/ROS2/dev_environment/#from-code-to-package-deploy","text":"","title":"From code to package deploy"},{"location":"blog/ROS2/dev_environment/#--from-code-to-package-deploy","text":"","title":"- From code to package deploy"},{"location":"blog/ROS2/dev_environment/#reference","text":"Autoware.Auto guides Code style and language versions","title":"Reference"},{"location":"blog/ROS2/dev_environment/colcon/","tags":["ros2","colcon"],"text":"Colcon # colcon is a command line tool to improve the workflow of building, testing and using multiple software packages. It automates the process, handles the ordering and sets up the environment to use the packages. Build tools # Build tools are programs that automate the creation of executable applications from source code - Compiling - Linking - Packaging Build system # Repeatable: ensure that that the project is built exactly the same way every time it builds Reproducible: easily recreate (reproduce) the steps that are required to perform a build Standard ensure that all of your projects follow the same steps and implement best practices Note Make Ninja Generator # CMake: create build system for specific O.S or system Meta build # Install # sudo apt install python3-colcon-common-extensions Usage # In the root of the workspace run colcon build References # ROS2 foxy Using colcon to build packages\uf0c1","title":"Colcon build system"},{"location":"blog/ROS2/dev_environment/colcon/#colcon","text":"colcon is a command line tool to improve the workflow of building, testing and using multiple software packages. It automates the process, handles the ordering and sets up the environment to use the packages.","title":"Colcon"},{"location":"blog/ROS2/dev_environment/colcon/#build-tools","text":"Build tools are programs that automate the creation of executable applications from source code - Compiling - Linking - Packaging","title":"Build tools"},{"location":"blog/ROS2/dev_environment/colcon/#build-system","text":"Repeatable: ensure that that the project is built exactly the same way every time it builds Reproducible: easily recreate (reproduce) the steps that are required to perform a build Standard ensure that all of your projects follow the same steps and implement best practices Note Make Ninja","title":"Build system"},{"location":"blog/ROS2/dev_environment/colcon/#generator","text":"CMake: create build system for specific O.S or system","title":"Generator"},{"location":"blog/ROS2/dev_environment/colcon/#meta-build","text":"","title":"Meta build"},{"location":"blog/ROS2/dev_environment/colcon/#install","text":"sudo apt install python3-colcon-common-extensions","title":"Install"},{"location":"blog/ROS2/dev_environment/colcon/#usage","text":"In the root of the workspace run colcon build","title":"Usage"},{"location":"blog/ROS2/dev_environment/colcon/#references","text":"ROS2 foxy Using colcon to build packages\uf0c1","title":"References"},{"location":"blog/ROS2/dev_environment/colcon/colcon_cd/","tags":["ros2","colcon_cd"],"text":"A shell function for colcon-core to change the current working directory Note colcon_cd search pkg from current directory tree install and setup # apt sudo apt install python3-colcon-common-extensions setup Add ` colcon_cd ` to ` .bashrc ` # debian install echo 'source /usr/share/colcon_cd/function/colcon_cd.sh' >> ~/.bashrc","title":"Colcon_cd"},{"location":"blog/ROS2/dev_environment/colcon/colcon_cd/#install-and-setup","text":"apt sudo apt install python3-colcon-common-extensions setup Add ` colcon_cd ` to ` .bashrc ` # debian install echo 'source /usr/share/colcon_cd/function/colcon_cd.sh' >> ~/.bashrc","title":"install and setup"},{"location":"blog/ROS2/dev_environment/docker/","tags":["ros2","docker"],"text":"Docker file base on Allison Thackston work Objective # Create ROS2 humble docker image Run image and share simple workspace with simple pkg that contain minimal pub sub Run from cli Run with docker-compose Usage # Run docker from cli shm Share /dev/shm between host and container cli # run command docker run -- rm - it \\ - e DISPLAY = $ DISPLAY \\ \\ -- user user \\ -- workdir / home / user \\ -- hostname dev \\ -- net host \\ -- volume / tmp /. X11 - unix : / tmp /. X11 - unix : rw \\ -- volume / home / user / ros2_ws : / home / user / ros2_ws \\ -- volume / dev / shm : / dev / shm \\ humble : dev \\ bash docker-compose # version: \"3.0\" services: pub: image: humble:dev hostname: dev user: user working_dir: /home/user stdin_open: true tty: true environment: - DISPLAY=${DISPLAY} volumes: - /tmp/.X11-unix:/tmp/.X11-unix - /home/user/ros2_ws:/home/user/ros2_ws - /dev/shm:/dev/shm network_mode: host","title":"Docker image"},{"location":"blog/ROS2/dev_environment/docker/#objective","text":"Create ROS2 humble docker image Run image and share simple workspace with simple pkg that contain minimal pub sub Run from cli Run with docker-compose","title":"Objective"},{"location":"blog/ROS2/dev_environment/docker/#usage","text":"Run docker from cli shm Share /dev/shm between host and container","title":"Usage"},{"location":"blog/ROS2/dev_environment/docker/#cli","text":"run command docker run -- rm - it \\ - e DISPLAY = $ DISPLAY \\ \\ -- user user \\ -- workdir / home / user \\ -- hostname dev \\ -- net host \\ -- volume / tmp /. X11 - unix : / tmp /. X11 - unix : rw \\ -- volume / home / user / ros2_ws : / home / user / ros2_ws \\ -- volume / dev / shm : / dev / shm \\ humble : dev \\ bash","title":"cli"},{"location":"blog/ROS2/dev_environment/docker/#docker-compose","text":"version: \"3.0\" services: pub: image: humble:dev hostname: dev user: user working_dir: /home/user stdin_open: true tty: true environment: - DISPLAY=${DISPLAY} volumes: - /tmp/.X11-unix:/tmp/.X11-unix - /home/user/ros2_ws:/home/user/ros2_ws - /dev/shm:/dev/shm network_mode: host","title":"docker-compose"},{"location":"blog/ROS2/dev_environment/docker/rpi_run_docker/","tags":["ros2","docker","rpi"],"text":"Install and Run docker on RPI Config devcontainer on local dev Attach / Run to docker container ros2 docker # docker run -it --rm ros:humble-ros-base /bin/bash vscode devcontainer # settings.json { \"docker.host\" : \"ubuntu@<rpi ip>\" } devcontainer.json { \"name\" : \"VS Code Remote docker PI\" , \"context\" : \"..\" , \"dockerFile\" : \"../docker/Dockerfile\" , \"settings\" : { \"terminal.integrated.shell.linux\" : null }, \"extensions\" : [], \"workspaceFolder\" : \"/pi_ws\" , \"workspaceMount\" : \"source=/home/user/pi_ws/,target=/pi_ws,type=bind,consistency=cached\" , } docker port 2375 # port 2375 exec socat -d TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock start ssh without systemd /etc/init.d/ssh start Reference # Here\u2019s How to Install Docker on Raspberry Pi? - Enable TCP port 2375 for external connection to Docker","title":"Run Dockerize ROS2 Humble on RPI4"},{"location":"blog/ROS2/dev_environment/docker/rpi_run_docker/#ros2-docker","text":"docker run -it --rm ros:humble-ros-base /bin/bash","title":"ros2 docker"},{"location":"blog/ROS2/dev_environment/docker/rpi_run_docker/#vscode-devcontainer","text":"settings.json { \"docker.host\" : \"ubuntu@<rpi ip>\" } devcontainer.json { \"name\" : \"VS Code Remote docker PI\" , \"context\" : \"..\" , \"dockerFile\" : \"../docker/Dockerfile\" , \"settings\" : { \"terminal.integrated.shell.linux\" : null }, \"extensions\" : [], \"workspaceFolder\" : \"/pi_ws\" , \"workspaceMount\" : \"source=/home/user/pi_ws/,target=/pi_ws,type=bind,consistency=cached\" , }","title":"vscode devcontainer"},{"location":"blog/ROS2/dev_environment/docker/rpi_run_docker/#docker-port-2375","text":"port 2375 exec socat -d TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock start ssh without systemd /etc/init.d/ssh start","title":"docker port 2375"},{"location":"blog/ROS2/dev_environment/docker/rpi_run_docker/#reference","text":"Here\u2019s How to Install Docker on Raspberry Pi? - Enable TCP port 2375 for external connection to Docker","title":"Reference"},{"location":"blog/ROS2/dev_environment/docker/run_build_arm_docker_containers_x86/","tags":["ros2","docker","arm","qemu"],"text":"sudo apt-get install \\ qemu \\ binfmt-support \\ qemu-user-static docker run --rm \\ --platform linux/aarch64 \\ -t arm64v8/ubuntu uname -m # Reference # Running and Building ARM Docker Containers on x86","title":"Running and Building ARM Docker Containers on x86"},{"location":"blog/ROS2/dev_environment/docker/run_build_arm_docker_containers_x86/#docker-run---rm---platform-linuxaarch64--t-arm64v8ubuntu-uname--m","text":"","title":"docker run --rm \\\n--platform linux/aarch64 \\\n-t arm64v8/ubuntu uname -m \n"},{"location":"blog/ROS2/dev_environment/docker/run_build_arm_docker_containers_x86/#reference","text":"Running and Building ARM Docker Containers on x86","title":"Reference"},{"location":"blog/ROS2/dev_environment/linters/","tags":["ros2","linter"],"text":"Lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs cpp # ament_cmake_clang_format python # ament_mypy","title":"linters"},{"location":"blog/ROS2/dev_environment/linters/#cpp","text":"ament_cmake_clang_format","title":"cpp"},{"location":"blog/ROS2/dev_environment/linters/#python","text":"ament_mypy","title":"python"},{"location":"blog/ROS2/dev_environment/linters/cpp/ament_cmake_clang_format/","tags":["ros2","linter"],"text":"ament_cmake_clang_format # Checks the code style of C / C++ source files using ClangFormat install # sudo apt install ros-humble-ament-cmake-clang-format usage # CMakeLists settings package.xml cli commands CMakeLists.txt if ( BUILD_TESTING ) find_package ( ament_lint_auto REQUIRED ) ament_lint_auto_find_test_dependencies () endif () ament_lint_auto_find_test_dependencies function search for linter\u2019s in package.xml package.xml <test_depend> ament_lint_auto </test_depend> <test_depend> ament_cmake_clang_format </test_depend> # build colcon build --packages-select cpp_tutrial_pkg # run test / linters colcon test --packages-select cpp_tutrial_pkg # show test results colcon test-result colcon test-result --verbose # run the linter directly ament_clang_format src/tutorials/cpp_tutrial_pkg/ # fix the problem's ament_clang_format src/tutorials/cpp_tutrial_pkg/ --reformat # run colcon test again, no errors colcon test --packages-select cpp_tutrial_pkg # show test results, no errors colcon test-result clear test result test_result colcon test-result --delete","title":"ament cmake clang format"},{"location":"blog/ROS2/dev_environment/linters/cpp/ament_cmake_clang_format/#ament_cmake_clang_format","text":"Checks the code style of C / C++ source files using ClangFormat","title":"ament_cmake_clang_format"},{"location":"blog/ROS2/dev_environment/linters/cpp/ament_cmake_clang_format/#install","text":"sudo apt install ros-humble-ament-cmake-clang-format","title":"install"},{"location":"blog/ROS2/dev_environment/linters/cpp/ament_cmake_clang_format/#usage","text":"CMakeLists settings package.xml cli commands CMakeLists.txt if ( BUILD_TESTING ) find_package ( ament_lint_auto REQUIRED ) ament_lint_auto_find_test_dependencies () endif () ament_lint_auto_find_test_dependencies function search for linter\u2019s in package.xml package.xml <test_depend> ament_lint_auto </test_depend> <test_depend> ament_cmake_clang_format </test_depend> # build colcon build --packages-select cpp_tutrial_pkg # run test / linters colcon test --packages-select cpp_tutrial_pkg # show test results colcon test-result colcon test-result --verbose # run the linter directly ament_clang_format src/tutorials/cpp_tutrial_pkg/ # fix the problem's ament_clang_format src/tutorials/cpp_tutrial_pkg/ --reformat # run colcon test again, no errors colcon test --packages-select cpp_tutrial_pkg # show test results, no errors colcon test-result clear test result test_result colcon test-result --delete","title":"usage"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/","tags":["linter","ros2","mypy"],"text":"Linting ROS 2 Packages with mypy # linter , is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs. mypy is an optional static type checker for Python that aims to combine the benefits of dynamic (or \u201cduck\u201d) typing and static typing python hinting # Type hints are performed using Python annotation They are used at add types to variables function arguments and return values, Python hinting has no runtime effect they only use for static analyses with tools like mypy and help ide\u2019s to help us with more information and intellisense Post from Python tutorial: Introduction to Python type hints hinting demo from typing import List from typing import Union number = Union [ int , float ] def get_list ( item : number ) -> List [ number ]: list = [ 1 , 2 , item ] return list print ( get_list ( 1.0 )) VSCode # Config mypy setting.json \"python.linting.mypyEnabled\" : true , \"python.linting.mypyCategorySeverity.error\" : \"Warning\" , \"python.linting.mypyArgs\" : [ \"--ignore-missing-imports\" ] ROS2 linting # The ament_lint metapackage defines many common linters that can integrate into the build/test pipeline for ROS 2 . The package ament_mypy within handles mypy integration install # sudo apt install ros-humble-ament-cmake-mypy mypy demo # Config package.xml Edit setup.py Add TestCase package.xml # Add entry <test_depend> ament_mypy </test_depend> setup.py # Add / Edit line tests_require = [ 'pytest' ] TestCase # test_mypy.py from ament_mypy.main import main import pytest @pytest . mark . mypy @pytest . mark . linter def test_mypy (): rc = main () assert rc == 0 , 'Found code style errors / warnings' Run (colcon test) # colcon test --packages-select <YOUR_PACKAGE> --event-handlers console_direct+ mypy ini # mypy ini read the doc for more settings ROS2 ament mypy ini file location at test folder for colcon test mypy.ini [mypy] ignore_missing_imports = True ignore_missing_imports # Suppresses error messages about imports that cannot be resolved. show_column_numbers # Shows column numbers in error messages. Reference # Linting ROS 2 Packages with mypy","title":"Linting ROS 2 Packages with mypy"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#linting-ros-2-packages-with-mypy","text":"linter , is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs. mypy is an optional static type checker for Python that aims to combine the benefits of dynamic (or \u201cduck\u201d) typing and static typing","title":"Linting ROS 2 Packages with mypy"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#python-hinting","text":"Type hints are performed using Python annotation They are used at add types to variables function arguments and return values, Python hinting has no runtime effect they only use for static analyses with tools like mypy and help ide\u2019s to help us with more information and intellisense Post from Python tutorial: Introduction to Python type hints hinting demo from typing import List from typing import Union number = Union [ int , float ] def get_list ( item : number ) -> List [ number ]: list = [ 1 , 2 , item ] return list print ( get_list ( 1.0 ))","title":"python hinting"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#vscode","text":"Config mypy setting.json \"python.linting.mypyEnabled\" : true , \"python.linting.mypyCategorySeverity.error\" : \"Warning\" , \"python.linting.mypyArgs\" : [ \"--ignore-missing-imports\" ]","title":"VSCode"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#ros2-linting","text":"The ament_lint metapackage defines many common linters that can integrate into the build/test pipeline for ROS 2 . The package ament_mypy within handles mypy integration","title":"ROS2 linting"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#install","text":"sudo apt install ros-humble-ament-cmake-mypy","title":"install"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#mypy-demo","text":"Config package.xml Edit setup.py Add TestCase","title":"mypy demo"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#packagexml","text":"Add entry <test_depend> ament_mypy </test_depend>","title":"package.xml"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#setuppy","text":"Add / Edit line tests_require = [ 'pytest' ]","title":"setup.py"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#testcase","text":"test_mypy.py from ament_mypy.main import main import pytest @pytest . mark . mypy @pytest . mark . linter def test_mypy (): rc = main () assert rc == 0 , 'Found code style errors / warnings'","title":"TestCase"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#run-colcon-test","text":"colcon test --packages-select <YOUR_PACKAGE> --event-handlers console_direct+","title":"Run (colcon test)"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#mypy-ini","text":"mypy ini read the doc for more settings ROS2 ament mypy ini file location at test folder for colcon test mypy.ini [mypy] ignore_missing_imports = True","title":"mypy ini"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#ignore_missing_imports","text":"Suppresses error messages about imports that cannot be resolved.","title":"ignore_missing_imports"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#show_column_numbers","text":"Shows column numbers in error messages.","title":"show_column_numbers"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#reference","text":"Linting ROS 2 Packages with mypy","title":"Reference"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/","text":"ROS2 Package # from code to deploy # ROS2 # Robot Operating System (ROS) is an open-source robotics middleware suite. Although ROS is not an operating system (OS) but a set of software frameworks for robot software development (wikipedia) ROS2 # How to resolve the robotic problem Why of thinking Think only on your\u2019s. Standard. Standard. Standard. Community ROS2 Framework # Nodes / Process Communication (DDS) Tools (rqt, bag, ..) ECO System (diagnostics, logging, allot of packages) Standard. Standard. Standard. Verbs # Package Nodes Topics Pub Sub Service Action Parameters Messages Code to Deploy # let\u2019s start # AXE and other tools # \u201cGive me six hours to chop down a tree and I will spend the first four sharpening the axe\u201d (Abraham Lincoln) Dev environment VSCode Package from code to deploy # Requirements analysis Design Coding Continue \u2026 # Code quality Tests Linters Static and Dynamic analyze Source Control Documents Package Version Deploy CI / Maintenance Language # Python (3.10) CPP (C++17) CMAKE XML / yaml / json / schema BASH GIT Network Physics and Simulation Markdown Dev Environment # GIT VSCode Extensions ROS2 Docker Network and diagnostic tools VSCode # Python autoDocstring pylint, pylance Git Git Graph Git Lance VSCode more Extensions # Other xml xml tools yaml Helper tabout draw.io project manager Code spell checker Demo Time # Simple python package from code to deploy Requirements and Design Code Code Quality Source Control Versioning Dependencies Deploy Demo # Optical Flow simple tracker Design # 4 Nodes - Image source - test - camera - Tracker - Viewer and controller Topic and messages # Code Quality # Take time but pay off in the long run # Type hinting Formatters Linters Test (pytest) unit test integration test Commit / Pre-commit Type hinting # Type hint should be use whenever unit test are worth writing They help you as a developer write better code Linters # A linter is a tool to help you improve your code Fewer errors in production Readable, maintainable, consistent code Code Style (no endless arguments) More secure and performant code Linters tools # Pylint Flake8 mypy GIT # branching strategy commit tag merge request branching strategy # GIT helping tools # GIT cli VSCode Builtin GitLens Git Graph Thinks that left out # - C++ - Cross Compiler - Simulation - CI/CD - Docker and Dev container","title":"ROS2 package develop"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#ros2-package","text":"","title":"ROS2 Package"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#from-code-to-deploy","text":"","title":"from code to deploy"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#ros2","text":"Robot Operating System (ROS) is an open-source robotics middleware suite. Although ROS is not an operating system (OS) but a set of software frameworks for robot software development (wikipedia)","title":"ROS2"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#ros2_1","text":"How to resolve the robotic problem Why of thinking Think only on your\u2019s. Standard. Standard. Standard. Community","title":"ROS2"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#ros2-framework","text":"Nodes / Process Communication (DDS) Tools (rqt, bag, ..) ECO System (diagnostics, logging, allot of packages) Standard. Standard. Standard.","title":"ROS2 Framework"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#verbs","text":"Package Nodes Topics Pub Sub Service Action Parameters Messages","title":"Verbs"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#code-to-deploy","text":"","title":"Code to Deploy"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#lets-start","text":"","title":"let's start"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#axe-and-other-tools","text":"\u201cGive me six hours to chop down a tree and I will spend the first four sharpening the axe\u201d (Abraham Lincoln) Dev environment VSCode","title":"AXE and other tools"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#package-from-code-to-deploy","text":"Requirements analysis Design Coding","title":"Package from code to deploy"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#continue-","text":"Code quality Tests Linters Static and Dynamic analyze Source Control Documents Package Version Deploy CI / Maintenance","title":"Continue ..."},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#language","text":"Python (3.10) CPP (C++17) CMAKE XML / yaml / json / schema BASH GIT Network Physics and Simulation Markdown","title":"Language"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#dev-environment","text":"GIT VSCode Extensions ROS2 Docker Network and diagnostic tools","title":"Dev Environment"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#vscode","text":"Python autoDocstring pylint, pylance Git Git Graph Git Lance","title":"VSCode"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#vscode-more-extensions","text":"Other xml xml tools yaml Helper tabout draw.io project manager Code spell checker","title":"VSCode more Extensions"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#demo-time","text":"Simple python package from code to deploy Requirements and Design Code Code Quality Source Control Versioning Dependencies Deploy","title":"Demo Time"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#demo","text":"Optical Flow simple tracker","title":"Demo"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#design","text":"4 Nodes - Image source - test - camera - Tracker - Viewer and controller","title":"Design"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#topic-and-messages","text":"","title":"Topic and messages"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#code-quality","text":"","title":"Code Quality"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#take-time-but-pay-off-in-the-long-run","text":"Type hinting Formatters Linters Test (pytest) unit test integration test Commit / Pre-commit","title":"Take time but pay off in the long run"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#type-hinting","text":"Type hint should be use whenever unit test are worth writing They help you as a developer write better code","title":"Type hinting"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#linters","text":"A linter is a tool to help you improve your code Fewer errors in production Readable, maintainable, consistent code Code Style (no endless arguments) More secure and performant code","title":"Linters"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#linters-tools","text":"Pylint Flake8 mypy","title":"Linters tools"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#git","text":"branching strategy commit tag merge request","title":"GIT"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#branching-strategy","text":"","title":"branching strategy"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#git-helping-tools","text":"GIT cli VSCode Builtin GitLens Git Graph","title":"GIT helping tools"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#thinks-that-left-out","text":"- C++ - Cross Compiler - Simulation - CI/CD - Docker and Dev container","title":"Thinks that left out"},{"location":"blog/ROS2/dev_environment/vscode/","tags":["ros2","vscode","settings"],"text":"settings extensions tips","title":"ROS2 VSCode settings, Extensions Settings and tips"},{"location":"blog/ROS2/dev_environment/vscode/settings/","tags":["ros2","vscode","settings"],"text":"settings # file associations # \"files.associations\" : { \"*.xacro\" : \"xml\" , \"*.world\" : \"xml\" , \"*.sdf\" : \"xml\" , \"*.gazebo\" : \"xml\" } key bindings # Add new file and new folder in explorer tree # { \"key\" : \"ctrl+n\" , \"command\" : \"explorer.newFile\" , \"when\" : \"explorerViewletFocus\" }, { \"key\" : \"ctrl+shift+n\" , \"command\" : \"explorer.newFolder\" , \"when\" : \"explorerViewletFocus\" },","title":"ROS2 VSCode dev settings"},{"location":"blog/ROS2/dev_environment/vscode/settings/#settings","text":"","title":"settings"},{"location":"blog/ROS2/dev_environment/vscode/settings/#file-associations","text":"\"files.associations\" : { \"*.xacro\" : \"xml\" , \"*.world\" : \"xml\" , \"*.sdf\" : \"xml\" , \"*.gazebo\" : \"xml\" }","title":"file associations"},{"location":"blog/ROS2/dev_environment/vscode/settings/#key-bindings","text":"","title":"key bindings"},{"location":"blog/ROS2/dev_environment/vscode/settings/#add-new-file-and-new-folder-in-explorer-tree","text":"{ \"key\" : \"ctrl+n\" , \"command\" : \"explorer.newFile\" , \"when\" : \"explorerViewletFocus\" }, { \"key\" : \"ctrl+shift+n\" , \"command\" : \"explorer.newFolder\" , \"when\" : \"explorerViewletFocus\" },","title":"Add new file and new folder in explorer tree"},{"location":"blog/ROS2/dev_environment/vscode/tips/","tags":["ros2","vscode","tips"],"text":"python intellisense # Specifies extra search paths for import resolution. Accepts paths specified as strings and separated by commas \"python.analysis.extraPaths\" : []","title":"ROS2 VSCode tips"},{"location":"blog/ROS2/dev_environment/vscode/tips/#python-intellisense","text":"Specifies extra search paths for import resolution. Accepts paths specified as strings and separated by commas \"python.analysis.extraPaths\" : []","title":"python intellisense"},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/","tags":["ros2","vscode"],"text":"Language python cpp cmake XML yaml dev goodies auto snippets tabout yaml # YAML red hat ext install redhat.vscode-yaml XML # XML red hat ext install redhat.vscode-xml colcon # XML red hat ext install deitry.colcon-helper Dev goodies # Tabout # TabOut Tab out of quotes, brackets, etc for Visual Studio Code. Snippets # Snippets AutoSnippet # Auto Snippet https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.auto-snippet This extension automatically inserts a predefined snippet when a file is created, or an empty file is opened. Demo # Create Template for sdf model.config file \"autoSnippet.snippets\" : [ { \"pattern\" : \"**/model.config\" , \"snippet\" : \"gazebo_model_config\" } ] sdf model config \"gazebo_model_config\" : { \"prefix\" : \"sdf_model_config\" , \"body\" : [ \"<?xml version=\\\"1.0\\\"?>\" , \"<model>\" , \" <name>${1}</name>\" , \" <version>1.0</version>\" , \" <sdf version=\\\"${2|1.5,1.6|}\\\">${3:${1}}.sdf</sdf>\" , \" <author>\" , \" <name></name>\" , \" <email></email>\" , \" </author>\" , \" <description>\" , \" </description>\" , \"</model>\" ], \"description\" : \"gazebo model config file template\" }","title":"ROS2 VSCode recommend extensions"},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#yaml","text":"YAML red hat ext install redhat.vscode-yaml","title":"yaml"},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#xml","text":"XML red hat ext install redhat.vscode-xml","title":"XML"},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#colcon","text":"XML red hat ext install deitry.colcon-helper","title":"colcon"},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#dev-goodies","text":"","title":"Dev goodies"},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#tabout","text":"TabOut Tab out of quotes, brackets, etc for Visual Studio Code.","title":"Tabout"},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#snippets","text":"Snippets","title":"Snippets"},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#autosnippet","text":"Auto Snippet https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.auto-snippet This extension automatically inserts a predefined snippet when a file is created, or an empty file is opened.","title":"AutoSnippet"},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#demo","text":"Create Template for sdf model.config file \"autoSnippet.snippets\" : [ { \"pattern\" : \"**/model.config\" , \"snippet\" : \"gazebo_model_config\" } ] sdf model config \"gazebo_model_config\" : { \"prefix\" : \"sdf_model_config\" , \"body\" : [ \"<?xml version=\\\"1.0\\\"?>\" , \"<model>\" , \" <name>${1}</name>\" , \" <version>1.0</version>\" , \" <sdf version=\\\"${2|1.5,1.6|}\\\">${3:${1}}.sdf</sdf>\" , \" <author>\" , \" <name></name>\" , \" <email></email>\" , \" </author>\" , \" <description>\" , \" </description>\" , \"</model>\" ], \"description\" : \"gazebo model config file template\" }","title":"Demo"},{"location":"blog/ROS2/eco/Behavior_Trees/","tags":["ros2","behavior"],"text":"Behavior Trees # Is a Task Switching Structure \u201cWhat to do next?\u201d Each action needs to know \u201cDid i succeed or fail\u201d The Ancestors decide \u201cWhat to do next\u201d Behaviours\uf0c1 # check / condition action Actions # check Fallback (?)(or): If failure then tick next else return Sequence (->)(and): if success then tick next else return Condition # Conditions are Action that - never return Running - do not change the world When to switch task # Success Failure Interrupting by more important task TO-Read # Introduction to Behavior Trees Building a Python Toolbox for Robot Behavior Reference # Behavior Trees in Robotics Introduction to behavior trees","title":"Behavior Trees"},{"location":"blog/ROS2/eco/Behavior_Trees/#behavior-trees","text":"Is a Task Switching Structure \u201cWhat to do next?\u201d Each action needs to know \u201cDid i succeed or fail\u201d The Ancestors decide \u201cWhat to do next\u201d","title":"Behavior Trees"},{"location":"blog/ROS2/eco/Behavior_Trees/#behaviours","text":"check / condition action","title":"Behaviours\uf0c1"},{"location":"blog/ROS2/eco/Behavior_Trees/#actions","text":"check Fallback (?)(or): If failure then tick next else return Sequence (->)(and): if success then tick next else return","title":"Actions"},{"location":"blog/ROS2/eco/Behavior_Trees/#condition","text":"Conditions are Action that - never return Running - do not change the world","title":"Condition"},{"location":"blog/ROS2/eco/Behavior_Trees/#when-to-switch-task","text":"Success Failure Interrupting by more important task","title":"When to switch task"},{"location":"blog/ROS2/eco/Behavior_Trees/#to-read","text":"Introduction to Behavior Trees Building a Python Toolbox for Robot Behavior","title":"TO-Read"},{"location":"blog/ROS2/eco/Behavior_Trees/#reference","text":"Behavior Trees in Robotics Introduction to behavior trees","title":"Reference"},{"location":"blog/ROS2/eco/PlotJuggler/","tags":["ros2","plot","visualization","debugging"],"text":"PlotJuggler Fast, intuitive and extensible time series visualization tool. install # sudo apt install ros-humble-plotjuggler-ros usage # launch # plotjuggler = Node ( name = \"kf_plot\" , package = \"plotjuggler\" , executable = \"plotjuggler\" , arguments = [ '-l' , os . path . join ( pkg , \"config\" , \"plot.xml\" )], output = \"screen\" ) Reference # guide github","title":"PlotJuggler"},{"location":"blog/ROS2/eco/PlotJuggler/#install","text":"sudo apt install ros-humble-plotjuggler-ros","title":"install"},{"location":"blog/ROS2/eco/PlotJuggler/#usage","text":"","title":"usage"},{"location":"blog/ROS2/eco/PlotJuggler/#launch","text":"plotjuggler = Node ( name = \"kf_plot\" , package = \"plotjuggler\" , executable = \"plotjuggler\" , arguments = [ '-l' , os . path . join ( pkg , \"config\" , \"plot.xml\" )], output = \"screen\" )","title":"launch"},{"location":"blog/ROS2/eco/PlotJuggler/#reference","text":"guide github","title":"Reference"},{"location":"blog/ROS2/eco/diagnostic/","tags":["diagnostic"],"text":"ROS diagnostics gives you the ability to monitor your system. There are two components in its architecture: - updater - aggregator The updater publishes diagnostic status messages on the /diagnostics topic, and the aggregator listens to these statuses, aggregates them, and publishes the results on the /diagnostics_agg topic. A system can have multiple updaters. They are meant to communicate with devices such as motors, sensors, computers, batteries, etc, in order to retrieve and publish relevant status data. The information being published on the /diagnostics topic is flat The aggregator collects, categorizes, and groups the statuses from all the system components. You can take a look at what is being published on the /diagnostics and /diagnostics_agg topics with the rqt_runtime_monitor and rqt_robot_monitor tools task # analyzers # install sudo apt install ros-humble-rqt-robot-monitor sudo apt install ros-humble-rqt-runtime-monitor Reference # REP-107 Diagnostic System for Robots Running ROS ros diagnostic wiki python example","title":"ROS2 diagnostic package"},{"location":"blog/ROS2/eco/diagnostic/#task","text":"","title":"task"},{"location":"blog/ROS2/eco/diagnostic/#analyzers","text":"install sudo apt install ros-humble-rqt-robot-monitor sudo apt install ros-humble-rqt-runtime-monitor","title":"analyzers"},{"location":"blog/ROS2/eco/diagnostic/#reference","text":"REP-107 Diagnostic System for Robots Running ROS ros diagnostic wiki python example","title":"Reference"},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/","tags":["ros2","diagnostics","tutorials"],"text":"LAB # Write simple node Add diagnostic task to monitor node state Add diagnostic updater and bind the task Add diagnostic aggregator Show/Monitor diagnostics data Node # gps_node import threading import rclpy from rclpy.node import Node from diagnostic_updater import ( Updater , DiagnosticTask ) from diagnostic_msgs.msg import DiagnosticStatus TIMER_INTERVAL = 2 class StateTask ( DiagnosticTask ): def __init__ ( self , name ): super () . __init__ ( name ) self . state = False def run ( self , stat ): if self . state : level = DiagnosticStatus . OK msg = \"RUNNING\" else : level = DiagnosticStatus . ERROR msg = \"BROKEN\" stat . summary ( level , msg ) return stat class GpsNode ( Node ): def __init__ ( self ): super () . __init__ ( \"GPS_NODE\" ) self . diag_updater = Updater ( self ) self . diag_updater . setHardwareID ( \"gps\" ) self . state_task = StateTask ( \"GPS_TASK\" ) self . diag_updater . add ( self . state_task ) self . create_timer ( TIMER_INTERVAL , self . timer_handler ) def timer_handler ( self ): self . state_task . state = not self . state_task . state def main ( args = None ): rclpy . init ( args = args ) node = GpsNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () Aggregator config # qrt_runtime_monitor config analyzers : ros__parameters : path : Sensors primary : type : 'diagnostic_aggregator/AnalyzerGroup' path : Demo_group analyzers : primary : type : 'diagnostic_aggregator/GenericAnalyzer' path : gps startswith : [ 'GPS' ] launch # launch import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node from launch.actions import ExecuteProcess def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'pkg_python_tutorial' ), 'config' , 'group_diag.yaml' ) gps_node = Node ( package = \"pkg_python_tutorial\" , executable = \"gps_node\" ) agg_node = ExecuteProcess ( cmd = [ \"ros2\" , \"run\" , \"diagnostic_aggregator\" , \"aggregator_node\" , \"--ros-args\" , \"--params-file\" , config ], name = 'aggregator_node' , emulate_tty = True , output = 'screen' ) robot_monitor = Node ( package = \"rqt_robot_monitor\" , executable = \"rqt_robot_monitor\" ) runtime_monitor = Node ( package = \"rqt_runtime_monitor\" , executable = \"rqt_runtime_monitor\" ) ld . add_action ( gps_node ) ld . add_action ( agg_node ) ld . add_action ( robot_monitor ) ld . add_action ( runtime_monitor ) return ld Show Diagnostics with - rqt_runtime_monitor (right) - rqt_robot_monitor (left)","title":"simple diagnostics demo"},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/#lab","text":"Write simple node Add diagnostic task to monitor node state Add diagnostic updater and bind the task Add diagnostic aggregator Show/Monitor diagnostics data","title":"LAB"},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/#node","text":"gps_node import threading import rclpy from rclpy.node import Node from diagnostic_updater import ( Updater , DiagnosticTask ) from diagnostic_msgs.msg import DiagnosticStatus TIMER_INTERVAL = 2 class StateTask ( DiagnosticTask ): def __init__ ( self , name ): super () . __init__ ( name ) self . state = False def run ( self , stat ): if self . state : level = DiagnosticStatus . OK msg = \"RUNNING\" else : level = DiagnosticStatus . ERROR msg = \"BROKEN\" stat . summary ( level , msg ) return stat class GpsNode ( Node ): def __init__ ( self ): super () . __init__ ( \"GPS_NODE\" ) self . diag_updater = Updater ( self ) self . diag_updater . setHardwareID ( \"gps\" ) self . state_task = StateTask ( \"GPS_TASK\" ) self . diag_updater . add ( self . state_task ) self . create_timer ( TIMER_INTERVAL , self . timer_handler ) def timer_handler ( self ): self . state_task . state = not self . state_task . state def main ( args = None ): rclpy . init ( args = args ) node = GpsNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"Node"},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/#aggregator-config","text":"qrt_runtime_monitor config analyzers : ros__parameters : path : Sensors primary : type : 'diagnostic_aggregator/AnalyzerGroup' path : Demo_group analyzers : primary : type : 'diagnostic_aggregator/GenericAnalyzer' path : gps startswith : [ 'GPS' ]","title":"Aggregator config"},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/#launch","text":"launch import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node from launch.actions import ExecuteProcess def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'pkg_python_tutorial' ), 'config' , 'group_diag.yaml' ) gps_node = Node ( package = \"pkg_python_tutorial\" , executable = \"gps_node\" ) agg_node = ExecuteProcess ( cmd = [ \"ros2\" , \"run\" , \"diagnostic_aggregator\" , \"aggregator_node\" , \"--ros-args\" , \"--params-file\" , config ], name = 'aggregator_node' , emulate_tty = True , output = 'screen' ) robot_monitor = Node ( package = \"rqt_robot_monitor\" , executable = \"rqt_robot_monitor\" ) runtime_monitor = Node ( package = \"rqt_runtime_monitor\" , executable = \"rqt_runtime_monitor\" ) ld . add_action ( gps_node ) ld . add_action ( agg_node ) ld . add_action ( robot_monitor ) ld . add_action ( runtime_monitor ) return ld Show Diagnostics with - rqt_runtime_monitor (right) - rqt_robot_monitor (left)","title":"launch"},{"location":"blog/ROS2/eco/foxglove/","tags":["ros2","visualization","debugging"],"text":"","title":"Foxglove hello"},{"location":"blog/ROS2/eco/images_and_video/gstreamer/","tags":["ros2","gst","gstreamer"],"text":"ROS2 package originally developed by the Brown Robotics Lab for broadcasting any GStreamer video stream via image transport install sudo apt install ros-humble-gscam","title":"ROS2 GStreamer"},{"location":"blog/ROS2/eco/linear_algebra/","tags":["math"],"text":"Utils # python # Transforms3d # This package is a collection of Python functions and classes to create and convert 3-dimensional transformations such as rotations, zooms, shears and reflections \u2026 pip install transforms3d Reference # transformations Rotation Conversion Tool","title":"Linear algebra refreshment and utils"},{"location":"blog/ROS2/eco/linear_algebra/#utils","text":"","title":"Utils"},{"location":"blog/ROS2/eco/linear_algebra/#python","text":"","title":"python"},{"location":"blog/ROS2/eco/linear_algebra/#transforms3d","text":"This package is a collection of Python functions and classes to create and convert 3-dimensional transformations such as rotations, zooms, shears and reflections \u2026 pip install transforms3d","title":"Transforms3d"},{"location":"blog/ROS2/eco/linear_algebra/#reference","text":"transformations Rotation Conversion Tool","title":"Reference"},{"location":"blog/ROS2/eco/mavros/","tags":["mavros"],"text":"Ardupilot minimal example","title":"ROS2 MAVROS"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_minimal/","tags":["ardupilot","mavros"],"text":"Objective # Minimal connection to arducopter with mavros Run SITL (without gazebo) Run MAVROS Get State and change mode SITL # terminal1 sim_vehicle.py -v ArduCopter mavros # terminal2 ros2 run mavros mavros_node --ros-args -p fcu_url: = udp://:14550@ rqt # terminal3 ros2 run rqt_gui rqt_gui Load topic_monitor plugin mark mavros/state topic Load Service Caller plugin select mavros/set_mode service Set service custom mode field to GUIDED and call Check that mavros/state topic changed","title":"Ardupilot MAVROS minimal example"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_minimal/#objective","text":"Minimal connection to arducopter with mavros Run SITL (without gazebo) Run MAVROS Get State and change mode","title":"Objective"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_minimal/#sitl","text":"terminal1 sim_vehicle.py -v ArduCopter","title":"SITL"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_minimal/#mavros","text":"terminal2 ros2 run mavros mavros_node --ros-args -p fcu_url: = udp://:14550@","title":"mavros"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_minimal/#rqt","text":"terminal3 ros2 run rqt_gui rqt_gui Load topic_monitor plugin mark mavros/state topic Load Service Caller plugin select mavros/set_mode service Set service custom mode field to GUIDED and call Check that mavros/state topic changed","title":"rqt"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_python/","tags":["ardupilot","mavros"],"text":"Implement ROS2 Python node usage mavros That change mode, arm and takeoff using mavros services and topics SITL # terminal1 sim_vehicle.py -v ArduCopter --console mavros # terminal2 ros2 run mavros mavros_node --ros-args -p fcu_url: = udp://:14550@ node # set mode to \u2018GUIDED\u2019 Arming Takeoff import rclpy from rclpy.node import Node from rclpy.qos import qos_profile_system_default from mavros_msgs.msg import State from mavros_msgs.srv import SetMode , CommandBool , CommandTOL # from mavros_msgs.srv._set_mode import SetMode_Request TOPIC_TAKEOFF = \"/mavros/cmd/takeoff\" TOPIC_ARMING = \"/mavros/cmd/arming\" TOPIC_SET_MODE = \"/mavros/set_mode\" TOPIC_STATE = \"/mavros/state\" class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal\" super () . __init__ ( node_name ) self . armed = False self . in_air = False self . state_sub = self . create_subscription ( State , TOPIC_STATE , self . state_cb , qos_profile = qos_profile_system_default ) self . set_mode_client = self . create_client ( SetMode , , qos_profile = qos_profile_system_default ) self . arming_client = self . create_client ( CommandBool , TOPIC_ARMING , qos_profile = qos_profile_system_default ) self . takeoff_client = self . create_client ( CommandTOL , TOPIC_TAKEOFF , qos_profile = qos_profile_system_default ) while not self . set_mode_client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'set_mode service not available, waiting again...' ) self . get_logger () . info ( \"hello mavros python\" ) def mode_changed_handler ( self , future ): response = future . result () self . get_logger () . info ( \" {} \" . format ( response )) def arming_handler ( self , future ): response = future . result () self . get_logger () . info ( \" {} \" . format ( response )) self . armed = response . success def takeoff_handler ( self , future ): response = future . result () self . get_logger () . info ( \" {} \" . format ( response )) self . in_air = response . success def state_cb ( self , msg ): self . get_logger () . info ( \" {} \" . format ( msg ), throttle_duration_sec = 2 ) if msg . mode == \"STABILIZE\" : request = SetMode . Request () # SetMode_Request() request . custom_mode = \"GUIDED\" future = self . set_mode_client . call_async ( request ) future . add_done_callback ( self . mode_changed_handler ) if msg . mode == \"GUIDED\" and not self . armed : request = CommandBool . Request () request . value = True future = self . arming_client . call_async ( request ) future . add_done_callback ( self . arming_handler ) if msg . armed and not self . in_air : request = CommandTOL . Request () request . altitude = 15.0 future = self . takeoff_client . call_async ( request ) future . add_done_callback ( self . takeoff_handler ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Ardupilot MAVROS minimal python node"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_python/#sitl","text":"terminal1 sim_vehicle.py -v ArduCopter --console","title":"SITL"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_python/#mavros","text":"terminal2 ros2 run mavros mavros_node --ros-args -p fcu_url: = udp://:14550@","title":"mavros"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_python/#node","text":"set mode to \u2018GUIDED\u2019 Arming Takeoff import rclpy from rclpy.node import Node from rclpy.qos import qos_profile_system_default from mavros_msgs.msg import State from mavros_msgs.srv import SetMode , CommandBool , CommandTOL # from mavros_msgs.srv._set_mode import SetMode_Request TOPIC_TAKEOFF = \"/mavros/cmd/takeoff\" TOPIC_ARMING = \"/mavros/cmd/arming\" TOPIC_SET_MODE = \"/mavros/set_mode\" TOPIC_STATE = \"/mavros/state\" class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal\" super () . __init__ ( node_name ) self . armed = False self . in_air = False self . state_sub = self . create_subscription ( State , TOPIC_STATE , self . state_cb , qos_profile = qos_profile_system_default ) self . set_mode_client = self . create_client ( SetMode , , qos_profile = qos_profile_system_default ) self . arming_client = self . create_client ( CommandBool , TOPIC_ARMING , qos_profile = qos_profile_system_default ) self . takeoff_client = self . create_client ( CommandTOL , TOPIC_TAKEOFF , qos_profile = qos_profile_system_default ) while not self . set_mode_client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'set_mode service not available, waiting again...' ) self . get_logger () . info ( \"hello mavros python\" ) def mode_changed_handler ( self , future ): response = future . result () self . get_logger () . info ( \" {} \" . format ( response )) def arming_handler ( self , future ): response = future . result () self . get_logger () . info ( \" {} \" . format ( response )) self . armed = response . success def takeoff_handler ( self , future ): response = future . result () self . get_logger () . info ( \" {} \" . format ( response )) self . in_air = response . success def state_cb ( self , msg ): self . get_logger () . info ( \" {} \" . format ( msg ), throttle_duration_sec = 2 ) if msg . mode == \"STABILIZE\" : request = SetMode . Request () # SetMode_Request() request . custom_mode = \"GUIDED\" future = self . set_mode_client . call_async ( request ) future . add_done_callback ( self . mode_changed_handler ) if msg . mode == \"GUIDED\" and not self . armed : request = CommandBool . Request () request . value = True future = self . arming_client . call_async ( request ) future . add_done_callback ( self . arming_handler ) if msg . armed and not self . in_air : request = CommandTOL . Request () request . altitude = 15.0 future = self . takeoff_client . call_async ( request ) future . add_done_callback ( self . takeoff_handler ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"node"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/","tags":["apm","mavros","sitl"],"text":"Objective # Run copter SITL connect with mavros work with: call service , get info understand the code (arming for example) Usage # terminal1 # Run SITL with mavproxy # mavproxy connect to port tcp 5760 and output udp to port 14550 cd ardupilot cd ArduCopter ../Tools/autotest/sim_vehicle.py terminal2 # run mavros ros2 run mavros mavros_node --ros-args -p fcu_url: = udp://localhost:14550@ terminal3 ros2 topic echo /mavros/state # --- header: stamp: sec: 1665044282 nanosec: 30902710 frame_id: '' connected: true armed: false guided: true manual_input: true mode: GUIDED system_status: 3 --- arming # ## search for arming service ros2 service list | grep arm /mavros/cmd/arming ## get more info about the service ros2 service type /mavros/cmd/arming mavros_msgs/srv/CommandBool ## show message info ros2 interface show mavros_msgs/srv/CommandBool # Common type for switch commands bool value --- bool success uint8 result ## cal the service ros2 service call /mavros/cmd/arming mavros_msgs/srv/CommandBool \"{value: True}\" requester: making request: mavros_msgs.srv.CommandBool_Request ( value = True ) response: mavros_msgs.srv.CommandBool_Response ( success = True, result = 0 ) check the code # command.cpp arming_srv = node -> create_service < mavros_msgs :: srv :: CommandBool > ( \"~/arming\" , std :: bind ( & CommandPlugin :: arming_cb , this , _1 , _2 , _3 ), rmw_qos_profile_services_default , srv_cg ); ... void arming_cb ( const std :: shared_ptr < rmw_request_id_t > req_header [[ maybe_unused ]], const mavros_msgs :: srv :: CommandBool :: Request :: SharedPtr req , mavros_msgs :: srv :: CommandBool :: Response :: SharedPtr res ) { using mavlink :: common :: MAV_CMD ; send_command_long_and_wait ( false , enum_value ( MAV_CMD :: COMPONENT_ARM_DISARM ), 1 , ( req -> value ) ? 1.0 : 0.0 , 0 , 0 , 0 , 0 , 0 , 0 , res -> success , res -> result ); }","title":"mavros Arducopter SITL hello"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/#objective","text":"Run copter SITL connect with mavros work with: call service , get info understand the code (arming for example)","title":"Objective"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/#usage","text":"terminal1 # Run SITL with mavproxy # mavproxy connect to port tcp 5760 and output udp to port 14550 cd ardupilot cd ArduCopter ../Tools/autotest/sim_vehicle.py terminal2 # run mavros ros2 run mavros mavros_node --ros-args -p fcu_url: = udp://localhost:14550@ terminal3 ros2 topic echo /mavros/state # --- header: stamp: sec: 1665044282 nanosec: 30902710 frame_id: '' connected: true armed: false guided: true manual_input: true mode: GUIDED system_status: 3 ---","title":"Usage"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/#arming","text":"## search for arming service ros2 service list | grep arm /mavros/cmd/arming ## get more info about the service ros2 service type /mavros/cmd/arming mavros_msgs/srv/CommandBool ## show message info ros2 interface show mavros_msgs/srv/CommandBool # Common type for switch commands bool value --- bool success uint8 result ## cal the service ros2 service call /mavros/cmd/arming mavros_msgs/srv/CommandBool \"{value: True}\" requester: making request: mavros_msgs.srv.CommandBool_Request ( value = True ) response: mavros_msgs.srv.CommandBool_Response ( success = True, result = 0 )","title":"arming"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/#check-the-code","text":"command.cpp arming_srv = node -> create_service < mavros_msgs :: srv :: CommandBool > ( \"~/arming\" , std :: bind ( & CommandPlugin :: arming_cb , this , _1 , _2 , _3 ), rmw_qos_profile_services_default , srv_cg ); ... void arming_cb ( const std :: shared_ptr < rmw_request_id_t > req_header [[ maybe_unused ]], const mavros_msgs :: srv :: CommandBool :: Request :: SharedPtr req , mavros_msgs :: srv :: CommandBool :: Response :: SharedPtr res ) { using mavlink :: common :: MAV_CMD ; send_command_long_and_wait ( false , enum_value ( MAV_CMD :: COMPONENT_ARM_DISARM ), 1 , ( req -> value ) ? 1.0 : 0.0 , 0 , 0 , 0 , 0 , 0 , 0 , res -> success , res -> result ); }","title":"check the code"},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/","tags":["mavros","diagnostic","rat_runtime_monitor"],"text":"see mavros_ardupilot_sitl_hello to run sitl and mavros node Run time monitor # apt install ros-humble-rqt-runtime-monitor usgae # check the code # void handle_heartbeat ( const mavlink :: mavlink_message_t * msg , mavlink :: minimal :: msg :: HEARTBEAT & hb , plugin :: filter :: SystemAndOk filter [[ maybe_unused ]]) { using mavlink :: minimal :: MAV_MODE_FLAG ; // XXX(vooon): i assume that UAS not interested in HBs from non-target system. // Store generic info of all heartbeats seen auto it = find_or_create_vehicle_info ( msg -> sysid , msg -> compid ); auto vehicle_mode = uas -> str_mode_v10 ( hb . base_mode , hb . custom_mode ); auto stamp = node -> now (); // update context && setup connection timeout uas -> update_heartbeat ( hb . type , hb . autopilot , hb . base_mode ); uas -> update_connection_status ( true ); timeout_timer -> reset (); // build state message after updating uas auto state_msg = mavros_msgs :: msg :: State (); state_msg . header . stamp = stamp ; state_msg . connected = true ; state_msg . armed = !! ( hb . base_mode & enum_value ( MAV_MODE_FLAG :: SAFETY_ARMED )); state_msg . guided = !! ( hb . base_mode & enum_value ( MAV_MODE_FLAG :: GUIDED_ENABLED )); state_msg . manual_input = !! ( hb . base_mode & enum_value ( MAV_MODE_FLAG :: MANUAL_INPUT_ENABLED )); state_msg . mode = vehicle_mode ; state_msg . system_status = hb . system_status ; state_pub -> publish ( state_msg ); hb_diag . tick ( hb . type , hb . autopilot , state_msg . mode , hb . system_status ); } state message # # find state topic ros2 topic list | grep state # /mavros/extended_state /mavros/state # get more info on the topic ros2 topic info /mavros/state # Type: mavros_msgs/msg/State Publisher count: 1 Subscription count: 0 ros2 interface show mavros_msgs/msg/State # std_msgs/Header header builtin_interfaces/Time stamp int32 sec uint32 nanosec string frame_id bool connected bool armed bool guided bool manual_input string mode uint8 system_status","title":"mavros diagnostic"},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/#run-time-monitor","text":"apt install ros-humble-rqt-runtime-monitor","title":"Run time monitor"},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/#usgae","text":"","title":"usgae"},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/#check-the-code","text":"void handle_heartbeat ( const mavlink :: mavlink_message_t * msg , mavlink :: minimal :: msg :: HEARTBEAT & hb , plugin :: filter :: SystemAndOk filter [[ maybe_unused ]]) { using mavlink :: minimal :: MAV_MODE_FLAG ; // XXX(vooon): i assume that UAS not interested in HBs from non-target system. // Store generic info of all heartbeats seen auto it = find_or_create_vehicle_info ( msg -> sysid , msg -> compid ); auto vehicle_mode = uas -> str_mode_v10 ( hb . base_mode , hb . custom_mode ); auto stamp = node -> now (); // update context && setup connection timeout uas -> update_heartbeat ( hb . type , hb . autopilot , hb . base_mode ); uas -> update_connection_status ( true ); timeout_timer -> reset (); // build state message after updating uas auto state_msg = mavros_msgs :: msg :: State (); state_msg . header . stamp = stamp ; state_msg . connected = true ; state_msg . armed = !! ( hb . base_mode & enum_value ( MAV_MODE_FLAG :: SAFETY_ARMED )); state_msg . guided = !! ( hb . base_mode & enum_value ( MAV_MODE_FLAG :: GUIDED_ENABLED )); state_msg . manual_input = !! ( hb . base_mode & enum_value ( MAV_MODE_FLAG :: MANUAL_INPUT_ENABLED )); state_msg . mode = vehicle_mode ; state_msg . system_status = hb . system_status ; state_pub -> publish ( state_msg ); hb_diag . tick ( hb . type , hb . autopilot , state_msg . mode , hb . system_status ); }","title":"check the code"},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/#state-message","text":"# find state topic ros2 topic list | grep state # /mavros/extended_state /mavros/state # get more info on the topic ros2 topic info /mavros/state # Type: mavros_msgs/msg/State Publisher count: 1 Subscription count: 0 ros2 interface show mavros_msgs/msg/State # std_msgs/Header header builtin_interfaces/Time stamp int32 sec uint32 nanosec string frame_id bool connected bool armed bool guided bool manual_input string mode uint8 system_status","title":"state message"},{"location":"blog/ROS2/eco/pluginlib/","tags":["plugin"],"text":"Reference # Creating and using plugins (C++)","title":"ROS2 Plugin lib"},{"location":"blog/ROS2/eco/pluginlib/#reference","text":"Creating and using plugins (C++)","title":"Reference"},{"location":"blog/ROS2/eco/web_interface/hello/","tags":["ros2","web","rosbridge"],"text":"Rosbridge # Rosbridge provides a JSON API to ROS functionality for non-ROS programs rosbridge_suite install sudo apt-get install ros-foxy-rosbridge-suite Run # Open websocket on port 9090 as default run bridge ros2 launch rosbridge_server rosbridge_websocket_launch.xml roslibjs # roslibjs is the core JavaScript library for interacting with ROS from the browser. It uses WebSockets to connect with rosbridge and provides publishing, subscribing, service calls, actionlib, TF, URDF parsing, and other essential ROS functionality Run # Demo web page using roslibjs library basic connection < html > < head > < meta charset = \"utf-8\" /> < script type = \"text/javascript\" src = \"http://static.robotwebtools.org/roslibjs/current/roslib.min.js\" >< /script> < script type = \"text/javascript\" type = \"text/javascript\" > var ros = new ROSLIB . Ros ({ url : 'ws://localhost:9090' }); ros . on ( 'connection' , function () { document . getElementById ( \"status\" ). innerHTML = \"Connected\" ; }); ros . on ( 'error' , function ( error ) { document . getElementById ( \"status\" ). innerHTML = \"Error\" ; }); ros . on ( 'close' , function () { document . getElementById ( \"status\" ). innerHTML = \"Closed\" ; }); < /script> < /head> < body > < h1 > Simple ROS User Interface < /h1> < p > Connection status : < span id = \"status\" >< /span></p> < /body> < /html> Reference # roslibjs Robot Web Tools rosbridge_suite ROS web tutorial part 1 - rosbridge server and roslibjs","title":"Part1 - Web interfcae"},{"location":"blog/ROS2/eco/web_interface/hello/#rosbridge","text":"Rosbridge provides a JSON API to ROS functionality for non-ROS programs rosbridge_suite install sudo apt-get install ros-foxy-rosbridge-suite","title":"Rosbridge"},{"location":"blog/ROS2/eco/web_interface/hello/#run","text":"Open websocket on port 9090 as default run bridge ros2 launch rosbridge_server rosbridge_websocket_launch.xml","title":"Run"},{"location":"blog/ROS2/eco/web_interface/hello/#roslibjs","text":"roslibjs is the core JavaScript library for interacting with ROS from the browser. It uses WebSockets to connect with rosbridge and provides publishing, subscribing, service calls, actionlib, TF, URDF parsing, and other essential ROS functionality","title":"roslibjs"},{"location":"blog/ROS2/eco/web_interface/hello/#run_1","text":"Demo web page using roslibjs library basic connection < html > < head > < meta charset = \"utf-8\" /> < script type = \"text/javascript\" src = \"http://static.robotwebtools.org/roslibjs/current/roslib.min.js\" >< /script> < script type = \"text/javascript\" type = \"text/javascript\" > var ros = new ROSLIB . Ros ({ url : 'ws://localhost:9090' }); ros . on ( 'connection' , function () { document . getElementById ( \"status\" ). innerHTML = \"Connected\" ; }); ros . on ( 'error' , function ( error ) { document . getElementById ( \"status\" ). innerHTML = \"Error\" ; }); ros . on ( 'close' , function () { document . getElementById ( \"status\" ). innerHTML = \"Closed\" ; }); < /script> < /head> < body > < h1 > Simple ROS User Interface < /h1> < p > Connection status : < span id = \"status\" >< /span></p> < /body> < /html>","title":"Run"},{"location":"blog/ROS2/eco/web_interface/hello/#reference","text":"roslibjs Robot Web Tools rosbridge_suite ROS web tutorial part 1 - rosbridge server and roslibjs","title":"Reference"},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/","tags":["vue","web","101"],"text":"Vue.js is an open-source MVVM framework Note Install HTML Preview and change it\u2019s security permission to view vue html pages hello # < script type = \"importmap\" > { \"imports\" : { \"vue\" : \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\" } } </ script > < div id = \"app\" > {{ message }} </ div > < script type = \"module\" > import { createApp } from 'vue' createApp ({ data () { return { message : 'Hello Vue3!' } } }). mount ( '#app' ) </ script > Data # The variables in Vue.js are JavaScript style variables and support all the standard types that are available in vanilla JavaScript. These types include: String - Stores strings Number - Stores integers, floating point, and exponential notations Boolean - Stores \u2018true\u2019 or \u2018false\u2019 Null - Represents null value Object - Stores a dictionary Array - Stores a list of variables data < script type = \"importmap\" > { \"imports\" : { \"vue\" : \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\" } } </ script > < div id = \"app\" > < div > string: {{ name }} </ div > < div > number: {{ count }} </ div > < div > bool: {{ visible }} </ div > < div > array: {{ todos[1] }} </ div > < div > null: {{ error }} </ div > < div > object: {{ object.foo }} </ div > </ div > < script type = \"module\" > import { createApp } from 'vue' createApp ({ data () { return { name : 'Bob' , //string count : 0 , //number visible : false , //boolean todos : [ 'task1' , 'task2' ], //array error : null , //null object : { //object foo : 'bar' } } } }). mount ( '#app' ) </ script > Method # The methods property in the Vue instance contains the definitions of all the functions that the Vue instance can perform. Function cat called by specific event or where needed method < script type = \"importmap\" > { \"imports\" : { \"vue\" : \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\" } } </ script > < div id = \"app\" > {{get_name()}} </ div > < script type = \"module\" > import { createApp } from 'vue' createApp ({ data () { return { greeting : 'Hello world' } }, methods : { get_name : function (){ return this . greeting ; } } }). mount ( '#app' ) </ script > Note using this to refer data variables References # vue3","title":"Part2 - hello vue"},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/#hello","text":"< script type = \"importmap\" > { \"imports\" : { \"vue\" : \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\" } } </ script > < div id = \"app\" > {{ message }} </ div > < script type = \"module\" > import { createApp } from 'vue' createApp ({ data () { return { message : 'Hello Vue3!' } } }). mount ( '#app' ) </ script >","title":"hello"},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/#data","text":"The variables in Vue.js are JavaScript style variables and support all the standard types that are available in vanilla JavaScript. These types include: String - Stores strings Number - Stores integers, floating point, and exponential notations Boolean - Stores \u2018true\u2019 or \u2018false\u2019 Null - Represents null value Object - Stores a dictionary Array - Stores a list of variables data < script type = \"importmap\" > { \"imports\" : { \"vue\" : \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\" } } </ script > < div id = \"app\" > < div > string: {{ name }} </ div > < div > number: {{ count }} </ div > < div > bool: {{ visible }} </ div > < div > array: {{ todos[1] }} </ div > < div > null: {{ error }} </ div > < div > object: {{ object.foo }} </ div > </ div > < script type = \"module\" > import { createApp } from 'vue' createApp ({ data () { return { name : 'Bob' , //string count : 0 , //number visible : false , //boolean todos : [ 'task1' , 'task2' ], //array error : null , //null object : { //object foo : 'bar' } } } }). mount ( '#app' ) </ script >","title":"Data"},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/#method","text":"The methods property in the Vue instance contains the definitions of all the functions that the Vue instance can perform. Function cat called by specific event or where needed method < script type = \"importmap\" > { \"imports\" : { \"vue\" : \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\" } } </ script > < div id = \"app\" > {{get_name()}} </ div > < script type = \"module\" > import { createApp } from 'vue' createApp ({ data () { return { greeting : 'Hello world' } }, methods : { get_name : function (){ return this . greeting ; } } }). mount ( '#app' ) </ script > Note using this to refer data variables","title":"Method"},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/#references","text":"vue3","title":"References"},{"location":"blog/ROS2/eco/web_interface/part3_vue_handling/","tags":["vue","binding","101"],"text":"live server vetur material icon theme Basic struct # index.html: contain vue root element app.js: create app and mount to the root element index.html < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > vue </ title > < script src = \"https://unpkg.com/vue@3.0.2\" ></ script > </ head > < body > <!--template--> < div id = \"app\" > < p > {{ title }} </ p > </ div > < script src = \"app.js\" ></ script > </ body > </ html > app.js const app = Vue . createApp ({ data () { return { title : \"hello vue\" } } }) app . mount ( '#app' ) Bind and event # vue div < div id = \"app\" > < p > {{ title }} {{counter}} </ p > < button v-on:click = \"counter++\" > inc </ button > < button @ click = \"counter--\" > dec </ button > < div @ click = \"counter=0\" > reset </ div > </ div > Note @ is a shorthand for v-on v-on:click is @click methods property # Add methods property to vue app < div id = \"app\" > < p > {{ title }} {{counter}} </ p > < button @ click = \"reset\" > reset </ button > < button @ click = \"preset(10)\" > preset </ button > </ div > const app = Vue . createApp ({ data () { return { title : \"hello vue\" , counter : 0 } }, methods : { reset (){ this . counter = 0 }, preset ( value ){ this . counter = value } } })","title":"Part3 - vue user handling"},{"location":"blog/ROS2/eco/web_interface/part3_vue_handling/#basic-struct","text":"index.html: contain vue root element app.js: create app and mount to the root element index.html < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > vue </ title > < script src = \"https://unpkg.com/vue@3.0.2\" ></ script > </ head > < body > <!--template--> < div id = \"app\" > < p > {{ title }} </ p > </ div > < script src = \"app.js\" ></ script > </ body > </ html > app.js const app = Vue . createApp ({ data () { return { title : \"hello vue\" } } }) app . mount ( '#app' )","title":"Basic struct"},{"location":"blog/ROS2/eco/web_interface/part3_vue_handling/#bind-and-event","text":"vue div < div id = \"app\" > < p > {{ title }} {{counter}} </ p > < button v-on:click = \"counter++\" > inc </ button > < button @ click = \"counter--\" > dec </ button > < div @ click = \"counter=0\" > reset </ div > </ div > Note @ is a shorthand for v-on v-on:click is @click","title":"Bind and event"},{"location":"blog/ROS2/eco/web_interface/part3_vue_handling/#methods-property","text":"Add methods property to vue app < div id = \"app\" > < p > {{ title }} {{counter}} </ p > < button @ click = \"reset\" > reset </ button > < button @ click = \"preset(10)\" > preset </ button > </ div > const app = Vue . createApp ({ data () { return { title : \"hello vue\" , counter : 0 } }, methods : { reset (){ this . counter = 0 }, preset ( value ){ this . counter = value } } })","title":"methods property"},{"location":"blog/ROS2/eco/web_interface/part5_roslib_vue/","tags":["ros2","vue","rosbridge"],"text":"Bridge # run node ros2 launch rosbridge_server rosbridge_websocket_launch.xml Web # index.html: load libraries and HTML template app.js: Create vue app and init roslib connection index.html < html > < head > < meta charset = \"utf-8\" /> < script src = \"http://static.robotwebtools.org/roslibjs/current/roslib.min.js\" ></ script > < script src = \"https://unpkg.com/vue@3.0.2\" ></ script > </ head > < body > < h1 > Simple ROS User Interface </ h1 > < div id = \"app\" > < p > ros status: {{status}} </ p > </ div > < script src = \"app.js\" ></ script > </ body > </ html > app.js const app = Vue . createApp ({ data () { return { status : \"---\" , param : 0 } }, mounted () { this . ros = new ROSLIB . Ros ({ url : 'ws://localhost:9090' }); }, }) vm = app . mount ( '#app' ) vm . ros . on ( 'connection' , () => { vm . status = \"--connected--\" ; }); Parameter # declared var my_param = new ROSLIB . Param ({ ros : vm . ros , name : '/node:param_name' }); get / set //Get my_param . get ( function ( value ) { if ( value != null ) { console . log ( value ); } }); //Set my_param . set ( 5 )","title":"Part5 - ROS Web interface with vue"},{"location":"blog/ROS2/eco/web_interface/part5_roslib_vue/#bridge","text":"run node ros2 launch rosbridge_server rosbridge_websocket_launch.xml","title":"Bridge"},{"location":"blog/ROS2/eco/web_interface/part5_roslib_vue/#web","text":"index.html: load libraries and HTML template app.js: Create vue app and init roslib connection index.html < html > < head > < meta charset = \"utf-8\" /> < script src = \"http://static.robotwebtools.org/roslibjs/current/roslib.min.js\" ></ script > < script src = \"https://unpkg.com/vue@3.0.2\" ></ script > </ head > < body > < h1 > Simple ROS User Interface </ h1 > < div id = \"app\" > < p > ros status: {{status}} </ p > </ div > < script src = \"app.js\" ></ script > </ body > </ html > app.js const app = Vue . createApp ({ data () { return { status : \"---\" , param : 0 } }, mounted () { this . ros = new ROSLIB . Ros ({ url : 'ws://localhost:9090' }); }, }) vm = app . mount ( '#app' ) vm . ros . on ( 'connection' , () => { vm . status = \"--connected--\" ; });","title":"Web"},{"location":"blog/ROS2/eco/web_interface/part5_roslib_vue/#parameter","text":"declared var my_param = new ROSLIB . Param ({ ros : vm . ros , name : '/node:param_name' }); get / set //Get my_param . get ( function ( value ) { if ( value != null ) { console . log ( value ); } }); //Set my_param . set ( 5 )","title":"Parameter"},{"location":"blog/ROS2/fastdds/discovery/","tags":["ros2","dds","discovery"],"text":"Zenoh Check if work with fast-dds zenoh Discovery server discovery server Using Fast DDS Discovery Server as discovery protocol ToDo 03b: ROS1 & ROS2 network analysis Reference # - fast-dds Discovery # Edge Robotics with ROS2 and Eclipse Zenoh Minimizing Discovery Overhead in ROS2","title":"DDS Discovery and discovery server"},{"location":"blog/ROS2/fastdds/discovery/#reference","text":"","title":"Reference"},{"location":"blog/ROS2/fastdds/discovery/#--fast-dds-discovery","text":"Edge Robotics with ROS2 and Eclipse Zenoh Minimizing Discovery Overhead in ROS2","title":"- fast-dds Discovery"},{"location":"blog/ROS2/fastdds/static_discovery/","tags":["dds","fastdds","profile"],"text":"Reference # Static Discovery Support","title":"ROS2 FastDDS static discovery with xml profile"},{"location":"blog/ROS2/fastdds/static_discovery/#reference","text":"Static Discovery Support","title":"Reference"},{"location":"blog/ROS2/fastdds/unicast_discovery/","tags":["dds","fastdds","profile"],"text":"Objective # Show ROS node normal discovery behavior Unicast discovery: Set Node discovery protocol to unicast For each ROS 2 process running on a computer, one DDS \u201cparticipant\u201d is created Each DDS participant takes up two unicast ports on the computer. Discovery Unicast port: for discovery / meta-traffic User Unicast port: for user traffic port ROS2 Node demo # Run Pub/Sub nodes Check open ports Analyze discovery data with wireshark Domain_ID Nodes run on domain 0 usage ros2 run demo_nodes_cpp talker sudo lsof -i -P -n | grep UDP | grep talker # talker 877967 user 9u IPv4 72699380 0t0 UDP *:7400 talker 877967 user 10u IPv4 72699382 0t0 UDP *:7412 talker 877967 user 12u IPv4 72699383 0t0 UDP *:7413 talker 877967 user 14u IPv4 72699385 0t0 UDP *:60083 The Node/Participant publish multicast discovery data each 3 sec, on port 7400 Multiple node # terminal1 ros2 run demo_nodes_cpp talker terminal2 ros2 run demo_nodes_cpp listener multiple node if we run more the one node, each of them send multicast discovery data on the the domain port 7400 lsof sudo lsof -i -P -n | grep UDP | grep 'list\\|talker' talker 883188 user 9u IPv4 72872989 0t0 UDP *:7400 talker 883188 user 10u IPv4 72872991 0t0 UDP *:7412 talker 883188 user 12u IPv4 72872992 0t0 UDP *:7413 talker 883188 user 14u IPv4 72872994 0t0 UDP *:34513 talker 883188 user 15u IPv4 72872995 0t0 UDP 192 .168.1.221:35422 listener 883200 user 9u IPv4 72864737 0t0 UDP *:7400 listener 883200 user 10u IPv4 72864740 0t0 UDP *:7414 listener 883200 user 12u IPv4 72864742 0t0 UDP *:7415 listener 883200 user 14u IPv4 72864744 0t0 UDP *:37961 listener 883200 user 15u IPv4 72864745 0t0 UDP 192 .168.1.221:43254 Disabled multicast discovery # To disabled multicast discovery data we need to use fastdds custom profile, We set the profile by FASTRTPS_DEFAULT_PROFILES_FILE environment variable that point to the profile file The profile disabled multicast discovery Set Node sending discovery unicast data to it\u2019s config peers usage demo export FASTRTPS_DEFAULT_PROFILES_FILE = \" $( pwd ) /STATIC_profile.xml\" ros2 run demo_nodes_cpp talker demo # Run Pub/Talker # To disabled Node/Participant we need to tale the node where to find the other peer Start nodes on domain_id=0 Set the Publisher/Talker node participant number to 20 Set the Subscriber/Listener peer node participant number to 22 UNICAST_PROFILE_W.xml <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <profiles xmlns= \"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\" > <participant profile_name= \"disable_multicast\" is_default_profile= \"true\" > <rtps> <participantID> 20 </participantID> <builtin> <metatrafficUnicastLocatorList> <locator/> </metatrafficUnicastLocatorList> <initialPeersList> <locator> <udpv4> <address> 127.0.0.1 </address> <port> 7454 </port> </udpv4> </locator> </initialPeersList> </builtin> </rtps> </participant> </profiles> terminal1 source /opt/ros/humble/setup.bash export FASTRTPS_DEFAULT_PROFILES_FILE = \" $( pwd ) /UNICAST_PROFILE_W.xml\" ros2 run demo_nodes_cpp talker sudo lsof -i -P -n | grep UDP | grep 'list\\|talker' talker 881133 user 9u IPv4 72808683 0t0 UDP *:7450 talker 881133 user 10u IPv4 72808684 0t0 UDP *:7451 talker 881133 user 12u IPv4 72808686 0t0 UDP *:56018 We can see that no multicast domain is open, and the node open ports 7450, 7451 according to the domain port calculator terminal2 source /opt/ros/humble/setup.bash export FASTRTPS_DEFAULT_PROFILES_FILE = \" $( pwd ) /UNICAST_PROFILE_R.xml\" ros2 run demo_nodes_cpp listener The node send its discovery data to other peer declare at the xml profile in 3 sec interval for know the peer not running and we got icmp port unreachable message Running both node # Both node send discovery data in 3 sec interval to each other sudo lsof -i -P -n | grep UDP | grep 'list\\|talker' talker 881133 user 9u IPv4 72808683 0t0 UDP *:7450 talker 881133 user 10u IPv4 72808684 0t0 UDP *:7451 talker 881133 user 12u IPv4 72808686 0t0 UDP *:56018 talker 881133 user 13u IPv4 72808687 0t0 UDP 192 .168.1.221:42527 listener 881878 user 9u IPv4 72822584 0t0 UDP *:7454 listener 881878 user 10u IPv4 72822585 0t0 UDP *:7455 listener 881878 user 12u IPv4 72822587 0t0 UDP *:51421 listener 881878 user 13u IPv4 72822588 0t0 UDP 192 .168.1.221:52642 Profiles # Publisher/Talker # UNICAST_PROFILE_W.xml <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <profiles xmlns= \"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\" > <participant profile_name= \"disable_multicast\" is_default_profile= \"true\" > <rtps> <participantID> 20 </participantID> <builtin> <metatrafficUnicastLocatorList> <locator/> </metatrafficUnicastLocatorList> <initialPeersList> <locator> <udpv4> <address> 127.0.0.1 </address> <port> 7454 </port> </udpv4> </locator> </initialPeersList> </builtin> </rtps> </participant> </profiles> Subscriber/Listener # UNICAST_PROFILE_R.xml <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <profiles xmlns= \"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\" > <participant profile_name= \"disable_multicast\" is_default_profile= \"true\" > <rtps> <participantID> 22 </participantID> <builtin> <metatrafficUnicastLocatorList> <locator/> </metatrafficUnicastLocatorList> <initialPeersList> <locator> <udpv4> <address> 127.0.0.1 </address> <port> 7450 </port> </udpv4> </locator> </initialPeersList> </builtin> </rtps> </participant> </profiles> Reference # fast-dds discovery","title":"ROS2 FastDDS discovery with xml profile"},{"location":"blog/ROS2/fastdds/unicast_discovery/#objective","text":"Show ROS node normal discovery behavior Unicast discovery: Set Node discovery protocol to unicast For each ROS 2 process running on a computer, one DDS \u201cparticipant\u201d is created Each DDS participant takes up two unicast ports on the computer. Discovery Unicast port: for discovery / meta-traffic User Unicast port: for user traffic port","title":"Objective"},{"location":"blog/ROS2/fastdds/unicast_discovery/#ros2-node-demo","text":"Run Pub/Sub nodes Check open ports Analyze discovery data with wireshark Domain_ID Nodes run on domain 0 usage ros2 run demo_nodes_cpp talker sudo lsof -i -P -n | grep UDP | grep talker # talker 877967 user 9u IPv4 72699380 0t0 UDP *:7400 talker 877967 user 10u IPv4 72699382 0t0 UDP *:7412 talker 877967 user 12u IPv4 72699383 0t0 UDP *:7413 talker 877967 user 14u IPv4 72699385 0t0 UDP *:60083 The Node/Participant publish multicast discovery data each 3 sec, on port 7400","title":"ROS2 Node demo"},{"location":"blog/ROS2/fastdds/unicast_discovery/#multiple-node","text":"terminal1 ros2 run demo_nodes_cpp talker terminal2 ros2 run demo_nodes_cpp listener multiple node if we run more the one node, each of them send multicast discovery data on the the domain port 7400 lsof sudo lsof -i -P -n | grep UDP | grep 'list\\|talker' talker 883188 user 9u IPv4 72872989 0t0 UDP *:7400 talker 883188 user 10u IPv4 72872991 0t0 UDP *:7412 talker 883188 user 12u IPv4 72872992 0t0 UDP *:7413 talker 883188 user 14u IPv4 72872994 0t0 UDP *:34513 talker 883188 user 15u IPv4 72872995 0t0 UDP 192 .168.1.221:35422 listener 883200 user 9u IPv4 72864737 0t0 UDP *:7400 listener 883200 user 10u IPv4 72864740 0t0 UDP *:7414 listener 883200 user 12u IPv4 72864742 0t0 UDP *:7415 listener 883200 user 14u IPv4 72864744 0t0 UDP *:37961 listener 883200 user 15u IPv4 72864745 0t0 UDP 192 .168.1.221:43254","title":"Multiple node"},{"location":"blog/ROS2/fastdds/unicast_discovery/#disabled-multicast-discovery","text":"To disabled multicast discovery data we need to use fastdds custom profile, We set the profile by FASTRTPS_DEFAULT_PROFILES_FILE environment variable that point to the profile file The profile disabled multicast discovery Set Node sending discovery unicast data to it\u2019s config peers usage demo export FASTRTPS_DEFAULT_PROFILES_FILE = \" $( pwd ) /STATIC_profile.xml\" ros2 run demo_nodes_cpp talker","title":"Disabled multicast discovery"},{"location":"blog/ROS2/fastdds/unicast_discovery/#demo","text":"","title":"demo"},{"location":"blog/ROS2/fastdds/unicast_discovery/#run-pubtalker","text":"To disabled Node/Participant we need to tale the node where to find the other peer Start nodes on domain_id=0 Set the Publisher/Talker node participant number to 20 Set the Subscriber/Listener peer node participant number to 22 UNICAST_PROFILE_W.xml <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <profiles xmlns= \"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\" > <participant profile_name= \"disable_multicast\" is_default_profile= \"true\" > <rtps> <participantID> 20 </participantID> <builtin> <metatrafficUnicastLocatorList> <locator/> </metatrafficUnicastLocatorList> <initialPeersList> <locator> <udpv4> <address> 127.0.0.1 </address> <port> 7454 </port> </udpv4> </locator> </initialPeersList> </builtin> </rtps> </participant> </profiles> terminal1 source /opt/ros/humble/setup.bash export FASTRTPS_DEFAULT_PROFILES_FILE = \" $( pwd ) /UNICAST_PROFILE_W.xml\" ros2 run demo_nodes_cpp talker sudo lsof -i -P -n | grep UDP | grep 'list\\|talker' talker 881133 user 9u IPv4 72808683 0t0 UDP *:7450 talker 881133 user 10u IPv4 72808684 0t0 UDP *:7451 talker 881133 user 12u IPv4 72808686 0t0 UDP *:56018 We can see that no multicast domain is open, and the node open ports 7450, 7451 according to the domain port calculator terminal2 source /opt/ros/humble/setup.bash export FASTRTPS_DEFAULT_PROFILES_FILE = \" $( pwd ) /UNICAST_PROFILE_R.xml\" ros2 run demo_nodes_cpp listener The node send its discovery data to other peer declare at the xml profile in 3 sec interval for know the peer not running and we got icmp port unreachable message","title":"Run Pub/Talker"},{"location":"blog/ROS2/fastdds/unicast_discovery/#running-both-node","text":"Both node send discovery data in 3 sec interval to each other sudo lsof -i -P -n | grep UDP | grep 'list\\|talker' talker 881133 user 9u IPv4 72808683 0t0 UDP *:7450 talker 881133 user 10u IPv4 72808684 0t0 UDP *:7451 talker 881133 user 12u IPv4 72808686 0t0 UDP *:56018 talker 881133 user 13u IPv4 72808687 0t0 UDP 192 .168.1.221:42527 listener 881878 user 9u IPv4 72822584 0t0 UDP *:7454 listener 881878 user 10u IPv4 72822585 0t0 UDP *:7455 listener 881878 user 12u IPv4 72822587 0t0 UDP *:51421 listener 881878 user 13u IPv4 72822588 0t0 UDP 192 .168.1.221:52642","title":"Running both node"},{"location":"blog/ROS2/fastdds/unicast_discovery/#profiles","text":"","title":"Profiles"},{"location":"blog/ROS2/fastdds/unicast_discovery/#publishertalker","text":"UNICAST_PROFILE_W.xml <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <profiles xmlns= \"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\" > <participant profile_name= \"disable_multicast\" is_default_profile= \"true\" > <rtps> <participantID> 20 </participantID> <builtin> <metatrafficUnicastLocatorList> <locator/> </metatrafficUnicastLocatorList> <initialPeersList> <locator> <udpv4> <address> 127.0.0.1 </address> <port> 7454 </port> </udpv4> </locator> </initialPeersList> </builtin> </rtps> </participant> </profiles>","title":"Publisher/Talker"},{"location":"blog/ROS2/fastdds/unicast_discovery/#subscriberlistener","text":"UNICAST_PROFILE_R.xml <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <profiles xmlns= \"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\" > <participant profile_name= \"disable_multicast\" is_default_profile= \"true\" > <rtps> <participantID> 22 </participantID> <builtin> <metatrafficUnicastLocatorList> <locator/> </metatrafficUnicastLocatorList> <initialPeersList> <locator> <udpv4> <address> 127.0.0.1 </address> <port> 7450 </port> </udpv4> </locator> </initialPeersList> </builtin> </rtps> </participant> </profiles>","title":"Subscriber/Listener"},{"location":"blog/ROS2/fastdds/unicast_discovery/#reference","text":"fast-dds discovery","title":"Reference"},{"location":"blog/ROS2/gazebo/","tags":["ros2","gazebo-classic"],"text":"sudo apt install ros-humble-gazebo-ros-pkgs test integration # gazebo --verbose /opt/ros/humble/share/gazebo_plugins/worlds/gazebo_ros_diff_drive_demo.world ros2 topic pub /demo/cmd_demo geometry_msgs/Twist '{linear: {x: 1.0}}' -1 # Reference # ROS2 Gazebo migration guide Installing gazebo_ros_pkgs (ROS 2)","title":"ros2 gazebo integration"},{"location":"blog/ROS2/gazebo/#test-integration","text":"gazebo --verbose /opt/ros/humble/share/gazebo_plugins/worlds/gazebo_ros_diff_drive_demo.world ros2 topic pub /demo/cmd_demo geometry_msgs/Twist '{linear: {x: 1.0}}' -1","title":"test integration"},{"location":"blog/ROS2/gazebo/#_1","text":"","title":""},{"location":"blog/ROS2/gazebo/#reference","text":"ROS2 Gazebo migration guide Installing gazebo_ros_pkgs (ROS 2)","title":"Reference"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/","tags":["gazebo","launch","101"],"text":"gazebo_ros # Provides ROS plugins that offer message and service publishers for interfacing with Gazebo through ROS. sudo apt install ros-foxy-gazebo-ros # project # my ros2_gazebo_tutorial \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 basic_gazebo.launch.py \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 empty.world world # empty.world <?xml version='1.0'?> <sdf version= \"1.6\" > <world name= \"room\" > <include> <uri> model://sun </uri> </include> <include> <uri> model://ground_plane </uri> </include> </world> </sdf> launch # basic_gazebo.launch.py from launch import LaunchDescription import os from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource PACKAGE = \"ros2_gazebo_tutorial\" WORLD = \"empty.world\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) models = [ os . path . join ( pkg , \"models\" )] models_env = AppendEnvironmentVariable ( name = \"GAZEBO_MODEL_PATH\" , value = \":\" . join ( models ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) ld . add_action ( models_env ) ld . add_action ( resource_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( gazebo ) return ld cmake # Copy launch and world folders CMakeLists.txt # Add this line to CMakeLists.txt install ( DIRECTORY launch worlds DESTINATION share/ ${ PROJECT_NAME } / )","title":"Part1 - launch gazebo"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#gazebo_ros","text":"Provides ROS plugins that offer message and service publishers for interfacing with Gazebo through ROS.","title":"gazebo_ros"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#sudo-apt-install-ros-foxy-gazebo-ros","text":"","title":"sudo apt install ros-foxy-gazebo-ros\n"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#project","text":"my ros2_gazebo_tutorial \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 basic_gazebo.launch.py \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 empty.world","title":"project"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#world","text":"empty.world <?xml version='1.0'?> <sdf version= \"1.6\" > <world name= \"room\" > <include> <uri> model://sun </uri> </include> <include> <uri> model://ground_plane </uri> </include> </world> </sdf>","title":"world"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#launch","text":"basic_gazebo.launch.py from launch import LaunchDescription import os from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource PACKAGE = \"ros2_gazebo_tutorial\" WORLD = \"empty.world\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) models = [ os . path . join ( pkg , \"models\" )] models_env = AppendEnvironmentVariable ( name = \"GAZEBO_MODEL_PATH\" , value = \":\" . join ( models ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) ld . add_action ( models_env ) ld . add_action ( resource_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( gazebo ) return ld","title":"launch"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#cmake","text":"Copy launch and world folders CMakeLists.txt # Add this line to CMakeLists.txt install ( DIRECTORY launch worlds DESTINATION share/ ${ PROJECT_NAME } / )","title":"cmake"},{"location":"blog/ROS2/gazebo/02-spawn/","tags":["gazebo-classic","tutorial","spawn"],"text":"project # my ros2_gazebo_tutorial \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 spawn.launch.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 empty.world \u2514\u2500\u2500 models \u2514\u2500\u2500 simple \u251c\u2500\u2500 model.config \u2514\u2500\u2500 model.sdf.xacro launch # basic_gazebo.launch.py import os from ament_index_python import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription , AppendEnvironmentVariable , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro PACKAGE = \"ros2_gazebo_tutorial\" WORLD = \"camera.world\" MODEL = \"camera2\" SDF = \"model.sdf\" def generate_launch_description (): gazebo_pkg = get_package_share_directory ( \"gazebo_ros\" ) pkg = get_package_share_directory ( PACKAGE ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) models = [ os . path . join ( pkg , \"models\" )] models_env = AppendEnvironmentVariable ( name = \"GAZEBO_MODEL_PATH\" , value = \":\" . join ( models ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) robot_description_path = os . path . join ( pkg , \"models\" , MODEL , SDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , parameters = [ { 'use_sim_time' : sim_time , 'robot_description' : doc . toxml () } ] ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-topic\" , \"robot_description\" ], output = \"screen\" , ) tf = Node ( package = \"tf2_ros\" , executable = \"static_transform_publisher\" , output = \"screen\" , arguments = [ \"0\" , \"0\" , \"0.5\" , \"0\" , \"0\" , \"0\" , \"world\" , \"link\" ] ) ld = LaunchDescription () ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( arg_sim_time ) ld . add_action ( resource_env ) ld . add_action ( models_env ) ld . add_action ( robot_state_publisher ) ld . add_action ( tf ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity ) return ld","title":"Part2 - spawn"},{"location":"blog/ROS2/gazebo/02-spawn/#project","text":"my ros2_gazebo_tutorial \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 spawn.launch.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 empty.world \u2514\u2500\u2500 models \u2514\u2500\u2500 simple \u251c\u2500\u2500 model.config \u2514\u2500\u2500 model.sdf.xacro","title":"project"},{"location":"blog/ROS2/gazebo/02-spawn/#launch","text":"basic_gazebo.launch.py import os from ament_index_python import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription , AppendEnvironmentVariable , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro PACKAGE = \"ros2_gazebo_tutorial\" WORLD = \"camera.world\" MODEL = \"camera2\" SDF = \"model.sdf\" def generate_launch_description (): gazebo_pkg = get_package_share_directory ( \"gazebo_ros\" ) pkg = get_package_share_directory ( PACKAGE ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) models = [ os . path . join ( pkg , \"models\" )] models_env = AppendEnvironmentVariable ( name = \"GAZEBO_MODEL_PATH\" , value = \":\" . join ( models ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) robot_description_path = os . path . join ( pkg , \"models\" , MODEL , SDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , parameters = [ { 'use_sim_time' : sim_time , 'robot_description' : doc . toxml () } ] ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-topic\" , \"robot_description\" ], output = \"screen\" , ) tf = Node ( package = \"tf2_ros\" , executable = \"static_transform_publisher\" , output = \"screen\" , arguments = [ \"0\" , \"0\" , \"0.5\" , \"0\" , \"0\" , \"0\" , \"world\" , \"link\" ] ) ld = LaunchDescription () ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( arg_sim_time ) ld . add_action ( resource_env ) ld . add_action ( models_env ) ld . add_action ( robot_state_publisher ) ld . add_action ( tf ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity ) return ld","title":"launch"},{"location":"blog/ROS2/gazebo/moving_object/","text":"service tags: - gazebo - ros2 - plugins Moving an object in Gazebo using ROS2 service # Control gazebo entities (links) using ROS2 and libgazebo_ros_state gazebo plugin. this plugin has two services: - get_entity_state - set_entity_state LAB objective # Get gazebo entity state using ROS2 service Set gazebo entities state using ROS2 service Set/Get from cli Control from python node project # world # <sdf version= \"1.6\" > <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <!-- models--> <model name= \"cube\" > <static> true </static> <link name= \"link\" > <pose> 0 0 2.5 0 0 0 </pose> <visual name= \"visual\" > <geometry> <box> <size> 2 1 1 </size> </box> </geometry> </visual> </link> </model> <!-- plugins --> <plugin name= \"gazebo_ros_state\" filename= \"libgazebo_ros_state.so\" > <ros> <namespace> /demo </namespace> <argument> model_states:=model_states_demo </argument> </ros> <update_rate> 1.0 </update_rate> </plugin> </world> </sdf> launch # gazebo environment variables Don\u2019t forget to source The launch file append path to GAZEBO_RESOURCE_PATH variable for world file location source /usr/share/gazebo/setup.sh import os from launch import LaunchDescription from launch.actions import AppendEnvironmentVariable , IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node PACKAGE_NAME = \"camera_calibration_gazebo\" WORLD = \"demo.world\" def generate_launch_description (): pkg_share = get_package_share_directory ( PACKAGE_NAME ) gazebo_pkg = get_package_share_directory ( \"gazebo_ros\" ) # source /usr/share/gazebo/setup.sh resources = [ os . path . join ( pkg_share , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( [ os . path . join ( gazebo_pkg , \"launch\" , \"gazebo.launch.py\" )] ), launch_arguments = { \"verbose\" : \"true\" , \"world\" : WORLD } . items (), ) ld = LaunchDescription () ld . add_action ( resource_env ) ld . add_action ( gazebo ) return ld cli # get_entity_state # ros2 service call /demo/get_entity_state gazebo_msgs/srv/GetEntityState \"{name: cube::link,reference_frame: world}\" set_entity_state # ros2 service call /demo/set_entity_state gazebo_msgs/srv/SetEntityState \"state: {name: cube::link, pose: {position:{x: 2.0, y: 2.0, z: 5.0}}, reference_frame: world}\" ros2 service call /demo/set_entity_state gazebo_msgs/srv/SetEntityState \\ \"state: {name: cube::link, pose: \\ {position:{x: 0.0, y: 0.0, z: 2.5}, orientation:{x: 0.7071, y: 0.0, z: 0.7071, w: 0.0}}, \\ reference_frame: world}\" Reference # ROS 2 Migration: Entity states","title":"Moving object"},{"location":"blog/ROS2/gazebo/moving_object/#moving-an-object-in-gazebo-using-ros2-service","text":"Control gazebo entities (links) using ROS2 and libgazebo_ros_state gazebo plugin. this plugin has two services: - get_entity_state - set_entity_state","title":"Moving an object in Gazebo using ROS2 service"},{"location":"blog/ROS2/gazebo/moving_object/#lab-objective","text":"Get gazebo entity state using ROS2 service Set gazebo entities state using ROS2 service Set/Get from cli Control from python node","title":"LAB objective"},{"location":"blog/ROS2/gazebo/moving_object/#project","text":"","title":"project"},{"location":"blog/ROS2/gazebo/moving_object/#world","text":"<sdf version= \"1.6\" > <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <!-- models--> <model name= \"cube\" > <static> true </static> <link name= \"link\" > <pose> 0 0 2.5 0 0 0 </pose> <visual name= \"visual\" > <geometry> <box> <size> 2 1 1 </size> </box> </geometry> </visual> </link> </model> <!-- plugins --> <plugin name= \"gazebo_ros_state\" filename= \"libgazebo_ros_state.so\" > <ros> <namespace> /demo </namespace> <argument> model_states:=model_states_demo </argument> </ros> <update_rate> 1.0 </update_rate> </plugin> </world> </sdf>","title":"world"},{"location":"blog/ROS2/gazebo/moving_object/#launch","text":"gazebo environment variables Don\u2019t forget to source The launch file append path to GAZEBO_RESOURCE_PATH variable for world file location source /usr/share/gazebo/setup.sh import os from launch import LaunchDescription from launch.actions import AppendEnvironmentVariable , IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node PACKAGE_NAME = \"camera_calibration_gazebo\" WORLD = \"demo.world\" def generate_launch_description (): pkg_share = get_package_share_directory ( PACKAGE_NAME ) gazebo_pkg = get_package_share_directory ( \"gazebo_ros\" ) # source /usr/share/gazebo/setup.sh resources = [ os . path . join ( pkg_share , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( [ os . path . join ( gazebo_pkg , \"launch\" , \"gazebo.launch.py\" )] ), launch_arguments = { \"verbose\" : \"true\" , \"world\" : WORLD } . items (), ) ld = LaunchDescription () ld . add_action ( resource_env ) ld . add_action ( gazebo ) return ld","title":"launch"},{"location":"blog/ROS2/gazebo/moving_object/#cli","text":"","title":"cli"},{"location":"blog/ROS2/gazebo/moving_object/#get_entity_state","text":"ros2 service call /demo/get_entity_state gazebo_msgs/srv/GetEntityState \"{name: cube::link,reference_frame: world}\"","title":"get_entity_state"},{"location":"blog/ROS2/gazebo/moving_object/#set_entity_state","text":"ros2 service call /demo/set_entity_state gazebo_msgs/srv/SetEntityState \"state: {name: cube::link, pose: {position:{x: 2.0, y: 2.0, z: 5.0}}, reference_frame: world}\" ros2 service call /demo/set_entity_state gazebo_msgs/srv/SetEntityState \\ \"state: {name: cube::link, pose: \\ {position:{x: 0.0, y: 0.0, z: 2.5}, orientation:{x: 0.7071, y: 0.0, z: 0.7071, w: 0.0}}, \\ reference_frame: world}\"","title":"set_entity_state"},{"location":"blog/ROS2/gazebo/moving_object/#reference","text":"ROS 2 Migration: Entity states","title":"Reference"},{"location":"blog/ROS2/gazebo/sensors/","tags":["gazebo","ros2","cook"],"text":"Project # gazebo \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 gazebo.world \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 simple \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 gazebo.launch.py Reference # A Review of the ROS2 URDF Gazebo Sensor","title":"Gazebo (classic) sensors tutorials"},{"location":"blog/ROS2/gazebo/sensors/#project","text":"gazebo \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 gazebo.world \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 simple \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 gazebo.launch.py","title":"Project"},{"location":"blog/ROS2/gazebo/sensors/#reference","text":"A Review of the ROS2 URDF Gazebo Sensor","title":"Reference"},{"location":"blog/ROS2/gazebo/sensors/camera/","tags":["ros2","gazebo","camera"],"text":"Gazebo camera sensor with ROS2 plugin Tutorial Using SDF, Spawn camera SDF model into gazebo View Camera with correct TF in rviz set plugin camera coordinate system (x:right, y:down, z:into the plan) Image Coordinate Frame # Camera Coordinate Frame # Robot Coordinate Frmae # Demo # camera.world : Gazebo world sdf file camera2.sdf : camera model, SDF file with ros2 plugin camera.launch.py : ROS2 launch file Launch gazebo Run Rviz spawn ROBOT (camera) Set static TF\u2019s world # Basic gazebo world - Add simple object viewed by the camera worlds/camera.world <?xml version=\"1.0\" ?> <sdf version= \"1.5\" > <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <include> <pose> 2 0 0 0 0 0 </pose> <uri> model://construction_cone </uri> </include> </world> </sdf> model # models/camera2/model.sdf <?xml version=\"1.0\" ?> <sdf version= \"1.5\" > <model name= \"camera2\" > <link name= \"camera_link\" > <frame name= \"camera_optical\" attached_to= \"camera_link\" > <pose relative_to= \"camera_link\" > 0.05 0 0 -1.575 0 -1.575 </pose> </frame> <inertial> <mass> 0.1 </mass> <inertia> <ixx> 0.000166667 </ixx> <iyy> 0.000166667 </iyy> <izz> 0.000166667 </izz> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"camera\" type= \"camera\" > <pose> 0.05 0 0 0 0 0 </pose> <camera> <horizontal_fov> 1.047 </horizontal_fov> <image> <width> 320 </width> <height> 240 </height> </image> <clip> <near> 0.1 </near> <far> 100 </far> </clip> </camera> <always_on> 1 </always_on> <update_rate> 15 </update_rate> <visualize> true </visualize> <plugin name= \"camera\" filename= \"libgazebo_ros_camera.so\" > <!-- Change namespace, camera name and topics so - * Images are published to: /custom_ns/custom_camera/custom_image * Camera info is published to: /custom_ns/custom_camera/custom_info --> <!-- <ros> <namespace>custom_ns</namespace> <remapping>image_raw:=custom_img</remapping> <remapping>camera_info:=custom_info</remapping> </ros> --> <!-- Set camera name. If empty, defaults to sensor name (i.e. \"sensor_name\") --> <!-- <camera_name>custom_camera</camera_name> --> <!-- Set TF frame name. If empty, defaults to link name (i.e. \"link_name\") --> <frame_name> camera_optical </frame_name> </plugin> </sensor> </link> </model> </sdf> launch # launch/camera.launch.py from launch import LaunchDescription import os from math import pi from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro PACKAGE = \"ros2_gazebo_tutorial\" WORLD = \"camera.world\" MODEL = \"camera2\" SDF = \"model.sdf\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) models = [ os . path . join ( pkg , \"models\" )] models_env = AppendEnvironmentVariable ( name = \"GAZEBO_MODEL_PATH\" , value = \":\" . join ( models ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) robot_description_path = os . path . join ( pkg , \"models\" , MODEL , SDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , parameters = [ { 'use_sim_time' : sim_time , 'robot_description' : doc . toxml () } ] ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-topic\" , \"robot_description\" , \"-z\" , \"0.5\" ], output = \"screen\" , ) tf = Node ( package = \"tf2_ros\" , executable = \"static_transform_publisher\" , output = \"screen\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"world\" , \"camera_link\" ] ) tf_camera_optical = Node ( package = \"tf2_ros\" , executable = \"static_transform_publisher\" , output = \"screen\" , arguments = [ \"0.05\" , \"0\" , \"0\" , str ( - pi / 2 ), \"0\" , str ( - pi / 2 ), \"camera_link\" , \"camera_optical\" ] ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( pkg , 'config' , 'camera.rviz' )] ) ld . add_action ( models_env ) ld . add_action ( resource_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( arg_sim_time ) ld . add_action ( gazebo ) ld . add_action ( robot_state_publisher ) ld . add_action ( spawn_entity ) ld . add_action ( tf ) ld . add_action ( tf_camera_optical ) ld . add_action ( rviz_node ) return ld Reference # Projec@on image copywrite","title":"ROS2 gazebo camera sensor and plugin"},{"location":"blog/ROS2/gazebo/sensors/camera/#image-coordinate-frame","text":"","title":"Image Coordinate Frame"},{"location":"blog/ROS2/gazebo/sensors/camera/#camera-coordinate-frame","text":"","title":"Camera Coordinate Frame"},{"location":"blog/ROS2/gazebo/sensors/camera/#robot-coordinate-frmae","text":"","title":"Robot Coordinate Frmae"},{"location":"blog/ROS2/gazebo/sensors/camera/#demo","text":"camera.world : Gazebo world sdf file camera2.sdf : camera model, SDF file with ros2 plugin camera.launch.py : ROS2 launch file Launch gazebo Run Rviz spawn ROBOT (camera) Set static TF\u2019s","title":"Demo"},{"location":"blog/ROS2/gazebo/sensors/camera/#world","text":"Basic gazebo world - Add simple object viewed by the camera worlds/camera.world <?xml version=\"1.0\" ?> <sdf version= \"1.5\" > <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <include> <pose> 2 0 0 0 0 0 </pose> <uri> model://construction_cone </uri> </include> </world> </sdf>","title":"world"},{"location":"blog/ROS2/gazebo/sensors/camera/#model","text":"models/camera2/model.sdf <?xml version=\"1.0\" ?> <sdf version= \"1.5\" > <model name= \"camera2\" > <link name= \"camera_link\" > <frame name= \"camera_optical\" attached_to= \"camera_link\" > <pose relative_to= \"camera_link\" > 0.05 0 0 -1.575 0 -1.575 </pose> </frame> <inertial> <mass> 0.1 </mass> <inertia> <ixx> 0.000166667 </ixx> <iyy> 0.000166667 </iyy> <izz> 0.000166667 </izz> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"camera\" type= \"camera\" > <pose> 0.05 0 0 0 0 0 </pose> <camera> <horizontal_fov> 1.047 </horizontal_fov> <image> <width> 320 </width> <height> 240 </height> </image> <clip> <near> 0.1 </near> <far> 100 </far> </clip> </camera> <always_on> 1 </always_on> <update_rate> 15 </update_rate> <visualize> true </visualize> <plugin name= \"camera\" filename= \"libgazebo_ros_camera.so\" > <!-- Change namespace, camera name and topics so - * Images are published to: /custom_ns/custom_camera/custom_image * Camera info is published to: /custom_ns/custom_camera/custom_info --> <!-- <ros> <namespace>custom_ns</namespace> <remapping>image_raw:=custom_img</remapping> <remapping>camera_info:=custom_info</remapping> </ros> --> <!-- Set camera name. If empty, defaults to sensor name (i.e. \"sensor_name\") --> <!-- <camera_name>custom_camera</camera_name> --> <!-- Set TF frame name. If empty, defaults to link name (i.e. \"link_name\") --> <frame_name> camera_optical </frame_name> </plugin> </sensor> </link> </model> </sdf>","title":"model"},{"location":"blog/ROS2/gazebo/sensors/camera/#launch","text":"launch/camera.launch.py from launch import LaunchDescription import os from math import pi from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro PACKAGE = \"ros2_gazebo_tutorial\" WORLD = \"camera.world\" MODEL = \"camera2\" SDF = \"model.sdf\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) models = [ os . path . join ( pkg , \"models\" )] models_env = AppendEnvironmentVariable ( name = \"GAZEBO_MODEL_PATH\" , value = \":\" . join ( models ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) robot_description_path = os . path . join ( pkg , \"models\" , MODEL , SDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , parameters = [ { 'use_sim_time' : sim_time , 'robot_description' : doc . toxml () } ] ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-topic\" , \"robot_description\" , \"-z\" , \"0.5\" ], output = \"screen\" , ) tf = Node ( package = \"tf2_ros\" , executable = \"static_transform_publisher\" , output = \"screen\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"world\" , \"camera_link\" ] ) tf_camera_optical = Node ( package = \"tf2_ros\" , executable = \"static_transform_publisher\" , output = \"screen\" , arguments = [ \"0.05\" , \"0\" , \"0\" , str ( - pi / 2 ), \"0\" , str ( - pi / 2 ), \"camera_link\" , \"camera_optical\" ] ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( pkg , 'config' , 'camera.rviz' )] ) ld . add_action ( models_env ) ld . add_action ( resource_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( arg_sim_time ) ld . add_action ( gazebo ) ld . add_action ( robot_state_publisher ) ld . add_action ( spawn_entity ) ld . add_action ( tf ) ld . add_action ( tf_camera_optical ) ld . add_action ( rviz_node ) return ld","title":"launch"},{"location":"blog/ROS2/gazebo/sensors/camera/#reference","text":"Projec@on image copywrite","title":"Reference"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/","tags":["gazebo","ros2","sensors","cook"],"text":"sdf # model <?xml version=\"1.0\"?> <sdf version= \"1.5\" > <model name= \"depth_camera\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"camera_depth_frame\" > <pose> 0 0 0 -1.5708 0 -1.5708 </pose> </link> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor type= \"depth\" name= \"depth_camera\" > <always_on> 0 </always_on> <update_rate> 10 </update_rate> <camera name= \"camera_name\" > </camera> <plugin name= \"plugin_name\" filename= \"libgazebo_ros_camera.so\" > <ros> <namespace> custom_ns </namespace> <remapping> custom_camera/image_raw:=custom_camera/custom_image </remapping> <remapping> custom_camera/image_depth:=custom_camera/custom_image_depth </remapping> <remapping> custom_camera/camera_info:=custom_camera/custom_info_raw </remapping> <remapping> custom_camera/camera_info_depth:=custom_camera/custom_info_depth </remapping> <remapping> custom_camera/points:=custom_camera/custom_points </remapping> </ros> <camera_name> custom_camera </camera_name> <frame_name> camera_depth_frame </frame_name> </plugin> </sensor> </link> </model> </sdf> # launch # launch import os from launch import LaunchDescription from launch.actions import AppendEnvironmentVariable , IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node PACKAGE_NAME = \"sam_bot_description\" WORLD = \"gazebo.world\" MODEL = \"depth_camera\" def generate_launch_description (): pkg_share = get_package_share_directory ( PACKAGE_NAME ) pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) model_sdf_full_path = os . path . join ( pkg_share , \"models\" , MODEL , \"model.sdf\" ) resources = [ os . path . join ( pkg_share , \"worlds\" ) ] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources )) start_gazebo_server_cmd = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gzserver.launch.py' )), launch_arguments = { \"verbose\" : \"true\" , 'world' : WORLD } . items ()) start_gazebo_client_cmd = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gzclient.launch.py' ))) spawn_entity_cmd = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ '-entity' , \"robot_name_in_model\" , '-file' , model_sdf_full_path , '-x' , \"0\" , '-y' , \"0\" , '-z' , \"0.5\" ], output = 'screen' ) ld = LaunchDescription () rviz = Node ( package = \"rviz2\" , executable = \"rviz2\" , arguments = [ \"-d\" , os . path . join ( pkg_share , \"config\" , MODEL + \".rviz\" )], ) link_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"link2world\" , arguments = [ \"0\" , \"0\" , \"0.5\" , \"-1.5708\" , \"0\" , \"-1.5708\" , \"link\" , \"camera_depth_frame\" ] ) ld = LaunchDescription () ld . add_action ( resource_env ) ld . add_action ( start_gazebo_server_cmd ) ld . add_action ( start_gazebo_client_cmd ) ld . add_action ( spawn_entity_cmd ) ld . add_action ( rviz ) ld . add_action ( link_tf ) return ld # Run # Reference # ROS2 migration","title":"ROS2 gazebo (classic) depth camera sensor"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#sdf","text":"","title":"sdf"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#modelxml-version10sdf-version15----model-namedepth_camera--------pose0-0-05-0-0-0pose--------statictruestatic--------link-namecamera_depth_frame------------pose0-0-0--15708-0--15708pose----------link--------link-namelink------------collision-namecollision----------------geometry--------------------box------------------------size01-01-01size--------------------box----------------geometry------------collision------------visual-namevisual----------------geometry--------------------box------------------------size01-01-01size--------------------box----------------geometry------------visual------------sensor-typedepth-namedepth_camera----------------always_on0always_on----------------update_rate10update_rate----------------camera-namecamera_name----------------camera----------------plugin-nameplugin_name-filenamelibgazebo_ros_cameraso--------------------ros------------------------namespacecustom_nsnamespace------------------------remappingcustom_cameraimage_rawcustom_cameracustom_imageremapping------------------------remappingcustom_cameraimage_depthcustom_cameracustom_image_depthremapping------------------------remappingcustom_cameracamera_infocustom_cameracustom_info_rawremapping------------------------remappingcustom_cameracamera_info_depthcustom_cameracustom_info_depthremapping------------------------remappingcustom_camerapointscustom_cameracustom_pointsremapping--------------------ros--------------------camera_namecustom_cameracamera_name--------------------frame_namecamera_depth_frameframe_name----------------plugin------------sensor--------link----modelsdf","text":"","title":"model&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;sdf version=&quot;1.5&quot;&gt;\n    &lt;model name=&quot;depth_camera&quot;&gt;\n        &lt;pose&gt;0 0 0.5 0 0 0&lt;/pose&gt;\n        &lt;static&gt;true&lt;/static&gt;\n        &lt;link name=&quot;camera_depth_frame&quot;&gt;\n            &lt;pose&gt;0 0 0 -1.5708 0 -1.5708&lt;/pose&gt;\n          &lt;/link&gt;\n        &lt;link name=&quot;link&quot;&gt;\n            &lt;collision name=&quot;collision&quot;&gt;\n                &lt;geometry&gt;\n                    &lt;box&gt;\n                        &lt;size&gt;0.1 0.1 0.1&lt;/size&gt;\n                    &lt;/box&gt;\n                &lt;/geometry&gt;\n            &lt;/collision&gt;\n            &lt;visual name=&quot;visual&quot;&gt;\n                &lt;geometry&gt;\n                    &lt;box&gt;\n                        &lt;size&gt;0.1 0.1 0.1&lt;/size&gt;\n                    &lt;/box&gt;\n                &lt;/geometry&gt;\n            &lt;/visual&gt;\n            &lt;sensor type=&quot;depth&quot; name=&quot;depth_camera&quot;&gt;\n                &lt;always_on&gt;0&lt;/always_on&gt;\n                &lt;update_rate&gt;10&lt;/update_rate&gt;\n                &lt;camera name=&quot;camera_name&quot;&gt;\n                &lt;/camera&gt;\n                &lt;plugin name=&quot;plugin_name&quot; filename=&quot;libgazebo_ros_camera.so&quot;&gt;\n                    &lt;ros&gt;\n                        &lt;namespace&gt;custom_ns&lt;/namespace&gt;\n                        &lt;remapping&gt;custom_camera/image_raw:=custom_camera/custom_image&lt;/remapping&gt;\n                        &lt;remapping&gt;custom_camera/image_depth:=custom_camera/custom_image_depth&lt;/remapping&gt;\n                        &lt;remapping&gt;custom_camera/camera_info:=custom_camera/custom_info_raw&lt;/remapping&gt;\n                        &lt;remapping&gt;custom_camera/camera_info_depth:=custom_camera/custom_info_depth&lt;/remapping&gt;\n                        &lt;remapping&gt;custom_camera/points:=custom_camera/custom_points&lt;/remapping&gt;\n                    &lt;/ros&gt;\n                    &lt;camera_name&gt;custom_camera&lt;/camera_name&gt;\n                    &lt;frame_name&gt;camera_depth_frame&lt;/frame_name&gt;\n                &lt;/plugin&gt;\n            &lt;/sensor&gt;\n        &lt;/link&gt;\n    &lt;/model&gt;\n&lt;/sdf&gt;\n"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#launch","text":"","title":"launch"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#launchimport-osfrom-launch-import-launchdescriptionfrom-launchactions-import-appendenvironmentvariable-includelaunchdescriptionfrom-launchlaunch_description_sources-import-pythonlaunchdescriptionsourcefrom-ament_index_pythonpackages-import-get_package_share_directoryfrom-launch_rosactions-import-nodepackage_name--sam_bot_descriptionworld--gazeboworldmodel--depth_cameradef-generate_launch_description----pkg_share--get_package_share_directorypackage_name----pkg_gazebo_ros--get_package_share_directorygazebo_ros----model_sdf_full_path--ospathjoinpkg_share-models-model-modelsdf----resources----------ospathjoinpkg_share-worlds------------resource_env--appendenvironmentvariablenamegazebo_resource_path-valuejoinresources----start_gazebo_server_cmd--includelaunchdescription--------pythonlaunchdescriptionsourceospathjoinpkg_gazebo_ros-launch-gzserverlaunchpy--------launch_arguments------------verbose-true-------------world-worlditems----start_gazebo_client_cmd--includelaunchdescription--------pythonlaunchdescriptionsourceospathjoinpkg_gazebo_ros-launch-gzclientlaunchpy----spawn_entity_cmd--node--------packagegazebo_ros---------executablespawn_entitypy--------arguments-entity-robot_name_in_model----------file-model_sdf_full_path---------x-0---------y-0---------z-05--------outputscreen----ld--launchdescription----rviz--node--------packagerviz2--------executablerviz2--------arguments-d-ospathjoinpkg_share-config-model--rviz--------link_tf--node--------packagetf2_ros--------executablestatic_transform_publisher--------namelink2world--------arguments--0-0-05--15708-0--15708-link-camera_depth_frame--------ld--launchdescription----ldadd_actionresource_env----ldadd_actionstart_gazebo_server_cmd----ldadd_actionstart_gazebo_client_cmd----ldadd_actionspawn_entity_cmd----ldadd_actionrviz----ldadd_actionlink_tf----return-ld","text":"","title":"launchimport os\nfrom launch import LaunchDescription\nfrom launch.actions import AppendEnvironmentVariable, IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch_ros.actions import Node\n\nPACKAGE_NAME = &quot;sam_bot_description&quot;\nWORLD = &quot;gazebo.world&quot;\nMODEL = &quot;depth_camera&quot;\n\ndef generate_launch_description():\n    pkg_share = get_package_share_directory(PACKAGE_NAME)\n    pkg_gazebo_ros = get_package_share_directory(&#39;gazebo_ros&#39;)\n    model_sdf_full_path = os.path.join(pkg_share, &quot;models&quot;, MODEL, &quot;model.sdf&quot;)\n\n\n    resources = [\n        os.path.join(pkg_share, &quot;worlds&quot;)    \n    ]\n\n    resource_env = AppendEnvironmentVariable(name=&quot;GAZEBO_RESOURCE_PATH&quot;, value=&quot;:&quot;.join(resources))\n\n    start_gazebo_server_cmd = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(os.path.join(pkg_gazebo_ros, &#39;launch&#39;, &#39;gzserver.launch.py&#39;)),\n        launch_arguments={\n            &quot;verbose&quot;: &quot;true&quot;, \n            &#39;world&#39;: WORLD}.items())\n\n    start_gazebo_client_cmd = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(os.path.join(pkg_gazebo_ros, &#39;launch&#39;, &#39;gzclient.launch.py&#39;)))\n\n    spawn_entity_cmd = Node(\n        package=&quot;gazebo_ros&quot;, \n        executable=&quot;spawn_entity.py&quot;,\n        arguments=[&#39;-entity&#39;, &quot;robot_name_in_model&quot;, \n        &#39;-file&#39;, model_sdf_full_path,\n        &#39;-x&#39;, &quot;0&quot;,\n        &#39;-y&#39;, &quot;0&quot;,\n        &#39;-z&#39;, &quot;0.5&quot;],\n        output=&#39;screen&#39;)\n\n    ld = LaunchDescription()\n    rviz = Node(\n        package=&quot;rviz2&quot;,\n        executable=&quot;rviz2&quot;,\n        arguments=[&quot;-d&quot;, os.path.join(pkg_share, &quot;config&quot;, MODEL + &quot;.rviz&quot;)],\n    )\n\n    link_tf = Node(\n        package=&#39;tf2_ros&#39;,\n        executable=&#39;static_transform_publisher&#39;,\n        name=&quot;link2world&quot;,\n        arguments = [&quot;0&quot;, &quot;0&quot;, &quot;0.5&quot;, &quot;-1.5708&quot;, &quot;0&quot;, &quot;-1.5708&quot;, &quot;link&quot;, &quot;camera_depth_frame&quot;]\n    )\n\n    ld = LaunchDescription()\n    ld.add_action(resource_env)\n    ld.add_action(start_gazebo_server_cmd)\n    ld.add_action(start_gazebo_client_cmd)\n    ld.add_action(spawn_entity_cmd)\n    ld.add_action(rviz)\n    ld.add_action(link_tf)\n    return ld\n"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#run","text":"","title":"Run"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#reference","text":"ROS2 migration","title":"Reference"},{"location":"blog/ROS2/gazebo/sensors/gps/","tags":["ros2","gazebo","gps","sensors"],"text":"Gazebo GPS Sensor # Add GPS sensor and ROS2 plugin Note GPS gazebo is a sensor plugin Demo project # sdf_lab \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 gps_world.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 gps_box \u2502 \u251c\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 worlds \u2514\u2500\u2500 empty_gps.world Project files: model: Simple link with gps sensor and ros2 plugin world: Init gps coordinates launch: Run gazebo with world and spawn model model # <?xml version=\"1.0\"?> <sdf version= \"1.5\" > <model name= \"gps_box\" > <pose> 0 0 0 0 0 0 </pose> <link name= 'gps_link' > <pose> 0 0 0.2 0 0 0 </pose> <inertial> <mass> 1 </mass> <inertia> <ixx> 0.026666666666666672 </ixx> <ixy> 0 </ixy> <ixz> 0 </ixz> <iyy> 0.026666666666666672 </iyy> <iyz> 0 </iyz> <izz> 0.026666666666666672 </izz> </inertia> </inertial> <visual name= 'box_visual' > <geometry> <box> <size> 0.4 0.4 0.4 </size> </box> </geometry> <material> <script> <uri> file://media/materials/scripts/gazebo.material </uri> <name> Gazebo/Red </name> </script> </material> </visual> <collision name= 'box_collision' > <geometry> <box> <size> 0.4 0.4 0.4 </size> </box> </geometry> </collision> <sensor name= \"gps_sensor\" type= \"gps\" > <always_on> true </always_on> <update_rate> 10 </update_rate> <plugin name= \"gps_controller\" filename= \"libgazebo_ros_gps_sensor.so\" > <ros> <!-- <namespace>/br</namespace> --> <remapping> gps_controller/out:=gps_pos </remapping> <remapping> gps_controller/vel:=gps_vel </remapping> </ros> <frame_name> gps_link </frame_name> </plugin> </sensor> </link> </model> </sdf> world # <sdf version= \"1.6\" > <world name= \"gazebo_ros_gps_sensor_world\" > <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <spherical_coordinates> <latitude_deg> 31.0461 </latitude_deg> <longitude_deg> 34.8516 </longitude_deg> <elevation> 0 </elevation> <!-- currently gazebo has a bug: instead of outputing lat, long, altitude in ENU (x = East, y = North and z = Up) as the default configurations, it's outputting (-E)(-N)U, therefore we rotate the default frame 180 so that it would go back to ENU --> <heading_deg> 180 </heading_deg> </spherical_coordinates> </world> </sdf> launch # from launch import LaunchDescription import os from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node PACKAGE = \"sdf_lab\" WORLD = \"empty_gps.world\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) resources = [ \"/usr/share/gazebo-11\" , os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) models = [ os . path . join ( pkg , \"models\" )] models_env = AppendEnvironmentVariable ( name = \"GAZEBO_MODEL_PATH\" , value = \":\" . join ( models ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-database\" , \"gps_box\" ], output = \"screen\" , ) ld . add_action ( models_env ) ld . add_action ( resource_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity ) return ld Tip set model name and set GAZEBO_MODEL_PATH path this attribute lock for model by name in this paths","title":"Gazebo GPS Sensor"},{"location":"blog/ROS2/gazebo/sensors/gps/#gazebo-gps-sensor","text":"Add GPS sensor and ROS2 plugin Note GPS gazebo is a sensor plugin","title":"Gazebo GPS Sensor"},{"location":"blog/ROS2/gazebo/sensors/gps/#demo-project","text":"sdf_lab \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 gps_world.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 gps_box \u2502 \u251c\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 worlds \u2514\u2500\u2500 empty_gps.world Project files: model: Simple link with gps sensor and ros2 plugin world: Init gps coordinates launch: Run gazebo with world and spawn model","title":"Demo project"},{"location":"blog/ROS2/gazebo/sensors/gps/#model","text":"<?xml version=\"1.0\"?> <sdf version= \"1.5\" > <model name= \"gps_box\" > <pose> 0 0 0 0 0 0 </pose> <link name= 'gps_link' > <pose> 0 0 0.2 0 0 0 </pose> <inertial> <mass> 1 </mass> <inertia> <ixx> 0.026666666666666672 </ixx> <ixy> 0 </ixy> <ixz> 0 </ixz> <iyy> 0.026666666666666672 </iyy> <iyz> 0 </iyz> <izz> 0.026666666666666672 </izz> </inertia> </inertial> <visual name= 'box_visual' > <geometry> <box> <size> 0.4 0.4 0.4 </size> </box> </geometry> <material> <script> <uri> file://media/materials/scripts/gazebo.material </uri> <name> Gazebo/Red </name> </script> </material> </visual> <collision name= 'box_collision' > <geometry> <box> <size> 0.4 0.4 0.4 </size> </box> </geometry> </collision> <sensor name= \"gps_sensor\" type= \"gps\" > <always_on> true </always_on> <update_rate> 10 </update_rate> <plugin name= \"gps_controller\" filename= \"libgazebo_ros_gps_sensor.so\" > <ros> <!-- <namespace>/br</namespace> --> <remapping> gps_controller/out:=gps_pos </remapping> <remapping> gps_controller/vel:=gps_vel </remapping> </ros> <frame_name> gps_link </frame_name> </plugin> </sensor> </link> </model> </sdf>","title":"model"},{"location":"blog/ROS2/gazebo/sensors/gps/#world","text":"<sdf version= \"1.6\" > <world name= \"gazebo_ros_gps_sensor_world\" > <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <spherical_coordinates> <latitude_deg> 31.0461 </latitude_deg> <longitude_deg> 34.8516 </longitude_deg> <elevation> 0 </elevation> <!-- currently gazebo has a bug: instead of outputing lat, long, altitude in ENU (x = East, y = North and z = Up) as the default configurations, it's outputting (-E)(-N)U, therefore we rotate the default frame 180 so that it would go back to ENU --> <heading_deg> 180 </heading_deg> </spherical_coordinates> </world> </sdf>","title":"world"},{"location":"blog/ROS2/gazebo/sensors/gps/#launch","text":"from launch import LaunchDescription import os from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node PACKAGE = \"sdf_lab\" WORLD = \"empty_gps.world\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) resources = [ \"/usr/share/gazebo-11\" , os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) models = [ os . path . join ( pkg , \"models\" )] models_env = AppendEnvironmentVariable ( name = \"GAZEBO_MODEL_PATH\" , value = \":\" . join ( models ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-database\" , \"gps_box\" ], output = \"screen\" , ) ld . add_action ( models_env ) ld . add_action ( resource_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity ) return ld Tip set model name and set GAZEBO_MODEL_PATH path this attribute lock for model by name in this paths","title":"launch"},{"location":"blog/ROS2/gazebo/sensors/imu/","tags":["ros2","gazebo","imu","sensors"],"text":"Reference # rep-145","title":"IMU"},{"location":"blog/ROS2/gazebo/sensors/imu/#reference","text":"rep-145","title":"Reference"},{"location":"blog/ROS2/gazebo/sensors/lidar/","tags":["gazebo","ros2","sensors","ray","gazebo_ros_ray_sensor","lidar","ultrsonic","range"],"text":"ROS2 gazebo (classic) LIDAR sensor # ROS2 using new plug gazebo_ros_ray_sensor to simulate PointCloud , LaserScan and Range output message control by <output_type> tag sensor_msgs/PointCloud2 : 3D cloud of points (default) sensor_msgs/PointCloud : 3D cloud of points sensor_msgs/LaserScan : 2D scan, uses center vertical ray if there are multiple sensor_msgs/Range : Single distance value, minimum of all ray ranges of parent sensor Demo # SDF # <?xml version=\"1.0\"?> <sdf version= \"1.5\" > <model name= \"lidar_demo\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"lidar\" type= \"ray\" > <always_on> true </always_on> <visualize> true </visualize> <update_rate> 5 </update_rate> <ray> <scan> <horizontal> <samples> 180 </samples> <resolution> 1.00000 </resolution> <min_angle> -1.57 </min_angle> <max_angle> 1.57 </max_angle> </horizontal> </scan> <range> <min> 0.5 </min> <max> 3.5 </max> <resolution> 0.1 </resolution> </range> </ray> <plugin name= \"scan\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> <frame_name> link </frame_name> </plugin> </sensor> </link> </model> </sdf> Run # sensor_msgs/Range # <plugin name= \"ultrasonic_sensor\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <remapping> ~/out:=range </remapping> </ros> <output_type> sensor_msgs/Range </output_type> <frame_name> link </frame_name> </plugin> ros2 topic info /range # Type: sensor_msgs/msg/Range Publisher count: 1 header: stamp: sec: 2978 nanosec: 715000000 frame_id: link radiation_type: 1 field_of_view: 0 .23999999463558197 min_range: 0 .5 max_range: 2 .5 range: 2 .013324022293091 This type of message raise exception when reading is out of range ros2 topic echo /range # Unable to convert call argument to Python object ( compile in debug mode for details ) I Open an issue for this exception sensor_msgs/LaserScan # <plugin name= \"ultrasonic_sensor\" filename= \"libgazebo_ros_ray_sensor.so\" > <output_type> sensor_msgs/LaserScan </output_type> <frame_name> link </frame_name> </plugin> ros2 topic info /ultrasonic_sensor/out # Type: sensor_msgs/msg/LaserScan header: stamp: sec: 109 nanosec: 415000000 frame_id: link angle_min: -0.11999999731779099 angle_max: 0 .11999999731779099 angle_increment: 0 .05999999865889549 time_increment: 0 .0 scan_time: 0 .0 range_min: 0 .5 range_max: 2 .5 ranges: - .inf - 1 .8191075325012207 - 1 .7666829824447632 - 1 .8185886144638062 - .inf intensities: - 0 .0 - 0 .0 - 0 .0 - 0 .0 - 0 .0 .inf When a beam is out of range (min/max) it\u2019s return .inf Reference # ROS 2 Migration: Ray sensors","title":"ROS2 gazebo (classic) LIDAR sensor"},{"location":"blog/ROS2/gazebo/sensors/lidar/#ros2-gazebo-classic-lidar-sensor","text":"ROS2 using new plug gazebo_ros_ray_sensor to simulate PointCloud , LaserScan and Range output message control by <output_type> tag sensor_msgs/PointCloud2 : 3D cloud of points (default) sensor_msgs/PointCloud : 3D cloud of points sensor_msgs/LaserScan : 2D scan, uses center vertical ray if there are multiple sensor_msgs/Range : Single distance value, minimum of all ray ranges of parent sensor","title":"ROS2 gazebo (classic) LIDAR sensor"},{"location":"blog/ROS2/gazebo/sensors/lidar/#demo","text":"","title":"Demo"},{"location":"blog/ROS2/gazebo/sensors/lidar/#sdf","text":"<?xml version=\"1.0\"?> <sdf version= \"1.5\" > <model name= \"lidar_demo\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"lidar\" type= \"ray\" > <always_on> true </always_on> <visualize> true </visualize> <update_rate> 5 </update_rate> <ray> <scan> <horizontal> <samples> 180 </samples> <resolution> 1.00000 </resolution> <min_angle> -1.57 </min_angle> <max_angle> 1.57 </max_angle> </horizontal> </scan> <range> <min> 0.5 </min> <max> 3.5 </max> <resolution> 0.1 </resolution> </range> </ray> <plugin name= \"scan\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> <frame_name> link </frame_name> </plugin> </sensor> </link> </model> </sdf>","title":"SDF"},{"location":"blog/ROS2/gazebo/sensors/lidar/#run","text":"","title":"Run"},{"location":"blog/ROS2/gazebo/sensors/lidar/#sensor_msgsrange","text":"<plugin name= \"ultrasonic_sensor\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <remapping> ~/out:=range </remapping> </ros> <output_type> sensor_msgs/Range </output_type> <frame_name> link </frame_name> </plugin> ros2 topic info /range # Type: sensor_msgs/msg/Range Publisher count: 1 header: stamp: sec: 2978 nanosec: 715000000 frame_id: link radiation_type: 1 field_of_view: 0 .23999999463558197 min_range: 0 .5 max_range: 2 .5 range: 2 .013324022293091 This type of message raise exception when reading is out of range ros2 topic echo /range # Unable to convert call argument to Python object ( compile in debug mode for details ) I Open an issue for this exception","title":"sensor_msgs/Range"},{"location":"blog/ROS2/gazebo/sensors/lidar/#sensor_msgslaserscan","text":"<plugin name= \"ultrasonic_sensor\" filename= \"libgazebo_ros_ray_sensor.so\" > <output_type> sensor_msgs/LaserScan </output_type> <frame_name> link </frame_name> </plugin> ros2 topic info /ultrasonic_sensor/out # Type: sensor_msgs/msg/LaserScan header: stamp: sec: 109 nanosec: 415000000 frame_id: link angle_min: -0.11999999731779099 angle_max: 0 .11999999731779099 angle_increment: 0 .05999999865889549 time_increment: 0 .0 scan_time: 0 .0 range_min: 0 .5 range_max: 2 .5 ranges: - .inf - 1 .8191075325012207 - 1 .7666829824447632 - 1 .8185886144638062 - .inf intensities: - 0 .0 - 0 .0 - 0 .0 - 0 .0 - 0 .0 .inf When a beam is out of range (min/max) it\u2019s return .inf","title":"sensor_msgs/LaserScan"},{"location":"blog/ROS2/gazebo/sensors/lidar/#reference","text":"ROS 2 Migration: Ray sensors","title":"Reference"},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/","tags":["gazebo","ros2","sensors","ultrasonic"],"text":"Create simple model with ultrasonic sensor Spawn the model into gazebo world View sensor output in RVIZ sdf / sensor # ultrasonic/model.sdf <?xml version=\"1.0\"?> <sdf version= \"1.5\" > <model name= \"ultrasonic\" > <static> true </static> <link name= \"link\" > <inertial> <mass> 0.1 </mass> <inertia> <ixx> 0.000166667 </ixx> <iyy> 0.000166667 </iyy> <izz> 0.000166667 </izz> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"ultrasonic_1\" type= \"ray\" > <pose> 0.05 0 0 0 0 0 </pose> <always_on> true </always_on> <visualize> true </visualize> <update_rate> 10 </update_rate> <ray> <scan> <horizontal> <samples> 5 </samples> <resolution> 1.000000 </resolution> <min_angle> -0.12 </min_angle> <max_angle> 0.12 </max_angle> </horizontal> <vertical> <samples> 5 </samples> <resolution> 1.000000 </resolution> <min_angle> -0.01 </min_angle> <max_angle> 0.01 </max_angle> </vertical> </scan> <range> <min> 0.01 </min> <max> 4 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"ultrasonic_sensor\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <remapping> ~/out:=ultrasonic_sensor_1 </remapping> </ros> <output_type> sensor_msgs/Range </output_type> <radiation_type> ultrasound </radiation_type> <frame_name> link </frame_name> </plugin> </sensor> </link> </model> </sdf> launch # launch/ultrasonic.launch.py import os from launch import LaunchDescription from launch.actions import AppendEnvironmentVariable , IncludeLaunchDescription , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.launch_description_sources import PythonLaunchDescriptionSource from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node import xacro PACKAGE_NAME = \"ros2_gazebo_tutorial\" WORLD = \"camera.world\" MODEL = \"ultrasonic\" SDF = \"model.sdf\" def generate_launch_description (): pkg = get_package_share_directory ( PACKAGE_NAME ) pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) model_sdf_full_path = os . path . join ( pkg , \"models\" , MODEL , \"model.sdf\" ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) resources = [ os . path . join ( pkg , \"worlds\" ) ] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources )) start_gazebo_server_cmd = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gzserver.launch.py' )), launch_arguments = { \"verbose\" : \"true\" , 'world' : WORLD } . items ()) start_gazebo_client_cmd = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gzclient.launch.py' ))) robot_description_path = os . path . join ( pkg , \"models\" , MODEL , SDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , parameters = [ { 'use_sim_time' : sim_time , 'robot_description' : doc . toxml () } ] ) spawn_entity_cmd = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ '-entity' , \"robot_name_in_model\" , '-file' , model_sdf_full_path , '-x' , \"0\" , '-y' , \"0\" , '-z' , \"0.05\" ], output = 'screen' ) rviz = Node ( package = \"rviz2\" , executable = \"rviz2\" , arguments = [ \"-d\" , os . path . join ( pkg , \"config\" , \"ultrasonic.rviz\" )], ) link_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"link2world\" , arguments = [ \"0\" , \"0\" , \"0.05\" , \"0\" , \"0\" , \"0\" , \"world\" , \"link\" ] ) ld = LaunchDescription () ld . add_action ( arg_sim_time ) ld . add_action ( resource_env ) ld . add_action ( start_gazebo_server_cmd ) ld . add_action ( start_gazebo_client_cmd ) ld . add_action ( robot_state_publisher ) ld . add_action ( spawn_entity_cmd ) ld . add_action ( rviz ) ld . add_action ( link_tf ) return ld tf # Add static tf between world to link (model) link_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"link2world\" , arguments = [ \"0\" , \"0\" , \"0.05\" , \"0\" , \"0\" , \"0\" , \"world\" , \"link\" ] ) Test sensor read # ultrasonic_demo_.py #!/usr/bin/env python3 import rclpy from rclpy.node import Node from sensor_msgs.msg import Range from rclpy.qos import qos_profile_sensor_data TOPIC_RANGE = \"/ultrasonic_sensor_1\" class MyNode ( Node ): def __init__ ( self ): node_name = \"ultrasonic_demo\" super () . __init__ ( node_name ) self . create_subscription ( Range , TOPIC_RANGE , self . __range_handler , qos_profile = qos_profile_sensor_data ) self . get_logger () . info ( \"Hello ultrasonic\" ) def __range_handler ( self , msg : Range ): self . get_logger () . info ( str ( msg . range )) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () run # run again # out of range reading When sensor reading is out of range: - The visual marker turn brighter - Rviz stop show marker - BUG: subscriber stop read data from topic (for output_type sensor_msgs/Range ) echo topic ros2 topic echo /ultrasonic_sensor_1 Unable to convert call argument to Python object ( compile in debug mode for details )","title":"ROS2 gazebo (classic) ultrasonic sensor"},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#sdf--sensor","text":"ultrasonic/model.sdf <?xml version=\"1.0\"?> <sdf version= \"1.5\" > <model name= \"ultrasonic\" > <static> true </static> <link name= \"link\" > <inertial> <mass> 0.1 </mass> <inertia> <ixx> 0.000166667 </ixx> <iyy> 0.000166667 </iyy> <izz> 0.000166667 </izz> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"ultrasonic_1\" type= \"ray\" > <pose> 0.05 0 0 0 0 0 </pose> <always_on> true </always_on> <visualize> true </visualize> <update_rate> 10 </update_rate> <ray> <scan> <horizontal> <samples> 5 </samples> <resolution> 1.000000 </resolution> <min_angle> -0.12 </min_angle> <max_angle> 0.12 </max_angle> </horizontal> <vertical> <samples> 5 </samples> <resolution> 1.000000 </resolution> <min_angle> -0.01 </min_angle> <max_angle> 0.01 </max_angle> </vertical> </scan> <range> <min> 0.01 </min> <max> 4 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"ultrasonic_sensor\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <remapping> ~/out:=ultrasonic_sensor_1 </remapping> </ros> <output_type> sensor_msgs/Range </output_type> <radiation_type> ultrasound </radiation_type> <frame_name> link </frame_name> </plugin> </sensor> </link> </model> </sdf>","title":"sdf / sensor"},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#launch","text":"launch/ultrasonic.launch.py import os from launch import LaunchDescription from launch.actions import AppendEnvironmentVariable , IncludeLaunchDescription , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.launch_description_sources import PythonLaunchDescriptionSource from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node import xacro PACKAGE_NAME = \"ros2_gazebo_tutorial\" WORLD = \"camera.world\" MODEL = \"ultrasonic\" SDF = \"model.sdf\" def generate_launch_description (): pkg = get_package_share_directory ( PACKAGE_NAME ) pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) model_sdf_full_path = os . path . join ( pkg , \"models\" , MODEL , \"model.sdf\" ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) resources = [ os . path . join ( pkg , \"worlds\" ) ] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources )) start_gazebo_server_cmd = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gzserver.launch.py' )), launch_arguments = { \"verbose\" : \"true\" , 'world' : WORLD } . items ()) start_gazebo_client_cmd = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gzclient.launch.py' ))) robot_description_path = os . path . join ( pkg , \"models\" , MODEL , SDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , parameters = [ { 'use_sim_time' : sim_time , 'robot_description' : doc . toxml () } ] ) spawn_entity_cmd = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ '-entity' , \"robot_name_in_model\" , '-file' , model_sdf_full_path , '-x' , \"0\" , '-y' , \"0\" , '-z' , \"0.05\" ], output = 'screen' ) rviz = Node ( package = \"rviz2\" , executable = \"rviz2\" , arguments = [ \"-d\" , os . path . join ( pkg , \"config\" , \"ultrasonic.rviz\" )], ) link_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"link2world\" , arguments = [ \"0\" , \"0\" , \"0.05\" , \"0\" , \"0\" , \"0\" , \"world\" , \"link\" ] ) ld = LaunchDescription () ld . add_action ( arg_sim_time ) ld . add_action ( resource_env ) ld . add_action ( start_gazebo_server_cmd ) ld . add_action ( start_gazebo_client_cmd ) ld . add_action ( robot_state_publisher ) ld . add_action ( spawn_entity_cmd ) ld . add_action ( rviz ) ld . add_action ( link_tf ) return ld","title":"launch"},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#tf","text":"Add static tf between world to link (model) link_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"link2world\" , arguments = [ \"0\" , \"0\" , \"0.05\" , \"0\" , \"0\" , \"0\" , \"world\" , \"link\" ] )","title":"tf"},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#test-sensor-read","text":"ultrasonic_demo_.py #!/usr/bin/env python3 import rclpy from rclpy.node import Node from sensor_msgs.msg import Range from rclpy.qos import qos_profile_sensor_data TOPIC_RANGE = \"/ultrasonic_sensor_1\" class MyNode ( Node ): def __init__ ( self ): node_name = \"ultrasonic_demo\" super () . __init__ ( node_name ) self . create_subscription ( Range , TOPIC_RANGE , self . __range_handler , qos_profile = qos_profile_sensor_data ) self . get_logger () . info ( \"Hello ultrasonic\" ) def __range_handler ( self , msg : Range ): self . get_logger () . info ( str ( msg . range )) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Test sensor read"},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#run","text":"","title":"run"},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#run-again","text":"out of range reading When sensor reading is out of range: - The visual marker turn brighter - Rviz stop show marker - BUG: subscriber stop read data from topic (for output_type sensor_msgs/Range ) echo topic ros2 topic echo /ultrasonic_sensor_1 Unable to convert call argument to Python object ( compile in debug mode for details )","title":"run again"},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/","tags":["gazebo","tutorial"],"text":"Link Wrench # model plugin: libgazebo_ros_force.so system plugin: libgazebo_ros_force_system.so LAB : # libgazebo_ros_force # world gazebo_ros_force_demo.world model force <plugin name= \"gazebo_ros_force\" filename= \"libgazebo_ros_force.so\" > <ros> <namespace> /demo/world </namespace> <remapping> gazebo_ros_force:=force_demo </remapping> </ros> <link_name> link </link_name> <force_frame> world </force_frame> </plugin> # Apply force relative to force_frame ros2 topic pub -1 /demo/world/force_demo geometry_msgs/Wrench \"force: {x: 10.0}\" libgazebo_ros_force_system.so # Run gazebo with system pligin gazebo --verbose -s libgazebo_ros_force_system.so force_demo.world ros2 service list # /apply_joint_effort /apply_link_wrench /clear_joint_efforts /clear_link_wrenches ros2 service call /apply_link_wrench gazebo_msgs/srv/ApplyLinkWrench '{link_name: \"force_on_world_frame::link\", reference_frame: \"\", reference_point: { x: 0, y: 0, z: 0 }, wrench: { force: { x: 10, y: 0, z: 0 }, torque: { x: 0, y: 0, z: 0 } }, start_time: {sec: 0, nanosec: 0}, duration: {sec: -1, nanosec: 0} }' ros2 service call /apply_link_wrench gazebo_msgs/srv/ApplyLinkWrench '{link_name: \"force_on_world_frame::link\", reference_frame: \"force_on_world_frame::link\", reference_point: { x: 0, y: 0, z: 0 }, wrench: { force: { x: 10, y: 0, z: 0 }, torque: { x: 0, y: 0, z: 0 } }, start_time: {sec: 0, nanosec: 0}, duration: {sec: -1, nanosec: 0} }' ros2 service call /clear_link_wrenches gazebo_msgs/srv/LinkRequest '{link_name: \"force_on_world_frame::link\"}' TODO: - usage of this service - reference name ? - reference point - force units - why the box move only when we apply 10 and above - what is the different between the system and the model plugin Reference # gazebo plugin worlds","title":"Body wrench and Joint Effort"},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#link-wrench","text":"model plugin: libgazebo_ros_force.so system plugin: libgazebo_ros_force_system.so","title":"Link Wrench"},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#lab-","text":"","title":"LAB :"},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#libgazebo_ros_force","text":"world gazebo_ros_force_demo.world model force <plugin name= \"gazebo_ros_force\" filename= \"libgazebo_ros_force.so\" > <ros> <namespace> /demo/world </namespace> <remapping> gazebo_ros_force:=force_demo </remapping> </ros> <link_name> link </link_name> <force_frame> world </force_frame> </plugin> # Apply force relative to force_frame ros2 topic pub -1 /demo/world/force_demo geometry_msgs/Wrench \"force: {x: 10.0}\"","title":"libgazebo_ros_force"},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#libgazebo_ros_force_systemso","text":"Run gazebo with system pligin gazebo --verbose -s libgazebo_ros_force_system.so force_demo.world ros2 service list # /apply_joint_effort /apply_link_wrench /clear_joint_efforts /clear_link_wrenches ros2 service call /apply_link_wrench gazebo_msgs/srv/ApplyLinkWrench '{link_name: \"force_on_world_frame::link\", reference_frame: \"\", reference_point: { x: 0, y: 0, z: 0 }, wrench: { force: { x: 10, y: 0, z: 0 }, torque: { x: 0, y: 0, z: 0 } }, start_time: {sec: 0, nanosec: 0}, duration: {sec: -1, nanosec: 0} }' ros2 service call /apply_link_wrench gazebo_msgs/srv/ApplyLinkWrench '{link_name: \"force_on_world_frame::link\", reference_frame: \"force_on_world_frame::link\", reference_point: { x: 0, y: 0, z: 0 }, wrench: { force: { x: 10, y: 0, z: 0 }, torque: { x: 0, y: 0, z: 0 } }, start_time: {sec: 0, nanosec: 0}, duration: {sec: -1, nanosec: 0} }' ros2 service call /clear_link_wrenches gazebo_msgs/srv/LinkRequest '{link_name: \"force_on_world_frame::link\"}' TODO: - usage of this service - reference name ? - reference point - force units - why the box move only when we apply 10 and above - what is the different between the system and the model plugin","title":"libgazebo_ros_force_system.so"},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#reference","text":"gazebo plugin worlds","title":"Reference"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/","tags":["ros2","gazebo","101"],"text":"The robot base on Josh Newans series Making a Mobile Robot with ROS - Full list of tutorials Basic code from josh template github My code locate in github Project and basic launch Odom and baselink Add Lidar","title":"Basic two diff robot 101"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/add_lidar/","text":"","title":"Add lidar"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/localization/","text":"sudo apt install ros-humble-robot-localization Reference # Sensor Fusion Using the Robot Localization Package \u2013 ROS 2","title":"Localization"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/localization/#reference","text":"Sensor Fusion Using the Robot Localization Package \u2013 ROS 2","title":"Reference"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/odom_frame/","tags":["gazebo classic","tutorial","odom"],"text":"diff drive # using odom tf from diff drive plugin change publish_odom_tf from false to true <publish_odom_tf> true </publish_odom_tf>","title":"Odom frame"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/odom_frame/#diff-drive","text":"using odom tf from diff drive plugin change publish_odom_tf from false to true <publish_odom_tf> true </publish_odom_tf>","title":"diff drive"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/slam_toolbox/","text":"slam_toolbox # sudo apt install ros-humble-slam-toolbox mapping # ros2 launch slam_toolbox online_async_launch.py save map # ros2 run nav2_map_server map_saver_cli -f my_map","title":"slam_toolbox"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/slam_toolbox/#slam_toolbox","text":"sudo apt install ros-humble-slam-toolbox","title":"slam_toolbox"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/slam_toolbox/#mapping","text":"ros2 launch slam_toolbox online_async_launch.py","title":"mapping"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/slam_toolbox/#save-map","text":"ros2 run nav2_map_server map_saver_cli -f my_map","title":"save map"},{"location":"blog/ROS2/ignition/","tags":["ign","gz","ros2"],"text":"gz environment variables # IGN_GAZEBO_RESOURCE_PATH IGN_GAZEBO_SYSTEM_PLUGIN_PATH ROS2 # ROS2 copy folder to install folder # install ( DIRECTORY launch models world DESTINATION share / $ { PROJECT_NAME } ) minimum launch # import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription , SetEnvironmentVariable from launch.launch_description_sources import PythonLaunchDescriptionSource def generate_launch_description (): ld = LaunchDescription () pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) pkg = get_package_share_directory ( 'ign_tutorial' ) resources = [ os . path . join ( pkg , \"worlds\" ), os . path . join ( pkg , \"models\" ) ] resource_env = SetEnvironmentVariable ( name = \"IGN_GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources )) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' )), launch_arguments = { 'gz_args' : '-r -v 2 empty.sdf' } . items (), ) ld . add_action ( resource_env ) ld . add_action ( gazebo ) return ld","title":"ROS2 Gazebo"},{"location":"blog/ROS2/ignition/#gz-environment-variables","text":"IGN_GAZEBO_RESOURCE_PATH IGN_GAZEBO_SYSTEM_PLUGIN_PATH","title":"gz environment variables"},{"location":"blog/ROS2/ignition/#ros2","text":"","title":"ROS2"},{"location":"blog/ROS2/ignition/#ros2-copy-folder-to-install-folder","text":"install ( DIRECTORY launch models world DESTINATION share / $ { PROJECT_NAME } )","title":"ROS2 copy folder to install folder"},{"location":"blog/ROS2/ignition/#minimum-launch","text":"import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription , SetEnvironmentVariable from launch.launch_description_sources import PythonLaunchDescriptionSource def generate_launch_description (): ld = LaunchDescription () pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) pkg = get_package_share_directory ( 'ign_tutorial' ) resources = [ os . path . join ( pkg , \"worlds\" ), os . path . join ( pkg , \"models\" ) ] resource_env = SetEnvironmentVariable ( name = \"IGN_GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources )) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' )), launch_arguments = { 'gz_args' : '-r -v 2 empty.sdf' } . items (), ) ld . add_action ( resource_env ) ld . add_action ( gazebo ) return ld","title":"minimum launch"},{"location":"blog/ROS2/ignition/jointstate/","tags":["ignition","ros2","bridge","None"],"text":"Robot_State_Publisher # robot_state_publisher uses the URDF specified by the parameter robot_description and the joint positions from the topic joint_states to calculate the forward kinematics of the robot and publish the results via tf. Joint_State_Publisher # The JointStatePub system publishes state information for a model. The published message type is ignition::msgs::Model, and the publication topic is /world/<world_name>/model/<model_name>/joint_state . <plugin filename= \"ignition-gazebo-joint-state-publisher-system\" name= \"ignition::gazebo::systems::JointStatePublisher\" > </plugin> Demo # Create 2 wheel robot urdf(xacro) Run ignition spawn the robot Bridge ign and ROS2 msgs Run rviz2 project # \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 mobile.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 basic_mobile_robot \u2502 \u251c\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 robot_base.stl \u2502 \u2514\u2500\u2500 mobile_bot.xacro \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 empty.sdf launch # mobile.launch.py import os import xacro from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource PACKAGE_NAME = \"ign_tutorial\" def generate_launch_description (): pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) pkg_demo = get_package_share_directory ( PACKAGE_NAME ) # Parse robot description from xacro robot_description_file = os . path . join ( pkg_demo , 'models' , \"basic_mobile_robot\" , 'mobile_bot.xacro' ) robot_description_config = xacro . process_file ( robot_description_file ) robot_description = robot_description_config . toxml () params = { 'use_sim_time' : True , 'robot_description' : robot_description } # Robot state publisher robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'both' , parameters = [ params ], ) # Gazebo Sim gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' ) ), launch_arguments = { 'gz_args' : '-r empty.sdf' } . items (), ) # Spawn spawn = Node ( package = 'ros_gz_sim' , executable = 'create' , arguments = [ '-name' , 'basic' , '-topic' , 'robot_description' , ], output = 'screen' , ) # Bridge bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock' , # Joint states (IGN -> ROS2) '/world/empty/model/basic/joint_state@sensor_msgs/msg/JointState[gz.msgs.Model' , ], remappings = [ ( '/world/empty/model/basic/joint_state' , 'joint_states' ), ], output = 'screen' ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( pkg_demo , 'config' , 'rviz.rviz' )] ) return LaunchDescription ( [ gazebo , spawn , bridge , robot_state_publisher , rviz_node ] ) ign topic --list /clock /gazebo/resource_paths /gui/camera/pose /stats /world/empty/clock /world/empty/dynamic_pose/info /world/empty/model/basic/joint_state /world/empty/pose/info /world/empty/scene/deletion /world/empty/scene/info /world/empty/state /world/empty/stats # info ign topic --info -t /world/empty/model/basic/joint_state Publishers [ Address, Message Type ] : tcp://172.18.0.1:46571, ignition.msgs.Model urdf # basic_mobile_robot.urdf.xacro <?xml version=\"1.0\" ?> <robot name= \"basic_mobile_bot\" xmlns:xacro= \"http://ros.org/wiki/xacro\" > <!-- ****************** ROBOT CONSTANTS ******************************* --> <!-- Define the size of the robot's main chassis in meters --> <xacro:property name= \"base_width\" value= \"0.39\" /> <xacro:property name= \"base_length\" value= \"0.70\" /> <xacro:property name= \"base_height\" value= \"0.20\" /> <!-- Define the shape of the robot's two back wheels in meters --> <xacro:property name= \"wheel_radius\" value= \"0.14\" /> <xacro:property name= \"wheel_width\" value= \"0.06\" /> <!-- x-axis points forward, y-axis points to left, z-axis points upwards --> <!-- Define the gap between the wheel and chassis along y-axis in meters --> <xacro:property name= \"wheel_ygap\" value= \"0.035\" /> <!-- Position the wheels along the z-axis --> <xacro:property name= \"wheel_zoff\" value= \"0.05\" /> <!-- Position the wheels along the x-axis --> <xacro:property name= \"wheel_xoff\" value= \"0.221\" /> <!-- Position the caster wheel along the x-axis --> <xacro:property name= \"caster_xoff\" value= \"0.217\" /> <!-- Define intertial property macros --> <xacro:macro name= \"box_inertia\" params= \"m w h d\" > <inertial> <origin xyz= \"0 0 0\" rpy= \"${pi/2} 0 ${pi/2}\" /> <mass value= \"${m}\" /> <inertia ixx= \"${(m/12) * (h*h + d*d)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${(m/12) * (w*w + d*d)}\" iyz= \"0.0\" izz= \"${(m/12) * (w*w + h*h)}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertia\" params= \"m r h\" > <inertial> <origin xyz= \"0 0 0\" rpy= \"${pi/2} 0 0\" /> <mass value= \"${m}\" /> <inertia ixx= \"${(m/12) * (3*r*r + h*h)}\" ixy = \"0\" ixz = \"0\" iyy= \"${(m/12) * (3*r*r + h*h)}\" iyz = \"0\" izz= \"${(m/2) * (r*r)}\" /> </inertial> </xacro:macro> <xacro:macro name= \"sphere_inertia\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${(2/5) * m * (r*r)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${(2/5) * m * (r*r)}\" iyz= \"0.0\" izz= \"${(2/5) * m * (r*r)}\" /> </inertial> </xacro:macro> <!-- ****************** ROBOT BASE FOOTPRINT *************************** --> <!-- Define the center of the main robot chassis projected on the ground --> <link name= \"world\" /> <!-- The base footprint of the robot is located underneath the chassis --> <joint name= \"base_joint\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"base_link\" /> <origin xyz= \"0.0 0.0 ${(wheel_radius+wheel_zoff)}\" rpy= \"0 0 0\" /> </joint> <!-- ********************** ROBOT BASE ********************************* --> <link name= \"base_link\" > <visual> <origin xyz= \"0 0 -0.05\" rpy= \"1.5707963267949 0 3.141592654\" /> <geometry> <mesh filename= \"file:///home/user/wasp_ws/src/tutorials/ign_tutorial/models/basic_mobile_robot/meshes/robot_base.stl\" /> </geometry> <material name= \"Red\" > <color rgba= \"${255/255} ${0/255} ${0/255} 1.0\" /> </material> </visual> <collision> <geometry> <box size= \"${base_length} ${base_width} ${base_height}\" /> </geometry> </collision> <xacro:box_inertia m= \"40.0\" w= \"${base_width}\" d= \"${base_length}\" h= \"${base_height}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Red </material> </gazebo> <!-- *********************** DRIVE WHEELS ****************************** --> <xacro:macro name= \"wheel\" params= \"prefix x_reflect y_reflect\" > <link name= \"${prefix}_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707963267949 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length= \"${wheel_width}\" /> </geometry> <material name= \"White\" > <color rgba= \"${255/255} ${255/255} ${255/255} 1.0\" /> </material> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${pi/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length= \"${wheel_width}\" /> </geometry> </collision> <xacro:cylinder_inertia m= \"110.5\" r= \"${wheel_radius}\" h= \"${wheel_width}\" /> </link> <!-- Connect the wheels to the base_link at the appropriate location, and define a continuous joint to allow the wheels to freely rotate about an axis --> <joint name= \"${prefix}_joint\" type= \"revolute\" > <parent link= \"base_link\" /> <child link= \"${prefix}_link\" /> <origin xyz= \"${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}\" rpy= \"0 0 0\" /> <limit upper= \"3.1415\" lower= \"-3.1415\" effort= \"30\" velocity= \"5.0\" /> <axis xyz= \"0 1 0\" /> </joint> </xacro:macro> <!-- Instantiate two wheels using the macro we just made through the xacro:wheel tags. We also define the parameters to have one wheel on both sides at the back of our robot (i.e. x_reflect=-1). --> <xacro:wheel prefix= \"drivewhl_l\" x_reflect= \"-1\" y_reflect= \"1\" /> <xacro:wheel prefix= \"drivewhl_r\" x_reflect= \"-1\" y_reflect= \"-1\" /> <!-- *********************** CASTER WHEEL ****************************** --> <!-- We add a caster wheel. It will be modeled as sphere. We define the wheel\u2019s geometry, material and the joint to connect it to base_link at the appropriate location. --> <link name= \"front_caster\" > <visual> <geometry> <sphere radius= \"${(wheel_radius+wheel_zoff-(base_height/2))}\" /> </geometry> <material name= \"White\" > <color rgba= \"${255/255} ${255/255} ${255/255} 1.0\" /> </material> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${(wheel_radius+wheel_zoff-(base_height/2))}\" /> </geometry> </collision> <xacro:sphere_inertia m= \"10.05\" r= \"${(wheel_radius+wheel_zoff-(base_height/2))}\" /> </link> <gazebo reference= \"front_caster\" > <mu1> 0.01 </mu1> <mu2> 0.01 </mu2> <material> Gazebo/White </material> </gazebo> <joint name= \"caster_joint\" type= \"fixed\" > <parent link= \"base_link\" /> <child link= \"front_caster\" /> <origin xyz= \"${caster_xoff} 0.0 ${-(base_height/2)}\" rpy= \"0 0 0\" /> </joint> <!-- *********************** IMU SETUP ********************************* --> <!-- Each sensor must be attached to a link. --> <joint name= \"imu_joint\" type= \"fixed\" > <parent link= \"base_link\" /> <child link= \"imu_link\" /> <origin xyz= \"-0.10 0 0.05\" rpy= \"0 0 0\" /> </joint> <link name= \"imu_link\" /> <!-- *********************** GPS SETUP ********************************** --> <joint name= \"gps_joint\" type= \"fixed\" > <parent link= \"base_link\" /> <child link= \"gps_link\" /> <origin xyz= \"0.10 0 0.05\" rpy= \"0 0 0\" /> </joint> <link name= \"gps_link\" /> <gazebo> <plugin filename= \"libignition-gazebo-joint-state-publisher-system.so\" name= \"ignition::gazebo::systems::JointStatePublisher\" > </plugin> </gazebo> </robot> world # <sdf version= \"1.6\" > <world name= \"my-empty\" > <physics name= \"1ms\" type= \"ignored\" > <max_step_size> 0.001 </max_step_size> <real_time_factor> 1.0 </real_time_factor> </physics> <plugin filename= \"ignition-gazebo-physics-system\" name= \"ignition::gazebo::systems::Physics\" > </plugin> <plugin filename= \"ignition-gazebo-scene-broadcaster-system\" name= \"ignition::gazebo::systems::SceneBroadcaster\" > </plugin> <light type= \"directional\" name= \"sun\" > <cast_shadows> true </cast_shadows> <pose> 0 0 10 0 0 0 </pose> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.2 0.2 0.2 1 </specular> <attenuation> <range> 1000 </range> <constant> 0.9 </constant> <linear> 0.01 </linear> <quadratic> 0.001 </quadratic> </attenuation> <direction> -0.5 0.1 -0.9 </direction> </light> <model name= \"ground_plane\" > <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> </collision> <visual name= \"visual\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> <material> <ambient> 0.8 0.8 0.8 1 </ambient> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.8 0.8 0.8 1 </specular> </material> </visual> </link> </model> </world> </sdf> Reference # double_pendulum_model launch demo ros_gz_sim_demos JointStatePublisher Class Reference joint state publisher and robot state publisher RVIZ2 Tutorials Episode1: Learn TF","title":"JointStatePublisher"},{"location":"blog/ROS2/ignition/jointstate/#robot_state_publisher","text":"robot_state_publisher uses the URDF specified by the parameter robot_description and the joint positions from the topic joint_states to calculate the forward kinematics of the robot and publish the results via tf.","title":"Robot_State_Publisher"},{"location":"blog/ROS2/ignition/jointstate/#joint_state_publisher","text":"The JointStatePub system publishes state information for a model. The published message type is ignition::msgs::Model, and the publication topic is /world/<world_name>/model/<model_name>/joint_state . <plugin filename= \"ignition-gazebo-joint-state-publisher-system\" name= \"ignition::gazebo::systems::JointStatePublisher\" > </plugin>","title":"Joint_State_Publisher"},{"location":"blog/ROS2/ignition/jointstate/#demo","text":"Create 2 wheel robot urdf(xacro) Run ignition spawn the robot Bridge ign and ROS2 msgs Run rviz2","title":"Demo"},{"location":"blog/ROS2/ignition/jointstate/#project","text":"\u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 mobile.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 basic_mobile_robot \u2502 \u251c\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 robot_base.stl \u2502 \u2514\u2500\u2500 mobile_bot.xacro \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 empty.sdf","title":"project"},{"location":"blog/ROS2/ignition/jointstate/#launch","text":"mobile.launch.py import os import xacro from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource PACKAGE_NAME = \"ign_tutorial\" def generate_launch_description (): pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) pkg_demo = get_package_share_directory ( PACKAGE_NAME ) # Parse robot description from xacro robot_description_file = os . path . join ( pkg_demo , 'models' , \"basic_mobile_robot\" , 'mobile_bot.xacro' ) robot_description_config = xacro . process_file ( robot_description_file ) robot_description = robot_description_config . toxml () params = { 'use_sim_time' : True , 'robot_description' : robot_description } # Robot state publisher robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'both' , parameters = [ params ], ) # Gazebo Sim gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' ) ), launch_arguments = { 'gz_args' : '-r empty.sdf' } . items (), ) # Spawn spawn = Node ( package = 'ros_gz_sim' , executable = 'create' , arguments = [ '-name' , 'basic' , '-topic' , 'robot_description' , ], output = 'screen' , ) # Bridge bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock' , # Joint states (IGN -> ROS2) '/world/empty/model/basic/joint_state@sensor_msgs/msg/JointState[gz.msgs.Model' , ], remappings = [ ( '/world/empty/model/basic/joint_state' , 'joint_states' ), ], output = 'screen' ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( pkg_demo , 'config' , 'rviz.rviz' )] ) return LaunchDescription ( [ gazebo , spawn , bridge , robot_state_publisher , rviz_node ] ) ign topic --list /clock /gazebo/resource_paths /gui/camera/pose /stats /world/empty/clock /world/empty/dynamic_pose/info /world/empty/model/basic/joint_state /world/empty/pose/info /world/empty/scene/deletion /world/empty/scene/info /world/empty/state /world/empty/stats # info ign topic --info -t /world/empty/model/basic/joint_state Publishers [ Address, Message Type ] : tcp://172.18.0.1:46571, ignition.msgs.Model","title":"launch"},{"location":"blog/ROS2/ignition/jointstate/#urdf","text":"basic_mobile_robot.urdf.xacro <?xml version=\"1.0\" ?> <robot name= \"basic_mobile_bot\" xmlns:xacro= \"http://ros.org/wiki/xacro\" > <!-- ****************** ROBOT CONSTANTS ******************************* --> <!-- Define the size of the robot's main chassis in meters --> <xacro:property name= \"base_width\" value= \"0.39\" /> <xacro:property name= \"base_length\" value= \"0.70\" /> <xacro:property name= \"base_height\" value= \"0.20\" /> <!-- Define the shape of the robot's two back wheels in meters --> <xacro:property name= \"wheel_radius\" value= \"0.14\" /> <xacro:property name= \"wheel_width\" value= \"0.06\" /> <!-- x-axis points forward, y-axis points to left, z-axis points upwards --> <!-- Define the gap between the wheel and chassis along y-axis in meters --> <xacro:property name= \"wheel_ygap\" value= \"0.035\" /> <!-- Position the wheels along the z-axis --> <xacro:property name= \"wheel_zoff\" value= \"0.05\" /> <!-- Position the wheels along the x-axis --> <xacro:property name= \"wheel_xoff\" value= \"0.221\" /> <!-- Position the caster wheel along the x-axis --> <xacro:property name= \"caster_xoff\" value= \"0.217\" /> <!-- Define intertial property macros --> <xacro:macro name= \"box_inertia\" params= \"m w h d\" > <inertial> <origin xyz= \"0 0 0\" rpy= \"${pi/2} 0 ${pi/2}\" /> <mass value= \"${m}\" /> <inertia ixx= \"${(m/12) * (h*h + d*d)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${(m/12) * (w*w + d*d)}\" iyz= \"0.0\" izz= \"${(m/12) * (w*w + h*h)}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertia\" params= \"m r h\" > <inertial> <origin xyz= \"0 0 0\" rpy= \"${pi/2} 0 0\" /> <mass value= \"${m}\" /> <inertia ixx= \"${(m/12) * (3*r*r + h*h)}\" ixy = \"0\" ixz = \"0\" iyy= \"${(m/12) * (3*r*r + h*h)}\" iyz = \"0\" izz= \"${(m/2) * (r*r)}\" /> </inertial> </xacro:macro> <xacro:macro name= \"sphere_inertia\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${(2/5) * m * (r*r)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${(2/5) * m * (r*r)}\" iyz= \"0.0\" izz= \"${(2/5) * m * (r*r)}\" /> </inertial> </xacro:macro> <!-- ****************** ROBOT BASE FOOTPRINT *************************** --> <!-- Define the center of the main robot chassis projected on the ground --> <link name= \"world\" /> <!-- The base footprint of the robot is located underneath the chassis --> <joint name= \"base_joint\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"base_link\" /> <origin xyz= \"0.0 0.0 ${(wheel_radius+wheel_zoff)}\" rpy= \"0 0 0\" /> </joint> <!-- ********************** ROBOT BASE ********************************* --> <link name= \"base_link\" > <visual> <origin xyz= \"0 0 -0.05\" rpy= \"1.5707963267949 0 3.141592654\" /> <geometry> <mesh filename= \"file:///home/user/wasp_ws/src/tutorials/ign_tutorial/models/basic_mobile_robot/meshes/robot_base.stl\" /> </geometry> <material name= \"Red\" > <color rgba= \"${255/255} ${0/255} ${0/255} 1.0\" /> </material> </visual> <collision> <geometry> <box size= \"${base_length} ${base_width} ${base_height}\" /> </geometry> </collision> <xacro:box_inertia m= \"40.0\" w= \"${base_width}\" d= \"${base_length}\" h= \"${base_height}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Red </material> </gazebo> <!-- *********************** DRIVE WHEELS ****************************** --> <xacro:macro name= \"wheel\" params= \"prefix x_reflect y_reflect\" > <link name= \"${prefix}_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707963267949 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length= \"${wheel_width}\" /> </geometry> <material name= \"White\" > <color rgba= \"${255/255} ${255/255} ${255/255} 1.0\" /> </material> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${pi/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length= \"${wheel_width}\" /> </geometry> </collision> <xacro:cylinder_inertia m= \"110.5\" r= \"${wheel_radius}\" h= \"${wheel_width}\" /> </link> <!-- Connect the wheels to the base_link at the appropriate location, and define a continuous joint to allow the wheels to freely rotate about an axis --> <joint name= \"${prefix}_joint\" type= \"revolute\" > <parent link= \"base_link\" /> <child link= \"${prefix}_link\" /> <origin xyz= \"${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}\" rpy= \"0 0 0\" /> <limit upper= \"3.1415\" lower= \"-3.1415\" effort= \"30\" velocity= \"5.0\" /> <axis xyz= \"0 1 0\" /> </joint> </xacro:macro> <!-- Instantiate two wheels using the macro we just made through the xacro:wheel tags. We also define the parameters to have one wheel on both sides at the back of our robot (i.e. x_reflect=-1). --> <xacro:wheel prefix= \"drivewhl_l\" x_reflect= \"-1\" y_reflect= \"1\" /> <xacro:wheel prefix= \"drivewhl_r\" x_reflect= \"-1\" y_reflect= \"-1\" /> <!-- *********************** CASTER WHEEL ****************************** --> <!-- We add a caster wheel. It will be modeled as sphere. We define the wheel\u2019s geometry, material and the joint to connect it to base_link at the appropriate location. --> <link name= \"front_caster\" > <visual> <geometry> <sphere radius= \"${(wheel_radius+wheel_zoff-(base_height/2))}\" /> </geometry> <material name= \"White\" > <color rgba= \"${255/255} ${255/255} ${255/255} 1.0\" /> </material> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${(wheel_radius+wheel_zoff-(base_height/2))}\" /> </geometry> </collision> <xacro:sphere_inertia m= \"10.05\" r= \"${(wheel_radius+wheel_zoff-(base_height/2))}\" /> </link> <gazebo reference= \"front_caster\" > <mu1> 0.01 </mu1> <mu2> 0.01 </mu2> <material> Gazebo/White </material> </gazebo> <joint name= \"caster_joint\" type= \"fixed\" > <parent link= \"base_link\" /> <child link= \"front_caster\" /> <origin xyz= \"${caster_xoff} 0.0 ${-(base_height/2)}\" rpy= \"0 0 0\" /> </joint> <!-- *********************** IMU SETUP ********************************* --> <!-- Each sensor must be attached to a link. --> <joint name= \"imu_joint\" type= \"fixed\" > <parent link= \"base_link\" /> <child link= \"imu_link\" /> <origin xyz= \"-0.10 0 0.05\" rpy= \"0 0 0\" /> </joint> <link name= \"imu_link\" /> <!-- *********************** GPS SETUP ********************************** --> <joint name= \"gps_joint\" type= \"fixed\" > <parent link= \"base_link\" /> <child link= \"gps_link\" /> <origin xyz= \"0.10 0 0.05\" rpy= \"0 0 0\" /> </joint> <link name= \"gps_link\" /> <gazebo> <plugin filename= \"libignition-gazebo-joint-state-publisher-system.so\" name= \"ignition::gazebo::systems::JointStatePublisher\" > </plugin> </gazebo> </robot>","title":"urdf"},{"location":"blog/ROS2/ignition/jointstate/#world","text":"<sdf version= \"1.6\" > <world name= \"my-empty\" > <physics name= \"1ms\" type= \"ignored\" > <max_step_size> 0.001 </max_step_size> <real_time_factor> 1.0 </real_time_factor> </physics> <plugin filename= \"ignition-gazebo-physics-system\" name= \"ignition::gazebo::systems::Physics\" > </plugin> <plugin filename= \"ignition-gazebo-scene-broadcaster-system\" name= \"ignition::gazebo::systems::SceneBroadcaster\" > </plugin> <light type= \"directional\" name= \"sun\" > <cast_shadows> true </cast_shadows> <pose> 0 0 10 0 0 0 </pose> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.2 0.2 0.2 1 </specular> <attenuation> <range> 1000 </range> <constant> 0.9 </constant> <linear> 0.01 </linear> <quadratic> 0.001 </quadratic> </attenuation> <direction> -0.5 0.1 -0.9 </direction> </light> <model name= \"ground_plane\" > <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> </collision> <visual name= \"visual\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> <material> <ambient> 0.8 0.8 0.8 1 </ambient> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.8 0.8 0.8 1 </specular> </material> </visual> </link> </model> </world> </sdf>","title":"world"},{"location":"blog/ROS2/ignition/jointstate/#reference","text":"double_pendulum_model launch demo ros_gz_sim_demos JointStatePublisher Class Reference joint state publisher and robot state publisher RVIZ2 Tutorials Episode1: Learn TF","title":"Reference"},{"location":"blog/ROS2/ignition/spawn_xacro/","tags":["ign","xacro"],"text":"LAB # Spawn xacro model into ign gazebo world View in rviz project # \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 xacro_demo.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 basic.xacro \u2514\u2500\u2500 package.xml CMakeLists # Copy launch, models and config file to workspace install folder CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( ign_tutorial ) find_package ( ament_cmake REQUIRED ) install ( DIRECTORY launch models config DESTINATION share / $ { PROJECT_NAME } ) ament_package () launch file # Use gz_sim.launch.py launch from ros_gz_sim package to launch ignition with empty.world Use xacro node from xacro package to parse the urdf.xacro file Use create node from ros_gz_sim package to spawn the urdf xacro_demo.launch.py import os import xacro from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource PACKAGE_NAME = \"ign_tutorial\" def generate_launch_description (): pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) pkg_demo = get_package_share_directory ( PACKAGE_NAME ) # Parse robot description from xacro robot_description_file = os . path . join ( pkg_demo , 'models' , 'basic.xacro' ) robot_description_config = xacro . process_file ( robot_description_file ) robot_description = robot_description_config . toxml () params = { 'use_sim_time' : True , 'robot_description' : robot_description } # Robot state publisher robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'both' , parameters = [ params ], ) # Gazebo Sim gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' ) ), launch_arguments = { 'gz_args' : '-r empty.sdf' } . items (), ) # Spawn spawn = Node ( package = 'ros_gz_sim' , executable = 'create' , arguments = [ '-name' , 'basic' , '-topic' , 'robot_description' , ], output = 'screen' , ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( get_package_share_directory ( PACKAGE_NAME ), 'config' , 'rviz.rviz' )] ) return LaunchDescription ( [ gazebo , spawn , robot_state_publisher , rviz_node ] ) urdf # Declare world link and fixed join for tf basic.xacro <?xml version=\"1.0\"?> <robot name= \"basic_xacro\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"height1\" value= \"2\" /> <xacro:property name= \"mass\" value= \"1\" /> <xacro:property name= \"width\" value= \"0.1\" /> <material name= \"orange\" > <color rgba= \"${255/255} ${108/255} ${10/255} 1.0\" /> </material> <link name= \"world\" /> <joint name= \"fixed\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"link1\" /> </joint> <!-- Base Link --> <link name= \"link1\" > <collision> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> <material name= \"orange\" /> </visual> <inertial> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <mass value= \"${mass}\" /> <inertia ixx= \"${mass / 12.0 * (width*width + height1*height1)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${mass / 12.0 * (height1*height1 + width*width)}\" iyz= \"0.0\" izz= \"${mass / 12.0 * (width*width + width*width)}\" /> </inertial> </link> </robot> Dependencies # rviz2 ros_gz_sim xacro robot_state_publisher package.xml # Add the following dependencies <exec_depend> xacro </exec_depend> <exec_depend> robot_state_publisher </exec_depend> <exec_depend> ros_gz_sim </exec_depend> <exec_depend> rviz2 </exec_depend> rosdep # # from package root rosdep install --from-paths . --ignore-src --rosdistro = humble apt # sudo apt install ros-humble-ros-gz-sim sudo apt install ros-humble-xacro sudo apt install ros-humble-robot-state-publisher sudo apt install ros-humble-rviz2","title":"Spawn xacro model"},{"location":"blog/ROS2/ignition/spawn_xacro/#lab","text":"Spawn xacro model into ign gazebo world View in rviz","title":"LAB"},{"location":"blog/ROS2/ignition/spawn_xacro/#project","text":"\u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 xacro_demo.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 basic.xacro \u2514\u2500\u2500 package.xml","title":"project"},{"location":"blog/ROS2/ignition/spawn_xacro/#cmakelists","text":"Copy launch, models and config file to workspace install folder CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( ign_tutorial ) find_package ( ament_cmake REQUIRED ) install ( DIRECTORY launch models config DESTINATION share / $ { PROJECT_NAME } ) ament_package ()","title":"CMakeLists"},{"location":"blog/ROS2/ignition/spawn_xacro/#launch-file","text":"Use gz_sim.launch.py launch from ros_gz_sim package to launch ignition with empty.world Use xacro node from xacro package to parse the urdf.xacro file Use create node from ros_gz_sim package to spawn the urdf xacro_demo.launch.py import os import xacro from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource PACKAGE_NAME = \"ign_tutorial\" def generate_launch_description (): pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) pkg_demo = get_package_share_directory ( PACKAGE_NAME ) # Parse robot description from xacro robot_description_file = os . path . join ( pkg_demo , 'models' , 'basic.xacro' ) robot_description_config = xacro . process_file ( robot_description_file ) robot_description = robot_description_config . toxml () params = { 'use_sim_time' : True , 'robot_description' : robot_description } # Robot state publisher robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'both' , parameters = [ params ], ) # Gazebo Sim gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' ) ), launch_arguments = { 'gz_args' : '-r empty.sdf' } . items (), ) # Spawn spawn = Node ( package = 'ros_gz_sim' , executable = 'create' , arguments = [ '-name' , 'basic' , '-topic' , 'robot_description' , ], output = 'screen' , ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( get_package_share_directory ( PACKAGE_NAME ), 'config' , 'rviz.rviz' )] ) return LaunchDescription ( [ gazebo , spawn , robot_state_publisher , rviz_node ] )","title":"launch file"},{"location":"blog/ROS2/ignition/spawn_xacro/#urdf","text":"Declare world link and fixed join for tf basic.xacro <?xml version=\"1.0\"?> <robot name= \"basic_xacro\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"height1\" value= \"2\" /> <xacro:property name= \"mass\" value= \"1\" /> <xacro:property name= \"width\" value= \"0.1\" /> <material name= \"orange\" > <color rgba= \"${255/255} ${108/255} ${10/255} 1.0\" /> </material> <link name= \"world\" /> <joint name= \"fixed\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"link1\" /> </joint> <!-- Base Link --> <link name= \"link1\" > <collision> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> <material name= \"orange\" /> </visual> <inertial> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <mass value= \"${mass}\" /> <inertia ixx= \"${mass / 12.0 * (width*width + height1*height1)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${mass / 12.0 * (height1*height1 + width*width)}\" iyz= \"0.0\" izz= \"${mass / 12.0 * (width*width + width*width)}\" /> </inertial> </link> </robot>","title":"urdf"},{"location":"blog/ROS2/ignition/spawn_xacro/#dependencies","text":"rviz2 ros_gz_sim xacro robot_state_publisher","title":"Dependencies"},{"location":"blog/ROS2/ignition/spawn_xacro/#packagexml","text":"Add the following dependencies <exec_depend> xacro </exec_depend> <exec_depend> robot_state_publisher </exec_depend> <exec_depend> ros_gz_sim </exec_depend> <exec_depend> rviz2 </exec_depend>","title":"package.xml"},{"location":"blog/ROS2/ignition/spawn_xacro/#rosdep","text":"# from package root rosdep install --from-paths . --ignore-src --rosdistro = humble","title":"rosdep"},{"location":"blog/ROS2/ignition/spawn_xacro/#apt","text":"sudo apt install ros-humble-ros-gz-sim sudo apt install ros-humble-xacro sudo apt install ros-humble-robot-state-publisher sudo apt install ros-humble-rviz2","title":"apt"},{"location":"blog/ROS2/ignition/tips/","tags":["gazebo","tips"],"text":"dashboard # gazebo dashboard include same model multiple times # <include> <uri> model://coke_can </uri> <name> coke1 </name> <pose> 0 2 0 0 0 0 </pose> </include> <include> <uri> model://coke_can </uri> <name> coke2 </name> <pose> 0 -5 1 0 0 0 </pose> </include> include from fuel # <include> <name> j1 </name> <pose frame= '' > 0 0 0 0 0 0 </pose> <uri> https://fuel.gazebosim.org/1.0/OpenRobotics/models/Jersey Barrier </uri> </include>","title":"Ignition gazebo tips"},{"location":"blog/ROS2/ignition/tips/#dashboard","text":"gazebo dashboard","title":"dashboard"},{"location":"blog/ROS2/ignition/tips/#include-same-model-multiple-times","text":"<include> <uri> model://coke_can </uri> <name> coke1 </name> <pose> 0 2 0 0 0 0 </pose> </include> <include> <uri> model://coke_can </uri> <name> coke2 </name> <pose> 0 -5 1 0 0 0 </pose> </include>","title":"include same model multiple times"},{"location":"blog/ROS2/ignition/tips/#include-from-fuel","text":"<include> <name> j1 </name> <pose frame= '' > 0 0 0 0 0 0 </pose> <uri> https://fuel.gazebosim.org/1.0/OpenRobotics/models/Jersey Barrier </uri> </include>","title":"include from fuel"},{"location":"blog/ROS2/ignition/bridge/","tags":["ros_ign"],"text":"ros ign bridge # ros_ign contains packages that provide integration between ROS2 and Ignition: ros_ign: Metapackage that provides all other software packages; ros_ign_image: Use image_transport to transfer the image from Ignition to the one-way transmission bridge of ROS; ros_ign_bridge: Two-way transmission bridge between Ignition and ROS; ros_ign_gazebo: It is convenient to use the startup files and executable files of Ignition Gazebo and ROS; ros_ign_gazebo_demos: Demos using ROS-Ignition integration; ros_ign_point_cloud: A plug-in used to simulate publishing point clouds to ROS from Ignition Gazebo install # sudo apt install ros-humble-ros-gz usage # launch file that run node for each mapping The launch file included by parent launch file that run ignition and spawn the robot project \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 ekf.yaml \u2502 \u2514\u2500\u2500 nav2_params.yaml \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 display.launch.py \u2502 \u2514\u2500\u2500 sam_bridge.launch.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 rviz \u2502 \u2514\u2500\u2500 urdf_config.rviz \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 description \u2502 \u2514\u2500\u2500 sam_bot_description.urdf \u2514\u2500\u2500 world \u251c\u2500\u2500 ign_world.sdf \u2514\u2500\u2500 my_world.sdf gazebo, spawn, bridge # Gazebo Sim gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' ) ), launch_arguments = { 'gz_args' : f '-r { world_path } ' } . items (), ) #spawn spawn_entity = Node ( package = 'ros_gz_sim' , executable = 'create' , arguments = [ '-name' , 'sam_bot' , '-topic' , 'robot_description' , '-z' , '0.5' ], output = 'screen' , ) #bridge ign_bridge = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_share , 'launch' , BRIDGE_FILE_NAME ), ), launch_arguments = { 'use_sim_time' : \"True\" } . items () ) Reference # ROS + Gazebo Sim demos","title":"Ignition ROS2"},{"location":"blog/ROS2/ignition/bridge/#ros-ign-bridge","text":"ros_ign contains packages that provide integration between ROS2 and Ignition: ros_ign: Metapackage that provides all other software packages; ros_ign_image: Use image_transport to transfer the image from Ignition to the one-way transmission bridge of ROS; ros_ign_bridge: Two-way transmission bridge between Ignition and ROS; ros_ign_gazebo: It is convenient to use the startup files and executable files of Ignition Gazebo and ROS; ros_ign_gazebo_demos: Demos using ROS-Ignition integration; ros_ign_point_cloud: A plug-in used to simulate publishing point clouds to ROS from Ignition Gazebo","title":"ros ign bridge"},{"location":"blog/ROS2/ignition/bridge/#install","text":"sudo apt install ros-humble-ros-gz","title":"install"},{"location":"blog/ROS2/ignition/bridge/#usage","text":"launch file that run node for each mapping The launch file included by parent launch file that run ignition and spawn the robot project \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 ekf.yaml \u2502 \u2514\u2500\u2500 nav2_params.yaml \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 display.launch.py \u2502 \u2514\u2500\u2500 sam_bridge.launch.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 rviz \u2502 \u2514\u2500\u2500 urdf_config.rviz \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 description \u2502 \u2514\u2500\u2500 sam_bot_description.urdf \u2514\u2500\u2500 world \u251c\u2500\u2500 ign_world.sdf \u2514\u2500\u2500 my_world.sdf gazebo, spawn, bridge # Gazebo Sim gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' ) ), launch_arguments = { 'gz_args' : f '-r { world_path } ' } . items (), ) #spawn spawn_entity = Node ( package = 'ros_gz_sim' , executable = 'create' , arguments = [ '-name' , 'sam_bot' , '-topic' , 'robot_description' , '-z' , '0.5' ], output = 'screen' , ) #bridge ign_bridge = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_share , 'launch' , BRIDGE_FILE_NAME ), ), launch_arguments = { 'use_sim_time' : \"True\" } . items () )","title":"usage"},{"location":"blog/ROS2/ignition/bridge/#reference","text":"ROS + Gazebo Sim demos","title":"Reference"},{"location":"blog/ROS2/ignition/bridge/camera/","tags":["ignition","ros2","camera","bridge"],"text":"IGNITION: fortress ROS2: humble Objective # Create simulation with camera Publish camera using ros_ign bridge Write launch file View camera image in RVIZ model with camera # Based on vehicle model from this post Add this lines to exists model don\u2019t forget World sdf must contain sensors plugin <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre </render_engine> </plugin> camera link and sensor # <frame name= \"camera_frame\" attached_to= 'chassis' > <pose> -0.8 0 1.5 0 0 0 </pose> </frame> <link name= \"camera_link\" > <pose relative_to= 'camera_frame' > 0 0 0 0 0 0 </pose> <inertial> <mass> 0.1 </mass> <inertia> <ixx> 0.000166667 </ixx> <iyy> 0.000166667 </iyy> <izz> 0.000166667 </izz> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"camera\" type= \"camera\" > <camera> <horizontal_fov> 1.047 </horizontal_fov> <image> <width> 320 </width> <height> 240 </height> </image> <clip> <near> 0.1 </near> <far> 100 </far> </clip> </camera> <always_on> 1 </always_on> <update_rate> 30 </update_rate> <visualize> true </visualize> <topic> camera </topic> </sensor> </link> <joint name= 'camera_joint' type= 'fixed' > <parent> chassis </parent> <child> camera_link </child> </joint> Cli # terminal2 ros2 run ros_gz_bridge parameter_bridge /gimbal/camera@sensor_msgs/msg/Image@ignition.msgs.Image terminal3 ros2 run rqt_image_view rqt_image_view launch # import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import SetEnvironmentVariable from launch_ros.actions import Node PACKAGE_NAME = \"ign_tutorial\" def generate_launch_description (): pkg = get_package_share_directory ( PACKAGE_NAME ) pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) paths = [ os . path . join ( pkg , \"worlds\" ), \"/home/user/wasp_ws/src/tutorials/ign_tutorial/models\" ] env = SetEnvironmentVariable ( name = 'IGN_GAZEBO_RESOURCE_PATH' , value = [ \":\" . join ( paths )]) sdf_file = os . path . join ( pkg , 'models' , 'vehicle' , 'model.sdf' ) with open ( sdf_file , 'r' ) as infp : robot_desc = infp . read () gz_sim = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' )), launch_arguments = { 'gz_args' : '-r -v 4 my_cart.sdf' } . items (), ) robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'both' , parameters = [ { 'use_sim_time' : True }, { 'robot_description' : robot_desc }, ] ) bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock' , '/world/Moving_robot/model/vehicle/model/vehicle_blue/joint_state@sensor_msgs/msg/JointState[gz.msgs.Model' , '/camera@sensor_msgs/msg/Image@gz.msgs.Image' , '/camera_info@sensor_msgs/msg/CameraInfo@gz.msgs.CameraInfo' ], remappings = [ ( '/world/Moving_robot/model/vehicle/model/vehicle_blue/joint_state' , 'joint_states' ), ], output = 'screen' ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( pkg , 'config' , 'rviz.rviz' )] ) world_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"world2chassis\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"world\" , \"chassis\" ] ) return LaunchDescription ([ env , gz_sim , bridge , world_tf , robot_state_publisher , rviz_node ]) Rviz # Rviz types type Desc Camera use CameraInfo to create window in show the image Image display image without CameraInfo data ign #","title":"Ignition ROS2 camera bridge"},{"location":"blog/ROS2/ignition/bridge/camera/#objective","text":"Create simulation with camera Publish camera using ros_ign bridge Write launch file View camera image in RVIZ","title":"Objective"},{"location":"blog/ROS2/ignition/bridge/camera/#model-with-camera","text":"Based on vehicle model from this post Add this lines to exists model don\u2019t forget World sdf must contain sensors plugin <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre </render_engine> </plugin>","title":"model with camera"},{"location":"blog/ROS2/ignition/bridge/camera/#camera-link-and-sensor","text":"<frame name= \"camera_frame\" attached_to= 'chassis' > <pose> -0.8 0 1.5 0 0 0 </pose> </frame> <link name= \"camera_link\" > <pose relative_to= 'camera_frame' > 0 0 0 0 0 0 </pose> <inertial> <mass> 0.1 </mass> <inertia> <ixx> 0.000166667 </ixx> <iyy> 0.000166667 </iyy> <izz> 0.000166667 </izz> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"camera\" type= \"camera\" > <camera> <horizontal_fov> 1.047 </horizontal_fov> <image> <width> 320 </width> <height> 240 </height> </image> <clip> <near> 0.1 </near> <far> 100 </far> </clip> </camera> <always_on> 1 </always_on> <update_rate> 30 </update_rate> <visualize> true </visualize> <topic> camera </topic> </sensor> </link> <joint name= 'camera_joint' type= 'fixed' > <parent> chassis </parent> <child> camera_link </child> </joint>","title":"camera link and sensor"},{"location":"blog/ROS2/ignition/bridge/camera/#cli","text":"terminal2 ros2 run ros_gz_bridge parameter_bridge /gimbal/camera@sensor_msgs/msg/Image@ignition.msgs.Image terminal3 ros2 run rqt_image_view rqt_image_view","title":"Cli"},{"location":"blog/ROS2/ignition/bridge/camera/#launch","text":"import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import SetEnvironmentVariable from launch_ros.actions import Node PACKAGE_NAME = \"ign_tutorial\" def generate_launch_description (): pkg = get_package_share_directory ( PACKAGE_NAME ) pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) paths = [ os . path . join ( pkg , \"worlds\" ), \"/home/user/wasp_ws/src/tutorials/ign_tutorial/models\" ] env = SetEnvironmentVariable ( name = 'IGN_GAZEBO_RESOURCE_PATH' , value = [ \":\" . join ( paths )]) sdf_file = os . path . join ( pkg , 'models' , 'vehicle' , 'model.sdf' ) with open ( sdf_file , 'r' ) as infp : robot_desc = infp . read () gz_sim = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' )), launch_arguments = { 'gz_args' : '-r -v 4 my_cart.sdf' } . items (), ) robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'both' , parameters = [ { 'use_sim_time' : True }, { 'robot_description' : robot_desc }, ] ) bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock' , '/world/Moving_robot/model/vehicle/model/vehicle_blue/joint_state@sensor_msgs/msg/JointState[gz.msgs.Model' , '/camera@sensor_msgs/msg/Image@gz.msgs.Image' , '/camera_info@sensor_msgs/msg/CameraInfo@gz.msgs.CameraInfo' ], remappings = [ ( '/world/Moving_robot/model/vehicle/model/vehicle_blue/joint_state' , 'joint_states' ), ], output = 'screen' ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( pkg , 'config' , 'rviz.rviz' )] ) world_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"world2chassis\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"world\" , \"chassis\" ] ) return LaunchDescription ([ env , gz_sim , bridge , world_tf , robot_state_publisher , rviz_node ])","title":"launch"},{"location":"blog/ROS2/ignition/bridge/camera/#rviz","text":"Rviz types type Desc Camera use CameraInfo to create window in show the image Image display image without CameraInfo data","title":"Rviz"},{"location":"blog/ROS2/ignition/bridge/camera/#ign","text":"","title":"ign"},{"location":"blog/ROS2/ignition/spawn/","tags":["ignition","gazebo","spawn"],"text":"LAB # Spawn sdf/xacro model into simulation using launch files Manual spawn Minimal spawn file topic param Spawn model with rviz joint_state Spawn with xacro Project # sam_bot_description \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 minimal.launch.py \u2502 \u251c\u2500\u2500 from_topic.launch.py \u2502 \u251c\u2500\u2500 from_param.launch.py \u2502 \u251c\u2500\u2500 spawn_with_rviz_and_bridge.launch.py \u2502 \u251c\u2500\u2500 xacro.launch.py (todo) \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 sam \u2502 \u251c\u2500\u2500 model.config \u2502 \u251c\u2500\u2500 model.sdf \u2502 \u2514\u2500\u2500 model.sdf.xacro \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 demo.sdf Manual spawn # Minimal # Spawn sdf model using -file argument world # worlds/demo.sdf <?xml version=\"1.0\" ?> <sdf version= \"1.6\" > <world name= \"demo\" > <physics name= \"1ms\" type= \"ignored\" > <max_step_size> 0.001 </max_step_size> <real_time_factor> 1.0 </real_time_factor> </physics> <plugin filename= \"libignition-gazebo-physics-system.so\" name= \"ignition::gazebo::systems::Physics\" > </plugin> <plugin filename= \"libignition-gazebo-sensors-system.so\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> <plugin filename= \"libignition-gazebo-scene-broadcaster-system.so\" name= \"ignition::gazebo::systems::SceneBroadcaster\" > </plugin> <plugin filename= \"ignition-gazebo-user-commands-system\" name= \"ignition::gazebo::systems::UserCommands\" > </plugin> <gui fullscreen= \"0\" > <!-- 3D scene --> <plugin filename= \"MinimalScene\" name= \"3D View\" > <ignition-gui> <title> 3D View </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> <engine> ogre2 </engine> <scene> scene </scene> <ambient_light> 0.4 0.4 0.4 </ambient_light> <background_color> 0.8 0.8 0.8 </background_color> <camera_pose> -6 0 6 0 0.5 0 </camera_pose> </plugin> <!-- Plugins that add functionality to the scene --> <plugin filename= \"EntityContextMenuPlugin\" name= \"Entity context menu\" > <ignition-gui> <property key= \"state\" type= \"string\" > floating </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <plugin filename= \"GzSceneManager\" name= \"Scene Manager\" > <ignition-gui> <property key= \"resizable\" type= \"bool\" > false </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"state\" type= \"string\" > floating </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <plugin filename= \"InteractiveViewControl\" name= \"Interactive view control\" > <ignition-gui> <property key= \"resizable\" type= \"bool\" > false </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"state\" type= \"string\" > floating </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <plugin filename= \"CameraTracking\" name= \"Camera Tracking\" > <ignition-gui> <property key= \"resizable\" type= \"bool\" > false </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"state\" type= \"string\" > floating </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <!-- World control --> <plugin filename= \"WorldControl\" name= \"World control\" > <ignition-gui> <title> World control </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"bool\" key= \"resizable\" > false </property> <property type= \"double\" key= \"height\" > 72 </property> <property type= \"double\" key= \"width\" > 121 </property> <property type= \"double\" key= \"z\" > 1 </property> <property type= \"string\" key= \"state\" > floating </property> <anchors target= \"3D View\" > <line own= \"left\" target= \"left\" /> <line own= \"bottom\" target= \"bottom\" /> </anchors> </ignition-gui> <play_pause> true </play_pause> <step> true </step> <start_paused> true </start_paused> <use_event> true </use_event> </plugin> <!-- World statistics --> <plugin filename= \"WorldStats\" name= \"World stats\" > <ignition-gui> <title> World stats </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"bool\" key= \"resizable\" > false </property> <property type= \"double\" key= \"height\" > 110 </property> <property type= \"double\" key= \"width\" > 290 </property> <property type= \"double\" key= \"z\" > 1 </property> <property type= \"string\" key= \"state\" > floating </property> <anchors target= \"3D View\" > <line own= \"right\" target= \"right\" /> <line own= \"bottom\" target= \"bottom\" /> </anchors> </ignition-gui> <sim_time> true </sim_time> <real_time> true </real_time> <real_time_factor> true </real_time_factor> <iterations> true </iterations> </plugin> <plugin filename= \"VisualizeLidar\" name= \"Visualize Lidar\" > </plugin> <!-- Inspector --> <plugin filename= \"ComponentInspector\" name= \"Component inspector\" > <ignition-gui> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> </plugin> <!-- Entity tree --> <plugin filename= \"EntityTree\" name= \"Entity tree\" > <ignition-gui> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> </plugin> </gui> <light type= \"directional\" name= \"sun\" > <cast_shadows> true </cast_shadows> <pose> 0 0 10 0 0 0 </pose> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.2 0.2 0.2 1 </specular> <attenuation> <range> 1000 </range> <constant> 0.9 </constant> <linear> 0.01 </linear> <quadratic> 0.001 </quadratic> </attenuation> <direction> -0.5 0.1 -0.9 </direction> </light> <model name= \"ground_plane\" > <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 20 20 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 20 20 0.1 </size> </box> </geometry> <material> <ambient> 0.8 0.8 0.8 1 </ambient> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.8 0.8 0.8 1 </specular> </material> </visual> </link> </model> <include> <uri> https://fuel.gazebosim.org/1.0/chapulina/models/Test box </uri> <name> b1 </name> <pose> 2 2 0.5 0 0 0 </pose> </include> <include> <uri> https://fuel.gazebosim.org/1.0/chapulina/models/Test box </uri> <name> b2 </name> <pose> 2 0 0.5 0 0 0 </pose> </include> <include> <uri> https://fuel.gazebosim.org/1.0/chapulina/models/Test box </uri> <name> b3 </name> <pose> 2 -2 0.5 0 0 0 </pose> </include> </world> </sdf> launch # launch/minimal.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = \"sam/model.sdf\" world_file_path = \"demo.sdf\" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) # Launch the robot spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , \"default\" , \"-file\" , sdf_models_path , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( gazebo ) ld . add_action ( spawn_entity_cmd ) return ld","title":"Spawn model into ignition simulation"},{"location":"blog/ROS2/ignition/spawn/#lab","text":"Spawn sdf/xacro model into simulation using launch files Manual spawn Minimal spawn file topic param Spawn model with rviz joint_state Spawn with xacro","title":"LAB"},{"location":"blog/ROS2/ignition/spawn/#project","text":"sam_bot_description \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 minimal.launch.py \u2502 \u251c\u2500\u2500 from_topic.launch.py \u2502 \u251c\u2500\u2500 from_param.launch.py \u2502 \u251c\u2500\u2500 spawn_with_rviz_and_bridge.launch.py \u2502 \u251c\u2500\u2500 xacro.launch.py (todo) \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 sam \u2502 \u251c\u2500\u2500 model.config \u2502 \u251c\u2500\u2500 model.sdf \u2502 \u2514\u2500\u2500 model.sdf.xacro \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 demo.sdf","title":"Project"},{"location":"blog/ROS2/ignition/spawn/#manual-spawn","text":"","title":"Manual spawn"},{"location":"blog/ROS2/ignition/spawn/#minimal","text":"Spawn sdf model using -file argument","title":"Minimal"},{"location":"blog/ROS2/ignition/spawn/#world","text":"worlds/demo.sdf <?xml version=\"1.0\" ?> <sdf version= \"1.6\" > <world name= \"demo\" > <physics name= \"1ms\" type= \"ignored\" > <max_step_size> 0.001 </max_step_size> <real_time_factor> 1.0 </real_time_factor> </physics> <plugin filename= \"libignition-gazebo-physics-system.so\" name= \"ignition::gazebo::systems::Physics\" > </plugin> <plugin filename= \"libignition-gazebo-sensors-system.so\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> <plugin filename= \"libignition-gazebo-scene-broadcaster-system.so\" name= \"ignition::gazebo::systems::SceneBroadcaster\" > </plugin> <plugin filename= \"ignition-gazebo-user-commands-system\" name= \"ignition::gazebo::systems::UserCommands\" > </plugin> <gui fullscreen= \"0\" > <!-- 3D scene --> <plugin filename= \"MinimalScene\" name= \"3D View\" > <ignition-gui> <title> 3D View </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> <engine> ogre2 </engine> <scene> scene </scene> <ambient_light> 0.4 0.4 0.4 </ambient_light> <background_color> 0.8 0.8 0.8 </background_color> <camera_pose> -6 0 6 0 0.5 0 </camera_pose> </plugin> <!-- Plugins that add functionality to the scene --> <plugin filename= \"EntityContextMenuPlugin\" name= \"Entity context menu\" > <ignition-gui> <property key= \"state\" type= \"string\" > floating </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <plugin filename= \"GzSceneManager\" name= \"Scene Manager\" > <ignition-gui> <property key= \"resizable\" type= \"bool\" > false </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"state\" type= \"string\" > floating </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <plugin filename= \"InteractiveViewControl\" name= \"Interactive view control\" > <ignition-gui> <property key= \"resizable\" type= \"bool\" > false </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"state\" type= \"string\" > floating </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <plugin filename= \"CameraTracking\" name= \"Camera Tracking\" > <ignition-gui> <property key= \"resizable\" type= \"bool\" > false </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"state\" type= \"string\" > floating </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <!-- World control --> <plugin filename= \"WorldControl\" name= \"World control\" > <ignition-gui> <title> World control </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"bool\" key= \"resizable\" > false </property> <property type= \"double\" key= \"height\" > 72 </property> <property type= \"double\" key= \"width\" > 121 </property> <property type= \"double\" key= \"z\" > 1 </property> <property type= \"string\" key= \"state\" > floating </property> <anchors target= \"3D View\" > <line own= \"left\" target= \"left\" /> <line own= \"bottom\" target= \"bottom\" /> </anchors> </ignition-gui> <play_pause> true </play_pause> <step> true </step> <start_paused> true </start_paused> <use_event> true </use_event> </plugin> <!-- World statistics --> <plugin filename= \"WorldStats\" name= \"World stats\" > <ignition-gui> <title> World stats </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"bool\" key= \"resizable\" > false </property> <property type= \"double\" key= \"height\" > 110 </property> <property type= \"double\" key= \"width\" > 290 </property> <property type= \"double\" key= \"z\" > 1 </property> <property type= \"string\" key= \"state\" > floating </property> <anchors target= \"3D View\" > <line own= \"right\" target= \"right\" /> <line own= \"bottom\" target= \"bottom\" /> </anchors> </ignition-gui> <sim_time> true </sim_time> <real_time> true </real_time> <real_time_factor> true </real_time_factor> <iterations> true </iterations> </plugin> <plugin filename= \"VisualizeLidar\" name= \"Visualize Lidar\" > </plugin> <!-- Inspector --> <plugin filename= \"ComponentInspector\" name= \"Component inspector\" > <ignition-gui> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> </plugin> <!-- Entity tree --> <plugin filename= \"EntityTree\" name= \"Entity tree\" > <ignition-gui> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> </plugin> </gui> <light type= \"directional\" name= \"sun\" > <cast_shadows> true </cast_shadows> <pose> 0 0 10 0 0 0 </pose> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.2 0.2 0.2 1 </specular> <attenuation> <range> 1000 </range> <constant> 0.9 </constant> <linear> 0.01 </linear> <quadratic> 0.001 </quadratic> </attenuation> <direction> -0.5 0.1 -0.9 </direction> </light> <model name= \"ground_plane\" > <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 20 20 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 20 20 0.1 </size> </box> </geometry> <material> <ambient> 0.8 0.8 0.8 1 </ambient> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.8 0.8 0.8 1 </specular> </material> </visual> </link> </model> <include> <uri> https://fuel.gazebosim.org/1.0/chapulina/models/Test box </uri> <name> b1 </name> <pose> 2 2 0.5 0 0 0 </pose> </include> <include> <uri> https://fuel.gazebosim.org/1.0/chapulina/models/Test box </uri> <name> b2 </name> <pose> 2 0 0.5 0 0 0 </pose> </include> <include> <uri> https://fuel.gazebosim.org/1.0/chapulina/models/Test box </uri> <name> b3 </name> <pose> 2 -2 0.5 0 0 0 </pose> </include> </world> </sdf>","title":"world"},{"location":"blog/ROS2/ignition/spawn/#launch","text":"launch/minimal.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = \"sam/model.sdf\" world_file_path = \"demo.sdf\" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) # Launch the robot spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , \"default\" , \"-file\" , sdf_models_path , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( gazebo ) ld . add_action ( spawn_entity_cmd ) return ld","title":"launch"},{"location":"blog/ROS2/ignition/spawn/spawn_fom_param/","tags":["gazebo","ign","spawn"],"text":"LAB # Spawn sdf/xacro model into simulation using param argument launch/from_param.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node WORLD_NAME = \"demo\" MODEL_NAME = \"sam\" def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = MODEL_NAME + \"/model.sdf\" world_file_path = WORLD_NAME + \".sdf\" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) robot_description = open ( sdf_models_path ) . read () gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) # Launch the robot spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , WORLD_NAME , \"-param\" , \"robot_description\" , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], parameters = [ { \"robot_description\" : robot_description }, ], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( gazebo ) ld . add_action ( spawn_entity_cmd ) return ld","title":"Spawn model from param"},{"location":"blog/ROS2/ignition/spawn/spawn_fom_param/#lab","text":"Spawn sdf/xacro model into simulation using param argument launch/from_param.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node WORLD_NAME = \"demo\" MODEL_NAME = \"sam\" def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = MODEL_NAME + \"/model.sdf\" world_file_path = WORLD_NAME + \".sdf\" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) robot_description = open ( sdf_models_path ) . read () gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) # Launch the robot spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , WORLD_NAME , \"-param\" , \"robot_description\" , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], parameters = [ { \"robot_description\" : robot_description }, ], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( gazebo ) ld . add_action ( spawn_entity_cmd ) return ld","title":"LAB"},{"location":"blog/ROS2/ignition/spawn/spawn_from_topic/","tags":["gazebo","ign","spawn"],"text":"LAB # Spawn sdf/xacro model into simulation using topic argument using robot_description_publisher launch/minimal_topic.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription , TimerAction , LogInfo from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node WORLD_NAME = \"demo\" MODEL_NAME = \"sam\" def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = MODEL_NAME + \"/model.sdf\" world_file_path = WORLD_NAME + \".sdf\" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , output = \"screen\" , parameters = [ { \"use_sim_time\" : True }, { \"robot_description\" : open ( sdf_models_path ) . read ()}, ], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , WORLD_NAME , \"-topic\" , \"robot_description\" , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], output = \"screen\" , ) timer = TimerAction ( period = 1.0 , actions = [ spawn_entity_cmd , LogInfo ( msg = \"------- Spawn ------------\" ) ]) ld = LaunchDescription () ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( timer ) return ld LogInfo Log to from launch.actions import LogInfo LogInfo(msg=\"------- message ------------\") TimerAction Start Node after period from launch.actions import TimerAction timer = TimerAction(period=1.0, actions=[ Node LogInfo(msg=\"------- Spawn ------------\") ])","title":"Spawn model from robot_description topic"},{"location":"blog/ROS2/ignition/spawn/spawn_from_topic/#lab","text":"Spawn sdf/xacro model into simulation using topic argument using robot_description_publisher launch/minimal_topic.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription , TimerAction , LogInfo from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node WORLD_NAME = \"demo\" MODEL_NAME = \"sam\" def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = MODEL_NAME + \"/model.sdf\" world_file_path = WORLD_NAME + \".sdf\" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , output = \"screen\" , parameters = [ { \"use_sim_time\" : True }, { \"robot_description\" : open ( sdf_models_path ) . read ()}, ], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , WORLD_NAME , \"-topic\" , \"robot_description\" , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], output = \"screen\" , ) timer = TimerAction ( period = 1.0 , actions = [ spawn_entity_cmd , LogInfo ( msg = \"------- Spawn ------------\" ) ]) ld = LaunchDescription () ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( timer ) return ld LogInfo Log to from launch.actions import LogInfo LogInfo(msg=\"------- message ------------\") TimerAction Start Node after period from launch.actions import TimerAction timer = TimerAction(period=1.0, actions=[ Node LogInfo(msg=\"------- Spawn ------------\") ])","title":"LAB"},{"location":"blog/ROS2/ignition/spawn/spawn_with_rviz_and_bridge/","tags":["ignition","gazebo","spawn"],"text":"LAB # Spawn sdf/xacro model Run Bridge (bridge clock, joint_states) Run Rviz import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro WORLD_NAME = \"demo\" MODEL_NAME = \"sam\" def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = MODEL_NAME + \"/model.sdf\" world_file_path = WORLD_NAME + \".sdf\" prefix = f \"/world/ { WORLD_NAME } /model/ { MODEL_NAME } \" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) sdf_file_content = xacro . process_file ( sdf_models_path ) robot_description = sdf_file_content . toxml () robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , output = \"screen\" , parameters = [ { \"use_sim_time\" : True }, { \"robot_description\" : robot_description }, ], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) # Launch the robot spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , WORLD_NAME , \"-param\" , \"robot_description\" , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], parameters = [ { \"robot_description\" : robot_description }, ], output = \"screen\" , ) rviz = Node ( package = \"rviz2\" , executable = \"rviz2\" , arguments = [ \"-d\" , os . path . join ( pkg_share , \"config\" , \"rviz.rviz\" )], parameters = [{ \"robot_description\" : robot_description }], ) # Ign Bridge bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , arguments = [ prefix + \"/joint_state@sensor_msgs/msg/JointState@ignition.msgs.Model\" , \"/clock@rosgraph_msgs/msg/Clock@ignition.msgs.Clock\" , ], remappings = [( prefix + \"/joint_state\" , \"joint_states\" )], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity_cmd ) ld . add_action ( rviz ) ld . add_action ( bridge ) return ld remapping map ignition model joint state to joint_states ros2 topic bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , arguments = [ prefix + \"/joint_state@sensor_msgs/msg/JointState@ignition.msgs.Model\" , \"/clock@rosgraph_msgs/msg/Clock@ignition.msgs.Clock\" , ], remappings = [( prefix + \"/joint_state\" , \"joint_states\" )], output = \"screen\" , )","title":"Spawn gazebo with rviz and bridge"},{"location":"blog/ROS2/ignition/spawn/spawn_with_rviz_and_bridge/#lab","text":"Spawn sdf/xacro model Run Bridge (bridge clock, joint_states) Run Rviz import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro WORLD_NAME = \"demo\" MODEL_NAME = \"sam\" def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = MODEL_NAME + \"/model.sdf\" world_file_path = WORLD_NAME + \".sdf\" prefix = f \"/world/ { WORLD_NAME } /model/ { MODEL_NAME } \" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) sdf_file_content = xacro . process_file ( sdf_models_path ) robot_description = sdf_file_content . toxml () robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , output = \"screen\" , parameters = [ { \"use_sim_time\" : True }, { \"robot_description\" : robot_description }, ], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) # Launch the robot spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , WORLD_NAME , \"-param\" , \"robot_description\" , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], parameters = [ { \"robot_description\" : robot_description }, ], output = \"screen\" , ) rviz = Node ( package = \"rviz2\" , executable = \"rviz2\" , arguments = [ \"-d\" , os . path . join ( pkg_share , \"config\" , \"rviz.rviz\" )], parameters = [{ \"robot_description\" : robot_description }], ) # Ign Bridge bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , arguments = [ prefix + \"/joint_state@sensor_msgs/msg/JointState@ignition.msgs.Model\" , \"/clock@rosgraph_msgs/msg/Clock@ignition.msgs.Clock\" , ], remappings = [( prefix + \"/joint_state\" , \"joint_states\" )], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity_cmd ) ld . add_action ( rviz ) ld . add_action ( bridge ) return ld remapping map ignition model joint state to joint_states ros2 topic bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , arguments = [ prefix + \"/joint_state@sensor_msgs/msg/JointState@ignition.msgs.Model\" , \"/clock@rosgraph_msgs/msg/Clock@ignition.msgs.Clock\" , ], remappings = [( prefix + \"/joint_state\" , \"joint_states\" )], output = \"screen\" , )","title":"LAB"},{"location":"blog/ROS2/ignition/tutorial/","tags":["ros2","ignition","gz"],"text":"joint state diff drive and basic odometry imu lidar","title":"Ignition ROS2 tutorials"},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/","tags":["diff_drive","odom","odometry","ros2","ignition"],"text":"LAB # Add diff drive plugin publish odometry , odometry tf and cmd_vel from ignition to ros2 using bridge Note check joint state post for project structure and files Note Install rqt_robotic_steering for GUI cmd_vel control sudo apt install ros-humble-rqt-robot-steering bridge # ign topic --list # /clock /gazebo/resource_paths /gui/camera/pose /model/basic_mobile_bot/cmd_vel /model/basic_mobile_bot/odometry /model/basic_mobile_bot/tf /stats /world/demo/clock /world/demo/dynamic_pose/info /world/demo/model/basic_mobile_bot/joint_state /world/demo/pose/info /world/demo/scene/deletion /world/demo/scene/info /world/demo/state /world/demo/stats - bridge cmd_vel (/model/basic_mobile_bot/cmd_vel) - bridge odometry (/model/basic_mobile_bot/odometry) - bridge tf (/model/basic_mobile_bot/tf) # cmd_vel bridge cmd_vel_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'cmd_vel_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ ign_model_prefix + '/cmd_vel' + '@geometry_msgs/msg/Twist' + ']ignition.msgs.Twist' ], remappings = [ ( ign_model_prefix + '/cmd_vel' , '/cmd_vel' ) ]) # odometry bridge odometry_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'odometry_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ ign_model_prefix + '/odometry' + '@nav_msgs/msg/Odometry' + '[ignition.msgs.Odometry' ], remappings = [ ( ign_model_prefix + '/odometry' , '/odom' ) ]) # odom to base_link transform bridge odom_base_tf_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'odom_base_tf_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ ign_model_prefix + '/tf' + '@tf2_msgs/msg/TFMessage' + '[ignition.msgs.Pose_V' ], remappings = [ ( ign_model_prefix + '/tf' , '/tf' ) ]) get bridge source # tf #","title":"Diff drive and odometry"},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/#lab","text":"Add diff drive plugin publish odometry , odometry tf and cmd_vel from ignition to ros2 using bridge Note check joint state post for project structure and files Note Install rqt_robotic_steering for GUI cmd_vel control sudo apt install ros-humble-rqt-robot-steering","title":"LAB"},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/#bridge","text":"ign topic --list # /clock /gazebo/resource_paths /gui/camera/pose /model/basic_mobile_bot/cmd_vel /model/basic_mobile_bot/odometry /model/basic_mobile_bot/tf /stats /world/demo/clock /world/demo/dynamic_pose/info /world/demo/model/basic_mobile_bot/joint_state /world/demo/pose/info /world/demo/scene/deletion /world/demo/scene/info /world/demo/state /world/demo/stats - bridge cmd_vel (/model/basic_mobile_bot/cmd_vel) - bridge odometry (/model/basic_mobile_bot/odometry) - bridge tf (/model/basic_mobile_bot/tf) # cmd_vel bridge cmd_vel_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'cmd_vel_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ ign_model_prefix + '/cmd_vel' + '@geometry_msgs/msg/Twist' + ']ignition.msgs.Twist' ], remappings = [ ( ign_model_prefix + '/cmd_vel' , '/cmd_vel' ) ]) # odometry bridge odometry_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'odometry_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ ign_model_prefix + '/odometry' + '@nav_msgs/msg/Odometry' + '[ignition.msgs.Odometry' ], remappings = [ ( ign_model_prefix + '/odometry' , '/odom' ) ]) # odom to base_link transform bridge odom_base_tf_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'odom_base_tf_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ ign_model_prefix + '/tf' + '@tf2_msgs/msg/TFMessage' + '[ignition.msgs.Pose_V' ], remappings = [ ( ign_model_prefix + '/tf' , '/tf' ) ])","title":"bridge"},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/#get-bridge-source","text":"","title":"get bridge source"},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/#tf","text":"","title":"tf"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/","tags":["imu","ros2","ignition"],"text":"LAB # Add IMU sensor to sdf Bridge to ROS2 Show in RVIZ sdf # Add sensor sdf under link Add imu plugin Add plugin tag under world tag <plugin filename= \"libignition-gazebo-imu-system.so\" name= \"ignition::gazebo::systems::Imu\" > </plugin> Add sensor to imu_link tag <sensor name= \"imu_sensor\" type= \"imu\" > <always_on> 1 </always_on> <update_rate> 1 </update_rate> <visualize> true </visualize> <topic> imu </topic> </sensor> Check this link for more info # tf # Add static tf between sensor frame to link frame static tf Sensor has fix frame_id, set from it\u2019s location We need to set static tf form link frame to sensor frame_id imu_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"imu2imu_link\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"imu_link\" , \"basic_mobile_bot/imu_link/imu\" ] ) bridge # bridge source code Add imu msg bridge Set QoS to best_effort Add tf static transform from imu_link to sensor frame_id basic_mobile_bot/imu_link/imu bridge imu_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/imu@sensor_msgs/msg/Imu@gz.msgs.IMU' ], output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time , 'qos_overrides./imu.publisher.reliability' : 'best_effort' }] ) before qos convert ros2 topic info /imu --verbose Type: sensor_msgs/msg/Imu Publisher count: 1 Node name: ros_gz_bridge Node namespace: / Topic type: sensor_msgs/msg/Imu Endpoint type: PUBLISHER GID: 01 .0f.64.c6.90.63.0b.31.01.00.00.00.00.00.14.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RELIABLE History ( Depth ) : UNKNOWN Durability: VOLATILE Lifespan: Infinite Deadline: Infinite Liveliness: AUTOMATIC Liveliness lease duration: Infinite imu message after qos convert ros2 topic info /imu --verbose # Type: sensor_msgs/msg/Imu Publisher count: 1 Node name: ros_gz_bridge Node namespace: / Topic type: sensor_msgs/msg/Imu Endpoint type: PUBLISHER GID: 01 .0f.64.c6.fb.16.9f.99.01.00.00.00.00.00.14.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: BEST_EFFORT History ( Depth ) : UNKNOWN Durability: VOLATILE Lifespan: Infinite Deadline: Infinite Liveliness: AUTOMATIC Liveliness lease duration: Infinite usage # terminal1 ros2 launch ign_tutorial ign.launch.py with_bridge: = true terminal2 ros2 run rqt_robot_steering rqt_robot_steering terminal3 rviz Reference # ros_gz_sim_demos IMU tools for ROS ignition sensors rviz imu marker","title":"IMU"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#lab","text":"Add IMU sensor to sdf Bridge to ROS2 Show in RVIZ","title":"LAB"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#sdf","text":"Add sensor sdf under link Add imu plugin Add plugin tag under world tag <plugin filename= \"libignition-gazebo-imu-system.so\" name= \"ignition::gazebo::systems::Imu\" > </plugin> Add sensor to imu_link tag <sensor name= \"imu_sensor\" type= \"imu\" > <always_on> 1 </always_on> <update_rate> 1 </update_rate> <visualize> true </visualize> <topic> imu </topic> </sensor>","title":"sdf"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#check-this-link-for-more-info","text":"","title":"Check this link for more info"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#tf","text":"Add static tf between sensor frame to link frame static tf Sensor has fix frame_id, set from it\u2019s location We need to set static tf form link frame to sensor frame_id imu_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"imu2imu_link\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"imu_link\" , \"basic_mobile_bot/imu_link/imu\" ] )","title":"tf"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#bridge","text":"bridge source code Add imu msg bridge Set QoS to best_effort Add tf static transform from imu_link to sensor frame_id basic_mobile_bot/imu_link/imu bridge imu_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/imu@sensor_msgs/msg/Imu@gz.msgs.IMU' ], output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time , 'qos_overrides./imu.publisher.reliability' : 'best_effort' }] ) before qos convert ros2 topic info /imu --verbose Type: sensor_msgs/msg/Imu Publisher count: 1 Node name: ros_gz_bridge Node namespace: / Topic type: sensor_msgs/msg/Imu Endpoint type: PUBLISHER GID: 01 .0f.64.c6.90.63.0b.31.01.00.00.00.00.00.14.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RELIABLE History ( Depth ) : UNKNOWN Durability: VOLATILE Lifespan: Infinite Deadline: Infinite Liveliness: AUTOMATIC Liveliness lease duration: Infinite imu message after qos convert ros2 topic info /imu --verbose # Type: sensor_msgs/msg/Imu Publisher count: 1 Node name: ros_gz_bridge Node namespace: / Topic type: sensor_msgs/msg/Imu Endpoint type: PUBLISHER GID: 01 .0f.64.c6.fb.16.9f.99.01.00.00.00.00.00.14.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: BEST_EFFORT History ( Depth ) : UNKNOWN Durability: VOLATILE Lifespan: Infinite Deadline: Infinite Liveliness: AUTOMATIC Liveliness lease duration: Infinite","title":"bridge"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#usage","text":"terminal1 ros2 launch ign_tutorial ign.launch.py with_bridge: = true terminal2 ros2 run rqt_robot_steering rqt_robot_steering terminal3 rviz","title":"usage"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#reference","text":"ros_gz_sim_demos IMU tools for ROS ignition sensors rviz imu marker","title":"Reference"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/","tags":["joint_state"],"text":"LAB # load model SDF into ignition and rviz publish JointState from ignition to ros2 using bridge \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 ign.launch.launch.py \u2502 \u2514\u2500\u2500 ign_bridge.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 vehicle_2 \u2502 \u2502 \u2514\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 robot_base.stl \u2502 \u2514\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 vehicle.sdf \u2514\u2500\u2500 package.xml launch # ign # import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import IncludeLaunchDescription , SetEnvironmentVariable from launch.conditions import IfCondition from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node PACKAGE_NAME = \"ign_tutorial\" SDF_MODEL_NAME = \"vehicle_2\" WORLD_NAME = \"vehicle.sdf\" def generate_launch_description (): sim_time_arg = DeclareLaunchArgument ( \"use_sim_time\" , default_value = [ \"true\" ], description = \"Enable sim time from /clock\" , ) with_bridge_arg = DeclareLaunchArgument ( \"with_bridge\" , default_value = [ \"false\" ], description = \"Launch simulation with ros ign bridge\" , ) pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg = get_package_share_directory ( PACKAGE_NAME ) sdf_path = f \" { pkg } /models/ { SDF_MODEL_NAME } /model.sdf\" use_sim_time = LaunchConfiguration ( \"use_sim_time\" ) resources = [ os . path . join ( pkg , \"worlds\" ), os . path . join ( pkg , \"models\" )] resource_env = SetEnvironmentVariable ( name = \"IGN_GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r -v 2 { WORLD_NAME } \" } . items (), ) # launch ign_bridge if with_bridge is true ign_bridge = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg , \"launch\" , \"ign_bridge.launch.py\" ), ), launch_arguments = { \"use_sim_time\" : use_sim_time } . items (), condition = IfCondition ( LaunchConfiguration ( \"with_bridge\" )) ) # robot state publisher node robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , output = \"screen\" , parameters = [ { \"use_sim_time\" : use_sim_time }, { \"robot_description\" : open ( sdf_path ) . read ()}, ], ) ld = LaunchDescription () ld . add_action ( sim_time_arg ) ld . add_action ( with_bridge_arg ) ld . add_action ( resource_env ) ld . add_action ( gazebo ) ld . add_action ( ign_bridge ) ld . add_action ( robot_state_publisher ) return ld bridge # from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.conditions import IfCondition from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node ROBOT_NAME = \"basic_mobile_bot\" def generate_launch_description (): use_sim_time_arg = DeclareLaunchArgument ( \"use_sim_time\" , default_value = [ \"false\" ], description = \"use sim time from /clock\" ) namespace = \"\" use_sim_time = LaunchConfiguration ( \"use_sim_time\" ) ign_model_prefix = \"/world/demo/model/\" + ROBOT_NAME # clock bridge clock_bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , namespace = namespace , name = \"clock_bridge\" , output = \"screen\" , arguments = [ \"/clock@rosgraph_msgs/msg/Clock[ignition.msgs.Clock\" ], condition = IfCondition ( use_sim_time ), ) # joint state bridge # /world/demo/model/v2/model/basic_mobile_bot/joint_state joint_state_bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , namespace = namespace , name = \"joint_state_bridge\" , output = \"screen\" , parameters = [{ \"use_sim_time\" : use_sim_time }], arguments = [ ign_model_prefix + \"/joint_state\" + \"@sensor_msgs/msg/JointState\" + \"[ignition.msgs.Model\" ], remappings = [( ign_model_prefix + \"/joint_state\" , \"/joint_states\" )], ) ld = LaunchDescription () ld . add_action ( use_sim_time_arg ) ld . add_action ( clock_bridge ) ld . add_action ( joint_state_bridge ) return ld tf tree # ros2 run rqt_tf_tree rqt_tf_tree sdf # model # model world # world <include> <pose> 0 0 1 0 0 0 </pose> <uri> model://vehicle_2 </uri> </include>","title":"joint state with sdf"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#lab","text":"load model SDF into ignition and rviz publish JointState from ignition to ros2 using bridge \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 ign.launch.launch.py \u2502 \u2514\u2500\u2500 ign_bridge.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 vehicle_2 \u2502 \u2502 \u2514\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 robot_base.stl \u2502 \u2514\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 vehicle.sdf \u2514\u2500\u2500 package.xml","title":"LAB"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#launch","text":"","title":"launch"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#ign","text":"import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import IncludeLaunchDescription , SetEnvironmentVariable from launch.conditions import IfCondition from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node PACKAGE_NAME = \"ign_tutorial\" SDF_MODEL_NAME = \"vehicle_2\" WORLD_NAME = \"vehicle.sdf\" def generate_launch_description (): sim_time_arg = DeclareLaunchArgument ( \"use_sim_time\" , default_value = [ \"true\" ], description = \"Enable sim time from /clock\" , ) with_bridge_arg = DeclareLaunchArgument ( \"with_bridge\" , default_value = [ \"false\" ], description = \"Launch simulation with ros ign bridge\" , ) pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg = get_package_share_directory ( PACKAGE_NAME ) sdf_path = f \" { pkg } /models/ { SDF_MODEL_NAME } /model.sdf\" use_sim_time = LaunchConfiguration ( \"use_sim_time\" ) resources = [ os . path . join ( pkg , \"worlds\" ), os . path . join ( pkg , \"models\" )] resource_env = SetEnvironmentVariable ( name = \"IGN_GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r -v 2 { WORLD_NAME } \" } . items (), ) # launch ign_bridge if with_bridge is true ign_bridge = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg , \"launch\" , \"ign_bridge.launch.py\" ), ), launch_arguments = { \"use_sim_time\" : use_sim_time } . items (), condition = IfCondition ( LaunchConfiguration ( \"with_bridge\" )) ) # robot state publisher node robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , output = \"screen\" , parameters = [ { \"use_sim_time\" : use_sim_time }, { \"robot_description\" : open ( sdf_path ) . read ()}, ], ) ld = LaunchDescription () ld . add_action ( sim_time_arg ) ld . add_action ( with_bridge_arg ) ld . add_action ( resource_env ) ld . add_action ( gazebo ) ld . add_action ( ign_bridge ) ld . add_action ( robot_state_publisher ) return ld","title":"ign"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#bridge","text":"from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.conditions import IfCondition from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node ROBOT_NAME = \"basic_mobile_bot\" def generate_launch_description (): use_sim_time_arg = DeclareLaunchArgument ( \"use_sim_time\" , default_value = [ \"false\" ], description = \"use sim time from /clock\" ) namespace = \"\" use_sim_time = LaunchConfiguration ( \"use_sim_time\" ) ign_model_prefix = \"/world/demo/model/\" + ROBOT_NAME # clock bridge clock_bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , namespace = namespace , name = \"clock_bridge\" , output = \"screen\" , arguments = [ \"/clock@rosgraph_msgs/msg/Clock[ignition.msgs.Clock\" ], condition = IfCondition ( use_sim_time ), ) # joint state bridge # /world/demo/model/v2/model/basic_mobile_bot/joint_state joint_state_bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , namespace = namespace , name = \"joint_state_bridge\" , output = \"screen\" , parameters = [{ \"use_sim_time\" : use_sim_time }], arguments = [ ign_model_prefix + \"/joint_state\" + \"@sensor_msgs/msg/JointState\" + \"[ignition.msgs.Model\" ], remappings = [( ign_model_prefix + \"/joint_state\" , \"/joint_states\" )], ) ld = LaunchDescription () ld . add_action ( use_sim_time_arg ) ld . add_action ( clock_bridge ) ld . add_action ( joint_state_bridge ) return ld","title":"bridge"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#tf-tree","text":"ros2 run rqt_tf_tree rqt_tf_tree","title":"tf tree"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#sdf","text":"","title":"sdf"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#model","text":"model","title":"model"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#world","text":"world <include> <pose> 0 0 1 0 0 0 </pose> <uri> model://vehicle_2 </uri> </include>","title":"world"},{"location":"blog/ROS2/ignition/tutorial/lidar/","tags":["ignition","lidar","ros2"],"text":"LAB # Add lidar sensor Bridge to ROS2 Show in RVIZ sdf # World Add sensor plugin under word tag model Add lidar link Add sensor <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> lidar sensor <sensor name= 'gpu_lidar' type= 'gpu_lidar' > <topic> lidar </topic> <update_rate> 10 </update_rate> <lidar> <scan> <horizontal> <samples> 640 </samples> <resolution> 1 </resolution> <min_angle> -1.396263 </min_angle> <max_angle> 1.396263 </max_angle> </horizontal> <vertical> <samples> 16 </samples> <resolution> 1 </resolution> <min_angle> -0.261799 </min_angle> <max_angle> 0.261799 </max_angle> </vertical> </scan> <range> <min> 0.08 </min> <max> 10.0 </max> <resolution> 0.01 </resolution> </range> </lidar> <alwaysOn> 1 </alwaysOn> <visualize> true </visualize> </sensor> model source code tf # bridge # lidar_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'lidar_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ '/lidar@sensor_msgs/msg/LaserScan' + '[ignition.msgs.LaserScan' , '/lidar/points' + '@sensor_msgs/msg/PointCloud2' + '[ignition.msgs.PointCloudPacked' ], remappings = [ ( '/lidar/points' , '/scan/points' ), ( '/lidar' , '/scan' ) ]) lidar_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"imu2imu_link\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"lidar_link\" , \"basic_mobile_bot/lidar_link/gpu_lidar\" ] ) Usage # Point cloud # laser scan #","title":"Add LIDAR sensor"},{"location":"blog/ROS2/ignition/tutorial/lidar/#lab","text":"Add lidar sensor Bridge to ROS2 Show in RVIZ","title":"LAB"},{"location":"blog/ROS2/ignition/tutorial/lidar/#sdf","text":"World Add sensor plugin under word tag model Add lidar link Add sensor <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> lidar sensor <sensor name= 'gpu_lidar' type= 'gpu_lidar' > <topic> lidar </topic> <update_rate> 10 </update_rate> <lidar> <scan> <horizontal> <samples> 640 </samples> <resolution> 1 </resolution> <min_angle> -1.396263 </min_angle> <max_angle> 1.396263 </max_angle> </horizontal> <vertical> <samples> 16 </samples> <resolution> 1 </resolution> <min_angle> -0.261799 </min_angle> <max_angle> 0.261799 </max_angle> </vertical> </scan> <range> <min> 0.08 </min> <max> 10.0 </max> <resolution> 0.01 </resolution> </range> </lidar> <alwaysOn> 1 </alwaysOn> <visualize> true </visualize> </sensor> model source code","title":"sdf"},{"location":"blog/ROS2/ignition/tutorial/lidar/#tf","text":"","title":"tf"},{"location":"blog/ROS2/ignition/tutorial/lidar/#bridge","text":"lidar_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'lidar_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ '/lidar@sensor_msgs/msg/LaserScan' + '[ignition.msgs.LaserScan' , '/lidar/points' + '@sensor_msgs/msg/PointCloud2' + '[ignition.msgs.PointCloudPacked' ], remappings = [ ( '/lidar/points' , '/scan/points' ), ( '/lidar' , '/scan' ) ]) lidar_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"imu2imu_link\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"lidar_link\" , \"basic_mobile_bot/lidar_link/gpu_lidar\" ] )","title":"bridge"},{"location":"blog/ROS2/ignition/tutorial/lidar/#usage","text":"","title":"Usage"},{"location":"blog/ROS2/ignition/tutorial/lidar/#point-cloud","text":"","title":"Point cloud"},{"location":"blog/ROS2/ignition/tutorial/lidar/#laser-scan","text":"","title":"laser scan"},{"location":"blog/ROS2/launch/","tags":["ros2","launch"],"text":"ROS2 launch # ROS2 launch file run/launch multiple nodes and allow to add logic to our startup sequence. Launch file has many features to control the launch sequence Actions Event handlers substitutions conditions Demo: Minimal launch file # from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ) ld . add_action ( sim_node ) return ld copy launch folder # cmake # install ( DIRECTORY launch DESTINATION share / $ { PROJECT_NAME } ) python # import os from glob import glob from setuptools import setup package_name = 'py_launch_example' setup ( # Other parameters ... data_files = [ # ... Other data files # Include all launch files. ( os . path . join ( 'share' , package_name , 'launch' ), glob ( 'launch/*launch.[pxy][yma]*' )) ] ) Examples and more # launch with arguments Resources # Design ROS 2 Launch System ROS2 launch files \u2013 All you need to know Architecture of launch launch source github Creating a launch file tutorial","title":"ROS2 launch"},{"location":"blog/ROS2/launch/#ros2-launch","text":"ROS2 launch file run/launch multiple nodes and allow to add logic to our startup sequence. Launch file has many features to control the launch sequence Actions Event handlers substitutions conditions","title":"ROS2 launch"},{"location":"blog/ROS2/launch/#demo-minimal-launch-file","text":"from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ) ld . add_action ( sim_node ) return ld","title":"Demo: Minimal launch file"},{"location":"blog/ROS2/launch/#copy-launch-folder","text":"","title":"copy launch folder"},{"location":"blog/ROS2/launch/#cmake","text":"install ( DIRECTORY launch DESTINATION share / $ { PROJECT_NAME } )","title":"cmake"},{"location":"blog/ROS2/launch/#python","text":"import os from glob import glob from setuptools import setup package_name = 'py_launch_example' setup ( # Other parameters ... data_files = [ # ... Other data files # Include all launch files. ( os . path . join ( 'share' , package_name , 'launch' ), glob ( 'launch/*launch.[pxy][yma]*' )) ] )","title":"python"},{"location":"blog/ROS2/launch/#examples-and-more","text":"launch with arguments","title":"Examples and more"},{"location":"blog/ROS2/launch/#resources","text":"Design ROS 2 Launch System ROS2 launch files \u2013 All you need to know Architecture of launch launch source github Creating a launch file tutorial","title":"Resources"},{"location":"blog/ROS2/launch/launch_node_respawn/","tags":["ros2","launch"],"text":"LAB # Ros restart process and file or exit Demo # from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' , respawn = True , respawn_delay = 4 ) ld . add_action ( sim_node ) return ld You can run launch file without the package relation ros2 launch <launch file> usage # ros2 launch launch_node_respawn.launch.py Close the window After 4 sec ROS2 launch the node","title":"Launch respawn node"},{"location":"blog/ROS2/launch/launch_node_respawn/#lab","text":"Ros restart process and file or exit","title":"LAB"},{"location":"blog/ROS2/launch/launch_node_respawn/#demo","text":"from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' , respawn = True , respawn_delay = 4 ) ld . add_action ( sim_node ) return ld You can run launch file without the package relation ros2 launch <launch file>","title":"Demo"},{"location":"blog/ROS2/launch/launch_node_respawn/#usage","text":"ros2 launch launch_node_respawn.launch.py Close the window After 4 sec ROS2 launch the node","title":"usage"},{"location":"blog/ROS2/launch/launch_node_respawn_event/","tags":["ros2","launch"],"text":"LAB # Launch file events OnProcessStart OnProcessExit Demo # launch_node_event.launch.py from launch import LaunchDescription from launch.substitutions import EnvironmentVariable , FindExecutable from launch_ros.actions import Node from launch.actions import ExecuteProcess , RegisterEventHandler , LogInfo from launch.event_handlers import OnProcessStart , OnProcessExit def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' , respawn = True , respawn_delay = 4 ) # ros2 service call /turtlesim1/spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2}\" spawn_turtle = ExecuteProcess ( cmd = [[ FindExecutable ( name = 'ros2' ), ' service call ' , \"/turtlesim1\" , '/spawn ' , 'turtlesim/srv/Spawn ' , '\"{x: 2, y: 2, theta: 0.2}\"' ]], shell = True ) event_end_action = RegisterEventHandler ( OnProcessExit ( target_action = sim_node , on_exit = [ LogInfo ( msg = ( \"event --------\" , EnvironmentVariable ( name = 'USER' ), ' closed the turtlesim window' )) ] ) ) event_start_action = RegisterEventHandler ( OnProcessStart ( target_action = sim_node , on_start = [ LogInfo ( msg = 'event ------- Turtlesim started, spawning turtle -------' ), spawn_turtle ] ) ) ld . add_action ( sim_node ) ld . add_action ( event_end_action ) ld . add_action ( event_start_action ) return ld Tip You can run launch file without the package relation ros2 launch <launch file> Reference # Using event handlers","title":"Launch events"},{"location":"blog/ROS2/launch/launch_node_respawn_event/#lab","text":"Launch file events OnProcessStart OnProcessExit","title":"LAB"},{"location":"blog/ROS2/launch/launch_node_respawn_event/#demo","text":"launch_node_event.launch.py from launch import LaunchDescription from launch.substitutions import EnvironmentVariable , FindExecutable from launch_ros.actions import Node from launch.actions import ExecuteProcess , RegisterEventHandler , LogInfo from launch.event_handlers import OnProcessStart , OnProcessExit def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' , respawn = True , respawn_delay = 4 ) # ros2 service call /turtlesim1/spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2}\" spawn_turtle = ExecuteProcess ( cmd = [[ FindExecutable ( name = 'ros2' ), ' service call ' , \"/turtlesim1\" , '/spawn ' , 'turtlesim/srv/Spawn ' , '\"{x: 2, y: 2, theta: 0.2}\"' ]], shell = True ) event_end_action = RegisterEventHandler ( OnProcessExit ( target_action = sim_node , on_exit = [ LogInfo ( msg = ( \"event --------\" , EnvironmentVariable ( name = 'USER' ), ' closed the turtlesim window' )) ] ) ) event_start_action = RegisterEventHandler ( OnProcessStart ( target_action = sim_node , on_start = [ LogInfo ( msg = 'event ------- Turtlesim started, spawning turtle -------' ), spawn_turtle ] ) ) ld . add_action ( sim_node ) ld . add_action ( event_end_action ) ld . add_action ( event_start_action ) return ld Tip You can run launch file without the package relation ros2 launch <launch file>","title":"Demo"},{"location":"blog/ROS2/launch/launch_node_respawn_event/#reference","text":"Using event handlers","title":"Reference"},{"location":"blog/ROS2/launch/launch_node_with_arguments/","tags":["ros2","launch"],"text":"param_hello.hpp #ifndef PARAM_HELLO_HPP #define PARAM_HELLO_HPP #include \"rclcpp/rclcpp.hpp\" class ParamHelloNode final : public rclcpp :: Node { public : ParamHelloNode (); private : std :: string param_str_ ; }; #endif // PARAM_HELLO_HPP param_hello.cpp #include \"param_hello.hpp\" #include \"rclcpp/rclcpp.hpp\" ParamHelloNode :: ParamHelloNode () : Node ( \"hello_param\" ) { RCLCPP_INFO ( this -> get_logger (), \"hello param\" ); this -> declare_parameter ( \"param_name\" , \"hello_default\" ); this -> param_str_ = this -> get_parameter ( \"param_name\" ). as_string (); RCLCPP_INFO ( this -> get_logger (), \"%s\" , this -> param_str_ . c_str ()); }; launch node with arguments from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () node = Node ( name = \"simple_param\" , package = 'cpp_tutrial_pkg' , executable = 'param_hello' , parameters = [ { \"param_name\" : \"param value from launch\" } ] ) ld . add_action ( node ) return ld launch with arguments from cli from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration def generate_launch_description (): ld = LaunchDescription () param_name = LaunchConfiguration ( 'param_name' ) arg_cmd = DeclareLaunchArgument ( \"param_name\" , default_value = \"hello world\" , description = \"msg simple description\" ) node = Node ( name = \"simple_param\" , package = 'cpp_tutrial_pkg' , executable = 'param_hello' , parameters = [ { \"param_name\" : param_name } ] ) ld . add_action ( arg_cmd ) ld . add_action ( node ) return ld","title":"launch with node arguments"},{"location":"blog/ROS2/launch/launch_opaquefunction/","tags":["launch","argument","ros2","OpaqueFunction"],"text":"OpaqueFunction # Action that executes a Python function. demo # Execute shell script using ExecuteProcess action Using OpaqueFunction to build shell script arguments Convert LaunchConfiguration to string using context.perform_substitution shell script to execute # hello.zsh #!/bin/zsh echo $1 > /tmp/1 launch file # opa from launch import LaunchDescription , LaunchContext from launch.actions import ExecuteProcess , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import OpaqueFunction SCRIPT_PATH = \"/home/user/ros2_ws/src/pkg_launch_tutorial/scripts/hello.zsh\" ARG1 = \"arg1\" def func_demo ( context : LaunchContext , arg1 : LaunchConfiguration ): value = context . perform_substitution ( arg1 ) if not value : value = \"default value\" run_script = ExecuteProcess ( cmd = [[ SCRIPT_PATH , \" \" , f \"' { value } '\" ]], shell = True ) return [ run_script ] def generate_launch_description (): ld = LaunchDescription () arg1 = LaunchConfiguration ( ARG1 ) arg1_arg = DeclareLaunchArgument ( ARG1 , default_value = \"\" , description = \"arg1\" ) func_action = OpaqueFunction ( function = func_demo , args = [ arg1 ]) ld . add_action ( arg1_arg ) ld . add_action ( func_action ) return ld","title":"OpaqueFunction"},{"location":"blog/ROS2/launch/launch_opaquefunction/#opaquefunction","text":"Action that executes a Python function.","title":"OpaqueFunction"},{"location":"blog/ROS2/launch/launch_opaquefunction/#demo","text":"Execute shell script using ExecuteProcess action Using OpaqueFunction to build shell script arguments Convert LaunchConfiguration to string using context.perform_substitution","title":"demo"},{"location":"blog/ROS2/launch/launch_opaquefunction/#shell-script-to-execute","text":"hello.zsh #!/bin/zsh echo $1 > /tmp/1","title":"shell script to execute"},{"location":"blog/ROS2/launch/launch_opaquefunction/#launch-file","text":"opa from launch import LaunchDescription , LaunchContext from launch.actions import ExecuteProcess , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import OpaqueFunction SCRIPT_PATH = \"/home/user/ros2_ws/src/pkg_launch_tutorial/scripts/hello.zsh\" ARG1 = \"arg1\" def func_demo ( context : LaunchContext , arg1 : LaunchConfiguration ): value = context . perform_substitution ( arg1 ) if not value : value = \"default value\" run_script = ExecuteProcess ( cmd = [[ SCRIPT_PATH , \" \" , f \"' { value } '\" ]], shell = True ) return [ run_script ] def generate_launch_description (): ld = LaunchDescription () arg1 = LaunchConfiguration ( ARG1 ) arg1_arg = DeclareLaunchArgument ( ARG1 , default_value = \"\" , description = \"arg1\" ) func_action = OpaqueFunction ( function = func_demo , args = [ arg1 ]) ld . add_action ( arg1_arg ) ld . add_action ( func_action ) return ld","title":"launch file"},{"location":"blog/ROS2/launch/launch_with_arguments/","tags":["launch","argument","ros2","DeclareLaunchArgument","LaunchConfiguration"],"text":"launch with arguments # Control launch with argument from outside DeclareLaunchArgument is used to define the launch argument that can be passed from the above launch file or from the console. LaunchConfiguration substitutions allow us to acquire the value of the launch argument in any part of the launch description. from launch import LaunchDescription from launch.actions import LogInfo , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration def generate_launch_description (): ld = LaunchDescription () arg1 = LaunchConfiguration ( \"arg1\" ) arg1_arg = DeclareLaunchArgument ( name = \"arg1\" , default_value = \"arg1 default value\" , description = \"arg1 description\" ) log_action = LogInfo ( msg = arg1 ) ld . add_action ( arg1_arg ) ld . add_action ( log_action ) return ld usage # launch without arguments # ros2 launch pkg_launch_tutorial minimal_arg.launch.py ... [ INFO ] [ launch.user ] : arg1 default value check for arguments # ros2 launch pkg_launch_tutorial minimal_arg.launch.py -s Arguments ( pass arguments as '<name>:=<value>' ) : 'arg1' : arg1 description ( default: 'arg1 default value' ) launch with arguments # show arguments ros2 launch pkg_launch_tutorial minimal_arg.launch.py arg1: = \"new arg from cli\" ... [ INFO ] [ launch.user ] : new arg from cli","title":"launch with arguments"},{"location":"blog/ROS2/launch/launch_with_arguments/#launch-with-arguments","text":"Control launch with argument from outside DeclareLaunchArgument is used to define the launch argument that can be passed from the above launch file or from the console. LaunchConfiguration substitutions allow us to acquire the value of the launch argument in any part of the launch description. from launch import LaunchDescription from launch.actions import LogInfo , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration def generate_launch_description (): ld = LaunchDescription () arg1 = LaunchConfiguration ( \"arg1\" ) arg1_arg = DeclareLaunchArgument ( name = \"arg1\" , default_value = \"arg1 default value\" , description = \"arg1 description\" ) log_action = LogInfo ( msg = arg1 ) ld . add_action ( arg1_arg ) ld . add_action ( log_action ) return ld","title":"launch with arguments"},{"location":"blog/ROS2/launch/launch_with_arguments/#usage","text":"","title":"usage"},{"location":"blog/ROS2/launch/launch_with_arguments/#launch-without-arguments","text":"ros2 launch pkg_launch_tutorial minimal_arg.launch.py ... [ INFO ] [ launch.user ] : arg1 default value","title":"launch without arguments"},{"location":"blog/ROS2/launch/launch_with_arguments/#check-for-arguments","text":"ros2 launch pkg_launch_tutorial minimal_arg.launch.py -s Arguments ( pass arguments as '<name>:=<value>' ) : 'arg1' : arg1 description ( default: 'arg1 default value' )","title":"check for arguments"},{"location":"blog/ROS2/launch/launch_with_arguments/#launch-with-arguments_1","text":"show arguments ros2 launch pkg_launch_tutorial minimal_arg.launch.py arg1: = \"new arg from cli\" ... [ INFO ] [ launch.user ] : new arg from cli","title":"launch with arguments"},{"location":"blog/ROS2/launch/launch_with_include/","tags":["ros2","launch"],"text":"LAB # Run/Include sub launch file Pass argument and substitute Child launch file # Run turtlesim node Change background color (red channel) Run child with argument from cli ros2 launch launch_tutorial child.launch.py new_background_r: = 0 Parent launch file # Include childe launch Pass arguments Parent # from launch_ros.substitutions import FindPackageShare from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.substitutions import PathJoinSubstitution , TextSubstitution def generate_launch_description (): colors = { 'background_r' : '0' } ld = LaunchDescription () include = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ PathJoinSubstitution ([ FindPackageShare ( 'launch_tutorial' ), 'child.launch.py' ]) ]), launch_arguments = { 'new_background_r' : TextSubstitution ( text = str ( colors [ 'background_r' ])) } . items () ) ld . add_action ( include ) return ld Child # child.launch.py from launch_ros.actions import Node from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , ExecuteProcess , TimerAction from launch.substitutions import LaunchConfiguration def generate_launch_description (): new_background_r = LaunchConfiguration ( 'new_background_r' ) new_background_r_launch_arg = DeclareLaunchArgument ( 'new_background_r' , default_value = '255' ) turtlesim_node = Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ) change_background_r = ExecuteProcess ( cmd = [[ 'ros2 param set ' '/sim background_r ' , new_background_r ]], shell = True ) return LaunchDescription ([ new_background_r_launch_arg , turtlesim_node , change_background_r ])","title":"Multiple launch files"},{"location":"blog/ROS2/launch/launch_with_include/#lab","text":"Run/Include sub launch file Pass argument and substitute","title":"LAB"},{"location":"blog/ROS2/launch/launch_with_include/#child-launch-file","text":"Run turtlesim node Change background color (red channel) Run child with argument from cli ros2 launch launch_tutorial child.launch.py new_background_r: = 0","title":"Child launch file"},{"location":"blog/ROS2/launch/launch_with_include/#parent-launch-file","text":"Include childe launch Pass arguments","title":"Parent launch file"},{"location":"blog/ROS2/launch/launch_with_include/#parent","text":"from launch_ros.substitutions import FindPackageShare from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.substitutions import PathJoinSubstitution , TextSubstitution def generate_launch_description (): colors = { 'background_r' : '0' } ld = LaunchDescription () include = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ PathJoinSubstitution ([ FindPackageShare ( 'launch_tutorial' ), 'child.launch.py' ]) ]), launch_arguments = { 'new_background_r' : TextSubstitution ( text = str ( colors [ 'background_r' ])) } . items () ) ld . add_action ( include ) return ld","title":"Parent"},{"location":"blog/ROS2/launch/launch_with_include/#child","text":"child.launch.py from launch_ros.actions import Node from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , ExecuteProcess , TimerAction from launch.substitutions import LaunchConfiguration def generate_launch_description (): new_background_r = LaunchConfiguration ( 'new_background_r' ) new_background_r_launch_arg = DeclareLaunchArgument ( 'new_background_r' , default_value = '255' ) turtlesim_node = Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ) change_background_r = ExecuteProcess ( cmd = [[ 'ros2 param set ' '/sim background_r ' , new_background_r ]], shell = True ) return LaunchDescription ([ new_background_r_launch_arg , turtlesim_node , change_background_r ])","title":"Child"},{"location":"blog/ROS2/launch/catmux/","tags":["tmux","launch"],"text":"A python package that wraps launching applications with a tmux script install # pip3 install --user catmux usage # config_demo.yaml --- parameters : enabled_mavproxy : true windows : - name : sitl layout : tiled splits : - commands : - echo \"1\" - commands : - echo \"2\" - name : mavproxy if : enabled_mavproxy layout : tiled splits : - commands : - echo \"1\" run catmux_create_session config_demo.yaml","title":"catmux"},{"location":"blog/ROS2/launch/catmux/#install","text":"pip3 install --user catmux","title":"install"},{"location":"blog/ROS2/launch/catmux/#usage","text":"config_demo.yaml --- parameters : enabled_mavproxy : true windows : - name : sitl layout : tiled splits : - commands : - echo \"1\" - commands : - echo \"2\" - name : mavproxy if : enabled_mavproxy layout : tiled splits : - commands : - echo \"1\" run catmux_create_session config_demo.yaml","title":"usage"},{"location":"blog/ROS2/nav2/","tags":["nav","slam"],"text":"Coordinate frames # base_link odom: world origin map base_footprint: like base_link but keep in 2D Note Measure robot velocity Velocity integrated to estimate position (dead reckoning) TF\u2019s # odom: Odometry Origin map: World origin Topics # /odom: nav_msgs/msg/Odometry /map: nav_msgs/msg/OccupancyGrid install # sudo apt install ros-humble-slam-toolbox sudo apt install ros-humble-navigation2 sudo apt install ros-humble-nav2-bringup slam-toolbox # Online: Working in a live data (not recorded) Asynchronous: Always process the most recent scan , avoid lagging (skip scan if lagging) ros2 launch slam_toolbox online_async_launch.py params_file:=./src/basic_mobile_robot/config/slam_async.yaml use_sim_time:=true Save map: Old format, create pgm and yaml files Serialize map: New format , create posegraph and data file slam_toolbox high cpu change param do_loop_closing to false AMCL # map server # ros2 run \\ nav2_map_server \\ map_server --ros-args \\ -p yaml_filename: = my_map.yaml -p use_sim_time: = true # Activate ros2 run nav2_util \\ lifecycle_bringup map_server # test ros2 service call /map_server/load_map nav2_msgs/srv/LoadMap \"{map_url: /home/user/nav2_ws/new_map2.yaml }\" amcl # ros2 run nav2_amcl amcl --ros-args -p use_sim_time: = true # Activate ros2 run nav2_util lifecycle_bringup amcl [WARN] [1676219701.288565313] [amcl]: AMCL cannot publish a pose or update the transform. Please set the initial pose... launch file # map server # Node ( package = 'nav2_map_server' , executable = 'map_server' , name = 'map_server' , output = 'screen' , parameters = [ { 'use_sim_time' : True }, { 'yaml_filename' : map_file }] ) lifecycle_manager # Node ( package = 'nav2_lifecycle_manager' , executable = 'lifecycle_manager' , name = 'lifecycle_manager' , output = 'screen' , parameters = [ { 'autostart' : True }, { 'node_names' : [ 'map_server' , 'amcl' ] } ] ) Reference # Easy SLAM with ROS using slam_toolbox articubot_one source code","title":"NAV2"},{"location":"blog/ROS2/nav2/#coordinate-frames","text":"base_link odom: world origin map base_footprint: like base_link but keep in 2D Note Measure robot velocity Velocity integrated to estimate position (dead reckoning)","title":"Coordinate frames"},{"location":"blog/ROS2/nav2/#tfs","text":"odom: Odometry Origin map: World origin","title":"TF's"},{"location":"blog/ROS2/nav2/#topics","text":"/odom: nav_msgs/msg/Odometry /map: nav_msgs/msg/OccupancyGrid","title":"Topics"},{"location":"blog/ROS2/nav2/#install","text":"sudo apt install ros-humble-slam-toolbox sudo apt install ros-humble-navigation2 sudo apt install ros-humble-nav2-bringup","title":"install"},{"location":"blog/ROS2/nav2/#slam-toolbox","text":"Online: Working in a live data (not recorded) Asynchronous: Always process the most recent scan , avoid lagging (skip scan if lagging) ros2 launch slam_toolbox online_async_launch.py params_file:=./src/basic_mobile_robot/config/slam_async.yaml use_sim_time:=true Save map: Old format, create pgm and yaml files Serialize map: New format , create posegraph and data file slam_toolbox high cpu change param do_loop_closing to false","title":"slam-toolbox"},{"location":"blog/ROS2/nav2/#amcl","text":"","title":"AMCL"},{"location":"blog/ROS2/nav2/#map-server","text":"ros2 run \\ nav2_map_server \\ map_server --ros-args \\ -p yaml_filename: = my_map.yaml -p use_sim_time: = true # Activate ros2 run nav2_util \\ lifecycle_bringup map_server # test ros2 service call /map_server/load_map nav2_msgs/srv/LoadMap \"{map_url: /home/user/nav2_ws/new_map2.yaml }\"","title":"map server"},{"location":"blog/ROS2/nav2/#amcl_1","text":"ros2 run nav2_amcl amcl --ros-args -p use_sim_time: = true # Activate ros2 run nav2_util lifecycle_bringup amcl [WARN] [1676219701.288565313] [amcl]: AMCL cannot publish a pose or update the transform. Please set the initial pose...","title":"amcl"},{"location":"blog/ROS2/nav2/#launch-file","text":"","title":"launch file"},{"location":"blog/ROS2/nav2/#map-server_1","text":"Node ( package = 'nav2_map_server' , executable = 'map_server' , name = 'map_server' , output = 'screen' , parameters = [ { 'use_sim_time' : True }, { 'yaml_filename' : map_file }] )","title":"map server"},{"location":"blog/ROS2/nav2/#lifecycle_manager","text":"Node ( package = 'nav2_lifecycle_manager' , executable = 'lifecycle_manager' , name = 'lifecycle_manager' , output = 'screen' , parameters = [ { 'autostart' : True }, { 'node_names' : [ 'map_server' , 'amcl' ] } ] )","title":"lifecycle_manager"},{"location":"blog/ROS2/nav2/#reference","text":"Easy SLAM with ROS using slam_toolbox articubot_one source code","title":"Reference"},{"location":"blog/ROS2/nav2/odometry/","tags":["ros2"],"text":"odometry using data from sensors to estimate the change in a robot\u2019s position, orientation, and velocity over time relative to some point (e.g. x=0, y=0, z=0). Odometry usually used sensors like - Wheel Encoder - IMU - LIDAR ROS used odom frame to mark the point in the world where the robot first start to moving.","title":"Odometry"},{"location":"blog/ROS2/python/","tags":["ros2","python"],"text":"Minimal Node # Minimal python node Template import rclpy from rclpy.node import Node class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal\" super () . __init__ ( node_name ) self . get_logger () . info ( \"Hello ROS2\" ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () try : rclpy . spin ( node ) except KeyboardInterrupt : print ( \"User exit\" ) finally : node . destroy_node () rclpy . try_shutdown () if __name__ == '__main__' : main () Setup tips # Copy none python files to share folders Map entry points to python modules copy none python files # data_files = [ ( 'share/ament_index/resource_index/packages' ,[ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ] def package_files ( data_files , directory_list ): paths_dict = {} for directory in directory_list : for ( path , directories , filenames ) in os . walk ( directory ): for filename in filenames : file_path = os . path . join ( path , filename ) install_path = os . path . join ( 'share' , package_name , path ) if install_path in paths_dict . keys (): paths_dict [ install_path ] . append ( file_path ) else : paths_dict [ install_path ] = [ file_path ] for key in paths_dict . keys (): data_files . append (( key , paths_dict [ key ])) return data_files setup ( name = package_name , version = '0.0.0' , packages = [ package_name ], data_files = package_files ( data_files , [ 'models/' , 'launch/' , 'worlds/' , \"config\" , \"urdf\" ]), ) Entry points # map entry points # entry points entry_points = { 'console_scripts' : [ \"minimal_node=py_tutorial_pkg.minimal_node:main\" , ] Tutorials # pub sub namespace and remapping","title":"ROS2 Python"},{"location":"blog/ROS2/python/#minimal-node","text":"Minimal python node Template import rclpy from rclpy.node import Node class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal\" super () . __init__ ( node_name ) self . get_logger () . info ( \"Hello ROS2\" ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () try : rclpy . spin ( node ) except KeyboardInterrupt : print ( \"User exit\" ) finally : node . destroy_node () rclpy . try_shutdown () if __name__ == '__main__' : main ()","title":"Minimal Node"},{"location":"blog/ROS2/python/#setup-tips","text":"Copy none python files to share folders Map entry points to python modules","title":"Setup tips"},{"location":"blog/ROS2/python/#copy-none-python-files","text":"data_files = [ ( 'share/ament_index/resource_index/packages' ,[ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ] def package_files ( data_files , directory_list ): paths_dict = {} for directory in directory_list : for ( path , directories , filenames ) in os . walk ( directory ): for filename in filenames : file_path = os . path . join ( path , filename ) install_path = os . path . join ( 'share' , package_name , path ) if install_path in paths_dict . keys (): paths_dict [ install_path ] . append ( file_path ) else : paths_dict [ install_path ] = [ file_path ] for key in paths_dict . keys (): data_files . append (( key , paths_dict [ key ])) return data_files setup ( name = package_name , version = '0.0.0' , packages = [ package_name ], data_files = package_files ( data_files , [ 'models/' , 'launch/' , 'worlds/' , \"config\" , \"urdf\" ]), )","title":"copy none python files"},{"location":"blog/ROS2/python/#entry-points","text":"map entry points # entry points entry_points = { 'console_scripts' : [ \"minimal_node=py_tutorial_pkg.minimal_node:main\" , ]","title":"Entry points"},{"location":"blog/ROS2/python/#tutorials","text":"pub sub namespace and remapping","title":"Tutorials"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/","tags":["python","ros2"],"text":"LAB # Create minimal Pub/Sub with different topic remapping topic from command line remapping from launch add namespace change node name Minimal nodes # minimal_pub.py import rclpy from rclpy.node import Node from std_msgs.msg import String TOPIC = \"simple\" PERIOD = 1 class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal_pub\" super () . __init__ ( node_name ) self . __pub = self . create_publisher ( String , TOPIC , 10 ) self . __timer = self . create_timer ( PERIOD , self . __timer_handler ) self . __timer self . __counter = 0 self . get_logger () . info ( \"run simple pub\" ) def __timer_handler ( self ): self . __counter += 1 msg = String ( data = \"pub counter: {} \" . format ( self . __counter )) self . __pub . publish ( msg ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () minimal_sub.py import rclpy from rclpy.node import Node from std_msgs.msg import String TOPIC = \"simple1\" class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal_sub\" super () . __init__ ( node_name ) self . __sub = self . create_subscription ( String , TOPIC , self . __sub_handler , 10 ) self . __sub self . get_logger () . info ( \"start minimal sub\" ) def __sub_handler ( self , msg : String ): self . get_logger () . info ( msg . data ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () setup.py # Add entry points entry_points = { 'console_scripts' : [ \"minimal_pub=py_tutorial_pkg.minimal_pub:main\" , \"minimal_sub=py_tutorial_pkg.minimal_sub:main\" ], } first run # terminal1 ros2 run py_tutorial_pkg minimal_pub terminal2 ros2 run py_tutorial_pkg minimal_sub terminal3 # nodes ros2 node list /minimal_pub /minimal_sub # topics ros2 topic list /parameter_events /rosout /simple /simple1 # info topic /simple ros2 topic info /simple Type: std_msgs/msg/String Publisher count: 1 Subscription count: 0 # info topic /simple1 ros2 topic info /simple1 Type: std_msgs/msg/String Publisher count: 0 Subscription count: 1 usage remapping sub topic # terminal2 ros2 run py_tutorial_pkg minimal_sub --ros-args -r simple1: = simple terminal3 ros2 topic list /parameter_events /rosout /simple launch with remapping # run_minimal_1.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () pub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_pub' ) sub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_sub' , remappings = [ ( '/simple1' , '/simple' ), ] ) ld . add_action ( pub_node ) ld . add_action ( sub_node ) return ld terminal1 ros2 launch py_tutorial_pkg run_minimal1.launch.py terminal2 # nodes ros2 node list /minimal_pub /minimal_sub # topics ros2 topic list /parameter_events /rosout /simple Add namespace # terminal1 ros2 run py_tutorial_pkg minimal_pub --ros-args -r __ns: = /demo terminal2 ros2 run py_tutorial_pkg minimal_sub --ros-args -r __ns: = /other_demo terminal3 # nodes ros2 node list /demo/minimal_pub /other_demo/minimal_sub # topics ros2 topic list /demo/simple /other_demo/simple1 remap pub this time # terminal1 ros2 run py_tutorial_pkg minimal_pub --ros-args -r __ns: = /demo -r /demo/simple: = /other_demo/simple1 terminal3 # nodes ros2 topic list /demo/other_demo/simple1 /other_demo/simple1 # topics ros2 topic list /other_demo/simple1 with launch file # Add namespace Remap topic with full namespace run_minimal_2.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () pub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_pub' , namespace = \"/demo\" , remappings = [ ( '/demo/simple' , '/other_demo/simple1' ), ] ) sub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_sub' , namespace = \"/other_demo\" ) ld . add_action ( pub_node ) ld . add_action ( sub_node ) return ld","title":"Minimal Pub/Sub with namespace and remapping topics"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#lab","text":"Create minimal Pub/Sub with different topic remapping topic from command line remapping from launch add namespace change node name","title":"LAB"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#minimal-nodes","text":"minimal_pub.py import rclpy from rclpy.node import Node from std_msgs.msg import String TOPIC = \"simple\" PERIOD = 1 class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal_pub\" super () . __init__ ( node_name ) self . __pub = self . create_publisher ( String , TOPIC , 10 ) self . __timer = self . create_timer ( PERIOD , self . __timer_handler ) self . __timer self . __counter = 0 self . get_logger () . info ( \"run simple pub\" ) def __timer_handler ( self ): self . __counter += 1 msg = String ( data = \"pub counter: {} \" . format ( self . __counter )) self . __pub . publish ( msg ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () minimal_sub.py import rclpy from rclpy.node import Node from std_msgs.msg import String TOPIC = \"simple1\" class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal_sub\" super () . __init__ ( node_name ) self . __sub = self . create_subscription ( String , TOPIC , self . __sub_handler , 10 ) self . __sub self . get_logger () . info ( \"start minimal sub\" ) def __sub_handler ( self , msg : String ): self . get_logger () . info ( msg . data ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () setup.py # Add entry points entry_points = { 'console_scripts' : [ \"minimal_pub=py_tutorial_pkg.minimal_pub:main\" , \"minimal_sub=py_tutorial_pkg.minimal_sub:main\" ], }","title":"Minimal nodes"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#first-run","text":"terminal1 ros2 run py_tutorial_pkg minimal_pub terminal2 ros2 run py_tutorial_pkg minimal_sub terminal3 # nodes ros2 node list /minimal_pub /minimal_sub # topics ros2 topic list /parameter_events /rosout /simple /simple1 # info topic /simple ros2 topic info /simple Type: std_msgs/msg/String Publisher count: 1 Subscription count: 0 # info topic /simple1 ros2 topic info /simple1 Type: std_msgs/msg/String Publisher count: 0 Subscription count: 1","title":"first run"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#usage-remapping-sub-topic","text":"terminal2 ros2 run py_tutorial_pkg minimal_sub --ros-args -r simple1: = simple terminal3 ros2 topic list /parameter_events /rosout /simple","title":"usage remapping sub topic"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#launch-with-remapping","text":"run_minimal_1.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () pub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_pub' ) sub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_sub' , remappings = [ ( '/simple1' , '/simple' ), ] ) ld . add_action ( pub_node ) ld . add_action ( sub_node ) return ld terminal1 ros2 launch py_tutorial_pkg run_minimal1.launch.py terminal2 # nodes ros2 node list /minimal_pub /minimal_sub # topics ros2 topic list /parameter_events /rosout /simple","title":"launch with remapping"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#add-namespace","text":"terminal1 ros2 run py_tutorial_pkg minimal_pub --ros-args -r __ns: = /demo terminal2 ros2 run py_tutorial_pkg minimal_sub --ros-args -r __ns: = /other_demo terminal3 # nodes ros2 node list /demo/minimal_pub /other_demo/minimal_sub # topics ros2 topic list /demo/simple /other_demo/simple1","title":"Add namespace"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#remap-pub-this-time","text":"terminal1 ros2 run py_tutorial_pkg minimal_pub --ros-args -r __ns: = /demo -r /demo/simple: = /other_demo/simple1 terminal3 # nodes ros2 topic list /demo/other_demo/simple1 /other_demo/simple1 # topics ros2 topic list /other_demo/simple1","title":"remap pub this time"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#with-launch-file","text":"Add namespace Remap topic with full namespace run_minimal_2.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () pub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_pub' , namespace = \"/demo\" , remappings = [ ( '/demo/simple' , '/other_demo/simple1' ), ] ) sub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_sub' , namespace = \"/other_demo\" ) ld . add_action ( pub_node ) ld . add_action ( sub_node ) return ld","title":"with launch file"},{"location":"blog/ROS2/python/test_demo/","tags":["pytest","test","ros2","rclpy"],"text":"Add test to your package # unit test without ROS: unittest/pytest unit test with ROS: launch_test + unittest Integration Testing: launch_test + unittest Tip All test run with colcon test Minimal project structure # py_tutorial_pkg/ py_tutorial_pkg/ __init__.py demo.py package.xml setup.cfg setup.py tests/ test_demo.py setup.py # Add line to setup.py tests_require = [ 'pytest' ], ```python title=\u201dpy_tutorial_pkg/demo.py def func_under_test(a, b): return a+b ```python title=\"tests/test_demo.py\" from py_tutorial_pkg import demo def test_math(): result = demo.func_under_test(2, 2) assert result == 4 usage # # Run test in verbose mode colcon test --packages-select py_tutorial_pkg \\ --event-handler = console_direct+ Run specific test # colcon test --packages-select <name-of-pkg> --pytest-args -k name_of_the_test_function colcon test --packages-select py_tutorial_pkg \\ --pytest-args -k test_math \\ --event-handler = console_direct+ colcon event-handler The event handler used to generate any kind of output base on the progress of the invocation use + sign to enable handler and - to disabled event-handler console_direct : Pass output directly to stdout , stderror console_cohesion: Pass job output at once after it has finish check result # colcon test-result --all","title":"Add test to your package"},{"location":"blog/ROS2/python/test_demo/#add-test-to-your-package","text":"unit test without ROS: unittest/pytest unit test with ROS: launch_test + unittest Integration Testing: launch_test + unittest Tip All test run with colcon test","title":"Add test to your package"},{"location":"blog/ROS2/python/test_demo/#minimal-project-structure","text":"py_tutorial_pkg/ py_tutorial_pkg/ __init__.py demo.py package.xml setup.cfg setup.py tests/ test_demo.py setup.py # Add line to setup.py tests_require = [ 'pytest' ], ```python title=\u201dpy_tutorial_pkg/demo.py def func_under_test(a, b): return a+b ```python title=\"tests/test_demo.py\" from py_tutorial_pkg import demo def test_math(): result = demo.func_under_test(2, 2) assert result == 4","title":"Minimal project structure"},{"location":"blog/ROS2/python/test_demo/#usage","text":"# Run test in verbose mode colcon test --packages-select py_tutorial_pkg \\ --event-handler = console_direct+ Run specific test # colcon test --packages-select <name-of-pkg> --pytest-args -k name_of_the_test_function colcon test --packages-select py_tutorial_pkg \\ --pytest-args -k test_math \\ --event-handler = console_direct+ colcon event-handler The event handler used to generate any kind of output base on the progress of the invocation use + sign to enable handler and - to disabled event-handler console_direct : Pass output directly to stdout , stderror console_cohesion: Pass job output at once after it has finish","title":"usage"},{"location":"blog/ROS2/python/test_demo/#check-result","text":"colcon test-result --all","title":"check result"},{"location":"blog/ROS2/python/action/action_client/","text":"import rclpy from rclpy.action import ActionClient from rclpy.node import Node import threading from action_tutorial_interfaces.action import MyAction TOPIC = \"my_action_demo\" class MyActionClient ( Node ): def __init__ ( self ): super () . __init__ ( 'action_client' ) self . _action_client = ActionClient ( self , MyAction , TOPIC ) def send_goal ( self , count ): goal_msg = MyAction . Goal () goal_msg . count = count self . _action_client . wait_for_server () self . _send_goal_future = self . _action_client . send_goal_async ( goal_msg , feedback_callback = self . feedback_callback ) self . _send_goal_future . add_done_callback ( self . goal_response_callback ) def feedback_callback ( self , feedback_msg ): self . get_logger () . info ( \"feedback thread {} \" . format ( threading . current_thread () . ident )) def goal_response_callback ( self , future ): self . get_logger () . info ( \"response thread {} \" . format ( threading . current_thread () . ident )) goal_handle = future . result () if not goal_handle . accepted : self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) self . _get_result_future = goal_handle . get_result_async () self . _get_result_future . add_done_callback ( self . get_result_callback ) def get_result_callback ( self , future ): self . get_logger () . info ( \"result thread {} \" . format ( threading . current_thread () . ident )) result = future . result () . result self . get_logger () . info ( 'Result: {0} ' . format ( result . total )) rclpy . shutdown () def main ( args = None ): rclpy . init ( args = args ) action_client = MyActionClient () action_client . send_goal ( 10 ) rclpy . spin ( action_client ) if __name__ == '__main__' : main ()","title":"Action client"},{"location":"blog/ROS2/python/action/action_server/","tags":["ros2","python","action"],"text":"VSCode action intellisense Add path to search to python.analysis.extraPaths list in settings.json { \"python.analysis.extraPaths\" : [ \"/home/user/ros2_ws/install/action_tutorial_interfaces/local/lib/python3.10/dist-packages\" ] } demo # action_tutorial/my_server.py import rclpy from rclpy.action import ActionServer from rclpy.node import Node from rclpy.action.server import ServerGoalHandle from action_tutorial_interfaces.action import MyAction TOPIC = \"my_action_demo\" class MyActionServer ( Node ): def __init__ ( self ): super () . __init__ ( 'my_action_server' ) self . _action_server = ActionServer ( self , MyAction , TOPIC , self . execute_callback ) self . get_logger () . info ( 'Start my_action_server version' ) def execute_callback ( self , goal_handle : ServerGoalHandle ): feedback_msg = MyAction . Feedback () for i in range ( goal_handle . request . count ): self . get_logger () . info ( 'current: {} ' . format ( i )) feedback_msg . current = i goal_handle . publish_feedback ( feedback_msg ) self . get_logger () . info ( 'Action ended' ) goal_handle . succeed () result = MyAction . Result () result . total = i return result def main ( args = None ): rclpy . init ( args = args ) action_server = MyActionServer () rclpy . spin ( action_server ) if __name__ == '__main__' : main () Test # send_goal ros2 action send_goal -f /my_action_demo action_tutorial_interfaces/action/MyAction \"{count: 5}\" Waiting for an action server to become available... Sending goal: count: 5 Goal accepted with ID: c1129edf0f894012921b849b7948703a Feedback: current: 0 Feedback: current: 1 Feedback: current: 2 Feedback: current: 3 Feedback: current: 4 Result: total: 4 Goal finished with status: SUCCEEDED","title":"Create Action server"},{"location":"blog/ROS2/python/action/action_server/#demo","text":"action_tutorial/my_server.py import rclpy from rclpy.action import ActionServer from rclpy.node import Node from rclpy.action.server import ServerGoalHandle from action_tutorial_interfaces.action import MyAction TOPIC = \"my_action_demo\" class MyActionServer ( Node ): def __init__ ( self ): super () . __init__ ( 'my_action_server' ) self . _action_server = ActionServer ( self , MyAction , TOPIC , self . execute_callback ) self . get_logger () . info ( 'Start my_action_server version' ) def execute_callback ( self , goal_handle : ServerGoalHandle ): feedback_msg = MyAction . Feedback () for i in range ( goal_handle . request . count ): self . get_logger () . info ( 'current: {} ' . format ( i )) feedback_msg . current = i goal_handle . publish_feedback ( feedback_msg ) self . get_logger () . info ( 'Action ended' ) goal_handle . succeed () result = MyAction . Result () result . total = i return result def main ( args = None ): rclpy . init ( args = args ) action_server = MyActionServer () rclpy . spin ( action_server ) if __name__ == '__main__' : main ()","title":"demo"},{"location":"blog/ROS2/python/action/action_server/#test","text":"send_goal ros2 action send_goal -f /my_action_demo action_tutorial_interfaces/action/MyAction \"{count: 5}\" Waiting for an action server to become available... Sending goal: count: 5 Goal accepted with ID: c1129edf0f894012921b849b7948703a Feedback: current: 0 Feedback: current: 1 Feedback: current: 2 Feedback: current: 3 Feedback: current: 4 Result: total: 4 Goal finished with status: SUCCEEDED","title":"Test"},{"location":"blog/ROS2/python/action/action_server_multiple_executer/","tags":["ros2","python","action"],"text":"Demo # action server with multithread import rclpy import threading import time from rclpy.executors import MultiThreadedExecutor from rclpy.action import ActionServer from rclpy.node import Node from rclpy.action.server import ServerGoalHandle from action_tutorial_interfaces.action import MyAction TOPIC = \"my_action_demo\" PERIOD = 1 class MyActionServer ( Node ): def __init__ ( self ): super () . __init__ ( 'my_action_server' ) self . _action_server = ActionServer ( self , MyAction , TOPIC , self . execute_callback ) self . __timer = self . create_timer ( PERIOD , self . __timer_handler ) self . __timer self . get_logger () . info ( 'Start my_action_server version' ) def __timer_handler ( self ): self . get_logger () . info ( \"timer thread ->: {} \" . format ( threading . current_thread () . ident )) def execute_callback ( self , goal_handle : ServerGoalHandle ): self . get_logger () . info ( \"action thread ->: {} \" . format ( threading . current_thread () . ident )) feedback_msg = MyAction . Feedback () for i in range ( goal_handle . request . count ): time . sleep ( 1 ) self . get_logger () . info ( 'current: {} ' . format ( i )) feedback_msg . current = i goal_handle . publish_feedback ( feedback_msg ) self . get_logger () . info ( 'Action ended' ) goal_handle . succeed () result = MyAction . Result () result . total = i return result def main ( args = None ): rclpy . init ( args = args ) action_server = MyActionServer () exec = MultiThreadedExecutor () exec . add_node ( action_server ) exec . spin () rclpy . spin ( action_server ) if __name__ == '__main__' : main () Run # run action ros2 action send_goal -f /my_action_demo action_tutorial_interfaces/action/MyAction \"{count: 3}\" server output [ INFO ] [ 1670248402 .659192149 ] [ my_action_server ] : timer thread ->: 140488007521856 [ INFO ] [ 1670248403 .657669396 ] [ my_action_server ] : timer thread ->: 140487998469696 [ INFO ] [ 1670248404 .005261426 ] [ my_action_server ] : action thread ->: 140487998469696 [ INFO ] [ 1670248404 .658963720 ] [ my_action_server ] : timer thread ->: 140488007521856 [ INFO ] [ 1670248405 .006998918 ] [ my_action_server ] : current: 0 [ INFO ] [ 1670248405 .658867664 ] [ my_action_server ] : timer thread ->: 140487990076992 [ INFO ] [ 1670248406 .009163793 ] [ my_action_server ] : current: 1 [ INFO ] [ 1670248406 .658945210 ] [ my_action_server ] : timer thread ->: 140488015914560 [ INFO ] [ 1670248407 .011518224 ] [ my_action_server ] : current: 2 [ INFO ] [ 1670248407 .012507114 ] [ my_action_server ] : Action ended [ INFO ] [ 1670248407 .658774598 ] [ my_action_server ] : timer thread ->: 140488015914560","title":"Create Action server with multithread executer"},{"location":"blog/ROS2/python/action/action_server_multiple_executer/#demo","text":"action server with multithread import rclpy import threading import time from rclpy.executors import MultiThreadedExecutor from rclpy.action import ActionServer from rclpy.node import Node from rclpy.action.server import ServerGoalHandle from action_tutorial_interfaces.action import MyAction TOPIC = \"my_action_demo\" PERIOD = 1 class MyActionServer ( Node ): def __init__ ( self ): super () . __init__ ( 'my_action_server' ) self . _action_server = ActionServer ( self , MyAction , TOPIC , self . execute_callback ) self . __timer = self . create_timer ( PERIOD , self . __timer_handler ) self . __timer self . get_logger () . info ( 'Start my_action_server version' ) def __timer_handler ( self ): self . get_logger () . info ( \"timer thread ->: {} \" . format ( threading . current_thread () . ident )) def execute_callback ( self , goal_handle : ServerGoalHandle ): self . get_logger () . info ( \"action thread ->: {} \" . format ( threading . current_thread () . ident )) feedback_msg = MyAction . Feedback () for i in range ( goal_handle . request . count ): time . sleep ( 1 ) self . get_logger () . info ( 'current: {} ' . format ( i )) feedback_msg . current = i goal_handle . publish_feedback ( feedback_msg ) self . get_logger () . info ( 'Action ended' ) goal_handle . succeed () result = MyAction . Result () result . total = i return result def main ( args = None ): rclpy . init ( args = args ) action_server = MyActionServer () exec = MultiThreadedExecutor () exec . add_node ( action_server ) exec . spin () rclpy . spin ( action_server ) if __name__ == '__main__' : main ()","title":"Demo"},{"location":"blog/ROS2/python/action/action_server_multiple_executer/#run","text":"run action ros2 action send_goal -f /my_action_demo action_tutorial_interfaces/action/MyAction \"{count: 3}\" server output [ INFO ] [ 1670248402 .659192149 ] [ my_action_server ] : timer thread ->: 140488007521856 [ INFO ] [ 1670248403 .657669396 ] [ my_action_server ] : timer thread ->: 140487998469696 [ INFO ] [ 1670248404 .005261426 ] [ my_action_server ] : action thread ->: 140487998469696 [ INFO ] [ 1670248404 .658963720 ] [ my_action_server ] : timer thread ->: 140488007521856 [ INFO ] [ 1670248405 .006998918 ] [ my_action_server ] : current: 0 [ INFO ] [ 1670248405 .658867664 ] [ my_action_server ] : timer thread ->: 140487990076992 [ INFO ] [ 1670248406 .009163793 ] [ my_action_server ] : current: 1 [ INFO ] [ 1670248406 .658945210 ] [ my_action_server ] : timer thread ->: 140488015914560 [ INFO ] [ 1670248407 .011518224 ] [ my_action_server ] : current: 2 [ INFO ] [ 1670248407 .012507114 ] [ my_action_server ] : Action ended [ INFO ] [ 1670248407 .658774598 ] [ my_action_server ] : timer thread ->: 140488015914560","title":"Run"},{"location":"blog/ROS2/python/action/create_custom_action_msg/","tags":["ros2","python","action"],"text":"Actions are defined in .action locate in action sub folder Action files defined in this structure # Request --- # Result --- # Feedback Demo # Action Definition # action/MyAction.action int32 count --- int32 total --- int32 current CMakeLists # CMakeList.txt cmake_minimum_required ( VERSION 3.8 ) project ( action_tutorial_interfaces ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( $ { PROJECT_NAME } \"action/MyAction.action\" ) ament_package () CMakeLists Keep each action in new line Package.xml # Add to package.xml <buildtool_depend> rosidl_default_generators </buildtool_depend> <depend> action_msgs </depend> <member_of_group> rosidl_interface_packages </member_of_group> build and test # colcon build --packages-select action_tutorial_interfaces check ros2 interface show action_tutorial_interfaces/action/MyAction # int32 count --- int32 total --- int32 current # Resources # Creating an action","title":"Create custom action msg"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#demo","text":"","title":"Demo"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#action-definition","text":"action/MyAction.action int32 count --- int32 total --- int32 current","title":"Action Definition"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#cmakelists","text":"CMakeList.txt cmake_minimum_required ( VERSION 3.8 ) project ( action_tutorial_interfaces ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( $ { PROJECT_NAME } \"action/MyAction.action\" ) ament_package () CMakeLists Keep each action in new line","title":"CMakeLists"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#packagexml","text":"Add to package.xml <buildtool_depend> rosidl_default_generators </buildtool_depend> <depend> action_msgs </depend> <member_of_group> rosidl_interface_packages </member_of_group>","title":"Package.xml"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#build-and-test","text":"colcon build --packages-select action_tutorial_interfaces","title":"build and test"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#checkros2-interface-show-action_tutorial_interfacesactionmyaction-int32-count---int32-total---int32-current","text":"","title":"checkros2 interface show action_tutorial_interfaces/action/MyAction \n\n#\n\nint32 count\n---\nint32 total\n---\nint32 current\n"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#resources","text":"Creating an action","title":"Resources"},{"location":"blog/ROS2/python/executor/","tags":["ros2","python","executor","MultiThreadedExecutor","SingleThreadedExecutor"],"text":"ROS2 rclpy executor # By default, rclpy offers two different executors for the user to choose from: SingleThreadedExecutor (default) MultiThreadedExecutor SingleThreadedExecutor : executes callbacks in a single thread, one at a time, and thus the previous callback must always finish before a new one can begin execution. MultiThreadedExecutor : executing several callbacks simultaneously. Callback groups # ROS 2 allows organizing the callbacks of a node in groups. MutuallyExclusiveCallbackGroup ReentrantCallbackGroup MutuallyExclusiveCallbackGroup : Callbacks of this group must not be executed in parallel. ReentrantCallbackGroup : Callbacks of this group may be executed in parallel. callback examples - subscription callback - timer callback - service callback (request on server) - action server and client callback - Future done callback demo # Node with timer that handle long time work, the demo assign timer callback to each type of group with MultiThreadedExecutor ReentrantCallbackGroup # ReentrantCallbackGroup import rclpy from rclpy.node import Node from rclpy.executors import MultiThreadedExecutor from rclpy.callback_groups import ReentrantCallbackGroup import time import threading WORKER_THREAD = 10 WORKER_10HZ = 1 / 10 PAYLOAD_TIME = 1 / 2 class MyNode ( Node ): def __init__ ( self ): node_name = \"executer_demo\" super () . __init__ ( node_name ) g = ReentrantCallbackGroup () self . create_timer ( WORKER_10HZ , self . __timer_handler , callback_group = g ) self . get_logger () . info ( \"Hello ROS2\" ) def __timer_handler ( self ): self . get_logger () . info ( f \"work: { threading . current_thread () . name } \" ) time . sleep ( PAYLOAD_TIME ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () try : exec = MultiThreadedExecutor ( WORKER_THREAD ) exec . add_node ( node ) exec . spin () except KeyboardInterrupt : print ( \"User exit\" ) finally : node . destroy_node () rclpy . try_shutdown () if __name__ == '__main__' : main () [ INFO ] [ 1680619887 .064644971 ] [ keyboard ] : work: ThreadPoolExecutor-0_2 [ INFO ] [ 1680619887 .163538444 ] [ keyboard ] : work: ThreadPoolExecutor-0_3 [ INFO ] [ 1680619887 .264196196 ] [ keyboard ] : work: ThreadPoolExecutor-0_4 [ INFO ] [ 1680619887 .364816744 ] [ keyboard ] : work: ThreadPoolExecutor-0_5 [ INFO ] [ 1680619887 .464378506 ] [ keyboard ] : work: ThreadPoolExecutor-0_0 [ INFO ] [ 1680619887 .564040306 ] [ keyboard ] : work: ThreadPoolExecutor-0_6 [ INFO ] [ 1680619887 .665020484 ] [ keyboard ] : work: ThreadPoolExecutor-0_1 [ INFO ] [ 1680619887 .764469847 ] [ keyboard ] : work: ThreadPoolExecutor-0_2 [ INFO ] [ 1680619887 .864734746 ] [ keyboard ] : work: ThreadPoolExecutor-0_3 [ INFO ] [ 1680619887 .964096619 ] [ keyboard ] : work: ThreadPoolExecutor-0_4 The executer success to run payload in time interval 10hz MutuallyExclusiveCallbackGroup # MutuallyExclusiveCallbackGroup import rclpy from rclpy.node import Node from rclpy.executors import MultiThreadedExecutor from rclpy.callback_groups import MutuallyExclusiveCallbackGroup import time import threading WORKER_THREAD = 10 WORKER_10HZ = 1 / 10 PAYLOAD_TIME = 1 / 2 class MyNode ( Node ): def __init__ ( self ): node_name = \"executer_demo\" super () . __init__ ( node_name ) g = MutuallyExclusiveCallbackGroup () self . create_timer ( WORKER_10HZ , self . __timer_handler , callback_group = g ) self . get_logger () . info ( \"Hello ROS2\" ) def __timer_handler ( self ): self . get_logger () . info ( f \"work: { threading . current_thread () . name } \" ) time . sleep ( PAYLOAD_TIME ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () try : exec = MultiThreadedExecutor ( WORKER_THREAD ) exec . add_node ( node ) exec . spin () except KeyboardInterrupt : print ( \"User exit\" ) finally : node . destroy_node () rclpy . try_shutdown () if __name__ == '__main__' : main () [ INFO ] [ 1680619992 .063696171 ] [ executer_demo ] : work: ThreadPoolExecutor-0_0 [ INFO ] [ 1680619992 .565431058 ] [ executer_demo ] : work: ThreadPoolExecutor-0_1 [ INFO ] [ 1680619993 .068422713 ] [ executer_demo ] : work: ThreadPoolExecutor-0_0 [ INFO ] [ 1680619993 .571697147 ] [ executer_demo ] : work: ThreadPoolExecutor-0_1 [ INFO ] [ 1680619994 .073350571 ] [ executer_demo ] : work: ThreadPoolExecutor-0_0 [ INFO ] [ 1680619994 .576600477 ] [ executer_demo ] : work: ThreadPoolExecutor-0_1 The timer success to run the payload only in serial one ofter anther # Reference # Deadlocks in rclpy and how to prevent them with use of callback groups Executors\uf0c1","title":"ROS2 rclpy executor"},{"location":"blog/ROS2/python/executor/#ros2-rclpy-executor","text":"By default, rclpy offers two different executors for the user to choose from: SingleThreadedExecutor (default) MultiThreadedExecutor SingleThreadedExecutor : executes callbacks in a single thread, one at a time, and thus the previous callback must always finish before a new one can begin execution. MultiThreadedExecutor : executing several callbacks simultaneously.","title":"ROS2 rclpy executor"},{"location":"blog/ROS2/python/executor/#callback-groups","text":"ROS 2 allows organizing the callbacks of a node in groups. MutuallyExclusiveCallbackGroup ReentrantCallbackGroup MutuallyExclusiveCallbackGroup : Callbacks of this group must not be executed in parallel. ReentrantCallbackGroup : Callbacks of this group may be executed in parallel. callback examples - subscription callback - timer callback - service callback (request on server) - action server and client callback - Future done callback","title":"Callback groups"},{"location":"blog/ROS2/python/executor/#demo","text":"Node with timer that handle long time work, the demo assign timer callback to each type of group with MultiThreadedExecutor","title":"demo"},{"location":"blog/ROS2/python/executor/#reentrantcallbackgroup","text":"ReentrantCallbackGroup import rclpy from rclpy.node import Node from rclpy.executors import MultiThreadedExecutor from rclpy.callback_groups import ReentrantCallbackGroup import time import threading WORKER_THREAD = 10 WORKER_10HZ = 1 / 10 PAYLOAD_TIME = 1 / 2 class MyNode ( Node ): def __init__ ( self ): node_name = \"executer_demo\" super () . __init__ ( node_name ) g = ReentrantCallbackGroup () self . create_timer ( WORKER_10HZ , self . __timer_handler , callback_group = g ) self . get_logger () . info ( \"Hello ROS2\" ) def __timer_handler ( self ): self . get_logger () . info ( f \"work: { threading . current_thread () . name } \" ) time . sleep ( PAYLOAD_TIME ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () try : exec = MultiThreadedExecutor ( WORKER_THREAD ) exec . add_node ( node ) exec . spin () except KeyboardInterrupt : print ( \"User exit\" ) finally : node . destroy_node () rclpy . try_shutdown () if __name__ == '__main__' : main () [ INFO ] [ 1680619887 .064644971 ] [ keyboard ] : work: ThreadPoolExecutor-0_2 [ INFO ] [ 1680619887 .163538444 ] [ keyboard ] : work: ThreadPoolExecutor-0_3 [ INFO ] [ 1680619887 .264196196 ] [ keyboard ] : work: ThreadPoolExecutor-0_4 [ INFO ] [ 1680619887 .364816744 ] [ keyboard ] : work: ThreadPoolExecutor-0_5 [ INFO ] [ 1680619887 .464378506 ] [ keyboard ] : work: ThreadPoolExecutor-0_0 [ INFO ] [ 1680619887 .564040306 ] [ keyboard ] : work: ThreadPoolExecutor-0_6 [ INFO ] [ 1680619887 .665020484 ] [ keyboard ] : work: ThreadPoolExecutor-0_1 [ INFO ] [ 1680619887 .764469847 ] [ keyboard ] : work: ThreadPoolExecutor-0_2 [ INFO ] [ 1680619887 .864734746 ] [ keyboard ] : work: ThreadPoolExecutor-0_3 [ INFO ] [ 1680619887 .964096619 ] [ keyboard ] : work: ThreadPoolExecutor-0_4 The executer success to run payload in time interval 10hz","title":"ReentrantCallbackGroup"},{"location":"blog/ROS2/python/executor/#mutuallyexclusivecallbackgroup","text":"MutuallyExclusiveCallbackGroup import rclpy from rclpy.node import Node from rclpy.executors import MultiThreadedExecutor from rclpy.callback_groups import MutuallyExclusiveCallbackGroup import time import threading WORKER_THREAD = 10 WORKER_10HZ = 1 / 10 PAYLOAD_TIME = 1 / 2 class MyNode ( Node ): def __init__ ( self ): node_name = \"executer_demo\" super () . __init__ ( node_name ) g = MutuallyExclusiveCallbackGroup () self . create_timer ( WORKER_10HZ , self . __timer_handler , callback_group = g ) self . get_logger () . info ( \"Hello ROS2\" ) def __timer_handler ( self ): self . get_logger () . info ( f \"work: { threading . current_thread () . name } \" ) time . sleep ( PAYLOAD_TIME ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () try : exec = MultiThreadedExecutor ( WORKER_THREAD ) exec . add_node ( node ) exec . spin () except KeyboardInterrupt : print ( \"User exit\" ) finally : node . destroy_node () rclpy . try_shutdown () if __name__ == '__main__' : main () [ INFO ] [ 1680619992 .063696171 ] [ executer_demo ] : work: ThreadPoolExecutor-0_0 [ INFO ] [ 1680619992 .565431058 ] [ executer_demo ] : work: ThreadPoolExecutor-0_1 [ INFO ] [ 1680619993 .068422713 ] [ executer_demo ] : work: ThreadPoolExecutor-0_0 [ INFO ] [ 1680619993 .571697147 ] [ executer_demo ] : work: ThreadPoolExecutor-0_1 [ INFO ] [ 1680619994 .073350571 ] [ executer_demo ] : work: ThreadPoolExecutor-0_0 [ INFO ] [ 1680619994 .576600477 ] [ executer_demo ] : work: ThreadPoolExecutor-0_1","title":"MutuallyExclusiveCallbackGroup"},{"location":"blog/ROS2/python/executor/#the-timer-success-to-run-the-payload-only-in-serial-one-ofter-anther","text":"","title":"The timer success to run the payload only in serial one ofter anther"},{"location":"blog/ROS2/python/executor/#reference","text":"Deadlocks in rclpy and how to prevent them with use of callback groups Executors\uf0c1","title":"Reference"},{"location":"blog/ROS2/python/lifecycle/","text":"","title":"Index"},{"location":"blog/ROS2/python/parameters/","tags":["param","ros2","rclpy"],"text":"Parameters basic examples Parameter management using topic and services Parameter validation using Descriptors and add_on_set_parameters_callback Update node parameter from code using service dynamic_reconfigure my examples # ros2 python tutorial params cli # Using the ros2 param command-line tool","title":"ROS2 Parameters"},{"location":"blog/ROS2/python/parameters/#my-examples","text":"ros2 python tutorial params","title":"my examples"},{"location":"blog/ROS2/python/parameters/#cli","text":"Using the ros2 param command-line tool","title":"cli"},{"location":"blog/ROS2/python/parameters/basic_example/","tags":["ros2","param"],"text":"ROS2 Params basic example # Simple node with params, run the node from cli and launch file, control the parameters from cli or yaml file node # import rclpy from rclpy.node import Node class BasicParams ( Node ): def __init__ ( self ): super () . __init__ ( 'basic_param' ) self . get_logger () . info ( \"start basic param\" ) self . declare_parameter ( 'my_str' , value = \"string data\" ) self . declare_parameter ( 'my_int' , value = 10 ) self . my_str = self . get_parameter ( \"my_str\" ) . value self . my_int = self . get_parameter ( \"my_int\" ) . value self . get_logger () . info ( f \"my_str: { self . my_str } \" ) self . get_logger () . info ( f \"my_int: { self . my_int } \" ) def main ( args = None ): rclpy . init ( args = args ) node = BasicParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () usage # cli # use default # simple run ros2 run pkg_python_tutorial param_basic [ INFO ] [ 1674810902 .438001696 ] [ basic_param ] : start basic param [ INFO ] [ 1674810902 .438464027 ] [ basic_param ] : my_str: string data [ INFO ] [ 1674810902 .438649552 ] [ basic_param ] : my_int: 10 init from cli # init from params from cli ros2 run pkg_python_tutorial param_basic --ros-args -p my_int: = 20 -p my_str: = \"hello world\" [ INFO ] [ 1674811321 .921565297 ] [ basic_param ] : start basic param [ INFO ] [ 1674811321 .921986535 ] [ basic_param ] : my_str: hello world [ INFO ] [ 1674811321 .922149889 ] [ basic_param ] : my_int: 20 load from yaml file # basic.yaml basic_param : ros__parameters : my_int : 100 my_str : hello yaml Tip Add copy instruction to data_files section data_files = [ ( os . path . join ( 'share' , package_name , \"config\" ), glob ( 'config/*.yaml' )) ] init from yaml file ros2 run pkg_python_tutorial param_basic --ros-args --params-file config/basic.yaml launch # set param in launch file # node_with_param.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'pkg_python_tutorial' , namespace = '' , executable = 'param_basic' , name = 'basic' , parameters = [ { \"my_str\" : \"data from launch\" , \"my_int\" : 100 } ] ) ld . add_action ( sim_node ) return ld load param from yaml in launch file # node_with_param_file.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'pkg_python_tutorial' ), 'config' , 'params.yaml' ) sim_node = Node ( package = 'pkg_python_tutorial' , namespace = '' , executable = 'param_basic' , name = 'basic' , parameters = [ config ] ) ld . add_action ( sim_node ) return ld params.yaml basic : ros__parameters : my_str : \"launch and load from yaml\" my_int : 100 node /yaml name The node name in yaml file need to be the same name we set in the launch file Node.name property rqt # ros2 run rqt_reconfigure rqt_reconfigure # or # run rqt_gui and load th dynamic_reconfiguration plugin","title":"Basic example"},{"location":"blog/ROS2/python/parameters/basic_example/#ros2-params-basic-example","text":"Simple node with params, run the node from cli and launch file, control the parameters from cli or yaml file","title":"ROS2 Params basic example"},{"location":"blog/ROS2/python/parameters/basic_example/#node","text":"import rclpy from rclpy.node import Node class BasicParams ( Node ): def __init__ ( self ): super () . __init__ ( 'basic_param' ) self . get_logger () . info ( \"start basic param\" ) self . declare_parameter ( 'my_str' , value = \"string data\" ) self . declare_parameter ( 'my_int' , value = 10 ) self . my_str = self . get_parameter ( \"my_str\" ) . value self . my_int = self . get_parameter ( \"my_int\" ) . value self . get_logger () . info ( f \"my_str: { self . my_str } \" ) self . get_logger () . info ( f \"my_int: { self . my_int } \" ) def main ( args = None ): rclpy . init ( args = args ) node = BasicParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"node"},{"location":"blog/ROS2/python/parameters/basic_example/#usage","text":"","title":"usage"},{"location":"blog/ROS2/python/parameters/basic_example/#cli","text":"","title":"cli"},{"location":"blog/ROS2/python/parameters/basic_example/#use-default","text":"simple run ros2 run pkg_python_tutorial param_basic [ INFO ] [ 1674810902 .438001696 ] [ basic_param ] : start basic param [ INFO ] [ 1674810902 .438464027 ] [ basic_param ] : my_str: string data [ INFO ] [ 1674810902 .438649552 ] [ basic_param ] : my_int: 10","title":"use default"},{"location":"blog/ROS2/python/parameters/basic_example/#init-from-cli","text":"init from params from cli ros2 run pkg_python_tutorial param_basic --ros-args -p my_int: = 20 -p my_str: = \"hello world\" [ INFO ] [ 1674811321 .921565297 ] [ basic_param ] : start basic param [ INFO ] [ 1674811321 .921986535 ] [ basic_param ] : my_str: hello world [ INFO ] [ 1674811321 .922149889 ] [ basic_param ] : my_int: 20","title":"init from cli"},{"location":"blog/ROS2/python/parameters/basic_example/#load-from-yaml-file","text":"basic.yaml basic_param : ros__parameters : my_int : 100 my_str : hello yaml Tip Add copy instruction to data_files section data_files = [ ( os . path . join ( 'share' , package_name , \"config\" ), glob ( 'config/*.yaml' )) ] init from yaml file ros2 run pkg_python_tutorial param_basic --ros-args --params-file config/basic.yaml","title":"load from yaml file"},{"location":"blog/ROS2/python/parameters/basic_example/#launch","text":"","title":"launch"},{"location":"blog/ROS2/python/parameters/basic_example/#set-param-in-launch-file","text":"node_with_param.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'pkg_python_tutorial' , namespace = '' , executable = 'param_basic' , name = 'basic' , parameters = [ { \"my_str\" : \"data from launch\" , \"my_int\" : 100 } ] ) ld . add_action ( sim_node ) return ld","title":"set param in launch file"},{"location":"blog/ROS2/python/parameters/basic_example/#load-param-from-yaml-in-launch-file","text":"node_with_param_file.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'pkg_python_tutorial' ), 'config' , 'params.yaml' ) sim_node = Node ( package = 'pkg_python_tutorial' , namespace = '' , executable = 'param_basic' , name = 'basic' , parameters = [ config ] ) ld . add_action ( sim_node ) return ld params.yaml basic : ros__parameters : my_str : \"launch and load from yaml\" my_int : 100 node /yaml name The node name in yaml file need to be the same name we set in the launch file Node.name property","title":"load param from yaml in launch file"},{"location":"blog/ROS2/python/parameters/basic_example/#rqt","text":"ros2 run rqt_reconfigure rqt_reconfigure # or # run rqt_gui and load th dynamic_reconfiguration plugin","title":"rqt"},{"location":"blog/ROS2/python/parameters/dynamic_reconfigure/","tags":["ros2","param","dynamic-reconfigure"],"text":"Reference # dynamic-reconfigure ros2 rcl_interfaces","title":"Dynamic reconfigure"},{"location":"blog/ROS2/python/parameters/dynamic_reconfigure/#reference","text":"dynamic-reconfigure ros2 rcl_interfaces","title":"Reference"},{"location":"blog/ROS2/python/parameters/parameter_client/","tags":["ros2","param"],"text":"Update parameter from other node, using set_parameters service demo # set my_int param from param basic node terminal1: run node ros2 run pkg_python_tutorial param_control terminal2: list node params ros2 param list /basic_param: my_int use_sim_time Know your environment # terminal2: list node services ros2 service list /basic_param/describe_parameters /basic_param/get_parameter_types /basic_param/get_parameters /basic_param/list_parameters /basic_param/set_parameters /basic_param/set_parameters_atomically terminal2: get service interface # get service interface ros2 service type /basic_param/set_parameters # rcl_interfaces/srv/SetParameters terminal2: show interface details Parameter [] parameters string name ParameterValue value uint8 type bool bool_value int64 integer_value float64 double_value string string_value byte [] byte_array_value bool [] bool_array_value int64 [] integer_array_value float64 [] double_array_value string [] string_array_value --- # Indicates whether setting each parameter succeeded or not and why. SetParametersResult [] results bool successful string reason code # param_update_cllient.py import rclpy from rclpy.node import Node from rcl_interfaces.srv import SetParameters from rcl_interfaces.msg import Parameter , ParameterValue , ParameterType from rcl_interfaces.srv._set_parameters import SetParameters_Response from rcl_interfaces.msg import SetParametersResult from rclpy.parameter_service import SetParameters TOPIC = \"/basic_param/set_parameters\" class MinimalClientAsync ( Node ): def __init__ ( self ): super () . __init__ ( 'update' ) self . cli = self . create_client ( SetParameters , TOPIC ) while not self . cli . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . send_request () def service_call_handler ( self , future ): response : SetParameters_Response result : SetParametersResult response = future . result () result = response . results [ 0 ] self . get_logger () . info ( f \" { result . successful } \" ) self . get_logger () . info ( result . reason ) def send_request ( self ): self . req = SetParameters . Request () param_value = ParameterValue ( integer_value = 150 ) param_value . type = ParameterType . PARAMETER_INTEGER param = Parameter ( name = \"my_int\" , value = param_value ) params = [ param ] self . req . parameters = params self . future = self . cli . call_async ( self . req ) self . future . add_done_callback ( self . service_call_handler ) def main ( args = None ): rclpy . init ( args = args ) minimal_client = MinimalClientAsync () rclpy . spin ( minimal_client ) minimal_client . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () usage # IntRange my_int param has limit between 10-110 terminal2 # send value 150 ros2 run pkg_python_tutorial param_update # [ INFO ] [ 1674974296 .640533953 ] [ update ] : False [ INFO ] [ 1674974296 .640736818 ] [ update ] : Parameter my_int out of range. Min: 10 , Max: 110 , value: 150 # send value 100 ros2 run pkg_python_tutorial param_update [ INFO ] [ 1674974352 .207990957 ] [ update ] : True [ INFO ] [ 1674974352 .208230578 ] [ update ] reason set_parameters service response return SetParametersResult object for each updated parameter, the Object has two fields - bool successful - string reason When update failed reason field contain the error msg","title":"ROS2 update node parameter from client"},{"location":"blog/ROS2/python/parameters/parameter_client/#demo","text":"set my_int param from param basic node terminal1: run node ros2 run pkg_python_tutorial param_control terminal2: list node params ros2 param list /basic_param: my_int use_sim_time","title":"demo"},{"location":"blog/ROS2/python/parameters/parameter_client/#know-your-environment","text":"terminal2: list node services ros2 service list /basic_param/describe_parameters /basic_param/get_parameter_types /basic_param/get_parameters /basic_param/list_parameters /basic_param/set_parameters /basic_param/set_parameters_atomically terminal2: get service interface # get service interface ros2 service type /basic_param/set_parameters # rcl_interfaces/srv/SetParameters terminal2: show interface details Parameter [] parameters string name ParameterValue value uint8 type bool bool_value int64 integer_value float64 double_value string string_value byte [] byte_array_value bool [] bool_array_value int64 [] integer_array_value float64 [] double_array_value string [] string_array_value --- # Indicates whether setting each parameter succeeded or not and why. SetParametersResult [] results bool successful string reason","title":"Know your environment"},{"location":"blog/ROS2/python/parameters/parameter_client/#code","text":"param_update_cllient.py import rclpy from rclpy.node import Node from rcl_interfaces.srv import SetParameters from rcl_interfaces.msg import Parameter , ParameterValue , ParameterType from rcl_interfaces.srv._set_parameters import SetParameters_Response from rcl_interfaces.msg import SetParametersResult from rclpy.parameter_service import SetParameters TOPIC = \"/basic_param/set_parameters\" class MinimalClientAsync ( Node ): def __init__ ( self ): super () . __init__ ( 'update' ) self . cli = self . create_client ( SetParameters , TOPIC ) while not self . cli . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . send_request () def service_call_handler ( self , future ): response : SetParameters_Response result : SetParametersResult response = future . result () result = response . results [ 0 ] self . get_logger () . info ( f \" { result . successful } \" ) self . get_logger () . info ( result . reason ) def send_request ( self ): self . req = SetParameters . Request () param_value = ParameterValue ( integer_value = 150 ) param_value . type = ParameterType . PARAMETER_INTEGER param = Parameter ( name = \"my_int\" , value = param_value ) params = [ param ] self . req . parameters = params self . future = self . cli . call_async ( self . req ) self . future . add_done_callback ( self . service_call_handler ) def main ( args = None ): rclpy . init ( args = args ) minimal_client = MinimalClientAsync () rclpy . spin ( minimal_client ) minimal_client . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"code"},{"location":"blog/ROS2/python/parameters/parameter_client/#usage","text":"IntRange my_int param has limit between 10-110 terminal2 # send value 150 ros2 run pkg_python_tutorial param_update # [ INFO ] [ 1674974296 .640533953 ] [ update ] : False [ INFO ] [ 1674974296 .640736818 ] [ update ] : Parameter my_int out of range. Min: 10 , Max: 110 , value: 150 # send value 100 ros2 run pkg_python_tutorial param_update [ INFO ] [ 1674974352 .207990957 ] [ update ] : True [ INFO ] [ 1674974352 .208230578 ] [ update ] reason set_parameters service response return SetParametersResult object for each updated parameter, the Object has two fields - bool successful - string reason When update failed reason field contain the error msg","title":"usage"},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/","tags":["ros2","param"],"text":"ParameterDescriptor # Code # Add parameter descriptor Add range validator Add add_on_set_parameter_callback param_control.py import rclpy from rclpy.node import Node from rcl_interfaces.msg import SetParametersResult from rcl_interfaces.msg import ParameterDescriptor , IntegerRange , ParameterType from rclpy.parameter import Parameter from typing import List class BasicParams ( Node ): def __init__ ( self ): super () . __init__ ( 'basic_param' ) self . get_logger () . info ( \"param control\" ) my_int_descriptor = ParameterDescriptor ( description = \"my int param\" , type = ParameterType . PARAMETER_INTEGER ) range = IntegerRange ( from_value = 10 , to_value = 110 ) my_int_descriptor . integer_range . append ( range ) self . declare_parameter ( 'my_int' , value = 100 , descriptor = my_int_descriptor ) self . my_int = self . get_parameter ( \"my_int\" ) . value self . add_on_set_parameters_callback ( self . __parameters_handler ) def __parameters_handler ( self , params : List [ Parameter ]): success = True for param in params : self . get_logger () . info ( param . name ) self . get_logger () . info ( str ( param . value )) return SetParametersResult ( successful = success ) def main ( args = None ): rclpy . init ( args = args ) node = BasicParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () usage # ros2 param set /basic_param my_int 100 # Set parameter successful ros2 param set /basic_param my_int 120 # Setting parameter failed: Parameter my_int out of range. Min: 10 , Max: 110 , value: 120 ros2 param set /basic_param my_int 1 # Setting parameter failed: Parameter my_int out of range. Min: 10 , Max: 110 , value: 1 rqt_reconfigure # ros2 run rqt_reconfigure rqt_reconfigure add_on_set_parameters_callback # The function that is called whenever parameters are set for the node Demo # Using add_on_set_parameters_callback to run validation import rclpy from rclpy.node import Node from rcl_interfaces.msg import SetParametersResult from rcl_interfaces.msg import ParameterDescriptor , IntegerRange , ParameterType from rclpy.parameter import Parameter from typing import List class BasicParams ( Node ): def __init__ ( self ): super () . __init__ ( 'basic_param' ) self . get_logger () . info ( \"param control\" ) my_int_descriptor = ParameterDescriptor ( description = \"my int param\" , type = ParameterType . PARAMETER_INTEGER ) self . declare_parameter ( 'my_int' , value = 100 , descriptor = my_int_descriptor ) self . my_int = self . get_parameter ( \"my_int\" ) . value self . add_on_set_parameters_callback ( self . __parameters_handler ) def __parameters_handler ( self , params : List [ Parameter ]): success = True for param in params : if param . name == \"my_int\" : if param . value > 50 : success = False return SetParametersResult ( successful = success ) def main ( args = None ): rclpy . init ( args = args ) node = BasicParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () usage # # Set successful ros2 param set /basic_param my_int 1 Set parameter successful # Set Failed ros2 param set /basic_param my_int 100 Setting parameter failed # Read again ros2 param get /basic_param my_int Integer value is: 1 rqt_reconfigure # ros2 run rqt_reconfigure rqt_reconfigure","title":"ROS2 Params node control"},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#parameterdescriptor","text":"","title":"ParameterDescriptor"},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#code","text":"Add parameter descriptor Add range validator Add add_on_set_parameter_callback param_control.py import rclpy from rclpy.node import Node from rcl_interfaces.msg import SetParametersResult from rcl_interfaces.msg import ParameterDescriptor , IntegerRange , ParameterType from rclpy.parameter import Parameter from typing import List class BasicParams ( Node ): def __init__ ( self ): super () . __init__ ( 'basic_param' ) self . get_logger () . info ( \"param control\" ) my_int_descriptor = ParameterDescriptor ( description = \"my int param\" , type = ParameterType . PARAMETER_INTEGER ) range = IntegerRange ( from_value = 10 , to_value = 110 ) my_int_descriptor . integer_range . append ( range ) self . declare_parameter ( 'my_int' , value = 100 , descriptor = my_int_descriptor ) self . my_int = self . get_parameter ( \"my_int\" ) . value self . add_on_set_parameters_callback ( self . __parameters_handler ) def __parameters_handler ( self , params : List [ Parameter ]): success = True for param in params : self . get_logger () . info ( param . name ) self . get_logger () . info ( str ( param . value )) return SetParametersResult ( successful = success ) def main ( args = None ): rclpy . init ( args = args ) node = BasicParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"Code"},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#usage","text":"ros2 param set /basic_param my_int 100 # Set parameter successful ros2 param set /basic_param my_int 120 # Setting parameter failed: Parameter my_int out of range. Min: 10 , Max: 110 , value: 120 ros2 param set /basic_param my_int 1 # Setting parameter failed: Parameter my_int out of range. Min: 10 , Max: 110 , value: 1","title":"usage"},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#rqt_reconfigure","text":"ros2 run rqt_reconfigure rqt_reconfigure","title":"rqt_reconfigure"},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#add_on_set_parameters_callback","text":"The function that is called whenever parameters are set for the node","title":"add_on_set_parameters_callback"},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#demo","text":"Using add_on_set_parameters_callback to run validation import rclpy from rclpy.node import Node from rcl_interfaces.msg import SetParametersResult from rcl_interfaces.msg import ParameterDescriptor , IntegerRange , ParameterType from rclpy.parameter import Parameter from typing import List class BasicParams ( Node ): def __init__ ( self ): super () . __init__ ( 'basic_param' ) self . get_logger () . info ( \"param control\" ) my_int_descriptor = ParameterDescriptor ( description = \"my int param\" , type = ParameterType . PARAMETER_INTEGER ) self . declare_parameter ( 'my_int' , value = 100 , descriptor = my_int_descriptor ) self . my_int = self . get_parameter ( \"my_int\" ) . value self . add_on_set_parameters_callback ( self . __parameters_handler ) def __parameters_handler ( self , params : List [ Parameter ]): success = True for param in params : if param . name == \"my_int\" : if param . value > 50 : success = False return SetParametersResult ( successful = success ) def main ( args = None ): rclpy . init ( args = args ) node = BasicParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"Demo"},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#usage_1","text":"# Set successful ros2 param set /basic_param my_int 1 Set parameter successful # Set Failed ros2 param set /basic_param my_int 100 Setting parameter failed # Read again ros2 param get /basic_param my_int Integer value is: 1","title":"usage"},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#rqt_reconfigure_1","text":"ros2 run rqt_reconfigure rqt_reconfigure","title":"rqt_reconfigure"},{"location":"blog/ROS2/python/parameters/parameters_control/","tags":["ros2","param"],"text":"Base on previous let do more investigation on ROS2 params Demo (global parameter event) # Subscribe to parameter_events topic terminal1 ros2 run pkg_python_tutorial param_basic terminal2 ros2 topic list # /parameter_events /rosout # echo/subscribe topic ros2 topic echo /parameter_events terminal3 # change my_int param value ros2 param set /basic my_int 20 terminal2 stamp: sec: 1674824296 nanosec: 912765941 node: /basic new_parameters: [] changed_parameters: - name: my_int value: type: 2 bool_value: false integer_value: 20 double_value: 0 .0 string_value: '' byte_array_value: [] bool_array_value: [] integer_array_value: [] double_array_value: [] string_array_value: [] deleted_parameters: [] --- Demo2 (control parameter from service) # Ros2 Node implement build in service to control Node parameters terminal1 ros2 service list # /basic/describe_parameters /basic/get_parameter_types /basic/get_parameters /basic/list_parameters /basic/set_parameters /basic/set_parameters_atomically terminal2 ros2 service call /basic/list_parameters rcl_interfaces/srv/ListParameters # requester: making request: rcl_interfaces.srv.ListParameters_Request ( prefixes =[] , depth = 0 ) response: rcl_interfaces.srv.ListParameters_Response ( result = rcl_interfaces.msg.ListParametersResult ( names =[ 'use_sim_time' , 'my_str' , 'my_int' ] , prefixes =[])) # ros2 service call /basic/list_parameters rcl_interfaces/srv/ListParameters \"{ prefixes: [\" my \"] }\" # requester: making request: rcl_interfaces.srv.ListParameters_Request ( prefixes =[ 'my' ] , depth = 0 ) response: rcl_interfaces.srv.ListParameters_Response ( result = rcl_interfaces.msg.ListParametersResult ( names =[ 'my_str' , 'my_int' ] , prefixes =[])) call service tips The request data must be inside \" Key, Value must have space between them prefixes: [\"my\"] get_parameters # ros2 service call /basic/get_parameters rcl_interfaces/srv/GetParameters \"{ names: [my_int] }\" # requester: making request: rcl_interfaces.srv.GetParameters_Request ( names =[ 'my_int' ]) response: rcl_interfaces.srv.GetParameters_Response ( values =[ rcl_interfaces.msg.ParameterValue ( type = 2 , bool_value = False, integer_value = 20 , double_value = 0 .0, string_value = '' , byte_array_value =[] , bool_array_value =[] , integer_array_value =[] , double_array_value =[] , string_array_value =[])])","title":"ROS2 Params more control"},{"location":"blog/ROS2/python/parameters/parameters_control/#demo-global-parameter-event","text":"Subscribe to parameter_events topic terminal1 ros2 run pkg_python_tutorial param_basic terminal2 ros2 topic list # /parameter_events /rosout # echo/subscribe topic ros2 topic echo /parameter_events terminal3 # change my_int param value ros2 param set /basic my_int 20 terminal2 stamp: sec: 1674824296 nanosec: 912765941 node: /basic new_parameters: [] changed_parameters: - name: my_int value: type: 2 bool_value: false integer_value: 20 double_value: 0 .0 string_value: '' byte_array_value: [] bool_array_value: [] integer_array_value: [] double_array_value: [] string_array_value: [] deleted_parameters: [] ---","title":"Demo (global parameter event)"},{"location":"blog/ROS2/python/parameters/parameters_control/#demo2-control-parameter-from-service","text":"Ros2 Node implement build in service to control Node parameters terminal1 ros2 service list # /basic/describe_parameters /basic/get_parameter_types /basic/get_parameters /basic/list_parameters /basic/set_parameters /basic/set_parameters_atomically terminal2 ros2 service call /basic/list_parameters rcl_interfaces/srv/ListParameters # requester: making request: rcl_interfaces.srv.ListParameters_Request ( prefixes =[] , depth = 0 ) response: rcl_interfaces.srv.ListParameters_Response ( result = rcl_interfaces.msg.ListParametersResult ( names =[ 'use_sim_time' , 'my_str' , 'my_int' ] , prefixes =[])) # ros2 service call /basic/list_parameters rcl_interfaces/srv/ListParameters \"{ prefixes: [\" my \"] }\" # requester: making request: rcl_interfaces.srv.ListParameters_Request ( prefixes =[ 'my' ] , depth = 0 ) response: rcl_interfaces.srv.ListParameters_Response ( result = rcl_interfaces.msg.ListParametersResult ( names =[ 'my_str' , 'my_int' ] , prefixes =[])) call service tips The request data must be inside \" Key, Value must have space between them prefixes: [\"my\"]","title":"Demo2 (control parameter from service)"},{"location":"blog/ROS2/python/parameters/parameters_control/#get_parameters","text":"ros2 service call /basic/get_parameters rcl_interfaces/srv/GetParameters \"{ names: [my_int] }\" # requester: making request: rcl_interfaces.srv.GetParameters_Request ( names =[ 'my_int' ]) response: rcl_interfaces.srv.GetParameters_Response ( values =[ rcl_interfaces.msg.ParameterValue ( type = 2 , bool_value = False, integer_value = 20 , double_value = 0 .0, string_value = '' , byte_array_value =[] , bool_array_value =[] , integer_array_value =[] , double_array_value =[] , string_array_value =[])])","title":"get_parameters"},{"location":"blog/ROS2/python/services/","tags":["ros2","service"],"text":"Simple Server # simple_service.py import rclpy from rclpy.node import Node from std_srvs.srv import SetBool class MinimalService ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_service' ) self . srv = self . create_service ( SetBool , 'echo_service' , self . echo_callback ) def echo_callback ( self , request : SetBool . Request , response : SetBool . Response ): response . success = request . data response . message = \"success\" return response def main ( args = None ): rclpy . init ( args = args ) minimal_service = MinimalService () rclpy . spin ( minimal_service ) rclpy . shutdown () if __name__ == '__main__' : main () ros2 service call /echo_service std_srvs/srv/SetBool \"{data: True}\" requester: making request: std_srvs.srv.SetBool_Request ( data = True ) response: std_srvs.srv.SetBool_Response ( success = True, message = 'success' )","title":"ROS2 Services"},{"location":"blog/ROS2/python/services/#simple-server","text":"simple_service.py import rclpy from rclpy.node import Node from std_srvs.srv import SetBool class MinimalService ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_service' ) self . srv = self . create_service ( SetBool , 'echo_service' , self . echo_callback ) def echo_callback ( self , request : SetBool . Request , response : SetBool . Response ): response . success = request . data response . message = \"success\" return response def main ( args = None ): rclpy . init ( args = args ) minimal_service = MinimalService () rclpy . spin ( minimal_service ) rclpy . shutdown () if __name__ == '__main__' : main () ros2 service call /echo_service std_srvs/srv/SetBool \"{data: True}\" requester: making request: std_srvs.srv.SetBool_Request ( data = True ) response: std_srvs.srv.SetBool_Response ( success = True, message = 'success' )","title":"Simple Server"},{"location":"blog/ROS2/python/services/sync_client/","tags":["ros2","service","client"],"text":"Reference # Synchronous vs. asynchronous service clients service from service","title":"ROS2 client sync"},{"location":"blog/ROS2/python/services/sync_client/#reference","text":"Synchronous vs. asynchronous service clients service from service","title":"Reference"},{"location":"blog/ROS2/python/setup/copy_folder_with_subfolders_to_package_insall/","tags":["ros2","setup.py","python"],"text":"setup.py import os from glob import glob from setuptools import setup package_name = 'myrobot_gazebo' data_files = [ ( 'share/ament_index/resource_index/packages' ,[ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ] def package_files ( data_files , directory_list ): paths_dict = {} for directory in directory_list : for ( path , directories , filenames ) in os . walk ( directory ): for filename in filenames : file_path = os . path . join ( path , filename ) install_path = os . path . join ( 'share' , package_name , path ) if install_path in paths_dict . keys (): paths_dict [ install_path ] . append ( file_path ) else : paths_dict [ install_path ] = [ file_path ] for key in paths_dict . keys (): data_files . append (( key , paths_dict [ key ])) return data_files setup ( name = package_name , version = '0.0.0' , packages = [ package_name ], data_files = package_files ( data_files , [ 'models/' , 'launch/' , 'worlds/' ]), install_requires = [ 'setuptools' ], zip_safe = True , maintainer = 'ros' , maintainer_email = 'ros@todo.todo' , description = 'TODO: Package description' , license = 'TODO: License declaration' , tests_require = [ 'pytest' ], entry_points = { 'console_scripts' : [ ], }, ) Reference # How to copy folders with subfolders to package installation path?","title":"ROS2 Python package, copy folder and sub folders to package install"},{"location":"blog/ROS2/python/setup/copy_folder_with_subfolders_to_package_insall/#reference","text":"How to copy folders with subfolders to package installation path?","title":"Reference"},{"location":"blog/ROS2/python/tutorials/","tags":["ros2"],"text":"minimal pub and sub node and cli demos Simple launch file to launch the pub sub node Add namespace with launch file Node params hello Node params handle","title":"ROS2 Python tutorials"},{"location":"blog/ROS2/python/tutorials/launch_hello/","tags":["ros2","launch","101"],"text":"launch source code # hello.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () talker_node = Node ( package = \"basic\" , executable = \"simple_pub\" , ) listener_node = Node ( package = \"basic\" , executable = \"simple_sub\" ) ld . add_action ( talker_node ) ld . add_action ( listener_node ) return ld Note Your launch file must contain this function: generate_launch_description(), and must return a LaunchDescription object. setup.py # Add entry to data_files copy the launch folder to package install folder setup.py data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( \"share\" , package_name ), glob ( \"launch/*.launch.py\" )) ], Note copy launch files using CMakeLists.txt ... install ( DIRECTORY launch DESTINATION share/ ${ PROJECT_NAME } ) usage # terminal1 ros2 launch basic hello.launch.py # Result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-08-52-59-435522-lap2-73549 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ simple_pub-1 ] : process started with pid [ 73551 ] [ INFO ] [ simple_sub-2 ] : process started with pid [ 73553 ] [ simple_pub-1 ] [ INFO ] [ 1649224380 .693329543 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ simple_sub-2 ] [ INFO ] [ 1649224380 .693398516 ] [ minimal_subscriber ] : I heard: pub simple: 0 [ simple_pub-1 ] [ INFO ] [ 1649224381 .683970139 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ simple_sub-2 ] [ INFO ] [ 1649224381 .684546630 ] [ minimal_subscriber ] : I heard: pub simple: 1 References # ROS2 Launch File Example \u2013 How to Start All Your Nodes at Once","title":"Part2 - Launch file"},{"location":"blog/ROS2/python/tutorials/launch_hello/#launch-source-code","text":"hello.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () talker_node = Node ( package = \"basic\" , executable = \"simple_pub\" , ) listener_node = Node ( package = \"basic\" , executable = \"simple_sub\" ) ld . add_action ( talker_node ) ld . add_action ( listener_node ) return ld Note Your launch file must contain this function: generate_launch_description(), and must return a LaunchDescription object.","title":"launch source code"},{"location":"blog/ROS2/python/tutorials/launch_hello/#setuppy","text":"Add entry to data_files copy the launch folder to package install folder setup.py data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( \"share\" , package_name ), glob ( \"launch/*.launch.py\" )) ], Note copy launch files using CMakeLists.txt ... install ( DIRECTORY launch DESTINATION share/ ${ PROJECT_NAME } )","title":"setup.py"},{"location":"blog/ROS2/python/tutorials/launch_hello/#usage","text":"terminal1 ros2 launch basic hello.launch.py # Result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-08-52-59-435522-lap2-73549 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ simple_pub-1 ] : process started with pid [ 73551 ] [ INFO ] [ simple_sub-2 ] : process started with pid [ 73553 ] [ simple_pub-1 ] [ INFO ] [ 1649224380 .693329543 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ simple_sub-2 ] [ INFO ] [ 1649224380 .693398516 ] [ minimal_subscriber ] : I heard: pub simple: 0 [ simple_pub-1 ] [ INFO ] [ 1649224381 .683970139 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ simple_sub-2 ] [ INFO ] [ 1649224381 .684546630 ] [ minimal_subscriber ] : I heard: pub simple: 1","title":"usage"},{"location":"blog/ROS2/python/tutorials/launch_hello/#references","text":"ROS2 Launch File Example \u2013 How to Start All Your Nodes at Once","title":"References"},{"location":"blog/ROS2/python/tutorials/package_xml_hello/","tags":["ros2","package.xml","101"],"text":"package.xml <exec_depend> rclpy </exec_depend> <exec_depend> std_msgs </exec_depend> <depend> example_interfaces </depend> <test_depend> ament_copyright </test_depend> ... rosdep # install sudo apt install python3-rosdep init sudo rosdep init rosdep update command # resolve # rosdep resolve example_interfaces #apt ros-foxy-example-interfaces install # install package dependencies # from w.s root run rosdep install --from-paths src/basic --ignore-src -r -y # Command result executing command [ sudo -H apt-get install -y ros-foxy-example-interfaces ] Resources # rep-149 Package Manifest Format Three Specification","title":"Package.xml hello"},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#rosdep","text":"install sudo apt install python3-rosdep init sudo rosdep init rosdep update","title":"rosdep"},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#command","text":"","title":"command"},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#resolve","text":"rosdep resolve example_interfaces #apt ros-foxy-example-interfaces","title":"resolve"},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#install","text":"install package dependencies # from w.s root run rosdep install --from-paths src/basic --ignore-src -r -y # Command result executing command [ sudo -H apt-get install -y ros-foxy-example-interfaces ]","title":"install"},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#resources","text":"rep-149 Package Manifest Format Three Specification","title":"Resources"},{"location":"blog/ROS2/python/tutorials/part10_managed_nodes/","tags":["ros2","node"],"text":"unconfigured inactive active finalized Warning In foxy work only in CPP , from rolling work with python","title":"ROS2 Managed Nodes"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/","tags":["ros2","launch"],"text":"launch source code # hello.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () talker_node = Node ( package = \"basic\" , namespace = \"my_ns\" , name = \"my_pub\" , executable = \"simple_pub\" , ) listener_node = Node ( package = \"basic\" , namespace = \"my_ns\" , name = \"my_sub\" , executable = \"simple_sub\" ) ld . add_action ( talker_node ) ld . add_action ( listener_node ) return ld Usage # launch node list topic list rqt_graph launch # log output note ns.node_name ros2 launch basic hello.launch.py ... [ simple_pub-1 ] [ INFO ] [ 1651090792 .927189288 ] [ my_ns.my_pub ] : Publishing: \"pub simple: 1\" [ simple_sub-2 ] [ INFO ] [ 1651090792 .927732100 ] [ my_ns.my_sub ] : I heard: pub simple: 1 node list # ros2 node list # Result /my_ns/my_pub /my_ns/my_sub topic list # ros2 topic list /my_ns/minimal /parameter_events /rosout rqt_graph #","title":"Part2a - Launch file part II"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#launch-source-code","text":"hello.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () talker_node = Node ( package = \"basic\" , namespace = \"my_ns\" , name = \"my_pub\" , executable = \"simple_pub\" , ) listener_node = Node ( package = \"basic\" , namespace = \"my_ns\" , name = \"my_sub\" , executable = \"simple_sub\" ) ld . add_action ( talker_node ) ld . add_action ( listener_node ) return ld","title":"launch source code"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#usage","text":"launch node list topic list rqt_graph","title":"Usage"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#launch","text":"log output note ns.node_name ros2 launch basic hello.launch.py ... [ simple_pub-1 ] [ INFO ] [ 1651090792 .927189288 ] [ my_ns.my_pub ] : Publishing: \"pub simple: 1\" [ simple_sub-2 ] [ INFO ] [ 1651090792 .927732100 ] [ my_ns.my_sub ] : I heard: pub simple: 1","title":"launch"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#node-list","text":"ros2 node list # Result /my_ns/my_pub /my_ns/my_sub","title":"node list"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#topic-list","text":"ros2 topic list /my_ns/minimal /parameter_events /rosout","title":"topic list"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#rqt_graph","text":"","title":"rqt_graph"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/","tags":["ros2","param","parameter"],"text":"Objective # Declare parameter Manage params from cli Set node params with launch file Code example # import rclpy from rclpy.node import Node class TestParams ( Node ): def __init__ ( self ): super () . __init__ ( 'test_params_rclpy' ) self . declare_parameter ( 'my_str' ) self . declare_parameter ( 'my_int' , value = 10 ) self . declare_parameter ( 'my_double_array' ) timer_period = 2 self . timer = self . create_timer ( timer_period , self . timer_callback ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_str' ) . get_parameter_value () . string_value my_param_int = self . get_parameter ( \"my_int\" ) . get_parameter_value () . integer_value self . get_logger () . info ( f \"Hello { my_param } ! with int data: { my_param_int } \" ) def main ( args = None ): rclpy . init ( args = args ) node = TestParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () Manage params from cli # Run node with param # Note Run node with arguments from CLI --ros-args -p <param_name>:=<param_value> ros2 run basic simple_param --ros-args -p my_str: = world # Result [ INFO ] [ 1649226981 .611616597 ] [ test_params_rclpy ] : Hello world! with int data: 10 [ INFO ] [ 1649226983 .604038327 ] [ test_params_rclpy ] : Hello world! with int data: 10 Manage params from cli # # list params from all running nodes ros2 param list # Result /simple_params: my_double_array my_int my_str use_sim_time YAML file # simple.yaml simple_params : ros__parameters : my_str : \"world from yaml\" my_int : 100 my_double_array : [ 1.0 , 2.0 , 3.0 ] Warning ros__parameters with double underline Run with yaml # terminal1 ros2 run basic simple_param --ros-args --params-file /home/user/dev_ws/src/basic/config/simple.yaml [ INFO ] [ 1649227913 .033306747 ] [ simple_params ] : Hello world from yaml! with int data: 100 [ INFO ] [ 1649227915 .025466940 ] [ simple_params ] : Hello world from yaml! with int data: 100 Params yaml and launch file # place yaml file in config syb folder copy config folder to output folder using setup.py yaml copy data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( \"share\" , package_name ), glob ( \"launch/*.launch.py\" )), ( os . path . join ( \"share\" , package_name , \"config\" ), glob ( \"config/*\" )), ], simple_param_yaml.launch.py # with yaml file import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'basic' ), 'config' , 'simple.yaml' ) node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ config ] ) ld . add_action ( node ) return ld Warning The name argument in the launch Node object must be the same in the param yaml file simple_param.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ { \"my_str\" : \"hello from launch\" }, { \"my_int\" : 1000 }, { \"my_double_array\" : [ 1.0 , 10.0 ]} ] ) ld . add_action ( node ) return ld References # rclpy Params Tutorial \u2013 Get and Set ROS2 Params with Python ROS2 YAML For Parameters","title":"Part3 - Simple python Node with parameter"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#objective","text":"Declare parameter Manage params from cli Set node params with launch file","title":"Objective"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#code-example","text":"import rclpy from rclpy.node import Node class TestParams ( Node ): def __init__ ( self ): super () . __init__ ( 'test_params_rclpy' ) self . declare_parameter ( 'my_str' ) self . declare_parameter ( 'my_int' , value = 10 ) self . declare_parameter ( 'my_double_array' ) timer_period = 2 self . timer = self . create_timer ( timer_period , self . timer_callback ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_str' ) . get_parameter_value () . string_value my_param_int = self . get_parameter ( \"my_int\" ) . get_parameter_value () . integer_value self . get_logger () . info ( f \"Hello { my_param } ! with int data: { my_param_int } \" ) def main ( args = None ): rclpy . init ( args = args ) node = TestParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"Code example"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#manage-params-from-cli","text":"","title":"Manage params from cli"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#run-node-with-param","text":"Note Run node with arguments from CLI --ros-args -p <param_name>:=<param_value> ros2 run basic simple_param --ros-args -p my_str: = world # Result [ INFO ] [ 1649226981 .611616597 ] [ test_params_rclpy ] : Hello world! with int data: 10 [ INFO ] [ 1649226983 .604038327 ] [ test_params_rclpy ] : Hello world! with int data: 10","title":"Run node with param"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#manage-params-from-cli_1","text":"# list params from all running nodes ros2 param list # Result /simple_params: my_double_array my_int my_str use_sim_time","title":"Manage params from cli"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#yaml-file","text":"simple.yaml simple_params : ros__parameters : my_str : \"world from yaml\" my_int : 100 my_double_array : [ 1.0 , 2.0 , 3.0 ] Warning ros__parameters with double underline","title":"YAML file"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#run-with-yaml","text":"terminal1 ros2 run basic simple_param --ros-args --params-file /home/user/dev_ws/src/basic/config/simple.yaml [ INFO ] [ 1649227913 .033306747 ] [ simple_params ] : Hello world from yaml! with int data: 100 [ INFO ] [ 1649227915 .025466940 ] [ simple_params ] : Hello world from yaml! with int data: 100","title":"Run with yaml"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#params-yaml-and-launch-file","text":"place yaml file in config syb folder copy config folder to output folder using setup.py yaml copy data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( \"share\" , package_name ), glob ( \"launch/*.launch.py\" )), ( os . path . join ( \"share\" , package_name , \"config\" ), glob ( \"config/*\" )), ], simple_param_yaml.launch.py # with yaml file import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'basic' ), 'config' , 'simple.yaml' ) node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ config ] ) ld . add_action ( node ) return ld Warning The name argument in the launch Node object must be the same in the param yaml file simple_param.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ { \"my_str\" : \"hello from launch\" }, { \"my_int\" : 1000 }, { \"my_double_array\" : [ 1.0 , 10.0 ]} ] ) ld . add_action ( node ) return ld","title":"Params yaml and launch file"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#references","text":"rclpy Params Tutorial \u2013 Get and Set ROS2 Params with Python ROS2 YAML For Parameters","title":"References"},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/","tags":["ros2","param","parameter","launch","101"],"text":"LaunchConfiguration is local to the launch file and scoped. DeclareLaunchArgument allows you to expose the argument outside of your launch file. Allowing them to be listed, set, or marked as required when a user launches it from the command line (using ros2 launch) or when including it from another launch file (using IncludeLaunchDescription). basic_demo_args.launch.py import launch def generate_launch_description (): return launch . LaunchDescription ([ launch . actions . DeclareLaunchArgument ( 'msg' , default_value = 'hello world' ), launch . actions . DeclareLaunchArgument ( 'other' ), launch . actions . LogInfo ( msg = launch . substitutions . LaunchConfiguration ( 'msg' )), launch . actions . LogInfo ( msg = launch . substitutions . LaunchConfiguration ( 'other' )), ]) ros2 launch basic demo_args.launch.py other: = \"other message\" # Result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-11-27-22-383934-lap2-90291 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ launch.user ] : hello world [ INFO ] [ launch.user ] : other message Warning other argument is mandatory because has no default value Run launch # ros2 launch -s basic demo_args.launch.py # Result Arguments ( pass arguments as '<name>:=<value>' ) : 'msg' : no description given ( default: 'hello world' ) 'other' : no description given Demo # launch with arguments simple_param_args.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , LogInfo from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () my_str_arg = DeclareLaunchArgument ( \"my_str\" , default_value = \"world\" ) my_str = LaunchConfiguration ( \"my_str\" ) node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ { \"my_str\" : my_str }, { \"my_int\" : 1000 }, { \"my_double_array\" : [ 1.0 , 10.0 ]} ] ) ld . add_action ( my_str_arg ) ld . add_action ( node ) return ld Run and output # Show launch file output ros2 launch basic simple_param_args.launch.py my_str: = worlddddddddddddd # result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-14-10-00-346206-lap2-93999 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ simple_param-1 ] : process started with pid [ 94001 ] [ simple_param-1 ] [ INFO ] [ 1649243402 .580006387 ] [ simple_params ] : Hello worlddddddddddddd! with int data: 1000 [ simple_param-1 ] [ INFO ] [ 1649243402 .580249948 ] [ simple_params ] : array ( 'd' , [ 1 .0, 10 .0 ]) References # what is different between DeclareLaunchArgument and LaunchConfiguration","title":"Part4 - Launch with arguments"},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/#run-launch","text":"ros2 launch -s basic demo_args.launch.py # Result Arguments ( pass arguments as '<name>:=<value>' ) : 'msg' : no description given ( default: 'hello world' ) 'other' : no description given","title":"Run launch"},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/#demo","text":"launch with arguments simple_param_args.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , LogInfo from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () my_str_arg = DeclareLaunchArgument ( \"my_str\" , default_value = \"world\" ) my_str = LaunchConfiguration ( \"my_str\" ) node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ { \"my_str\" : my_str }, { \"my_int\" : 1000 }, { \"my_double_array\" : [ 1.0 , 10.0 ]} ] ) ld . add_action ( my_str_arg ) ld . add_action ( node ) return ld","title":"Demo"},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/#run-and-output","text":"Show launch file output ros2 launch basic simple_param_args.launch.py my_str: = worlddddddddddddd # result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-14-10-00-346206-lap2-93999 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ simple_param-1 ] : process started with pid [ 94001 ] [ simple_param-1 ] [ INFO ] [ 1649243402 .580006387 ] [ simple_params ] : Hello worlddddddddddddd! with int data: 1000 [ simple_param-1 ] [ INFO ] [ 1649243402 .580249948 ] [ simple_params ] : array ( 'd' , [ 1 .0, 10 .0 ])","title":"Run and output"},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/#references","text":"what is different between DeclareLaunchArgument and LaunchConfiguration","title":"References"},{"location":"blog/ROS2/python/tutorials/part5_simple_service/","tags":["ros2","service","101"],"text":"Service # simple_service import rclpy from rclpy.node import Node from std_srvs.srv import SetBool from std_srvs.srv._set_bool import SetBool_Request , SetBool_Response class MinimalService ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_service' ) self . srv = self . create_service ( SetBool , 'echo_service' , self . echo_callback ) def echo_callback ( self , request : SetBool_Request , response : SetBool_Response ) -> SetBool_Response : self . get_logger () . info ( \"Service callback\" ) response . success = request . data response . message = \"success\" return response def main ( args = None ): rclpy . init ( args = args ) minimal_service = MinimalService () rclpy . spin ( minimal_service ) minimal_service . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () Usage # list ros2 service list # Result /echo_service /minimal_service/describe_parameters /minimal_service/get_parameter_types /minimal_service/get_parameters /minimal_service/list_parameters /minimal_service/set_parameters /minimal_service/set_parameters_atomically ros2 service type /echo_service # Result std_srvs/srv/SetBool show interface ros2 interface show std_srvs/srv/SetBool # Result bool data # e.g. for hardware enabling / disabling --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages call # service call ros2 service call /echo_service std_srvs/srv/SetBool \"{data: True}\" # Result requester: making request: std_srvs.srv.SetBool_Request ( data = True ) response: std_srvs.srv.SetBool_Response ( success = True, message = 'success' ) Warning Space are mandatory between data and the value Example: {data: True} from service call Reference # ros2 service Command Line Tool","title":"Part5 - Simple Service"},{"location":"blog/ROS2/python/tutorials/part5_simple_service/#service","text":"simple_service import rclpy from rclpy.node import Node from std_srvs.srv import SetBool from std_srvs.srv._set_bool import SetBool_Request , SetBool_Response class MinimalService ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_service' ) self . srv = self . create_service ( SetBool , 'echo_service' , self . echo_callback ) def echo_callback ( self , request : SetBool_Request , response : SetBool_Response ) -> SetBool_Response : self . get_logger () . info ( \"Service callback\" ) response . success = request . data response . message = \"success\" return response def main ( args = None ): rclpy . init ( args = args ) minimal_service = MinimalService () rclpy . spin ( minimal_service ) minimal_service . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Service"},{"location":"blog/ROS2/python/tutorials/part5_simple_service/#usage","text":"list ros2 service list # Result /echo_service /minimal_service/describe_parameters /minimal_service/get_parameter_types /minimal_service/get_parameters /minimal_service/list_parameters /minimal_service/set_parameters /minimal_service/set_parameters_atomically ros2 service type /echo_service # Result std_srvs/srv/SetBool show interface ros2 interface show std_srvs/srv/SetBool # Result bool data # e.g. for hardware enabling / disabling --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages","title":"Usage"},{"location":"blog/ROS2/python/tutorials/part5_simple_service/#call","text":"service call ros2 service call /echo_service std_srvs/srv/SetBool \"{data: True}\" # Result requester: making request: std_srvs.srv.SetBool_Request ( data = True ) response: std_srvs.srv.SetBool_Response ( success = True, message = 'success' ) Warning Space are mandatory between data and the value Example: {data: True} from service call","title":"call"},{"location":"blog/ROS2/python/tutorials/part5_simple_service/#reference","text":"ros2 service Command Line Tool","title":"Reference"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/","tags":["ros2","parameters"],"text":"Objective # Update node param from cli from code Code # import rclpy from rclpy.node import Node from rcl_interfaces.msg import SetParametersResult class TestParams ( Node ): def __init__ ( self ): super () . __init__ ( 'simple_params' ) self . declare_parameter ( 'my_str' ) self . declare_parameter ( 'my_int' , value = 10 ) self . declare_parameter ( 'my_double_array' ) self . add_on_set_parameters_callback ( self . parameter_callback ) timer_period = 2 self . timer = self . create_timer ( timer_period , self . timer_callback ) def parameter_callback ( self , params ): print ( type ( params )) for param in params : self . get_logger () . info ( param . name ) self . get_logger () . info ( str ( param . value )) self . get_logger () . info ( str ( param . type_ )) return SetParametersResult ( successful = True ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_str' ) . get_parameter_value () . string_value my_param_int = self . get_parameter ( \"my_int\" ) . get_parameter_value () . integer_value my_param_array = self . get_parameter ( \"my_double_array\" ) . get_parameter_value () . double_array_value self . get_logger () . info ( f \"Hello { my_param } ! with int data: { my_param_int } \" ) self . get_logger () . info ( str ( my_param_array )) def main ( args = None ): rclpy . init ( args = args ) node = TestParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () Run # List # ros2 param list /simple_params: my_double_array my_int my_str use_sim_time get / set # get # my_str ros2 param get /simple_params my_str Parameter not set. # my_int ros2 param get /simple_params my_int Integer value is: 10 set # my_int ros2 param set /simple_params my_int 20 # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649395615 .004278881 ] [ simple_params ] : my_int [ INFO ] [ 1649395615 .004490765 ] [ simple_params ] : 20 [ INFO ] [ 1649395615 .004679396 ] [ simple_params ] : Type.INTEGER # my_str ros2 param set /simple_params my_str \"world world\" # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649395751 .117007430 ] [ simple_params ] : my_str [ INFO ] [ 1649395751 .117735309 ] [ simple_params ] : world world [ INFO ] [ 1649395751 .118404909 ] [ simple_params ] : Type.STRING # my_double_array ros2 param set /simple_params my_double_array \"[1.0, 2.0, 3.0]\" # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649396032 .647319212 ] [ simple_params ] : my_double_array [ INFO ] [ 1649396032 .648079309 ] [ simple_params ] : array ( 'd' , [ 1 .0, 2 .0, 3 .0 ]) [ INFO ] [ 1649396032 .648748882 ] [ simple_params ] : Type.DOUBLE_ARRAY Dump / Load # dump #ros2 param dump /simple_params --output-dir /tmp # ros2 param dump /simple_params --print ros2 param dump /simple_params # Result Saving to: ./simple_params.yaml load ros2 param load /simple_params simple_params.yaml # Result Set parameter my_double_array successful Set parameter my_int successful Set parameter my_str successful Set parameter use_sim_time successful Note ros2 param load run the same param callback function like param set","title":"Part6 - Simple parameter handler"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#objective","text":"Update node param from cli from code","title":"Objective"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#code","text":"import rclpy from rclpy.node import Node from rcl_interfaces.msg import SetParametersResult class TestParams ( Node ): def __init__ ( self ): super () . __init__ ( 'simple_params' ) self . declare_parameter ( 'my_str' ) self . declare_parameter ( 'my_int' , value = 10 ) self . declare_parameter ( 'my_double_array' ) self . add_on_set_parameters_callback ( self . parameter_callback ) timer_period = 2 self . timer = self . create_timer ( timer_period , self . timer_callback ) def parameter_callback ( self , params ): print ( type ( params )) for param in params : self . get_logger () . info ( param . name ) self . get_logger () . info ( str ( param . value )) self . get_logger () . info ( str ( param . type_ )) return SetParametersResult ( successful = True ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_str' ) . get_parameter_value () . string_value my_param_int = self . get_parameter ( \"my_int\" ) . get_parameter_value () . integer_value my_param_array = self . get_parameter ( \"my_double_array\" ) . get_parameter_value () . double_array_value self . get_logger () . info ( f \"Hello { my_param } ! with int data: { my_param_int } \" ) self . get_logger () . info ( str ( my_param_array )) def main ( args = None ): rclpy . init ( args = args ) node = TestParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"Code"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#run","text":"","title":"Run"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#list","text":"ros2 param list /simple_params: my_double_array my_int my_str use_sim_time","title":"List"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#get--set","text":"get # my_str ros2 param get /simple_params my_str Parameter not set. # my_int ros2 param get /simple_params my_int Integer value is: 10 set # my_int ros2 param set /simple_params my_int 20 # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649395615 .004278881 ] [ simple_params ] : my_int [ INFO ] [ 1649395615 .004490765 ] [ simple_params ] : 20 [ INFO ] [ 1649395615 .004679396 ] [ simple_params ] : Type.INTEGER # my_str ros2 param set /simple_params my_str \"world world\" # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649395751 .117007430 ] [ simple_params ] : my_str [ INFO ] [ 1649395751 .117735309 ] [ simple_params ] : world world [ INFO ] [ 1649395751 .118404909 ] [ simple_params ] : Type.STRING # my_double_array ros2 param set /simple_params my_double_array \"[1.0, 2.0, 3.0]\" # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649396032 .647319212 ] [ simple_params ] : my_double_array [ INFO ] [ 1649396032 .648079309 ] [ simple_params ] : array ( 'd' , [ 1 .0, 2 .0, 3 .0 ]) [ INFO ] [ 1649396032 .648748882 ] [ simple_params ] : Type.DOUBLE_ARRAY","title":"get / set"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#dump--load","text":"dump #ros2 param dump /simple_params --output-dir /tmp # ros2 param dump /simple_params --print ros2 param dump /simple_params # Result Saving to: ./simple_params.yaml load ros2 param load /simple_params simple_params.yaml # Result Set parameter my_double_array successful Set parameter my_int successful Set parameter my_str successful Set parameter use_sim_time successful Note ros2 param load run the same param callback function like param set","title":"Dump / Load"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/","tags":["ros2","custom","msgs","101"],"text":"Note End/Suffix package name with _interfaces or _msgs Create pkg # Create cpp package # Default build type ament cmake ros pkg create rosmav_msgs package.xml # Add lines <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> CMakeLists.txt # CMakeLists.txt cmake_minimum_required ( VERSION 3.5 ) project ( my_robot_interfaces ) # Default to C++14 if ( NOT CMAKE_CXX_STANDARD ) set ( CMAKE_CXX_STANDARD 14 ) endif () if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( -Wall -Wextra -Wpedantic ) endif () find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"your custom interfaces will be here\" msgs/Attitude.msg ) ament_package () VSCode tips # Add msgs path to python.analysis.extraPaths pylance \"python.analysis.extraPaths\" : [ \"/home/user/dev_ws/install/rosmav_msgs/lib/python3.8/site-packages\" ] interface cli # Show information about ROS interfaces list: List all interface types available package: Output a list of available interface types within one package show: Output the interface definition ros2 interface package rosmav_msgs # Result rosmav_msgs/msg/Attitude # Show # --- separate between request response ros2 interface show std_srvs/srv/Trigger --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages References # ROS2 Create Custom Message (Msg/Srv)","title":"Part7 - Custom msgs and srvs"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#create-pkg","text":"Create cpp package # Default build type ament cmake ros pkg create rosmav_msgs","title":"Create pkg"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#packagexml","text":"Add lines <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group>","title":"package.xml"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#cmakeliststxt","text":"CMakeLists.txt cmake_minimum_required ( VERSION 3.5 ) project ( my_robot_interfaces ) # Default to C++14 if ( NOT CMAKE_CXX_STANDARD ) set ( CMAKE_CXX_STANDARD 14 ) endif () if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( -Wall -Wextra -Wpedantic ) endif () find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"your custom interfaces will be here\" msgs/Attitude.msg ) ament_package ()","title":"CMakeLists.txt"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#vscode-tips","text":"Add msgs path to python.analysis.extraPaths pylance \"python.analysis.extraPaths\" : [ \"/home/user/dev_ws/install/rosmav_msgs/lib/python3.8/site-packages\" ]","title":"VSCode tips"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#interface-cli","text":"Show information about ROS interfaces list: List all interface types available package: Output a list of available interface types within one package show: Output the interface definition ros2 interface package rosmav_msgs # Result rosmav_msgs/msg/Attitude # Show # --- separate between request response ros2 interface show std_srvs/srv/Trigger --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages","title":"interface cli"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#references","text":"ROS2 Create Custom Message (Msg/Srv)","title":"References"},{"location":"blog/ROS2/python/tutorials/part8_qos/","tags":["ros2","qos","101"],"text":"Topics in ROS2 have three dimensions: Name : string Type : msg type like std_msgs/String QoS : Define extra promises about the pub/sub behavior QoS # QoS Policy : QoS \u201ctype\u201d or \u201csetting\u201d QoS Profile : A complete group of all policies QoS Offer : QoS Request : Compatibility : check topic qos settings ros2 topic info --verbose </topic name> Policy # Policy Description History Keep last : only store up to N samples, configurable via the queue depth option. Keep all : store all samples, subject to the configured resource limits of the underlying middleware. Depth Depth of history queue when specifying Keep last Reliability Best effort : attempt to deliver samples, but may lose them if the network is not robust. Reliable : guarantee that samples are delivered, may retry multiple times. Durability Transient local : the publisher becomes responsible for persisting samples for \u201clate-joining\u201d subscribers. Volatile : no attempt is made to persist samples. Deadline Duration : the expected maximum amount of time between subsequent messages being published to a topic Lifespan how long the sent message can live Liveliness Liveliness sets the Lease Duration, and the publisher is considered offline after a certain time Automatic Manual by topic Profile # A QoS profile defines a set of policies that are expected to go well together for a particular use case. for example: service_default sensor_data parameters system_default more info check ROS2 document Sensor data # For sensor data, in most cases it\u2019s more important to receive readings in a timely fashion, rather than ensuring that all of them arrive. That is, developers want the latest samples as soon as they are captured, at the expense of maybe losing some. For that reason the sensor data profile uses best effort reliability and a smaller queue size. profile define rmw_qos_profile_t sensor_data static const rmw_qos_profile_t rmw_qos_profile_sensor_data = { RMW_QOS_POLICY_HISTORY_KEEP_LAST , 5 , RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT , RMW_QOS_POLICY_DURABILITY_VOLATILE , RMW_QOS_DEADLINE_DEFAULT , RMW_QOS_LIFESPAN_DEFAULT , RMW_QOS_POLICY_LIVELINESS_SYSTEM_DEFAULT , RMW_QOS_LIVELINESS_LEASE_DURATION_DEFAULT , false }; fields list history depth reliability durability deadline lifespan liveliness liveliness_lease_duration avoid_ros_namespace_conventions doc Demos # sub code pub cli # Subscriber Node defined with sensor data QoS Pub cli to publish message with compatibility QoS subscriber import rclpy from rclpy.node import Node from rclpy.qos import qos_profile_sensor_data from std_msgs.msg import String class MinimalSubQoS ( Node ): def __init__ ( self ) -> None : super () . __init__ ( \"minimal_sub_qos\" ) self . __sub = self . create_subscription ( String , \"topic\" , self . __cb , qos_profile_sensor_data ) self . __sub def __cb ( self , msg : String ): self . get_logger () . info ( msg . data ) def main ( args = None ): rclpy . init ( args = args ) sub_node = MinimalSubQoS () rclpy . spin ( sub_node ) sub_node . destroy_node () rclpy . shutdown () pub cli ros2 topic pub -1 --qos-profile sensor_data /topic std_msgs/msg/String \"data: hello\" pub code sub cli # publisher import rclpy from rclpy.node import Node from rclpy.qos import qos_profile_sensor_data from std_msgs.msg import String class MinimalPubQos ( Node ): def __init__ ( self ) -> None : super () . __init__ ( \"minimal_pub_qos\" ) self . __pub = self . create_publisher ( String , \"topic\" , qos_profile_sensor_data ) self . __timer = self . create_timer ( timer_period_sec = 0.5 , callback = self . __timer_cb ) self . __counter = 0 def __timer_cb ( self ): msg = String () msg . data = \"Hello QoS {} \" . format ( self . __counter ) self . __pub . publish ( msg ) self . __counter += 1 def main ( args = None ): rclpy . init ( args = args ) pub_node = MinimalPubQos () rclpy . spin ( pub_node ) pub_node . destroy_node () rclpy . shutdown () cli echo topic # work ros2 topic echo --qos-profile sensor_data /topic # work ros2 topic echo /topic # not work ros2 topic echo --qos-profile services_default /topic # work ros2 topic echo --qos-reliability best_effort /topic QoS compatibility # In order for Publisher and Subscriber to establish a connection, the QoS set by the two must be compatible. DDS adopts the Request-Offer model. In short, the communication level provided by Publisher must be greater than or equal to that required by Subscriber. For detailed compatibility table, please refer to ROS2 official document Reference # Profiling ROS2","title":"Part8 - QoS"},{"location":"blog/ROS2/python/tutorials/part8_qos/#qos","text":"QoS Policy : QoS \u201ctype\u201d or \u201csetting\u201d QoS Profile : A complete group of all policies QoS Offer : QoS Request : Compatibility : check topic qos settings ros2 topic info --verbose </topic name>","title":"QoS"},{"location":"blog/ROS2/python/tutorials/part8_qos/#policy","text":"Policy Description History Keep last : only store up to N samples, configurable via the queue depth option. Keep all : store all samples, subject to the configured resource limits of the underlying middleware. Depth Depth of history queue when specifying Keep last Reliability Best effort : attempt to deliver samples, but may lose them if the network is not robust. Reliable : guarantee that samples are delivered, may retry multiple times. Durability Transient local : the publisher becomes responsible for persisting samples for \u201clate-joining\u201d subscribers. Volatile : no attempt is made to persist samples. Deadline Duration : the expected maximum amount of time between subsequent messages being published to a topic Lifespan how long the sent message can live Liveliness Liveliness sets the Lease Duration, and the publisher is considered offline after a certain time Automatic Manual by topic","title":"Policy"},{"location":"blog/ROS2/python/tutorials/part8_qos/#profile","text":"A QoS profile defines a set of policies that are expected to go well together for a particular use case. for example: service_default sensor_data parameters system_default more info check ROS2 document","title":"Profile"},{"location":"blog/ROS2/python/tutorials/part8_qos/#sensor-data","text":"For sensor data, in most cases it\u2019s more important to receive readings in a timely fashion, rather than ensuring that all of them arrive. That is, developers want the latest samples as soon as they are captured, at the expense of maybe losing some. For that reason the sensor data profile uses best effort reliability and a smaller queue size. profile define rmw_qos_profile_t sensor_data static const rmw_qos_profile_t rmw_qos_profile_sensor_data = { RMW_QOS_POLICY_HISTORY_KEEP_LAST , 5 , RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT , RMW_QOS_POLICY_DURABILITY_VOLATILE , RMW_QOS_DEADLINE_DEFAULT , RMW_QOS_LIFESPAN_DEFAULT , RMW_QOS_POLICY_LIVELINESS_SYSTEM_DEFAULT , RMW_QOS_LIVELINESS_LEASE_DURATION_DEFAULT , false }; fields list history depth reliability durability deadline lifespan liveliness liveliness_lease_duration avoid_ros_namespace_conventions doc","title":"Sensor data"},{"location":"blog/ROS2/python/tutorials/part8_qos/#demos","text":"","title":"Demos"},{"location":"blog/ROS2/python/tutorials/part8_qos/#sub-code-pub-cli","text":"Subscriber Node defined with sensor data QoS Pub cli to publish message with compatibility QoS subscriber import rclpy from rclpy.node import Node from rclpy.qos import qos_profile_sensor_data from std_msgs.msg import String class MinimalSubQoS ( Node ): def __init__ ( self ) -> None : super () . __init__ ( \"minimal_sub_qos\" ) self . __sub = self . create_subscription ( String , \"topic\" , self . __cb , qos_profile_sensor_data ) self . __sub def __cb ( self , msg : String ): self . get_logger () . info ( msg . data ) def main ( args = None ): rclpy . init ( args = args ) sub_node = MinimalSubQoS () rclpy . spin ( sub_node ) sub_node . destroy_node () rclpy . shutdown () pub cli ros2 topic pub -1 --qos-profile sensor_data /topic std_msgs/msg/String \"data: hello\"","title":"sub code pub cli"},{"location":"blog/ROS2/python/tutorials/part8_qos/#pub-code-sub-cli","text":"publisher import rclpy from rclpy.node import Node from rclpy.qos import qos_profile_sensor_data from std_msgs.msg import String class MinimalPubQos ( Node ): def __init__ ( self ) -> None : super () . __init__ ( \"minimal_pub_qos\" ) self . __pub = self . create_publisher ( String , \"topic\" , qos_profile_sensor_data ) self . __timer = self . create_timer ( timer_period_sec = 0.5 , callback = self . __timer_cb ) self . __counter = 0 def __timer_cb ( self ): msg = String () msg . data = \"Hello QoS {} \" . format ( self . __counter ) self . __pub . publish ( msg ) self . __counter += 1 def main ( args = None ): rclpy . init ( args = args ) pub_node = MinimalPubQos () rclpy . spin ( pub_node ) pub_node . destroy_node () rclpy . shutdown () cli echo topic # work ros2 topic echo --qos-profile sensor_data /topic # work ros2 topic echo /topic # not work ros2 topic echo --qos-profile services_default /topic # work ros2 topic echo --qos-reliability best_effort /topic","title":"pub code sub cli"},{"location":"blog/ROS2/python/tutorials/part8_qos/#qos-compatibility","text":"In order for Publisher and Subscriber to establish a connection, the QoS set by the two must be compatible. DDS adopts the Request-Offer model. In short, the communication level provided by Publisher must be greater than or equal to that required by Subscriber. For detailed compatibility table, please refer to ROS2 official document","title":"QoS compatibility"},{"location":"blog/ROS2/python/tutorials/part8_qos/#reference","text":"Profiling ROS2","title":"Reference"},{"location":"blog/ROS2/python/tutorials/part9_executers/","tags":["python","executers"],"text":"minimal_timer import rclpy from rclpy.node import Node class MinimalTimer ( Node ): def __init__ ( self ): super () . __init__ ( \"simple_timer\" ) timer_period = 1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): self . get_logger () . info ( f 'timer tick: { self . i } ' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_timer = MinimalTimer () rclpy . spin ( minimal_timer ) minimal_timer . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () minimal_sta import rclpy from rclpy.node import Node from rclpy.executors import SingleThreadedExecutor class MinimalTimer ( Node ): def __init__ ( self ): super () . __init__ ( \"simple_timer\" ) timer_period = 1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): self . get_logger () . info ( f 'timer tick: { self . i } ' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_timer = MinimalTimer () ste = SingleThreadedExecutor () ste . add_node ( minimal_timer ) ste . spin () minimal_timer . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () Reference # test_executor Execution and Callbacks\u00b6","title":"Part9 - executers"},{"location":"blog/ROS2/python/tutorials/part9_executers/#reference","text":"test_executor Execution and Callbacks\u00b6","title":"Reference"},{"location":"blog/ROS2/python/tutorials/pub_sub/","tags":["ros2","pub","sub","101"],"text":"Publisher # node source code # Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_publisher\" ) self . publisher_ = self . create_publisher ( String , \"minimal\" , 10 ) timer_period = 1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = f \"pub simple: { self . i } \" self . publisher_ . publish ( msg ) self . get_logger () . info ( f 'Publishing: \" { msg . data } \"' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () # Spin the node so the callback function is called. rclpy . spin ( minimal_publisher ) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () setup.py # Add entry point <node name>.<module name>:<entry func> entry_points = { 'console_scripts' : [ \"simple_pub = basic.simple_pub:main\" ], } package.xml # Add this lines before <export> tag <exec_depend> rclpy </exec_depend> <exec_depend> std_msgs </exec_depend> Note exec_depend Declares a rosdep key or ROS package name that this package needs at execution-time build and run # Build colcon build --symlink-install --packages-select basic Source it source install/setup.bash Run ros2 run basic simple_pub output [ INFO ] [ 1649181441 .732282742 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ INFO ] [ 1649181442 .713229723 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ INFO ] [ 1649181443 .713351778 ] [ minimal_publisher ] : Publishing: \"pub simple: 2\" cli # ros2 topic # # list ros2 topic list #result /parameter_events /rosout /minimal # info ros2 topic info /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Subscription count: 0 # Echo ros2 topic echo /minimal # Result data: 'pub simple: 110' --- data: 'pub simple: 111' --- topic verbose info # verbose info ros2 topic info -v /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Node name: minimal_publisher Node namespace: / Topic type: std_msgs/msg/String Endpoint type: PUBLISHER GID: 01 .0f.d1.c7.10.ba.23.e1.01.00.00.00.00.00.11.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE Durability: RMW_QOS_POLICY_DURABILITY_VOLATILE Lifespan: 2147483651294967295 nanoseconds Deadline: 2147483651294967295 nanoseconds Liveliness: RMW_QOS_POLICY_LIVELINESS_AUTOMATIC Liveliness lease duration: 2147483651294967295 nanoseconds Subscription count: 0 Subscriber # node source code # MinimalSubscriber Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalSubscriber ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_subscriber\" ) # The node subscribes to messages of type std_msgs/String, # over a topic named: /minimal # The callback function is called as soon as a message is received. # The maximum number of queued messages is 10. self . subscription = self . create_subscription ( String , \"minimal\" , self . __sub_callback , 10 ) def __sub_callback ( self , msg ): self . get_logger () . info ( f \"I heard: { msg . data } \" ) def main ( args = None ): rclpy . init ( args = args ) minimal_subscriber = MinimalSubscriber () rclpy . spin ( minimal_subscriber ) minimal_subscriber . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () setup.py # Add entry point entry_points = { 'console_scripts' : [ \"simple_sub = basic.simple_sub:main\" ], } build and run # Build colcon build --symlink-install --packages-select basic cli # Run subscriber node Terminal1 ros2 run basic simple_sub # Result after pub from terminal 2 [ INFO ] [ 1649213924 .055190916 ] [ minimal_subscriber ] : I heard: hello [ INFO ] [ 1649213925 .036938799 ] [ minimal_subscriber ] : I heard: hello Terminal2 # pub message ros2 topic pub /minimal std_msgs/msg/String \"{data: 'hello'}\" # pub only one message ros2 topic pub -1 /minimal std_msgs/msg/String \"{data: 'hello'}\" References # package.xml specification ros2 topic Command Line Tool \u2013 Debug ROS2 Topics From the Terminal Create a Basic Publisher and Subscriber (Python) | ROS2 Foxy","title":"Part1 - Simple PUB / SUB"},{"location":"blog/ROS2/python/tutorials/pub_sub/#publisher","text":"","title":"Publisher"},{"location":"blog/ROS2/python/tutorials/pub_sub/#node-source-code","text":"Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_publisher\" ) self . publisher_ = self . create_publisher ( String , \"minimal\" , 10 ) timer_period = 1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = f \"pub simple: { self . i } \" self . publisher_ . publish ( msg ) self . get_logger () . info ( f 'Publishing: \" { msg . data } \"' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () # Spin the node so the callback function is called. rclpy . spin ( minimal_publisher ) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"node source code"},{"location":"blog/ROS2/python/tutorials/pub_sub/#setuppy","text":"Add entry point <node name>.<module name>:<entry func> entry_points = { 'console_scripts' : [ \"simple_pub = basic.simple_pub:main\" ], }","title":"setup.py"},{"location":"blog/ROS2/python/tutorials/pub_sub/#packagexml","text":"Add this lines before <export> tag <exec_depend> rclpy </exec_depend> <exec_depend> std_msgs </exec_depend> Note exec_depend Declares a rosdep key or ROS package name that this package needs at execution-time","title":"package.xml"},{"location":"blog/ROS2/python/tutorials/pub_sub/#build-and-run","text":"Build colcon build --symlink-install --packages-select basic Source it source install/setup.bash Run ros2 run basic simple_pub output [ INFO ] [ 1649181441 .732282742 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ INFO ] [ 1649181442 .713229723 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ INFO ] [ 1649181443 .713351778 ] [ minimal_publisher ] : Publishing: \"pub simple: 2\"","title":"build and run"},{"location":"blog/ROS2/python/tutorials/pub_sub/#cli","text":"","title":"cli"},{"location":"blog/ROS2/python/tutorials/pub_sub/#ros2-topic","text":"# list ros2 topic list #result /parameter_events /rosout /minimal # info ros2 topic info /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Subscription count: 0 # Echo ros2 topic echo /minimal # Result data: 'pub simple: 110' --- data: 'pub simple: 111' ---","title":"ros2 topic"},{"location":"blog/ROS2/python/tutorials/pub_sub/#topic-verbose-info","text":"verbose info ros2 topic info -v /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Node name: minimal_publisher Node namespace: / Topic type: std_msgs/msg/String Endpoint type: PUBLISHER GID: 01 .0f.d1.c7.10.ba.23.e1.01.00.00.00.00.00.11.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE Durability: RMW_QOS_POLICY_DURABILITY_VOLATILE Lifespan: 2147483651294967295 nanoseconds Deadline: 2147483651294967295 nanoseconds Liveliness: RMW_QOS_POLICY_LIVELINESS_AUTOMATIC Liveliness lease duration: 2147483651294967295 nanoseconds Subscription count: 0","title":"topic verbose info"},{"location":"blog/ROS2/python/tutorials/pub_sub/#subscriber","text":"","title":"Subscriber"},{"location":"blog/ROS2/python/tutorials/pub_sub/#node-source-code_1","text":"MinimalSubscriber Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalSubscriber ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_subscriber\" ) # The node subscribes to messages of type std_msgs/String, # over a topic named: /minimal # The callback function is called as soon as a message is received. # The maximum number of queued messages is 10. self . subscription = self . create_subscription ( String , \"minimal\" , self . __sub_callback , 10 ) def __sub_callback ( self , msg ): self . get_logger () . info ( f \"I heard: { msg . data } \" ) def main ( args = None ): rclpy . init ( args = args ) minimal_subscriber = MinimalSubscriber () rclpy . spin ( minimal_subscriber ) minimal_subscriber . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"node source code"},{"location":"blog/ROS2/python/tutorials/pub_sub/#setuppy_1","text":"Add entry point entry_points = { 'console_scripts' : [ \"simple_sub = basic.simple_sub:main\" ], }","title":"setup.py"},{"location":"blog/ROS2/python/tutorials/pub_sub/#build-and-run_1","text":"Build colcon build --symlink-install --packages-select basic","title":"build and run"},{"location":"blog/ROS2/python/tutorials/pub_sub/#cli_1","text":"Run subscriber node Terminal1 ros2 run basic simple_sub # Result after pub from terminal 2 [ INFO ] [ 1649213924 .055190916 ] [ minimal_subscriber ] : I heard: hello [ INFO ] [ 1649213925 .036938799 ] [ minimal_subscriber ] : I heard: hello Terminal2 # pub message ros2 topic pub /minimal std_msgs/msg/String \"{data: 'hello'}\" # pub only one message ros2 topic pub -1 /minimal std_msgs/msg/String \"{data: 'hello'}\"","title":"cli"},{"location":"blog/ROS2/python/tutorials/pub_sub/#references","text":"package.xml specification ros2 topic Command Line Tool \u2013 Debug ROS2 Topics From the Terminal Create a Basic Publisher and Subscriber (Python) | ROS2 Foxy","title":"References"},{"location":"blog/ROS2/rqt/custom_plugin/step1/","tags":["rqt","plugin"],"text":"ros2 pkg create rqt_mypkg --build-type ament_python --dependencies rclpy rqt_gui rqt_gui_py src/rqt_mypkg/ \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 plugin.xml \u251c\u2500\u2500 resource \u2502 \u251c\u2500\u2500 MyPlugin.ui \u2502 \u2514\u2500\u2500 rqt_mypkg \u251c\u2500\u2500 rqt_mypkg \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 my_module.py \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 setup.cfg \u2514\u2500\u2500 setup.py package.xml # Add line to export section package.xml <export> <build_type> ament_python </build_type> <rqt_gui plugin= \"${prefix}/plugin.xml\" /> </export> plugin.xml # Place file in package root folder package.xml <library path= \"src\" > <class name= \"My Plugin\" type= \"rqt_mypkg.my_module.MyPlugin\" base_class_type= \"rqt_gui_py::Plugin\" > <description> An example Python GUI plugin to create a great user interface. </description> <qtgui> <group> <label> Visualization </label> </group> <!--<group> <label>Subgroup</label> </group> --> <label> My first Python Plugin </label> <icon type= \"theme\" > system-help </icon> <statustip> Great user interface to provide real value. </statustip> </qtgui> </class> </library> simple plugin file # Resources # rqt_tf_tree rqt python plugin","title":"ROS2 custom RQT plugin"},{"location":"blog/ROS2/rqt/custom_plugin/step1/#packagexml","text":"Add line to export section package.xml <export> <build_type> ament_python </build_type> <rqt_gui plugin= \"${prefix}/plugin.xml\" /> </export>","title":"package.xml"},{"location":"blog/ROS2/rqt/custom_plugin/step1/#pluginxml","text":"Place file in package root folder package.xml <library path= \"src\" > <class name= \"My Plugin\" type= \"rqt_mypkg.my_module.MyPlugin\" base_class_type= \"rqt_gui_py::Plugin\" > <description> An example Python GUI plugin to create a great user interface. </description> <qtgui> <group> <label> Visualization </label> </group> <!--<group> <label>Subgroup</label> </group> --> <label> My first Python Plugin </label> <icon type= \"theme\" > system-help </icon> <statustip> Great user interface to provide real value. </statustip> </qtgui> </class> </library>","title":"plugin.xml"},{"location":"blog/ROS2/rqt/custom_plugin/step1/#simple-plugin-file","text":"","title":"simple plugin file"},{"location":"blog/ROS2/rqt/custom_plugin/step1/#resources","text":"rqt_tf_tree rqt python plugin","title":"Resources"},{"location":"blog/ROS2/rviz/","tags":["rviz","rviz2"],"text":"Tips # Launch rviz node with config # setup.py ( os . path . join ( 'share' , package_name , \"config\" ), glob ( 'config/*.rviz' )) launch.py from launch import LaunchDescription from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory import os PACKAGE_NAME = \"py_tutorial_pkg\" def generate_launch_description (): ld = LaunchDescription () rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( get_package_share_directory ( PACKAGE_NAME ), 'config' , 'rviz_turtlesim_tf.rviz' )] ) ld . add_action ( rviz_node ) return ld Reference # rviz marker rviz tutorials","title":"ROS2 RVIZ2"},{"location":"blog/ROS2/rviz/#tips","text":"","title":"Tips"},{"location":"blog/ROS2/rviz/#launch-rviz-node-with-config","text":"setup.py ( os . path . join ( 'share' , package_name , \"config\" ), glob ( 'config/*.rviz' )) launch.py from launch import LaunchDescription from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory import os PACKAGE_NAME = \"py_tutorial_pkg\" def generate_launch_description (): ld = LaunchDescription () rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( get_package_share_directory ( PACKAGE_NAME ), 'config' , 'rviz_turtlesim_tf.rviz' )] ) ld . add_action ( rviz_node ) return ld","title":"Launch rviz node with config"},{"location":"blog/ROS2/rviz/#reference","text":"rviz marker rviz tutorials","title":"Reference"},{"location":"blog/ROS2/rviz/2d_goal_pose/","tags":["rviz","pose"],"text":"ros2 topic list # /goal_pose ros2 topic info /goal_pose # Type: geometry_msgs/msg/PoseStamped Publisher count: 1 ros2 interface show geometry_msgs/msg/PoseStamped # A Pose with reference coordinate frame and timestamp std_msgs/Header header builtin_interfaces/Time stamp int32 sec uint32 nanosec string frame_id Pose pose Point position float64 x float64 y float64 z Quaternion orientation float64 x 0 float64 y 0 float64 z 0 float64 w 1","title":"2D goal pose"},{"location":"blog/ROS2/rviz/marker_hello/","tags":["rviz","marker"],"text":"ROS Doc markers The Markers display allows programmatic addition of various primitive shapes to the RViz 3D view by sending a visualization_msgs/Marker or visualization_msgs/MarkerArray message basic_marker.py import rclpy from rclpy.node import Node from visualization_msgs.msg import Marker from geometry_msgs.msg import Quaternion , Pose , Point , Vector3 from std_msgs.msg import Header , ColorRGBA from builtin_interfaces.msg import Duration class MyNode ( Node ): def __init__ ( self ): node_name = \"basic_rviz_marker\" super () . __init__ ( node_name ) self . get_logger () . info ( \"Hello rviz marker\" ) self . __marker_publisher = self . create_publisher ( Marker , \"visualization_marker\" , 5 ) self . __timer = self . create_timer ( 2 , self . __timer_handler ) self . __timer self . __counter = 0 def __timer_handler ( self ): self . __counter += 1 self . __show_text_in_rviz ( \"Hello marker: {} \" . format ( self . __counter )) def __show_text_in_rviz ( self , text ): pose = Pose ( position = Point ( x = 0.5 , y = 0.5 , z = 1.45 ), orientation = Quaternion ( x = 0.0 , y = 0.0 , z = 0.0 , w = 1.0 )) marker = Marker ( type = Marker . TEXT_VIEW_FACING , id = 0 , lifetime = Duration ( sec = 1 ), pose = pose , scale = Vector3 ( x = 0.6 , y = 0.6 , z = 0.6 ), header = Header ( frame_id = 'world' ), color = ColorRGBA ( r = 0.0 , g = 1.0 , b = 0.0 , a = 0.8 ), text = text ) self . __marker_publisher . publish ( marker ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main () Reference # markers","title":"Add Marker to RVIZ"},{"location":"blog/ROS2/rviz/marker_hello/#reference","text":"markers","title":"Reference"},{"location":"blog/ROS2/sdf/meshes/","tags":["sdf"],"text":"<visual name= 'base_link_visual' > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh> <scale> 1 1 1 </scale> <uri> model://model_name/meshes/textured.dae </uri> </mesh> </geometry> </visual> <visual name= 'base_link_visual' > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh> <scale> 1 1 1 </scale> <uri> file://path_to_dae/textured.dae </uri> </mesh> </geometry> </visual> Warning SDF uses file instead of package Warning RVIZ not support model uri","title":"Load meshes"},{"location":"blog/ROS2/sdf/tips/","tags":["sdf","tips"],"text":"validate / check sdf file # ign sdf -k <sdf.file>","title":"SDF specification and tools"},{"location":"blog/ROS2/sdf/tips/#validate--check-sdf-file","text":"ign sdf -k <sdf.file>","title":"validate / check sdf file"},{"location":"blog/ROS2/tf2/","tags":["ros2"],"text":"transformations # A transform specifies how data expressed in a frame can be transformed into a different frame tf # Any node can use the tf2 libraries to broadcast a transform from one frame to another each frame is defined by one (and only one) transform from another frame, but can have any number of frames dependent on it, this create a tree structure of frames the library can calculat any transformation between tow frames (nodes) tf2 library using topics /tf and /tf_static th handle communication, because the tf2 library pub/sub the messages we call it broadcasting and listening tf_echo : returns the transforms between any connected frames # install tf2 tools and helper libraries # sudo apt-get install \\ ros-humble-tf2-tools \\ ros-humble-tf-transformations \\ ros-humble-rqt-tf-tree tutorials # cpp broadcaster Reference # Getting Ready for ROS Part 6: The Transform System (TF) ROS Transformations and frames","title":"tf2"},{"location":"blog/ROS2/tf2/#transformations","text":"A transform specifies how data expressed in a frame can be transformed into a different frame","title":"transformations"},{"location":"blog/ROS2/tf2/#tf","text":"Any node can use the tf2 libraries to broadcast a transform from one frame to another each frame is defined by one (and only one) transform from another frame, but can have any number of frames dependent on it, this create a tree structure of frames the library can calculat any transformation between tow frames (nodes) tf2 library using topics /tf and /tf_static th handle communication, because the tf2 library pub/sub the messages we call it broadcasting and listening","title":"tf"},{"location":"blog/ROS2/tf2/#tf_echo--returns-the-transforms-between-any-connected-frames","text":"","title":"tf_echo:  returns the transforms between any connected frames"},{"location":"blog/ROS2/tf2/#install-tf2-tools-and-helper-libraries","text":"sudo apt-get install \\ ros-humble-tf2-tools \\ ros-humble-tf-transformations \\ ros-humble-rqt-tf-tree","title":"install tf2 tools and helper libraries"},{"location":"blog/ROS2/tf2/#tutorials","text":"cpp broadcaster","title":"tutorials"},{"location":"blog/ROS2/tf2/#reference","text":"Getting Ready for ROS Part 6: The Transform System (TF) ROS Transformations and frames","title":"Reference"},{"location":"blog/ROS2/tf2/static_tf/","tags":["tf2","ros2"],"text":"static tf broadcast # ros2 run tf2_ros static_transform_publisher \\ x y z \\ yaw pitch roll \\ parent_frame \\ child_frame Demo # Broadcast two robot tf frame relative to world frame # world robot1 ros2 run tf2_ros static_transform_publisher 2 1 0 0 0 0 world robot_1 # world robot2 ros2 run tf2_ros static_transform_publisher 4 -2 0 0 0 0 world robot_2 echo # check the matrix between two frames ros2 run tf2_ros tf2_echo robot_1 robot_2 At time 0.0 - Translation: [2.000, -3.000, 0.000] - Rotation: in Quaternion [0.000, 0.000, 0.000, 1.000] - Rotation: in RPY (radian) [0.000, -0.000, 0.000] - Rotation: in RPY (degree) [0.000, -0.000, 0.000] - Matrix: 1.000 0.000 0.000 2.000 0.000 1.000 0.000 -3.000 0.000 0.000 1.000 0.000 0.000 0.000 0.000 1.000 tf tree # ros2 run rqt_tf_tree rqt_tf_tree rviz # topic # ros2 topic list # /parameter_events /rosout /tf_static ros2 topic echo /tf_static # publish one message because it's static tf #ros2 topic info /tf_static #Type: tf2_msgs/msg/TFMessage transforms: - header: stamp: sec: 1665725225 nanosec: 204816367 frame_id: world child_frame_id: robot_1 transform: translation: x: 2 .0 y: 1 .0 z: 0 .0 rotation: x: 0 .0 y: 0 .0 z: 0 .0 w: 1 .0 --- transforms: - header: stamp: sec: 1665725576 nanosec: 941586267 frame_id: world child_frame_id: robot_2 transform: translation: x: 4 .0 y: -2.0 z: 0 .0 rotation: x: 0 .0 y: 0 .0 z: 0 .0 w: 1 .0 Reference # Getting Ready for ROS Part 6: The Transform System (TF)","title":"tf2 static tf"},{"location":"blog/ROS2/tf2/static_tf/#static-tf-broadcast","text":"ros2 run tf2_ros static_transform_publisher \\ x y z \\ yaw pitch roll \\ parent_frame \\ child_frame","title":"static tf broadcast"},{"location":"blog/ROS2/tf2/static_tf/#demo","text":"Broadcast two robot tf frame relative to world frame # world robot1 ros2 run tf2_ros static_transform_publisher 2 1 0 0 0 0 world robot_1 # world robot2 ros2 run tf2_ros static_transform_publisher 4 -2 0 0 0 0 world robot_2","title":"Demo"},{"location":"blog/ROS2/tf2/static_tf/#echo","text":"check the matrix between two frames ros2 run tf2_ros tf2_echo robot_1 robot_2 At time 0.0 - Translation: [2.000, -3.000, 0.000] - Rotation: in Quaternion [0.000, 0.000, 0.000, 1.000] - Rotation: in RPY (radian) [0.000, -0.000, 0.000] - Rotation: in RPY (degree) [0.000, -0.000, 0.000] - Matrix: 1.000 0.000 0.000 2.000 0.000 1.000 0.000 -3.000 0.000 0.000 1.000 0.000 0.000 0.000 0.000 1.000","title":"echo"},{"location":"blog/ROS2/tf2/static_tf/#tf-tree","text":"ros2 run rqt_tf_tree rqt_tf_tree","title":"tf tree"},{"location":"blog/ROS2/tf2/static_tf/#rviz","text":"","title":"rviz"},{"location":"blog/ROS2/tf2/static_tf/#topic","text":"ros2 topic list # /parameter_events /rosout /tf_static ros2 topic echo /tf_static # publish one message because it's static tf #ros2 topic info /tf_static #Type: tf2_msgs/msg/TFMessage transforms: - header: stamp: sec: 1665725225 nanosec: 204816367 frame_id: world child_frame_id: robot_1 transform: translation: x: 2 .0 y: 1 .0 z: 0 .0 rotation: x: 0 .0 y: 0 .0 z: 0 .0 w: 1 .0 --- transforms: - header: stamp: sec: 1665725576 nanosec: 941586267 frame_id: world child_frame_id: robot_2 transform: translation: x: 4 .0 y: -2.0 z: 0 .0 rotation: x: 0 .0 y: 0 .0 z: 0 .0 w: 1 .0","title":"topic"},{"location":"blog/ROS2/tf2/static_tf/#reference","text":"Getting Ready for ROS Part 6: The Transform System (TF)","title":"Reference"},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/","tags":["tf2","cpp"],"text":"code from : https://docs.ros.org/en/humble/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.html ```bash terminal1 turtlesim # ros2 run turtlesim turtlesim_node ```bash terminal2 # turtlesim teleop ros2 run turtlesim turtle_teleop_key ```bash terminal3 our node translate turtle pose to tf message # ros2 run learning_tf2 tf2_broadcaster ```bash terminal4 # tf echo tool ros2 run tf2_ros tf2_echo world turtle ```bash terminal5 tf tree using rqt # ros2 run rqt_tf_tree rqt_tf_tree \u2013force-discover ```bash terminal6 # rviz ros2 run rviz2 rviz2 Reference # Learn TF2 \u2013 ROS2 Concepts in Practice","title":"tf2 cpp broadcaster"},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/#turtlesim","text":"ros2 run turtlesim turtlesim_node ```bash terminal2 # turtlesim teleop ros2 run turtlesim turtle_teleop_key ```bash terminal3","title":"turtlesim"},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/#our-node-translate-turtle-pose-to-tf-message","text":"ros2 run learning_tf2 tf2_broadcaster ```bash terminal4 # tf echo tool ros2 run tf2_ros tf2_echo world turtle ```bash terminal5","title":"our node translate turtle pose to tf message"},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/#tf-tree-using-rqt","text":"ros2 run rqt_tf_tree rqt_tf_tree \u2013force-discover ```bash terminal6 # rviz ros2 run rviz2 rviz2","title":"tf tree using rqt"},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/#reference","text":"Learn TF2 \u2013 ROS2 Concepts in Practice","title":"Reference"},{"location":"blog/ROS2/tf2/tutorials/","tags":["tag"],"text":"turtlesim tf2 python demo","title":"tf tutorial"},{"location":"blog/ROS2/tf2/tutorials/turtlesim_tf2/","tags":["tf2","python"],"text":"sudo apt install ros-humble-turtle-tf2-py Reference # geometry_tutorials","title":"tf2 turtle sim python demo"},{"location":"blog/ROS2/tf2/tutorials/turtlesim_tf2/#reference","text":"geometry_tutorials","title":"Reference"},{"location":"blog/ROS2/tutorials/custom_debian_package/","tags":["ros2","deb","package"],"text":"Building ROS2 custom debian package # Build debian deb file from ROS2 package install # sudo apt install python3-bloom python3-rosdep fakeroot debhelper dh-python prerequisites # Package dependencies must be install All dependencies must be declared in package.xml package file bloom # Bloom is a build automation tool Changelog # A changelog is a file that contains a condensed list of all important changes made to a project The changelog is a list of commits git log --oneline catkin_generate_changelog catkin_generate_changelog --all package version # ROS2 python package has two files with version fields - package.xml - setup.py To maintain version use catkin_prepare_release that maintain both files and create tag and change log Run from workspace root catkin_prepare_release --version 0 .0.2 -y --no-push version semantic Version number has three parts Major.Minor.Path create package # from package root folder (not workspace) bloom-generate rosdebian fakeroot debian/rules binary deb file create package in the parent folder Reference # Building a custom Debian package How to release a ROS 2 binary package \u2013 Part 3","title":"Building ROS2 custom debian package"},{"location":"blog/ROS2/tutorials/custom_debian_package/#building-ros2-custom-debian-package","text":"Build debian deb file from ROS2 package","title":"Building ROS2 custom debian package"},{"location":"blog/ROS2/tutorials/custom_debian_package/#install","text":"sudo apt install python3-bloom python3-rosdep fakeroot debhelper dh-python","title":"install"},{"location":"blog/ROS2/tutorials/custom_debian_package/#prerequisites","text":"Package dependencies must be install All dependencies must be declared in package.xml package file","title":"prerequisites"},{"location":"blog/ROS2/tutorials/custom_debian_package/#bloom","text":"Bloom is a build automation tool","title":"bloom"},{"location":"blog/ROS2/tutorials/custom_debian_package/#changelog","text":"A changelog is a file that contains a condensed list of all important changes made to a project The changelog is a list of commits git log --oneline catkin_generate_changelog catkin_generate_changelog --all","title":"Changelog"},{"location":"blog/ROS2/tutorials/custom_debian_package/#package-version","text":"ROS2 python package has two files with version fields - package.xml - setup.py To maintain version use catkin_prepare_release that maintain both files and create tag and change log Run from workspace root catkin_prepare_release --version 0 .0.2 -y --no-push version semantic Version number has three parts Major.Minor.Path","title":"package version"},{"location":"blog/ROS2/tutorials/custom_debian_package/#create-package","text":"from package root folder (not workspace) bloom-generate rosdebian fakeroot debian/rules binary deb file create package in the parent folder","title":"create package"},{"location":"blog/ROS2/tutorials/custom_debian_package/#reference","text":"Building a custom Debian package How to release a ROS 2 binary package \u2013 Part 3","title":"Reference"},{"location":"blog/ROS2/tutorials/logging/","tags":["ros2","tutorial","logging"],"text":"ROS2 logging # ROS2 logging control and config config # ros2 wiki logging environment variables # RCUTILS_COLORIZED_OUTPUT ROS_LOG_DIR RCUTILS_LOGGING_USE_STDOUT RCUTILS_LOGGING_BUFFERED_STREAM RCUTILS_CONSOLE_OUTPUT_FORMAT RCUTILS_CONSOLE_OUTPUT_FORMAT # export RCUTILS_CONSOLE_OUTPUT_FORMAT=\"[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})\" RCUTILS_COLORIZED_OUTPUT # colorize logging Add environment variable to .bashrc export RCUTILS_COLORIZED_OUTPUT=1 Control # throttled # throttled node . get_logger () . error ( \"log every sec\" , throttle_duration_sec = 1 ) one time # log only first time node . get_logger () . info ( f 'log only once' , once = True ) skip # log, skip first time node . get_logger () . info ( f 'log only once' , skip_first = True ) logging control demo # control node log level Set logging format very simple node with logging #!/usr/bin/env python3 import rclpy from rclpy.node import Node class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal\" super () . __init__ ( node_name ) self . get_logger () . info ( \"debug\" ) self . get_logger () . info ( \"info\" ) self . get_logger () . warning ( \"warning\" ) self . get_logger () . error ( \"error\" ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () node.launch.py from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import SetEnvironmentVariable def generate_launch_description (): log_format_env = SetEnvironmentVariable ( name = \"RCUTILS_CONSOLE_OUTPUT_FORMAT\" , value = \"[ {severity} {time} ] [ {name} ( {line_number} )]: {message} \" ) node = Node ( name = \"minimal_node\" , package = \"pkg_launch_tutorial\" , executable = \"minimal_node.py\" , arguments = [ '--ros-args' , '--log-level' , 'info' ] ) ld = LaunchDescription () ld . add_action ( log_format_env ) ld . add_action ( node ) return ld log external config ros2 run some_package some_ros_executable --ros-args --log-config-file some_log.config ROS2 logging base on spdlog for know spdlog not support external config check humble code","title":"ROS2 logging"},{"location":"blog/ROS2/tutorials/logging/#ros2-logging","text":"ROS2 logging control and config","title":"ROS2 logging"},{"location":"blog/ROS2/tutorials/logging/#config","text":"ros2 wiki logging","title":"config"},{"location":"blog/ROS2/tutorials/logging/#environment-variables","text":"RCUTILS_COLORIZED_OUTPUT ROS_LOG_DIR RCUTILS_LOGGING_USE_STDOUT RCUTILS_LOGGING_BUFFERED_STREAM RCUTILS_CONSOLE_OUTPUT_FORMAT","title":"environment variables"},{"location":"blog/ROS2/tutorials/logging/#rcutils_console_output_format","text":"export RCUTILS_CONSOLE_OUTPUT_FORMAT=\"[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})\"","title":"RCUTILS_CONSOLE_OUTPUT_FORMAT"},{"location":"blog/ROS2/tutorials/logging/#rcutils_colorized_output","text":"colorize logging Add environment variable to .bashrc export RCUTILS_COLORIZED_OUTPUT=1","title":"RCUTILS_COLORIZED_OUTPUT"},{"location":"blog/ROS2/tutorials/logging/#control","text":"","title":"Control"},{"location":"blog/ROS2/tutorials/logging/#throttled","text":"throttled node . get_logger () . error ( \"log every sec\" , throttle_duration_sec = 1 )","title":"throttled"},{"location":"blog/ROS2/tutorials/logging/#one-time","text":"log only first time node . get_logger () . info ( f 'log only once' , once = True )","title":"one time"},{"location":"blog/ROS2/tutorials/logging/#skip","text":"log, skip first time node . get_logger () . info ( f 'log only once' , skip_first = True )","title":"skip"},{"location":"blog/ROS2/tutorials/logging/#logging-control-demo","text":"control node log level Set logging format very simple node with logging #!/usr/bin/env python3 import rclpy from rclpy.node import Node class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal\" super () . __init__ ( node_name ) self . get_logger () . info ( \"debug\" ) self . get_logger () . info ( \"info\" ) self . get_logger () . warning ( \"warning\" ) self . get_logger () . error ( \"error\" ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () node.launch.py from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import SetEnvironmentVariable def generate_launch_description (): log_format_env = SetEnvironmentVariable ( name = \"RCUTILS_CONSOLE_OUTPUT_FORMAT\" , value = \"[ {severity} {time} ] [ {name} ( {line_number} )]: {message} \" ) node = Node ( name = \"minimal_node\" , package = \"pkg_launch_tutorial\" , executable = \"minimal_node.py\" , arguments = [ '--ros-args' , '--log-level' , 'info' ] ) ld = LaunchDescription () ld . add_action ( log_format_env ) ld . add_action ( node ) return ld log external config ros2 run some_package some_ros_executable --ros-args --log-config-file some_log.config ROS2 logging base on spdlog for know spdlog not support external config check humble code","title":"logging control demo"},{"location":"blog/ROS2/tutorials/package_xml/","tags":["ros2"],"text":"depend # A package\u2019s package.xml file contains a set of dependencies. The dependencies in this file are generally referred to as \u201crosdep keys\u201d. These are represented in the tags , , , , and . They specify in what situation each of the dependencies are required in. For dependencies only used in testing the code (e.g. gtest), use test_depend . For dependencies only used in building the code, use build_depend . For dependencies needed by headers the code exports, use build_export_depend . For dependencies only used when running the code, use exec_depend . For mixed purposes, use depend , which covers build , export , and execution time dependencies. These dependencies are manually populated in the package.xml file by the package\u2019s creators and should be an exhaustive list of any non-builtin libraries and packages it requires. Reference # Managing Dependencies with rosdep","title":"Package.xml"},{"location":"blog/ROS2/tutorials/package_xml/#depend","text":"A package\u2019s package.xml file contains a set of dependencies. The dependencies in this file are generally referred to as \u201crosdep keys\u201d. These are represented in the tags , , , , and . They specify in what situation each of the dependencies are required in. For dependencies only used in testing the code (e.g. gtest), use test_depend . For dependencies only used in building the code, use build_depend . For dependencies needed by headers the code exports, use build_export_depend . For dependencies only used when running the code, use exec_depend . For mixed purposes, use depend , which covers build , export , and execution time dependencies. These dependencies are manually populated in the package.xml file by the package\u2019s creators and should be an exhaustive list of any non-builtin libraries and packages it requires.","title":"depend"},{"location":"blog/ROS2/tutorials/package_xml/#reference","text":"Managing Dependencies with rosdep","title":"Reference"},{"location":"blog/ROS2/tutorials/rep/","tags":["ros2"],"text":"REP-107 Diagnostic System for Robots Running ROS","title":"REP"},{"location":"blog/ROS2/tutorials/rosdep_tutorial/","tags":["rosdep","ros2","package manager","project settings"],"text":"rosdep tutorial # rosdep is a command-line tool for installing system dependencies rosdep is ROS\u2019s dependency management utility that can work with ROS packages and external libraries. usage # first use # sudo rosdep init rosdep update rosdep init create folder rosdep under /etc/ros rosdep update download index files to local cache index file url set /etc/ros/rosdep/sources.list.d folder for example python packages from pip defined at https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/python.yaml index file for ros distro download from distro location that config https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml run # update run rosdep update to update cache index rosdep will check for package.xml files in its path or for a specific package and find the rosdep keys stored within rosdep install --simulate --from-paths ~/workspaces/project/src --ignore-src \u2013form-path : specifies the path to check for package.xml files to resolve keys for y : means to default yes to all prompts from the package manager to install without prompts \u2013ignore-src : means to ignore installing dependencies, even if a rosdep key exists, if the package itself is also in the workspace demo # install python package using rosdep add package name to package.xml depend tag check python.yaml for package correct name run rosdep install package.xml <depend> pynput-pip </depend> terminal rosdep install --from-paths ~/ros2_ws/src/camera_calibration_gazebo --ignore-src check python package naming browse to https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/python.yaml pynput-pip : debian : pip : packages : [ pynput ] ubuntu : pip : packages : [ pynput ] resolve # resolve to system dependencies install from pip rosdep resolve pynput-pip #pip pynput install from apt rosdep resolve python-opencv #apt python-opencv Reference # Managing Dependencies with rosdep Using Python Packages with ROS 2","title":"rosdep tutorial"},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#rosdep-tutorial","text":"rosdep is a command-line tool for installing system dependencies rosdep is ROS\u2019s dependency management utility that can work with ROS packages and external libraries.","title":"rosdep tutorial"},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#usage","text":"","title":"usage"},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#first-use","text":"sudo rosdep init rosdep update rosdep init create folder rosdep under /etc/ros rosdep update download index files to local cache index file url set /etc/ros/rosdep/sources.list.d folder for example python packages from pip defined at https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/python.yaml index file for ros distro download from distro location that config https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml","title":"first use"},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#run","text":"update run rosdep update to update cache index rosdep will check for package.xml files in its path or for a specific package and find the rosdep keys stored within rosdep install --simulate --from-paths ~/workspaces/project/src --ignore-src \u2013form-path : specifies the path to check for package.xml files to resolve keys for y : means to default yes to all prompts from the package manager to install without prompts \u2013ignore-src : means to ignore installing dependencies, even if a rosdep key exists, if the package itself is also in the workspace","title":"run"},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#demo","text":"install python package using rosdep add package name to package.xml depend tag check python.yaml for package correct name run rosdep install package.xml <depend> pynput-pip </depend> terminal rosdep install --from-paths ~/ros2_ws/src/camera_calibration_gazebo --ignore-src check python package naming browse to https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/python.yaml pynput-pip : debian : pip : packages : [ pynput ] ubuntu : pip : packages : [ pynput ]","title":"demo"},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#resolve","text":"resolve to system dependencies install from pip rosdep resolve pynput-pip #pip pynput install from apt rosdep resolve python-opencv #apt python-opencv","title":"resolve"},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#reference","text":"Managing Dependencies with rosdep Using Python Packages with ROS 2","title":"Reference"},{"location":"blog/ROS2/tutorials/udp_domain_id/","tags":["ros2","dds"],"text":"udp shm The last releases of Fast-DDS come with SharedMemory transport by default udp # Using custom profile to disabled SHM fastrtps-profile.xml <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <profiles xmlns= \"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\" > <transport_descriptors> <transport_descriptor> <transport_id> CustomUdpTransport </transport_id> <type> UDPv4 </type> </transport_descriptor> </transport_descriptors> <participant profile_name= \"participant_profile\" is_default_profile= \"true\" > <rtps> <userTransports> <transport_id> CustomUdpTransport </transport_id> </userTransports> <useBuiltinTransports> false </useBuiltinTransports> </rtps> </participant> </profiles> usage # export FASTRTPS_DEFAULT_PROFILES_FILE = $( pwd ) /fastrtps-profile.xml domain_id port calc 7400 + (250 * Domain) Udp demo # domin_id 0 Domain ID to UDP Port Calculator terminal1 export FASTRTPS_DEFAULT_PROFILES_FILE = $( pwd ) /fastrtps-profile.xml ros2 run demo_nodes_cpp talker terminal2 export FASTRTPS_DEFAULT_PROFILES_FILE = $( pwd ) /fastrtps-profile.xml ros2 run demo_nodes_cpp listener ss output ss -lup # 0 .0.0.0:45800 0 .0.0.0:* users: (( \"listener\" ,pid = 945597 ,fd = 11 )) 192 .168.1.221:54487 0 .0.0.0:* users: (( \"python3\" ,pid = 848435 ,fd = 15 )) 0 .0.0.0:mdns 0 .0.0.0:* 0 .0.0.0:39489 0 .0.0.0:* users: (( \"python3\" ,pid = 848435 ,fd = 14 )) 192 .168.1.221:39981 0 .0.0.0:* users: (( \"listener\" ,pid = 945597 ,fd = 12 )) 0 .0.0.0:7400 0 .0.0.0:* users: (( \"listener\" ,pid = 945597 ,fd = 8 )) 0 .0.0.0:7400 0 .0.0.0:* users: (( \"talker\" ,pid = 945585 ,fd = 8 )) 0 .0.0.0:7400 0 .0.0.0:* users: (( \"python3\" ,pid = 848435 ,fd = 9 )) 0 .0.0.0:7412 0 .0.0.0:* users: (( \"talker\" ,pid = 945585 ,fd = 9 )) 0 .0.0.0:7413 0 .0.0.0:* users: (( \"talker\" ,pid = 945585 ,fd = 10 )) 0 .0.0.0:7414 0 .0.0.0:* users: (( \"listener\" ,pid = 945597 ,fd = 9 )) 0 .0.0.0:7415 0 .0.0.0:* users: (( \"listener\" ,pid = 945597 ,fd = 10 )) 0 .0.0.0:7418 0 .0.0.0:* users: (( \"python3\" ,pid = 848435 ,fd = 10 )) 0 .0.0.0:7419 0 .0.0.0:* users: (( \"python3\" ,pid = 848435 ,fd = 12 )) 127 .0.0.53%lo:domain 0 .0.0.0:* 192 .168.1.221:32836 0 .0.0.0:* users: (( \"talker\" ,pid = 945585 ,fd = 12 )) 0 .0.0.0:631 0 .0.0.0:* 0 .0.0.0:58699 0 .0.0.0:* users: (( \"talker\" ,pid = 945585 ,fd = 11 )) All applications: DiscoveryMulticastPort = 7400 UserMulticastPort = 7401 First application: DiscoveryUnicastPort = 7410 UserUnicastPort = 7411 Second application: DiscoveryUnicastPort = 7412 UserUnicastPort = 7413 Reference # The ROS_DOMAIN_ID ROS2-foxy nodes can\u2019t communicate through docker container border What does the \u201cdiscovery multicast port\u201d do? Statically configure a Firewall to let OMG DDS Traffic through","title":"ROS2 domain_id and DDS ports"},{"location":"blog/ROS2/tutorials/udp_domain_id/#udp","text":"Using custom profile to disabled SHM fastrtps-profile.xml <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <profiles xmlns= \"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\" > <transport_descriptors> <transport_descriptor> <transport_id> CustomUdpTransport </transport_id> <type> UDPv4 </type> </transport_descriptor> </transport_descriptors> <participant profile_name= \"participant_profile\" is_default_profile= \"true\" > <rtps> <userTransports> <transport_id> CustomUdpTransport </transport_id> </userTransports> <useBuiltinTransports> false </useBuiltinTransports> </rtps> </participant> </profiles>","title":"udp"},{"location":"blog/ROS2/tutorials/udp_domain_id/#usage","text":"export FASTRTPS_DEFAULT_PROFILES_FILE = $( pwd ) /fastrtps-profile.xml domain_id port calc 7400 + (250 * Domain)","title":"usage"},{"location":"blog/ROS2/tutorials/udp_domain_id/#udp-demo","text":"domin_id 0 Domain ID to UDP Port Calculator terminal1 export FASTRTPS_DEFAULT_PROFILES_FILE = $( pwd ) /fastrtps-profile.xml ros2 run demo_nodes_cpp talker terminal2 export FASTRTPS_DEFAULT_PROFILES_FILE = $( pwd ) /fastrtps-profile.xml ros2 run demo_nodes_cpp listener ss output ss -lup # 0 .0.0.0:45800 0 .0.0.0:* users: (( \"listener\" ,pid = 945597 ,fd = 11 )) 192 .168.1.221:54487 0 .0.0.0:* users: (( \"python3\" ,pid = 848435 ,fd = 15 )) 0 .0.0.0:mdns 0 .0.0.0:* 0 .0.0.0:39489 0 .0.0.0:* users: (( \"python3\" ,pid = 848435 ,fd = 14 )) 192 .168.1.221:39981 0 .0.0.0:* users: (( \"listener\" ,pid = 945597 ,fd = 12 )) 0 .0.0.0:7400 0 .0.0.0:* users: (( \"listener\" ,pid = 945597 ,fd = 8 )) 0 .0.0.0:7400 0 .0.0.0:* users: (( \"talker\" ,pid = 945585 ,fd = 8 )) 0 .0.0.0:7400 0 .0.0.0:* users: (( \"python3\" ,pid = 848435 ,fd = 9 )) 0 .0.0.0:7412 0 .0.0.0:* users: (( \"talker\" ,pid = 945585 ,fd = 9 )) 0 .0.0.0:7413 0 .0.0.0:* users: (( \"talker\" ,pid = 945585 ,fd = 10 )) 0 .0.0.0:7414 0 .0.0.0:* users: (( \"listener\" ,pid = 945597 ,fd = 9 )) 0 .0.0.0:7415 0 .0.0.0:* users: (( \"listener\" ,pid = 945597 ,fd = 10 )) 0 .0.0.0:7418 0 .0.0.0:* users: (( \"python3\" ,pid = 848435 ,fd = 10 )) 0 .0.0.0:7419 0 .0.0.0:* users: (( \"python3\" ,pid = 848435 ,fd = 12 )) 127 .0.0.53%lo:domain 0 .0.0.0:* 192 .168.1.221:32836 0 .0.0.0:* users: (( \"talker\" ,pid = 945585 ,fd = 12 )) 0 .0.0.0:631 0 .0.0.0:* 0 .0.0.0:58699 0 .0.0.0:* users: (( \"talker\" ,pid = 945585 ,fd = 11 )) All applications: DiscoveryMulticastPort = 7400 UserMulticastPort = 7401 First application: DiscoveryUnicastPort = 7410 UserUnicastPort = 7411 Second application: DiscoveryUnicastPort = 7412 UserUnicastPort = 7413","title":"Udp demo"},{"location":"blog/ROS2/tutorials/udp_domain_id/#reference","text":"The ROS_DOMAIN_ID ROS2-foxy nodes can\u2019t communicate through docker container border What does the \u201cdiscovery multicast port\u201d do? Statically configure a Firewall to let OMG DDS Traffic through","title":"Reference"},{"location":"blog/ROS2/tutorials/vcstool/","tags":["vcstool","ros2","package manager","project settings"],"text":"vcstool hello # vcstool is a version control system tool designed to make working with multiple repositories easier. It is most commonly used for getting open source repositories from GitHub, without having to maintain them yourselves in your project. sudo apt install python3-vcstool usage # .repos # create file project.repos for example repositories : turtlebot3/turtlebot3 : type : git url : https://github.com/ROBOTIS-GIT/turtlebot3.git version : galactic-devel clone / import # from workspace folder vcs import src < project.repos","title":"vcstool hello"},{"location":"blog/ROS2/tutorials/vcstool/#vcstool-hello","text":"vcstool is a version control system tool designed to make working with multiple repositories easier. It is most commonly used for getting open source repositories from GitHub, without having to maintain them yourselves in your project. sudo apt install python3-vcstool","title":"vcstool hello"},{"location":"blog/ROS2/tutorials/vcstool/#usage","text":"","title":"usage"},{"location":"blog/ROS2/tutorials/vcstool/#repos","text":"create file project.repos for example repositories : turtlebot3/turtlebot3 : type : git url : https://github.com/ROBOTIS-GIT/turtlebot3.git version : galactic-devel","title":".repos"},{"location":"blog/ROS2/tutorials/vcstool/#clone--import","text":"from workspace folder vcs import src < project.repos","title":"clone / import"},{"location":"blog/ROS2/tutorials/what_is_ros2_daemon/","tags":["ros2","tutorial"],"text":"Reference # What is ROS2 daemon?","title":"What is ROS2 daemon"},{"location":"blog/ROS2/tutorials/what_is_ros2_daemon/#reference","text":"What is ROS2 daemon?","title":"Reference"},{"location":"blog/ROS2/xacro/","tags":["xacro"],"text":"Tools # xacro4sdf","title":"xacro"},{"location":"blog/ROS2/xacro/#tools","text":"xacro4sdf","title":"Tools"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/","tags":["xacro","tutorial","launch"],"text":"LAB # Control xacro from outside with args Bind xacro args to launch args xacro # Simple xacro file with arg and if <?xml version=\"1.0\"?> <robot name= \"\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:arg name= \"with_gripper\" default= \"true\" /> <xacro:if value= \"$(arg with_gripper)\" > <!--with gripper--> </xacro:if> </robot> launch # using command using OpaqueFunction function to get LaunchContext for substitute Command # command import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.substitutions import LaunchConfiguration , Command from launch.actions import DeclareLaunchArgument , LogInfo PACKAGE = \"basic_mobile_robot\" SDF = \"arg.sdf.xacro\" def generate_launch_description (): with_grip = LaunchConfiguration ( 'with_gripper' ) pkg = get_package_share_directory ( PACKAGE ) robot_description_path = os . path . join ( pkg , \"demos\" , \"xacros\" , SDF ) robot_description = Command ([ 'xacro ' , \\ robot_description_path , \" \" , \"with_gripper:=\" , with_grip ]) log = LogInfo ( msg = robot_description ) arg = DeclareLaunchArgument ( 'with_gripper' , default_value = 'true' , description = 'Use grip' ) return LaunchDescription ([ arg , log ]) OpaqueFunction # test_xacro.launch.py import os from ament_index_python import get_package_share_directory from launch import LaunchDescription , LaunchContext from launch.actions import DeclareLaunchArgument , OpaqueFunction from launch.substitutions import LaunchConfiguration import xacro PACKAGE = \"basic_mobile_robot\" SDF = \"arg.sdf.xacro\" def generate_launch_description (): pkg = get_package_share_directory ( PACKAGE ) robot_description_path = os . path . join ( pkg , \"demos\" , \"xacros\" ) robot_description_file = os . path . join ( robot_description_path , SDF ) robot_description_file_out = os . path . join ( robot_description_path , \"arg.sdf\" ) with_gripper_arg = DeclareLaunchArgument ( 'with_gripper' , default_value = \"true\" , description = \"use with_gripper\" ) def render_xacro ( context : LaunchContext , grip_arg ): grip_arg_str = context . perform_substitution ( grip_arg ) doc = xacro . parse ( open ( robot_description_file )) xacro . process_doc ( doc , mappings = { \"with_gripper\" : grip_arg_str }) out = xacro . open_output ( robot_description_file_out ) out . write ( doc . toprettyxml ( indent = ' ' )) func = OpaqueFunction ( function = render_xacro , args = [ LaunchConfiguration ( 'with_gripper' )]) ld = LaunchDescription () ld . add_action ( with_gripper_arg ) ld . add_action ( func ) return ld usage # ros2 launch basic_mobile_robot test_xacro.launch.py with_gripper: = \"true\"","title":"Pass launch argument to control XACRO logic"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#lab","text":"Control xacro from outside with args Bind xacro args to launch args","title":"LAB"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#xacro","text":"Simple xacro file with arg and if <?xml version=\"1.0\"?> <robot name= \"\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:arg name= \"with_gripper\" default= \"true\" /> <xacro:if value= \"$(arg with_gripper)\" > <!--with gripper--> </xacro:if> </robot>","title":"xacro"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#launch","text":"using command using OpaqueFunction function to get LaunchContext for substitute","title":"launch"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#command","text":"command import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.substitutions import LaunchConfiguration , Command from launch.actions import DeclareLaunchArgument , LogInfo PACKAGE = \"basic_mobile_robot\" SDF = \"arg.sdf.xacro\" def generate_launch_description (): with_grip = LaunchConfiguration ( 'with_gripper' ) pkg = get_package_share_directory ( PACKAGE ) robot_description_path = os . path . join ( pkg , \"demos\" , \"xacros\" , SDF ) robot_description = Command ([ 'xacro ' , \\ robot_description_path , \" \" , \"with_gripper:=\" , with_grip ]) log = LogInfo ( msg = robot_description ) arg = DeclareLaunchArgument ( 'with_gripper' , default_value = 'true' , description = 'Use grip' ) return LaunchDescription ([ arg , log ])","title":"Command"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#opaquefunction","text":"test_xacro.launch.py import os from ament_index_python import get_package_share_directory from launch import LaunchDescription , LaunchContext from launch.actions import DeclareLaunchArgument , OpaqueFunction from launch.substitutions import LaunchConfiguration import xacro PACKAGE = \"basic_mobile_robot\" SDF = \"arg.sdf.xacro\" def generate_launch_description (): pkg = get_package_share_directory ( PACKAGE ) robot_description_path = os . path . join ( pkg , \"demos\" , \"xacros\" ) robot_description_file = os . path . join ( robot_description_path , SDF ) robot_description_file_out = os . path . join ( robot_description_path , \"arg.sdf\" ) with_gripper_arg = DeclareLaunchArgument ( 'with_gripper' , default_value = \"true\" , description = \"use with_gripper\" ) def render_xacro ( context : LaunchContext , grip_arg ): grip_arg_str = context . perform_substitution ( grip_arg ) doc = xacro . parse ( open ( robot_description_file )) xacro . process_doc ( doc , mappings = { \"with_gripper\" : grip_arg_str }) out = xacro . open_output ( robot_description_file_out ) out . write ( doc . toprettyxml ( indent = ' ' )) func = OpaqueFunction ( function = render_xacro , args = [ LaunchConfiguration ( 'with_gripper' )]) ld = LaunchDescription () ld . add_action ( with_gripper_arg ) ld . add_action ( func ) return ld","title":"OpaqueFunction"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#usage","text":"ros2 launch basic_mobile_robot test_xacro.launch.py with_gripper: = \"true\"","title":"usage"},{"location":"blog/embedded/cross-compiler/hello-cc/","tags":["cross-compiler"],"text":"A cross compiler is a compiler capable of creating executable code for a platform other than the one on which the compiler is running (wikipedia) install cross compiler # install crosscompiler tools sudo apt install crossbuild-essential-arm64 toolchain setting file # aarch64-linux-gnu-toolchain.cmake set ( CMAKE_SYSTEM_NAME Linux ) set ( CMAKE_SYSTEM_PROCESSOR \"aarch64\" ) set ( CMAKE_C_COMPILER aarch64-linux-gnu-gcc ) set ( CMAKE_CXX_COMPILER aarch64-linux-gnu-g++ ) set ( CMAKE_CUDA_COMPILER nvcc ) set ( CMAKE_CUDA_HOST_COMPILER aarch64-linux-gnu-gcc ) set ( CMAKE_FIND_ROOT_PATH \"/usr/aarch64-linux-gnu\" ) set ( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER ) set ( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY ) set ( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY ) set ( CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY ) demo # \u251c\u2500\u2500 aarch64-linux-gnu-toolchain.cmake \u251c\u2500\u2500 build \u251c\u2500\u2500 CMakeLists.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 hello.cpp code # #include <iostream> int main (){ std :: cout << \"hello cross compiler\" << std :: endl ; return 0 ; } cmake_minimum_required ( VERSION 3.15 ) # Toolchain settings set ( CMAKE_TOOLCHAIN_FILE aarch64-linux-gnu-toolchain.cmake ) project ( CrossCompiler_demo ) add_executable ( hello_cc src/hello.cpp ) Warning It is crucial to set the value of CMAKE_TOOLCHAIN_FILE before project() is invoked, because project() triggers toolchain detection and verification . cmake gui # using cmake gui set cross compiler settings from file make, check, run # make # Run make from build folder Check executable arch with file command Run with qemu or Copy to embedded device check # cd build # Result file hello_cc hello_cc: ELF 64 -bit LSB shared object, ARM aarch64, version 1 ( SYSV ) , dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID [ sha1 ]= 5425e3fd790ba1a6a07c4963f0606a58edf53aa7, for GNU/Linux 3 .7.0, not stripped run # Run ARM binary using qemu sudo apt-get install qemu-user-static # from build folder qemu-arm-static -L /usr/arm-linux-gnueabihf ./hello_cc Ref # How to cross-compile for embedded with CMake like a champ How to Cross Compile OpenCV and MXNET for NVIDIA Jetson","title":"cross compiler hello"},{"location":"blog/embedded/cross-compiler/hello-cc/#install-cross-compiler","text":"install crosscompiler tools sudo apt install crossbuild-essential-arm64","title":"install cross compiler"},{"location":"blog/embedded/cross-compiler/hello-cc/#toolchain-setting-file","text":"aarch64-linux-gnu-toolchain.cmake set ( CMAKE_SYSTEM_NAME Linux ) set ( CMAKE_SYSTEM_PROCESSOR \"aarch64\" ) set ( CMAKE_C_COMPILER aarch64-linux-gnu-gcc ) set ( CMAKE_CXX_COMPILER aarch64-linux-gnu-g++ ) set ( CMAKE_CUDA_COMPILER nvcc ) set ( CMAKE_CUDA_HOST_COMPILER aarch64-linux-gnu-gcc ) set ( CMAKE_FIND_ROOT_PATH \"/usr/aarch64-linux-gnu\" ) set ( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER ) set ( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY ) set ( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY ) set ( CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY )","title":"toolchain setting file"},{"location":"blog/embedded/cross-compiler/hello-cc/#demo","text":"\u251c\u2500\u2500 aarch64-linux-gnu-toolchain.cmake \u251c\u2500\u2500 build \u251c\u2500\u2500 CMakeLists.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 hello.cpp","title":"demo"},{"location":"blog/embedded/cross-compiler/hello-cc/#code","text":"#include <iostream> int main (){ std :: cout << \"hello cross compiler\" << std :: endl ; return 0 ; } cmake_minimum_required ( VERSION 3.15 ) # Toolchain settings set ( CMAKE_TOOLCHAIN_FILE aarch64-linux-gnu-toolchain.cmake ) project ( CrossCompiler_demo ) add_executable ( hello_cc src/hello.cpp ) Warning It is crucial to set the value of CMAKE_TOOLCHAIN_FILE before project() is invoked, because project() triggers toolchain detection and verification .","title":"code"},{"location":"blog/embedded/cross-compiler/hello-cc/#cmake-gui","text":"using cmake gui set cross compiler settings from file","title":"cmake gui"},{"location":"blog/embedded/cross-compiler/hello-cc/#make-check-run","text":"","title":"make, check, run"},{"location":"blog/embedded/cross-compiler/hello-cc/#make","text":"Run make from build folder Check executable arch with file command Run with qemu or Copy to embedded device","title":"make"},{"location":"blog/embedded/cross-compiler/hello-cc/#check","text":"cd build # Result file hello_cc hello_cc: ELF 64 -bit LSB shared object, ARM aarch64, version 1 ( SYSV ) , dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID [ sha1 ]= 5425e3fd790ba1a6a07c4963f0606a58edf53aa7, for GNU/Linux 3 .7.0, not stripped","title":"check"},{"location":"blog/embedded/cross-compiler/hello-cc/#run","text":"Run ARM binary using qemu sudo apt-get install qemu-user-static # from build folder qemu-arm-static -L /usr/arm-linux-gnueabihf ./hello_cc","title":"run"},{"location":"blog/embedded/cross-compiler/hello-cc/#ref","text":"How to cross-compile for embedded with CMake like a champ How to Cross Compile OpenCV and MXNET for NVIDIA Jetson","title":"Ref"},{"location":"blog/embedded/jetson/nano/","tags":["nvidia","nano"],"text":"/ansible/roles/jetson/defaults/main.yaml --- ubuntu_release : focal new_user : name : user shell : /bin/bash password : user Reference # Create your own image for jetson nano board","title":"Jetson Nano"},{"location":"blog/embedded/jetson/nano/#reference","text":"Create your own image for jetson nano board","title":"Reference"},{"location":"blog/embedded/rpi/rpi_servo_pwm/","tags":["rpi","None"],"text":"pip install RPi.GPIO Reference # https://www.iottechtrends.com/use-servo-motor-with-raspberry-pi/","title":"Running servo motor from RPI"},{"location":"blog/embedded/rpi/rpi_servo_pwm/#reference","text":"https://www.iottechtrends.com/use-servo-motor-with-raspberry-pi/","title":"Reference"},{"location":"blog/gazebo/color_and_texture/","tags":["gazebo","texture"],"text":"Demo # basic sdf # model folder struct # \u2514\u2500\u2500 simple_box \u251c\u2500\u2500 model.config \u2514\u2500\u2500 model.sdf files # model.config <?xml version=\"1.0\"?> <model> <name> simple_box </name> <version> 1.0 </version> <sdf version= \"1.5\" > model.sdf </sdf> <author> <name></name> <email></email> </author> <description> </description> </model> sdf <?xml version='1.0'?> <sdf version= \"1.4\" > <model name= \"simple_box\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"link\" > <inertial> <mass> 1.0 </mass> <inertia> <!-- inertias are tricky to compute --> <!-- http://gazebosim.org/tutorials?tut=inertia&cat=build_robot --> <ixx> 0.083 </ixx> <!-- for a box: ixx = 0.083 * mass * (y*y + z*z) --> <ixy> 0.0 </ixy> <!-- for a box: ixy = 0 --> <ixz> 0.0 </ixz> <!-- for a box: ixz = 0 --> <iyy> 0.083 </iyy> <!-- for a box: iyy = 0.083 * mass * (x*x + z*z) --> <iyz> 0.0 </iyz> <!-- for a box: iyz = 0 --> <izz> 0.083 </izz> <!-- for a box: izz = 0.083 * mass * (x*x + y*y) --> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> </model> </sdf> predefine color # using predefine script <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> <material> <script> <uri> file://media/materials/scripts/gazebo.material </uri> <name> Gazebo/Red </name> </script> </material> </visual> materials list list of materials define in gazebo file /usr/share/gazebo-11/media/materials/scripts/gazebo.material for example the RED definition material Gazebo/Red { technique { pass ambient { ambient 1 0 0 diffuse 1 0 0 specular 0.1 0.1 0.1 1 1 } } } Custom color # <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> <material> <!-- LED material --> <ambient> 0 0 0 1 </ambient> <diffuse> 0 0 0 1 </diffuse> <specular> 0 0 0 0 </specular> <emissive> 0 1 0 1 </emissive> </material> <!-- End LED material --> </visual> Texture # \u2514\u2500\u2500 simple_box \u251c\u2500\u2500 materials \u2502 \u251c\u2500\u2500 scripts \u2502 \u2502 \u2514\u2500\u2500 simple_box.material \u2502 \u2514\u2500\u2500 textures \u2502 \u2514\u2500\u2500 seamless_texture.png \u251c\u2500\u2500 model.config \u2514\u2500\u2500 model.sdf simple_box.material material wood / light { technique { pass { texture_unit { // Relative to the location of the material script texture .. / textures / seamless_texture . png // Repeat the texture over the surface (4 per face) scale 0.5 0.5 } } } } <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> <material> <script> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/scripts </uri> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/textures </uri> <name> wood/light </name> </script> </material> </visual> uri use model uri and set GAZEBO_MODEL_PATH or use file:// to set absolute path stl mesh # Warning STL : does not support colors and texturing Collada (.dae) : support color and texture stl color # <visual name= \"visual\" > <geometry> <mesh> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/meshes/cube_20k.stl </uri> <scale> 0.25 0.25 0.25 </scale> </mesh> </geometry> <material> <script> <uri> file://media/materials/scripts/gazebo.material </uri> <name> Gazebo/Red </name> </script> </material> </visual> stl with texture # <visual name= \"visual\" > <geometry> <mesh> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/meshes/cube_20k.stl </uri> <scale> 0.5 0.5 0.5 </scale> </mesh> </geometry> <material> <script> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/scripts </uri> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/textures </uri> <name> wood/light </name> </script> </material> </visual> Collada / dea # Example from gazebo_models library_images <library_images> <image id= \"start_pad_png\" name= \"start_pad_png\" > <init_from> end_pad.png </init_from> </image> </library_images> Reference # Color And Texture Models","title":"Gazebo color texture and meshes"},{"location":"blog/gazebo/color_and_texture/#demo","text":"","title":"Demo"},{"location":"blog/gazebo/color_and_texture/#basic-sdf","text":"","title":"basic sdf"},{"location":"blog/gazebo/color_and_texture/#model-folder-struct","text":"\u2514\u2500\u2500 simple_box \u251c\u2500\u2500 model.config \u2514\u2500\u2500 model.sdf","title":"model folder struct"},{"location":"blog/gazebo/color_and_texture/#files","text":"model.config <?xml version=\"1.0\"?> <model> <name> simple_box </name> <version> 1.0 </version> <sdf version= \"1.5\" > model.sdf </sdf> <author> <name></name> <email></email> </author> <description> </description> </model> sdf <?xml version='1.0'?> <sdf version= \"1.4\" > <model name= \"simple_box\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"link\" > <inertial> <mass> 1.0 </mass> <inertia> <!-- inertias are tricky to compute --> <!-- http://gazebosim.org/tutorials?tut=inertia&cat=build_robot --> <ixx> 0.083 </ixx> <!-- for a box: ixx = 0.083 * mass * (y*y + z*z) --> <ixy> 0.0 </ixy> <!-- for a box: ixy = 0 --> <ixz> 0.0 </ixz> <!-- for a box: ixz = 0 --> <iyy> 0.083 </iyy> <!-- for a box: iyy = 0.083 * mass * (x*x + z*z) --> <iyz> 0.0 </iyz> <!-- for a box: iyz = 0 --> <izz> 0.083 </izz> <!-- for a box: izz = 0.083 * mass * (x*x + y*y) --> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> </model> </sdf>","title":"files"},{"location":"blog/gazebo/color_and_texture/#predefine-color","text":"using predefine script <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> <material> <script> <uri> file://media/materials/scripts/gazebo.material </uri> <name> Gazebo/Red </name> </script> </material> </visual> materials list list of materials define in gazebo file /usr/share/gazebo-11/media/materials/scripts/gazebo.material for example the RED definition material Gazebo/Red { technique { pass ambient { ambient 1 0 0 diffuse 1 0 0 specular 0.1 0.1 0.1 1 1 } } }","title":"predefine color"},{"location":"blog/gazebo/color_and_texture/#custom-color","text":"<visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> <material> <!-- LED material --> <ambient> 0 0 0 1 </ambient> <diffuse> 0 0 0 1 </diffuse> <specular> 0 0 0 0 </specular> <emissive> 0 1 0 1 </emissive> </material> <!-- End LED material --> </visual>","title":"Custom color"},{"location":"blog/gazebo/color_and_texture/#texture","text":"\u2514\u2500\u2500 simple_box \u251c\u2500\u2500 materials \u2502 \u251c\u2500\u2500 scripts \u2502 \u2502 \u2514\u2500\u2500 simple_box.material \u2502 \u2514\u2500\u2500 textures \u2502 \u2514\u2500\u2500 seamless_texture.png \u251c\u2500\u2500 model.config \u2514\u2500\u2500 model.sdf simple_box.material material wood / light { technique { pass { texture_unit { // Relative to the location of the material script texture .. / textures / seamless_texture . png // Repeat the texture over the surface (4 per face) scale 0.5 0.5 } } } } <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> <material> <script> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/scripts </uri> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/textures </uri> <name> wood/light </name> </script> </material> </visual> uri use model uri and set GAZEBO_MODEL_PATH or use file:// to set absolute path","title":"Texture"},{"location":"blog/gazebo/color_and_texture/#stl-mesh","text":"Warning STL : does not support colors and texturing Collada (.dae) : support color and texture","title":"stl mesh"},{"location":"blog/gazebo/color_and_texture/#stl-color","text":"<visual name= \"visual\" > <geometry> <mesh> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/meshes/cube_20k.stl </uri> <scale> 0.25 0.25 0.25 </scale> </mesh> </geometry> <material> <script> <uri> file://media/materials/scripts/gazebo.material </uri> <name> Gazebo/Red </name> </script> </material> </visual>","title":"stl color"},{"location":"blog/gazebo/color_and_texture/#stl-with-texture","text":"<visual name= \"visual\" > <geometry> <mesh> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/meshes/cube_20k.stl </uri> <scale> 0.5 0.5 0.5 </scale> </mesh> </geometry> <material> <script> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/scripts </uri> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/textures </uri> <name> wood/light </name> </script> </material> </visual>","title":"stl with texture"},{"location":"blog/gazebo/color_and_texture/#collada--dea","text":"Example from gazebo_models library_images <library_images> <image id= \"start_pad_png\" name= \"start_pad_png\" > <init_from> end_pad.png </init_from> </image> </library_images>","title":"Collada / dea"},{"location":"blog/gazebo/color_and_texture/#reference","text":"Color And Texture Models","title":"Reference"},{"location":"blog/gazebo/xacro/","tags":["xacro"],"text":"Install # sudo apt install ros-<version>-xacro usage # xacro hello.xacro > hello.xml include # include other xacro file <xacro:include filename= \"other_file.xacro\" /> <xacro:include filename= \"$(cwd)/other_file.xacro\" /> # args # decalre arg arg usage demo Note passing argument from cli := demo result # # run without argument xacro hello.xacro > hello.xml # run with argument xacro hello.xacro > hello.xml var: = 10 <?xml version=\"1.0\" ?> <!-- =================================================================================== --> <!-- | This document was autogenerated by xacro from /home/user/projects/blog/examples/gazebo/xacro/hello.xacro | --> <!-- | EDITING THIS FILE BY HAND IS NOT RECOMMENDED | --> <!-- =================================================================================== --> <robot name= \"\" > <data> 10 </data> </robot> property # property <?xml version=\"1.0\"?> <robot name= \"prop\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"prop1\" value= \"0.1\" /> <data> ${prop1} </data> </robot> output # <?xml version=\"1.0\" ?> <robot name= \"prop\" > <data> 0.1 </data> </robot> condition # macro <?xml version=\"1.0\"?> <robot name= \"condition\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"check\" value= \"2\" /> <xacro:if value= \"${check == 1}\" > code for create A </xacro:if> <!-- run if condition not true --> <xacro:unless value= \"${check == 1}\" > code for create B </xacro:unless> </robot> macros # macro <?xml version=\"1.0\"?> <robot name= \"macro\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:macro name= \"default_origin\" params= \"x y z\" > <origin xyz= \"${x} ${y} ${z}\" rpy= \"0 0 0\" /> </xacro:macro> <xacro:default_origin x= \"1\" y= \"2\" z= \"3\" /> </robot> output # <?xml version=\"1.0\" ?> <robot name= \"macro\" > <origin rpy= \"0 0 0\" xyz= \"1 2 3\" /> </robot> loops # loops <?xml version=\"1.0\"?> <robot name= \"loop\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"items\" value= \"${[1,2,3,4,5]}\" /> <xacro:macro name= \"loop\" params= \"items:=^\" > <xacro:if value= \"${items}\" > <!-- pop first item from list --> <xacro:property name= \"item\" value= \"${items.pop(0)}\" /> <item> ${item} </item> <!-- recursively call myself --> <xacro:loop/> </xacro:if> </xacro:macro> <xacro:loop items= \"${items}\" /> </robot> output # <?xml version=\"1.0\" ?> <robot name= \"loop\" > <item> 1 </item> <item> 2 </item> <item> 3 </item> <item> 4 </item> <item> 5 </item> </robot>","title":"xacro hello"},{"location":"blog/gazebo/xacro/#install","text":"sudo apt install ros-<version>-xacro","title":"Install"},{"location":"blog/gazebo/xacro/#usage","text":"xacro hello.xacro > hello.xml","title":"usage"},{"location":"blog/gazebo/xacro/#include","text":"include other xacro file","title":"include"},{"location":"blog/gazebo/xacro/#xacroinclude-filenameother_filexacro-xacroinclude-filenamecwdother_filexacro-","text":"","title":"&lt;xacro:include filename=&quot;other_file.xacro&quot; /&gt;\n&lt;xacro:include filename=&quot;$(cwd)/other_file.xacro&quot; /&gt;\n"},{"location":"blog/gazebo/xacro/#args","text":"decalre arg arg usage demo Note passing argument from cli :=","title":"args"},{"location":"blog/gazebo/xacro/#demo-result","text":"# run without argument xacro hello.xacro > hello.xml # run with argument xacro hello.xacro > hello.xml var: = 10 <?xml version=\"1.0\" ?> <!-- =================================================================================== --> <!-- | This document was autogenerated by xacro from /home/user/projects/blog/examples/gazebo/xacro/hello.xacro | --> <!-- | EDITING THIS FILE BY HAND IS NOT RECOMMENDED | --> <!-- =================================================================================== --> <robot name= \"\" > <data> 10 </data> </robot>","title":"demo result"},{"location":"blog/gazebo/xacro/#property","text":"property <?xml version=\"1.0\"?> <robot name= \"prop\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"prop1\" value= \"0.1\" /> <data> ${prop1} </data> </robot>","title":"property"},{"location":"blog/gazebo/xacro/#output","text":"<?xml version=\"1.0\" ?> <robot name= \"prop\" > <data> 0.1 </data> </robot>","title":"output"},{"location":"blog/gazebo/xacro/#condition","text":"macro <?xml version=\"1.0\"?> <robot name= \"condition\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"check\" value= \"2\" /> <xacro:if value= \"${check == 1}\" > code for create A </xacro:if> <!-- run if condition not true --> <xacro:unless value= \"${check == 1}\" > code for create B </xacro:unless> </robot>","title":"condition"},{"location":"blog/gazebo/xacro/#macros","text":"macro <?xml version=\"1.0\"?> <robot name= \"macro\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:macro name= \"default_origin\" params= \"x y z\" > <origin xyz= \"${x} ${y} ${z}\" rpy= \"0 0 0\" /> </xacro:macro> <xacro:default_origin x= \"1\" y= \"2\" z= \"3\" /> </robot>","title":"macros"},{"location":"blog/gazebo/xacro/#output_1","text":"<?xml version=\"1.0\" ?> <robot name= \"macro\" > <origin rpy= \"0 0 0\" xyz= \"1 2 3\" /> </robot>","title":"output"},{"location":"blog/gazebo/xacro/#loops","text":"loops <?xml version=\"1.0\"?> <robot name= \"loop\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"items\" value= \"${[1,2,3,4,5]}\" /> <xacro:macro name= \"loop\" params= \"items:=^\" > <xacro:if value= \"${items}\" > <!-- pop first item from list --> <xacro:property name= \"item\" value= \"${items.pop(0)}\" /> <item> ${item} </item> <!-- recursively call myself --> <xacro:loop/> </xacro:if> </xacro:macro> <xacro:loop items= \"${items}\" /> </robot>","title":"loops"},{"location":"blog/gazebo/xacro/#output_2","text":"<?xml version=\"1.0\" ?> <robot name= \"loop\" > <item> 1 </item> <item> 2 </item> <item> 3 </item> <item> 4 </item> <item> 5 </item> </robot>","title":"output"},{"location":"blog/linux/hello_tmux/","tags":["tmux","tmuxp","101"],"text":"tmux # install # sudo apt install tmux config file # ~/.tmux.conf or /etc/tmux.conf ```bash title=\u201dremap prefix from \u2018C-b\u2019 to \u2018C-a\u2019 unbind C-b set-option -g prefix C-a bind-key C-a send-prefix ```bash title=\"close session\" bind C-c kill-session support mouse set -g mouse on like terminator # split windows to pane resize window navigate panes (need to resolve) terminator short cuts # do like terminator bind -n C-E split-window -h bind -n C-S-Left resize-pane -L 3 bind -n C-S-Right resize-pane -R 3 bind -n C-S-Up resize-pane -U 3 bind -n C-S-Down resize-pane -D 3 bind -n C-O split-window -v # switch panes using Alt-arrow without prefix (not working) bind -n M-Left select -pane -L bind -n M-Right select -pane -R bind -n M-Up select -pane -U bind -n M-Down select -pane -D tmuxp # A session manager for tmux install # install sudo apt install tmuxp #or pip install --user tmuxp config file # session_name list of windows list of panes for every window in windows config.yaml session_name : 2-pane-vertical windows : - window_name : my test window panes : - echo hello - echo hello usage # tmuxp load config.yaml tmux conf example # ~/.tmux.conf # unbind unbind C-b unbind '\"' unbind % # base1 numbering set -g base-index 1 setw -g pane-base-index 1 #bind ctrl-a as a prefix set-option -g prefix C-a bind-key C-a send-prefix # kill session bind C-c kill-session # mouse set -g mouse on # do like terminator bind -n C-E split-window -h bind -n C-S-Left resize-pane -L 3 bind -n C-S-Right resize-pane -R 3 bind -n C-S-Up resize-pane -U 3 bind -n C-S-Down resize-pane -D 3 bind -n C-O split-window -v # switch panes using Alt-arrow without prefix (not working) bind -n M-Left select -pane -L bind -n M-Right select -pane -R bind -n M-Up select -pane -U bind -n M-Down select -pane -D # Shift arrow to switch windows bind n next-window bind p previous-window bind c new-window -c \"#{pane_current_path}\" bind r source-file ~/.tmux.conf","title":"Tmux and tmuxp"},{"location":"blog/linux/hello_tmux/#tmux","text":"","title":"tmux"},{"location":"blog/linux/hello_tmux/#install","text":"sudo apt install tmux","title":"install"},{"location":"blog/linux/hello_tmux/#config-file","text":"~/.tmux.conf or /etc/tmux.conf ```bash title=\u201dremap prefix from \u2018C-b\u2019 to \u2018C-a\u2019 unbind C-b set-option -g prefix C-a bind-key C-a send-prefix ```bash title=\"close session\" bind C-c kill-session support mouse set -g mouse on","title":"config file"},{"location":"blog/linux/hello_tmux/#like-terminator","text":"split windows to pane resize window navigate panes (need to resolve) terminator short cuts # do like terminator bind -n C-E split-window -h bind -n C-S-Left resize-pane -L 3 bind -n C-S-Right resize-pane -R 3 bind -n C-S-Up resize-pane -U 3 bind -n C-S-Down resize-pane -D 3 bind -n C-O split-window -v # switch panes using Alt-arrow without prefix (not working) bind -n M-Left select -pane -L bind -n M-Right select -pane -R bind -n M-Up select -pane -U bind -n M-Down select -pane -D","title":"like terminator"},{"location":"blog/linux/hello_tmux/#tmuxp","text":"A session manager for tmux","title":"tmuxp"},{"location":"blog/linux/hello_tmux/#install_1","text":"install sudo apt install tmuxp #or pip install --user tmuxp","title":"install"},{"location":"blog/linux/hello_tmux/#config-file_1","text":"session_name list of windows list of panes for every window in windows config.yaml session_name : 2-pane-vertical windows : - window_name : my test window panes : - echo hello - echo hello","title":"config file"},{"location":"blog/linux/hello_tmux/#usage","text":"tmuxp load config.yaml","title":"usage"},{"location":"blog/linux/hello_tmux/#tmux-conf-example","text":"~/.tmux.conf # unbind unbind C-b unbind '\"' unbind % # base1 numbering set -g base-index 1 setw -g pane-base-index 1 #bind ctrl-a as a prefix set-option -g prefix C-a bind-key C-a send-prefix # kill session bind C-c kill-session # mouse set -g mouse on # do like terminator bind -n C-E split-window -h bind -n C-S-Left resize-pane -L 3 bind -n C-S-Right resize-pane -R 3 bind -n C-S-Up resize-pane -U 3 bind -n C-S-Down resize-pane -D 3 bind -n C-O split-window -v # switch panes using Alt-arrow without prefix (not working) bind -n M-Left select -pane -L bind -n M-Right select -pane -R bind -n M-Up select -pane -U bind -n M-Down select -pane -D # Shift arrow to switch windows bind n next-window bind p previous-window bind c new-window -c \"#{pane_current_path}\" bind r source-file ~/.tmux.conf","title":"tmux conf example"},{"location":"blog/linux/minimal_rootfs/","tags":["rootfs","embedded"],"text":"step 1 - minimal root # # debootstrap --arch $ARCH $RELEASE $DIR [$MIRROR] # debootstrap --arch=arm64 focal rootfs debootstrap --arch = arm64 --foreign --verbose focal rootfs ubuntu versions Version code name 22.04 Jammy Jellyfish 20.04 Focal Fossa 1804 Bionic Beaver \u2013foreign: Do the initial unpack phase of bootstrapping only, for example if the target architecture does not match the host architecture. The first stage downloads the needed .deb files and unpacks them into the directory you specify \u2013verbose Produce more info about downloading. second-stage # The second stage runs all of the package configuration scripts, which must be done using the target architecture (or by using qemu-user-static to emulate the target architecture). qemu install sudo apt install qemu-static-user binfmt-support copy into rootfs install -Dm755 $( which qemu-aarch64-static ) rootfs/usr/bin/qemu-aarch64-static mount # bind A bind mount takes an existing directory tree and replicates it under a different point. mount --bind /some/where /else/where Reference # nvidia minimal RootFS Jetson Linux Rolling your own minimal embedded Linux for the Raspberry Pi","title":"Create minimal rootfs for embedded device like jetson nano and rpi"},{"location":"blog/linux/minimal_rootfs/#step-1---minimal-root","text":"# debootstrap --arch $ARCH $RELEASE $DIR [$MIRROR] # debootstrap --arch=arm64 focal rootfs debootstrap --arch = arm64 --foreign --verbose focal rootfs ubuntu versions Version code name 22.04 Jammy Jellyfish 20.04 Focal Fossa 1804 Bionic Beaver \u2013foreign: Do the initial unpack phase of bootstrapping only, for example if the target architecture does not match the host architecture. The first stage downloads the needed .deb files and unpacks them into the directory you specify \u2013verbose Produce more info about downloading.","title":"step 1 - minimal root"},{"location":"blog/linux/minimal_rootfs/#second-stage","text":"The second stage runs all of the package configuration scripts, which must be done using the target architecture (or by using qemu-user-static to emulate the target architecture). qemu install sudo apt install qemu-static-user binfmt-support copy into rootfs install -Dm755 $( which qemu-aarch64-static ) rootfs/usr/bin/qemu-aarch64-static","title":"second-stage"},{"location":"blog/linux/minimal_rootfs/#mount","text":"bind A bind mount takes an existing directory tree and replicates it under a different point. mount --bind /some/where /else/where","title":"mount"},{"location":"blog/linux/minimal_rootfs/#reference","text":"nvidia minimal RootFS Jetson Linux Rolling your own minimal embedded Linux for the Raspberry Pi","title":"Reference"},{"location":"blog/linux/move_to_zsh/","tags":["zah","linux"],"text":"Reference # Install Oh My Zsh on Ubuntu For a Next Level Command-Line","title":"Hello ZSH"},{"location":"blog/linux/move_to_zsh/#reference","text":"Install Oh My Zsh on Ubuntu For a Next Level Command-Line","title":"Reference"},{"location":"blog/linux/apt/tips/","tags":["apt","linux","tips"],"text":"force override # Force apt-get to overwrite file installed by another package sudo apt-get -o Dpkg::Options::=\"--force-overwrite\" install","title":"apt tips"},{"location":"blog/linux/apt/tips/#force-override","text":"Force apt-get to overwrite file installed by another package sudo apt-get -o Dpkg::Options::=\"--force-overwrite\" install","title":"force override"},{"location":"blog/linux/deb/build_binary_deb_file/","tags":["deb","ubuntu","package"],"text":"Build binary deb package # A deb is a standard Unix ar archive that contains your application and other utility files. Internally, a deb package contains a collection of folders that mimics a typical Linux file system, such as /usr , /usr/bin , /opt and so on. A file put in one of those directories will be copied to the same location in the actual file system during installation deb package files follow a specific naming convention <name>_<version>-<revision>_<architecture>.deb Tutorial # Build deb package for cpp application app #include <iostream> int main ( int argc , char ** argv ){ std :: cout << \"hello debian package\" << std :: endl ; return 0 ; } build g++ hello.cpp -o hello Create temporary working directory # mkdir hello_1.0_1_amd64 mkdir -p hello_1.0_1_amd64/usr/local/bin cp hello hello_1.0_1_amd64/usr/local/bin/ control file # mkdir hello_1.0_1_amd64/DEBIAN touch hello_1.0_1_amd64/DEBIAN/control DEBIAN/control Package: hello Version: 1.0 Architecture: amd64 Maintainer: Internal Pointers Description: A program that greets you. Build # # dpkg-deb --build --root-owner-group <package-dir> dpkg-deb --build --root-owner-group hello hello_1.0_1_amd64 Test # sudo dpkg -i hello_1.0_1_amd64.deb dpkg -l | grep hello sudo dpkg -r hello scripts # Run scripts before or after package installation and removal script locate in DEBIAN sub folder permission Don\u2019t forget execute permission preinst: before install postinst: post install prerm: before remove postrm: after remove dependencies # Add dependencies to Depends section # from deb tmp folder # create empty debian/control file # use dpkg-shlibdeps to get binary dependencie # Add them to DEBIAN/control Depends section dpkg-shlibdeps -O path/to/binary/file Reference # Building binary deb packages: a practical guide The Debian Archive","title":"Build binary deb package"},{"location":"blog/linux/deb/build_binary_deb_file/#build-binary-deb-package","text":"A deb is a standard Unix ar archive that contains your application and other utility files. Internally, a deb package contains a collection of folders that mimics a typical Linux file system, such as /usr , /usr/bin , /opt and so on. A file put in one of those directories will be copied to the same location in the actual file system during installation deb package files follow a specific naming convention <name>_<version>-<revision>_<architecture>.deb","title":"Build binary deb package"},{"location":"blog/linux/deb/build_binary_deb_file/#tutorial","text":"Build deb package for cpp application app #include <iostream> int main ( int argc , char ** argv ){ std :: cout << \"hello debian package\" << std :: endl ; return 0 ; } build g++ hello.cpp -o hello","title":"Tutorial"},{"location":"blog/linux/deb/build_binary_deb_file/#create-temporary-working-directory","text":"mkdir hello_1.0_1_amd64 mkdir -p hello_1.0_1_amd64/usr/local/bin cp hello hello_1.0_1_amd64/usr/local/bin/","title":"Create temporary working directory"},{"location":"blog/linux/deb/build_binary_deb_file/#control-file","text":"mkdir hello_1.0_1_amd64/DEBIAN touch hello_1.0_1_amd64/DEBIAN/control DEBIAN/control Package: hello Version: 1.0 Architecture: amd64 Maintainer: Internal Pointers Description: A program that greets you.","title":"control file"},{"location":"blog/linux/deb/build_binary_deb_file/#build","text":"# dpkg-deb --build --root-owner-group <package-dir> dpkg-deb --build --root-owner-group hello hello_1.0_1_amd64","title":"Build"},{"location":"blog/linux/deb/build_binary_deb_file/#test","text":"sudo dpkg -i hello_1.0_1_amd64.deb dpkg -l | grep hello sudo dpkg -r hello","title":"Test"},{"location":"blog/linux/deb/build_binary_deb_file/#scripts","text":"Run scripts before or after package installation and removal script locate in DEBIAN sub folder permission Don\u2019t forget execute permission preinst: before install postinst: post install prerm: before remove postrm: after remove","title":"scripts"},{"location":"blog/linux/deb/build_binary_deb_file/#dependencies","text":"Add dependencies to Depends section # from deb tmp folder # create empty debian/control file # use dpkg-shlibdeps to get binary dependencie # Add them to DEBIAN/control Depends section dpkg-shlibdeps -O path/to/binary/file","title":"dependencies"},{"location":"blog/linux/deb/build_binary_deb_file/#reference","text":"Building binary deb packages: a practical guide The Debian Archive","title":"Reference"},{"location":"blog/linux/network_utils/ip_tools/","tags":["ip","ss"],"text":"cheat sheet # ip --brief address show Reference # 12 ss Command Examples to Monitor Network Connections","title":"ip"},{"location":"blog/linux/network_utils/ip_tools/#cheat-sheet","text":"ip --brief address show","title":"cheat sheet"},{"location":"blog/linux/network_utils/ip_tools/#reference","text":"12 ss Command Examples to Monitor Network Connections","title":"Reference"},{"location":"blog/linux/network_utils/ss_vs_netstat_cheat/","tags":["network","ss","netstat"],"text":"Netstat is a command-line network utility used to display network connections for the TCP/UDP and more. ss is a utility used to investigate sockets in Linux and Unix systems. ss netstat List all listening tcp ports and process name ss -tlp netstat -ltp List all listening udp ports and process name ss -tun netstat -lup filter by port number ss -a dst :22 Note Run ss and netstat command with sudo to see process name for ports under 1024","title":"ss vs netstat command cheat sheet"},{"location":"blog/linux/snap/","tags":["snap","linux","package"],"text":"Snap is a package management system Snap packages an application as an archive that contains the binary code, data and libraries required to run said application, including any external dependencies. snap vs apt Both enable application management via packages Snap includes everything required to run an application including its dependencies in a single package Apt expects user to deploy dependencies as separate packages.","title":"Snap"},{"location":"blog/linux/snap/deploy_python_application_with_snap/","tags":["snap","deploy","package","python"],"text":"Deploy python app as snap package install # snapcraft program is used to build snaps sudo snap install snapcraft --classic demo # \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 snapcraft.yaml \u2514\u2500\u2500 src \u251c\u2500\u2500 app.py \u251c\u2500\u2500 data.txt \u2514\u2500\u2500 __init__.py download build # Run snapcraft from application root folder snapcraft install local # Tip Any snap package that is not distributed through the Snap store has to be installed with the \u2013dangerous flag. Install without verifying sudo snap install --dangerous ./testapp_0.1_amd64.snap snapcraft.yaml # name : testapp version : '0.1' summary : python test package description : | test app for python base : core18 grade : stable confinement : strict apps : testapp : command : bin/hello plugs : [ home , network-bind ] parts : testapp : plugin : python python-version : python3 source : . stage-packages : [ ncbi-blast+ ] Name : Unique string define the snap name base : A base snap is a special kind of snap that provides a run-time environment with a minimal set of libraries that are common to most applications core18: base on ubuntu 18:04 Reference # Deploy a Python application with snapcraft Basic snapcraft.yaml example","title":"Deploy a python application with snapcraft"},{"location":"blog/linux/snap/deploy_python_application_with_snap/#install","text":"snapcraft program is used to build snaps sudo snap install snapcraft --classic","title":"install"},{"location":"blog/linux/snap/deploy_python_application_with_snap/#demo","text":"\u251c\u2500\u2500 setup.py \u251c\u2500\u2500 snapcraft.yaml \u2514\u2500\u2500 src \u251c\u2500\u2500 app.py \u251c\u2500\u2500 data.txt \u2514\u2500\u2500 __init__.py download","title":"demo"},{"location":"blog/linux/snap/deploy_python_application_with_snap/#build","text":"Run snapcraft from application root folder snapcraft","title":"build"},{"location":"blog/linux/snap/deploy_python_application_with_snap/#install-local","text":"Tip Any snap package that is not distributed through the Snap store has to be installed with the \u2013dangerous flag. Install without verifying sudo snap install --dangerous ./testapp_0.1_amd64.snap","title":"install local"},{"location":"blog/linux/snap/deploy_python_application_with_snap/#snapcraftyaml","text":"name : testapp version : '0.1' summary : python test package description : | test app for python base : core18 grade : stable confinement : strict apps : testapp : command : bin/hello plugs : [ home , network-bind ] parts : testapp : plugin : python python-version : python3 source : . stage-packages : [ ncbi-blast+ ] Name : Unique string define the snap name base : A base snap is a special kind of snap that provides a run-time environment with a minimal set of libraries that are common to most applications core18: base on ubuntu 18:04","title":"snapcraft.yaml"},{"location":"blog/linux/snap/deploy_python_application_with_snap/#reference","text":"Deploy a Python application with snapcraft Basic snapcraft.yaml example","title":"Reference"},{"location":"blog/linux/ssh/ssh_config/","tags":["ssh"],"text":"Reference # Using the SSH Config File","title":"ssh config file"},{"location":"blog/linux/ssh/ssh_config/#reference","text":"Using the SSH Config File","title":"Reference"},{"location":"blog/linux/systemd/minimal_service/","tags":["systemd","service"],"text":"User Scope # How to run systemd service run by unprivileged user place the service script in ~/.config/systemd/user run systemctl command with --user argument demo # mkdir -p ~/.config/systemd/user [Unit] Description = My new Service [Service] Type = simple ExecStart = /bin/sh -c 'echo \"hello service\" >> /tmp/my_service.log 2>&1' [Install] WantedBy = default.target systemctl --user enable minimal.service systemctl --user daemon-reload systemctl --user start minimal.service system boot OS run the service at boot time only when we set the WantedBy to default.target systemctl with sudo oneliner # echo <pass> | sudo -S <systemctl command> # Reference # systemd user services and systemctl \u2013user Understanding systemd at startup on Linux","title":"Systemd minimal service"},{"location":"blog/linux/systemd/minimal_service/#user-scope","text":"How to run systemd service run by unprivileged user place the service script in ~/.config/systemd/user run systemctl command with --user argument","title":"User Scope"},{"location":"blog/linux/systemd/minimal_service/#demo","text":"mkdir -p ~/.config/systemd/user [Unit] Description = My new Service [Service] Type = simple ExecStart = /bin/sh -c 'echo \"hello service\" >> /tmp/my_service.log 2>&1' [Install] WantedBy = default.target systemctl --user enable minimal.service systemctl --user daemon-reload systemctl --user start minimal.service system boot OS run the service at boot time only when we set the WantedBy to default.target","title":"demo"},{"location":"blog/linux/systemd/minimal_service/#systemctl-with-sudo-oneliner","text":"","title":"systemctl with sudo oneliner"},{"location":"blog/linux/systemd/minimal_service/#echo-pass--sudo--s-systemctl-command","text":"","title":"echo &lt;pass&gt; | sudo -S &lt;systemctl command&gt;\n"},{"location":"blog/linux/systemd/minimal_service/#reference","text":"systemd user services and systemctl \u2013user Understanding systemd at startup on Linux","title":"Reference"},{"location":"blog/mkdocs/plugins/","tags":["mkdocs","plugins","extensions"],"text":"mkdocs-material # Speak for itself Getting started MkDocs Awesome Pages # The awesome-pages plugin allows you to customize how your pages show up the navigation of your MkDocs without having to configure the full structure in your mkdocs.yml For more info install pip install mkdocs-awesome-pages-plugin yml config plugins: - awesome-pages Usage # Create .pages file in subdirectory to order nav: - subdirectory - page1.md - page2.md Note More examples in project README mkdocs-jupyter # Use Jupyter Notebooks in mkdocs github install pip install mkdocs-jupyter Usage # mkdocs.yml plugins: - mkdocs-jupyter The first h1 header (#) in your notebook will be used as the title. Video # This plugin allows you to embed videos on the documentation pages using a simple Markdown syntax. github install pip install mkdocs-video config # mkdocs.yml plugins: - mkdocs-video usage # ![type:video](https://www.youtube.com/embed/LXb3EKWsInQ)","title":"mkdocs plugins"},{"location":"blog/mkdocs/plugins/#mkdocs-material","text":"Speak for itself Getting started","title":"mkdocs-material"},{"location":"blog/mkdocs/plugins/#mkdocs-awesome-pages","text":"The awesome-pages plugin allows you to customize how your pages show up the navigation of your MkDocs without having to configure the full structure in your mkdocs.yml For more info install pip install mkdocs-awesome-pages-plugin yml config plugins: - awesome-pages","title":"MkDocs Awesome Pages"},{"location":"blog/mkdocs/plugins/#usage","text":"Create .pages file in subdirectory to order nav: - subdirectory - page1.md - page2.md Note More examples in project README","title":"Usage"},{"location":"blog/mkdocs/plugins/#mkdocs-jupyter","text":"Use Jupyter Notebooks in mkdocs github install pip install mkdocs-jupyter","title":"mkdocs-jupyter"},{"location":"blog/mkdocs/plugins/#usage_1","text":"mkdocs.yml plugins: - mkdocs-jupyter The first h1 header (#) in your notebook will be used as the title.","title":"Usage"},{"location":"blog/mkdocs/plugins/#video","text":"This plugin allows you to embed videos on the documentation pages using a simple Markdown syntax. github install pip install mkdocs-video","title":"Video"},{"location":"blog/mkdocs/plugins/#config","text":"mkdocs.yml plugins: - mkdocs-video","title":"config"},{"location":"blog/mkdocs/plugins/#usage_2","text":"![type:video](https://www.youtube.com/embed/LXb3EKWsInQ)","title":"usage"},{"location":"blog/mkdocs/tips/","tags":["mkdocs","tips"],"text":"image size # ![](images/mkdocs.png){width=50} ![](images/mkdocs.png){width=150} image as url link # [![](images/mkdocs.png){width=50}](plugins.md) image align # Text on right side Text on right side Text on right side Text on right side ![](images/mkdocs.png){ align=left width=150} # Table cell with multiple line # using HTML tag <br> | Format | Tag example | | -------- | --------------------------- | | multiline | line1<br>==line2==<br>line3 | Format Tag example multiline line1 line2 line3","title":"mkdocs tips"},{"location":"blog/mkdocs/tips/#image-size","text":"![](images/mkdocs.png){width=50} ![](images/mkdocs.png){width=150}","title":"image size"},{"location":"blog/mkdocs/tips/#image-as-url-link","text":"[![](images/mkdocs.png){width=50}](plugins.md)","title":"image as url link"},{"location":"blog/mkdocs/tips/#image-align","text":"Text on right side Text on right side Text on right side Text on right side","title":"image align"},{"location":"blog/mkdocs/tips/#imagesmkdocspng-alignleft-width150","text":"","title":"![](images/mkdocs.png){ align=left width=150}\n"},{"location":"blog/mkdocs/tips/#table-cell-with-multiple-line","text":"using HTML tag <br> | Format | Tag example | | -------- | --------------------------- | | multiline | line1<br>==line2==<br>line3 | Format Tag example multiline line1 line2 line3","title":"Table cell with multiple line"},{"location":"blog/networking/socat/","tags":["socat","networking"],"text":"install # sudo apt install socat usage # socat [options] <address> <address> check this link for more info socat is a bidirectional stream protocol by default connect two data sources and stream data between them Unidirectional Stream # The -u flag means that the stream of data runs from the first argument to the second argument The -U flag reverse the stream socat -u arg1 arg2 is the same as socat -U arg2 arg1. Reference # socat Cindy Sridharan The socat Command in Linux","title":"SOCAT"},{"location":"blog/networking/socat/#install","text":"sudo apt install socat","title":"install"},{"location":"blog/networking/socat/#usage","text":"socat [options] <address> <address> check this link for more info socat is a bidirectional stream protocol by default connect two data sources and stream data between them","title":"usage"},{"location":"blog/networking/socat/#unidirectional-stream","text":"The -u flag means that the stream of data runs from the first argument to the second argument The -U flag reverse the stream socat -u arg1 arg2 is the same as socat -U arg2 arg1.","title":"Unidirectional Stream"},{"location":"blog/networking/socat/#reference","text":"socat Cindy Sridharan The socat Command in Linux","title":"Reference"},{"location":"blog/networking/socat/serial/","tags":["socat","serial"],"text":"demo # # server (udp-serial) socat -d -d -d udp-listen:1234 open:/dev/ttyUSB0,raw,nonblock,waitlock = /tmp/s0.lock,echo = 0 ,b115200,crnl # client socat - UDP:127.0.0.1:1234 socat -d -d -d UDP-RECVFROM:1234,fork open:/dev/ttyUSB0,raw,nonblock,waitlock = /tmp/s0.lock,echo = 0 ,b115200,crnl Note TTY ports are direct connections to the computer such as a keyboard/mouse or a serial connection to the device. PTS connections are SSH connections or telnet connections Difference between /dev/tty and /dev/pts (tty vs pts) in Linux serial echo server # server socat -d -d pty,raw,echo = 0 exec: '/bin/cat' ,pty,raw,echo = 0 # output N PTY is /dev/pts/6 socat [ 117907 ] N forking off child, using pty for reading and writing socat [ 117907 ] N forked off child process 117908 socat [ 117907 ] N forked off child process 117908 socat [ 117907 ] N starting data transfer loop with FDs [ 5 ,5 ] and [ 7 ,7 ] socat [ 117908 ] N execvp ' ing \"/bin/cat\" client socat - /dev/pts/6","title":"SOCAT serial"},{"location":"blog/networking/socat/serial/#demo","text":"# server (udp-serial) socat -d -d -d udp-listen:1234 open:/dev/ttyUSB0,raw,nonblock,waitlock = /tmp/s0.lock,echo = 0 ,b115200,crnl # client socat - UDP:127.0.0.1:1234 socat -d -d -d UDP-RECVFROM:1234,fork open:/dev/ttyUSB0,raw,nonblock,waitlock = /tmp/s0.lock,echo = 0 ,b115200,crnl Note TTY ports are direct connections to the computer such as a keyboard/mouse or a serial connection to the device. PTS connections are SSH connections or telnet connections Difference between /dev/tty and /dev/pts (tty vs pts) in Linux","title":"demo"},{"location":"blog/networking/socat/serial/#serial-echo-server","text":"server socat -d -d pty,raw,echo = 0 exec: '/bin/cat' ,pty,raw,echo = 0 # output N PTY is /dev/pts/6 socat [ 117907 ] N forking off child, using pty for reading and writing socat [ 117907 ] N forked off child process 117908 socat [ 117907 ] N forked off child process 117908 socat [ 117907 ] N starting data transfer loop with FDs [ 5 ,5 ] and [ 7 ,7 ] socat [ 117908 ] N execvp ' ing \"/bin/cat\" client socat - /dev/pts/6","title":"serial echo server"},{"location":"blog/networking/socat/udp/","tags":["socat","udp"],"text":"Connected vs unconnected # UDP sockets can be \u201cconnected\u201d (or \u201cestablished\u201d) or \u201cunconnected\u201d. - Connected sockets have a full 4-tuple associated {source ip, source port, destination ip, destination port} - Unconnected sockets have 2-tuple {bind ip, bind port}. unconnected # server socat UDP-RECV:1234 - client socat STDIO udp-sendto:127.0.0.1:1234 Connection established only when data send ss -panu sport = :1234 or dport = :1234 | cat State Recv-Q Send-Q Local Address:Port Peer Address:Port Process UNCONN 0 0 0.0.0.0:1234 0.0.0.0:* users:((\"socat\",pid=144971,fd=5)) Demo: Test connected server # server socat UDP-RECV:1234 - client 1 socat STDIO udp-sendto:127.0.0.1:1234 # send data client 2 socat STDIO udp-sendto:127.0.0.1:1234 # send data connected # server socat udp-l:1234 - client socat STDIO udp:127.0.0.1:1234 Connection established when call connect ss -panu sport = :1234 or dport = :1234 | cat State Recv-Q Send-Q Local Address:Port Peer Address:Port Process ESTAB 0 0 127.0.0.1:47917 127.0.0.1:1234 users:((\"socat\",pid=144636,fd=5)) UNCONN 0 0 0.0.0.0:1234 0.0.0.0:* users:((\"socat\",pid=144633,fd=5)) Demo: Test connected server # Establish server Client Connect Second client connect and try send data server socat udp-l:1234 - client 1 socat STDIO udp:127.0.0.1:1234 # send data client 2 socat STDIO udp:127.0.0.1:1234 # 2022 /06/28 21 :42:56 socat [ 145414 ] E read ( 5 , 0x556853768010, 8192 ) : Connection refused echo server # terminal1 - server # udp server socat -v udp-l:1234,fork exec: '/bin/cat' terminal1 - client nc -u 127 .0.0.1 1234 # or socat - udp:127.0.0.1:1234 Broadcasting / Multicasting / Unicasting # Broadcasting # server / listener socat udp-recv:1234 - client socat - UDP-DATAGRAM:192.168.1.255:1234,broadcast,sp = 11111 # tcpdump sudo tcpdump -n -i <eth_name> udp 192 .168.1.207.11111 > 192 .168.1.255.1234: UDP, length 3 summary # # connected # server socat STDIO UDP-LISTEN:11111 # client socat - UDP:localhost:11111 # unconnected # server socat UDP-RECV:11111 STDOUT # client socat STDIN UDP-SENDTO:127.0.0.1:11111 # Server socat UDP-RECVFROM:11111,fork STDOUT Reference # Everything you ever wanted to know about UDP sockets but were afraid to ask, part 1 socat udp So much UDP that it is all over you screen","title":"SOCAT udp"},{"location":"blog/networking/socat/udp/#connected-vs-unconnected","text":"UDP sockets can be \u201cconnected\u201d (or \u201cestablished\u201d) or \u201cunconnected\u201d. - Connected sockets have a full 4-tuple associated {source ip, source port, destination ip, destination port} - Unconnected sockets have 2-tuple {bind ip, bind port}.","title":"Connected vs unconnected"},{"location":"blog/networking/socat/udp/#unconnected","text":"server socat UDP-RECV:1234 - client socat STDIO udp-sendto:127.0.0.1:1234 Connection established only when data send ss -panu sport = :1234 or dport = :1234 | cat State Recv-Q Send-Q Local Address:Port Peer Address:Port Process UNCONN 0 0 0.0.0.0:1234 0.0.0.0:* users:((\"socat\",pid=144971,fd=5))","title":"unconnected"},{"location":"blog/networking/socat/udp/#demo-test-connected-server","text":"server socat UDP-RECV:1234 - client 1 socat STDIO udp-sendto:127.0.0.1:1234 # send data client 2 socat STDIO udp-sendto:127.0.0.1:1234 # send data","title":"Demo: Test connected server"},{"location":"blog/networking/socat/udp/#connected","text":"server socat udp-l:1234 - client socat STDIO udp:127.0.0.1:1234 Connection established when call connect ss -panu sport = :1234 or dport = :1234 | cat State Recv-Q Send-Q Local Address:Port Peer Address:Port Process ESTAB 0 0 127.0.0.1:47917 127.0.0.1:1234 users:((\"socat\",pid=144636,fd=5)) UNCONN 0 0 0.0.0.0:1234 0.0.0.0:* users:((\"socat\",pid=144633,fd=5))","title":"connected"},{"location":"blog/networking/socat/udp/#demo-test-connected-server_1","text":"Establish server Client Connect Second client connect and try send data server socat udp-l:1234 - client 1 socat STDIO udp:127.0.0.1:1234 # send data client 2 socat STDIO udp:127.0.0.1:1234 # 2022 /06/28 21 :42:56 socat [ 145414 ] E read ( 5 , 0x556853768010, 8192 ) : Connection refused","title":"Demo: Test connected server"},{"location":"blog/networking/socat/udp/#echo-server","text":"terminal1 - server # udp server socat -v udp-l:1234,fork exec: '/bin/cat' terminal1 - client nc -u 127 .0.0.1 1234 # or socat - udp:127.0.0.1:1234","title":"echo server"},{"location":"blog/networking/socat/udp/#broadcasting--multicasting---unicasting","text":"","title":"Broadcasting / Multicasting  / Unicasting"},{"location":"blog/networking/socat/udp/#broadcasting","text":"server / listener socat udp-recv:1234 - client socat - UDP-DATAGRAM:192.168.1.255:1234,broadcast,sp = 11111 # tcpdump sudo tcpdump -n -i <eth_name> udp 192 .168.1.207.11111 > 192 .168.1.255.1234: UDP, length 3","title":"Broadcasting"},{"location":"blog/networking/socat/udp/#summary","text":"# connected # server socat STDIO UDP-LISTEN:11111 # client socat - UDP:localhost:11111 # unconnected # server socat UDP-RECV:11111 STDOUT # client socat STDIN UDP-SENDTO:127.0.0.1:11111 # Server socat UDP-RECVFROM:11111,fork STDOUT","title":"summary"},{"location":"blog/networking/socat/udp/#reference","text":"Everything you ever wanted to know about UDP sockets but were afraid to ask, part 1 socat udp So much UDP that it is all over you screen","title":"Reference"},{"location":"blog/networking/tc/adding_latency_and_limiting_bandwidth/","tags":["tc","networking","linux"],"text":"HTB help you to control the use of the outbound bandwidth on a given link ping 8.8.8.8 PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data. 64 bytes from 8.8.8.8: icmp_seq=1 ttl=115 time=67.2 ms 64 bytes from 8.8.8.8: icmp_seq=2 ttl=115 time=67.6 ms INTERFACE = wlo1 IP = 8 .8.8.8/32 sudo tc qdisc add dev $INTERFACE root handle 1 :0 htb default 10 # class sudo tc class add dev $INTERFACE parent 1 :0 classid 1 :10 htb rate 1024mbit # latency sudo tc qdisc add dev $INTERFACE parent 1 :10 handle 10 :0 netem delay 200ms # filter sudo tc filter add dev $INTERFACE protocol ip parent 1 :0 prio 1 u32 match ip dst $IP flowid 1 :10 result # ping 8.8.8.8 ping 8 .8.8.8 PING 8 .8.8.8 ( 8 .8.8.8 ) 56 ( 84 ) bytes of data. 64 bytes from 8 .8.8.8: icmp_seq = 1 ttl = 115 time = 267 ms 64 bytes from 8 .8.8.8: icmp_seq = 2 ttl = 115 time = 267 ms 64 bytes from 8 .8.8.8: icmp_seq = 3 ttl = 115 time = 268 ms # ping google.com # resolve domain with dig `dig google.com` ping 142 .250.186.46 PING 142 .250.186.46 ( 142 .250.186.46 ) 56 ( 84 ) bytes of data. 64 bytes from 142 .250.186.46: icmp_seq = 1 ttl = 114 time = 84 .4 ms 64 bytes from 142 .250.186.46: icmp_seq = 2 ttl = 114 time = 80 .7 ms 64 bytes from 142 .250.186.46: icmp_seq = 3 ttl = 114 time = 82 .6 ms remove sudo tc qdisc del dev $INTERFACE root Reference # Adding Latency and Limiting Bandwidth","title":"Adding Latency and Limiting Bandwidth"},{"location":"blog/networking/tc/adding_latency_and_limiting_bandwidth/#reference","text":"Adding Latency and Limiting Bandwidth","title":"Reference"},{"location":"blog/networking/udp/big_packet_and_mtu/","tags":["udp","mtu"],"text":"Code demo # udp #!/usr/bin/env python3 import socket # Inlined constants, because Python 3.6 has dropped the IN module. class IN : IP_MTU = 14 IP_MTU_DISCOVER = 10 IP_PMTUDISC_DO = 2 def send_big_datagram ( host , port ): sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) # sock.setsockopt(socket.IPPROTO_IP, IN.IP_MTU_DISCOVER, IN.IP_PMTUDISC_DO) sock . connect (( host , port )) try : sock . send ( b '#' * 1500 ) except socket . error as e : print ( e ) print ( 'Alas, the datagram did not make it' ) max_mtu = sock . getsockopt ( socket . IPPROTO_IP , IN . IP_MTU ) print ( 'Actual MTU: {} ' . format ( max_mtu )) else : print ( 'The big datagram was sent!' ) if __name__ == '__main__' : send_big_datagram ( \"172.17.0.2\" , 1060 ) Test # Create ubuntu docker image with tcpdump and netcat FROM ubuntu:20.04 RUN apt-get update && apt-get install --no-install-recommends --yes \\ tcpdump \\ net-tools \\ netcat CMD [\"/bin/sh\"] Test 1: Test 123 # Run docker image Run tcpdump and sniff for icmp Send ping from host machine tcpdump -n -i eth0 icmp Test 2: send udp packet less then MTU # docker shell1 tcpdump -n -i eth0 udp and port 1060 or icmp docker shell2 nc -ul 1060 Test 3: send udp packet bigger then MTU # Run tcpdump and nc like in Test 2 send with sock.setsockopt(socket.IPPROTO_IP, IN.IP_MTU_DISCOVER, IN.IP_PMTUDISC_DO) comment the above line with IP_PMTUDISC_DO python examples/python/networking/udp/big_Sender.py # result [ Errno 90 ] Message too long Alas, the datagram did not make it Actual MTU: 1500 # packet not send at all without setsockopt python examples/python/networking/udp/big_Sender.py # Host Result The big datagram was sent! # shell 1: tcpdump 19 :11:06.400842 IP 172 .17.0.1.47327 > 172 .17.0.2.1060: UDP, bad length 1500 > 1472 # shell 2: nc show 1500 char of '#' 19:14:46.502573 IP 172.17.0.2.1060 > 172.17.0.1.48321: UDP, length 1 19:14:46.502686 IP 172.17.0.1 > 172.17.0.2: ICMP 172.17.0.1 udp port 48321 unreachable, length 37 19:14:51.960248 IP 172.17.0.1.58025 > 172.17.0.2.1060: UDP, bad length 1500 > 1472","title":"udp big packet and MTU"},{"location":"blog/networking/udp/big_packet_and_mtu/#code-demo","text":"udp #!/usr/bin/env python3 import socket # Inlined constants, because Python 3.6 has dropped the IN module. class IN : IP_MTU = 14 IP_MTU_DISCOVER = 10 IP_PMTUDISC_DO = 2 def send_big_datagram ( host , port ): sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) # sock.setsockopt(socket.IPPROTO_IP, IN.IP_MTU_DISCOVER, IN.IP_PMTUDISC_DO) sock . connect (( host , port )) try : sock . send ( b '#' * 1500 ) except socket . error as e : print ( e ) print ( 'Alas, the datagram did not make it' ) max_mtu = sock . getsockopt ( socket . IPPROTO_IP , IN . IP_MTU ) print ( 'Actual MTU: {} ' . format ( max_mtu )) else : print ( 'The big datagram was sent!' ) if __name__ == '__main__' : send_big_datagram ( \"172.17.0.2\" , 1060 )","title":"Code demo"},{"location":"blog/networking/udp/big_packet_and_mtu/#test","text":"Create ubuntu docker image with tcpdump and netcat FROM ubuntu:20.04 RUN apt-get update && apt-get install --no-install-recommends --yes \\ tcpdump \\ net-tools \\ netcat CMD [\"/bin/sh\"]","title":"Test"},{"location":"blog/networking/udp/big_packet_and_mtu/#test-1-test-123","text":"Run docker image Run tcpdump and sniff for icmp Send ping from host machine tcpdump -n -i eth0 icmp","title":"Test 1: Test 123"},{"location":"blog/networking/udp/big_packet_and_mtu/#test-2-send-udp-packet-less-then-mtu","text":"docker shell1 tcpdump -n -i eth0 udp and port 1060 or icmp docker shell2 nc -ul 1060","title":"Test 2: send udp packet less then MTU"},{"location":"blog/networking/udp/big_packet_and_mtu/#test-3-send-udp-packet-bigger-then-mtu","text":"Run tcpdump and nc like in Test 2 send with sock.setsockopt(socket.IPPROTO_IP, IN.IP_MTU_DISCOVER, IN.IP_PMTUDISC_DO) comment the above line with IP_PMTUDISC_DO python examples/python/networking/udp/big_Sender.py # result [ Errno 90 ] Message too long Alas, the datagram did not make it Actual MTU: 1500 # packet not send at all without setsockopt python examples/python/networking/udp/big_Sender.py # Host Result The big datagram was sent! # shell 1: tcpdump 19 :11:06.400842 IP 172 .17.0.1.47327 > 172 .17.0.2.1060: UDP, bad length 1500 > 1472 # shell 2: nc show 1500 char of '#' 19:14:46.502573 IP 172.17.0.2.1060 > 172.17.0.1.48321: UDP, length 1 19:14:46.502686 IP 172.17.0.1 > 172.17.0.2: ICMP 172.17.0.1 udp port 48321 unreachable, length 37 19:14:51.960248 IP 172.17.0.1.58025 > 172.17.0.2.1060: UDP, bad length 1500 > 1472","title":"Test 3: send udp packet bigger then MTU"},{"location":"blog/networking/udp/multi_port_udp_server/","tags":["udp","select"],"text":"multiport import socket import select sockets = [] for port in range ( 1234 , 1236 ): server_socket = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) server_socket . bind (( '0.0.0.0' , port )) sockets . append ( server_socket ) empty = [] while True : readable , writable , exceptional = select . select ( sockets , empty , empty ) for s in readable : ( client_data , client_address ) = s . recvfrom ( 1024 ) print ( client_address , client_data ) s . sendto ( client_data , client_address ) for s in sockets : s . close ()","title":"multi port udp server"},{"location":"blog/px4/","text":"","title":"Index"},{"location":"blog/px4/sitl/","tags":["px4","sitl"],"text":"build # build using docker run # cd /home/user/px4/PX4-Autopilot/build/px4_sitl_default ./bin/px4 etc","title":"PX4 sitl build and run"},{"location":"blog/px4/sitl/#build","text":"build using docker","title":"build"},{"location":"blog/px4/sitl/#run","text":"cd /home/user/px4/PX4-Autopilot/build/px4_sitl_default ./bin/px4 etc","title":"run"},{"location":"blog/robotics/control/","tags":["robotics"],"text":"Reference # 41013 Robotics Fundamentals of Robotics","title":"Robotics"},{"location":"blog/robotics/control/#reference","text":"41013 Robotics Fundamentals of Robotics","title":"Reference"},{"location":"blog/robotics/control/kalman_filter/","tags":["kalman_filter"],"text":"Reference # Kalman Filters: A step by step implementation guide in python Object Tracking: Simple Implementation of Kalman Filter in Python","title":"Kalman filter"},{"location":"blog/robotics/control/kalman_filter/#reference","text":"Kalman Filters: A step by step implementation guide in python Object Tracking: Simple Implementation of Kalman Filter in Python","title":"Reference"},{"location":"blog/robotics/control/kalman_filter/michel_van_biezen_course/","tags":["kalman","filter"],"text":"Michel van biezen Kalman filter course Kalman filter is an iterative math process that use a set of equations and consecutive data input to quickly ESTIMATE the True value of the object begin measured when the measure values contain random error / uncertainty / variation Single measured value #","title":"The Kalman Filter"},{"location":"blog/robotics/control/kalman_filter/michel_van_biezen_course/#single-measured-value","text":"","title":"Single measured value"},{"location":"blog/robotics/control/pid/hello_pid/","tags":["control","pid","101"],"text":"Reference # Intro to Control Theory","title":"Hello PID"},{"location":"blog/robotics/control/pid/hello_pid/#reference","text":"Intro to Control Theory","title":"Reference"},{"location":"blog/vscode/extensions/","tags":["vscode","extensions"],"text":"VSCode extensions # Jupyter Notebook Renderers # python jupyter render Jupyter Notebook Renderers","title":"VSCode extensions"},{"location":"blog/vscode/extensions/#vscode-extensions","text":"","title":"VSCode extensions"},{"location":"blog/vscode/extensions/#jupyter-notebook-renderers","text":"python jupyter render Jupyter Notebook Renderers","title":"Jupyter Notebook Renderers"},{"location":"blog/vscode/my_extension_list/","tags":["vscode","extensions"],"text":"My VSCode extensions list # For python , C++ and dev helper category autoDocstring python Generates python docstrings automatically Git Graph git View a Git Graph of your repository, and perform Git actions from the graph. Auto close tag xml Automatically add HTML/XML close tag Auto Snippet dev insert a snippet when opening an empty file C/C++ C++ C/C++ IntelliSense, debugging C++ TestMate CMake CMake langage support CMake Tools Code Runner dev Code Spell Checker dev Draw.io Paste Image doc paste image from clipboard directly Path Intellisense dev Project manager Pylance Pylint Python TabOut dev Tab out of quotes, brackets, etc Task dev Load VSCode Tasks into Status Bar TODO Highlight dev highlight TODOs, FIXMEs, and any keywords, annotations XML xml YAML Language Support XML Tools xml XML Formatting, XQuery, and XPath Tools YAML yaml YAML Language Support ROS2 ros Syntax highlighting for ros2 interface files docker dev-container","title":"My VSCode extensions list"},{"location":"blog/vscode/my_extension_list/#my-vscode-extensions-list","text":"For python , C++ and dev helper category autoDocstring python Generates python docstrings automatically Git Graph git View a Git Graph of your repository, and perform Git actions from the graph. Auto close tag xml Automatically add HTML/XML close tag Auto Snippet dev insert a snippet when opening an empty file C/C++ C++ C/C++ IntelliSense, debugging C++ TestMate CMake CMake langage support CMake Tools Code Runner dev Code Spell Checker dev Draw.io Paste Image doc paste image from clipboard directly Path Intellisense dev Project manager Pylance Pylint Python TabOut dev Tab out of quotes, brackets, etc Task dev Load VSCode Tasks into Status Bar TODO Highlight dev highlight TODOs, FIXMEs, and any keywords, annotations XML xml YAML Language Support XML Tools xml XML Formatting, XQuery, and XPath Tools YAML yaml YAML Language Support ROS2 ros Syntax highlighting for ros2 interface files docker dev-container","title":"My VSCode extensions list"},{"location":"blog/vscode/tips/","tags":["vscode","tips"],"text":"VSCode tips and settings # editor # XML Region # <!-- #region --> ... <!-- #endregion --> tasks # Global tasks # Place task file at ~/.config/Code/User/tasks.json XML Region # Wrap selection # using snippet use case # Add mkdocs text highlight on selection snippet \"mk_text_highlight\" : { \"prefix\" : \"mk_h\" , \"body\" : [ \"==${TM_SELECTED_TEXT}==\" ], \"description\" : \"highlight text\" } Add shortcut keyboard shortcut { \"key\" : \"ctrl+h\" , \"command\" : \"editor.action.insertSnippet\" , \"when\" : \"editorTextFocus\" , \"args\" : { \"name\" : \"mk_text_highlight\" , \"langId\" : \"markdown\" } } Extensions # ignore recommendation # Stop VSCode to check and suggest recommendation ext. \"extensions.ignoreRecommendations\" : true","title":"VSCode tips and settings"},{"location":"blog/vscode/tips/#vscode-tips-and-settings","text":"","title":"VSCode tips and settings"},{"location":"blog/vscode/tips/#editor","text":"","title":"editor"},{"location":"blog/vscode/tips/#xml-region","text":"<!-- #region --> ... <!-- #endregion -->","title":"XML Region"},{"location":"blog/vscode/tips/#tasks","text":"","title":"tasks"},{"location":"blog/vscode/tips/#global-tasks","text":"Place task file at ~/.config/Code/User/tasks.json","title":"Global tasks"},{"location":"blog/vscode/tips/#xml-region_1","text":"","title":"XML Region"},{"location":"blog/vscode/tips/#wrap-selection","text":"using snippet","title":"Wrap selection"},{"location":"blog/vscode/tips/#use-case","text":"Add mkdocs text highlight on selection snippet \"mk_text_highlight\" : { \"prefix\" : \"mk_h\" , \"body\" : [ \"==${TM_SELECTED_TEXT}==\" ], \"description\" : \"highlight text\" } Add shortcut keyboard shortcut { \"key\" : \"ctrl+h\" , \"command\" : \"editor.action.insertSnippet\" , \"when\" : \"editorTextFocus\" , \"args\" : { \"name\" : \"mk_text_highlight\" , \"langId\" : \"markdown\" } }","title":"use case"},{"location":"blog/vscode/tips/#extensions","text":"","title":"Extensions"},{"location":"blog/vscode/tips/#ignore-recommendation","text":"Stop VSCode to check and suggest recommendation ext. \"extensions.ignoreRecommendations\" : true","title":"ignore recommendation"},{"location":"blog/vscode/todo/","tags":["vscode","todo","vscode-ext"],"text":"Priority: (A) capital letter first in line Project: +project anywhere in line non-whitespace Context: @context anywhere in line non-whitespace tag: key:value x as first character mark task completion github todo primer VSCode ext # Commands and decorators for managing todo.txt files marketplace Note ctrl+shift+x: Toggle completion References # todotxt todo spec vscode todotxt-mode","title":"todo.txt"},{"location":"blog/vscode/todo/#vscode-ext","text":"Commands and decorators for managing todo.txt files marketplace Note ctrl+shift+x: Toggle completion","title":"VSCode ext"},{"location":"blog/vscode/todo/#references","text":"todotxt todo spec vscode todotxt-mode","title":"References"},{"location":"blog/vscode/yaml_json_schema/","tags":["json","yaml","json","schema","vscode"],"text":"VSCode has the ability to display autocomplete suggestions for JSON and YAML format out of the box. It\u2019s use JSON schema to do it JSON Schema # JSON Schema is a specification that allows you to describe the structure of a JSON document and validate documents against that schema. VSCode # Install YAML red hat settings # \"yaml.schemas\" : { \"<shema file location>.json\" : \"<file useage by schema>.yaml\" , \"<shema file location>.json\" : \"<file useage by schema>.json\" }, References # How to create your own auto-completion for JSON and YAML files on VS Code with the help of JSON Schema","title":"yaml json files and json-schema"},{"location":"blog/vscode/yaml_json_schema/#json-schema","text":"JSON Schema is a specification that allows you to describe the structure of a JSON document and validate documents against that schema.","title":"JSON Schema"},{"location":"blog/vscode/yaml_json_schema/#vscode","text":"Install YAML red hat","title":"VSCode"},{"location":"blog/vscode/yaml_json_schema/#settings","text":"\"yaml.schemas\" : { \"<shema file location>.json\" : \"<file useage by schema>.yaml\" , \"<shema file location>.json\" : \"<file useage by schema>.json\" },","title":"settings"},{"location":"blog/vscode/yaml_json_schema/#references","text":"How to create your own auto-completion for JSON and YAML files on VS Code with the help of JSON Schema","title":"References"},{"location":"blog/vscode/dev_container/","tags":["vscode","dev","docker"],"text":"devcontainer for python project docker tips # Installing non-root user # ARG USERNAME = user ARG USER_UID = 1000 ARG USER_GID = $USER_UID # Create a non-root user RUN groupadd --gid $USER_GID $USERNAME \\ && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\ # [ Optional ] Add sudo support for the non-root user && apt-get update \\ && apt-get install -y sudo git-core bash-completion \\ && echo $USERNAME ALL = \\( root \\) NOPASSWD:ALL > /etc/sudoers.d/ $USERNAME \\ && chmod 0440 /etc/sudoers.d/ $USERNAME \\ # Cleanup && rm -rf /var/lib/apt/lists/* USER $USERNAME WORKDIR /home/$USERNAME dev container Tips # set non root user # \"remoteUser\" : \"nonroot\" # Reference # Dev Container metadata reference","title":"VSCode dev containers"},{"location":"blog/vscode/dev_container/#docker-tips","text":"","title":"docker tips"},{"location":"blog/vscode/dev_container/#installing-non-root-user","text":"ARG USERNAME = user ARG USER_UID = 1000 ARG USER_GID = $USER_UID # Create a non-root user RUN groupadd --gid $USER_GID $USERNAME \\ && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\ # [ Optional ] Add sudo support for the non-root user && apt-get update \\ && apt-get install -y sudo git-core bash-completion \\ && echo $USERNAME ALL = \\( root \\) NOPASSWD:ALL > /etc/sudoers.d/ $USERNAME \\ && chmod 0440 /etc/sudoers.d/ $USERNAME \\ # Cleanup && rm -rf /var/lib/apt/lists/* USER $USERNAME WORKDIR /home/$USERNAME","title":"Installing non-root user"},{"location":"blog/vscode/dev_container/#dev-container-tips","text":"","title":"dev container Tips"},{"location":"blog/vscode/dev_container/#set-non-root-user","text":"","title":"set non root user"},{"location":"blog/vscode/dev_container/#remoteuser-nonroot","text":"","title":"&quot;remoteUser&quot;: &quot;nonroot&quot;\n"},{"location":"blog/vscode/dev_container/#reference","text":"Dev Container metadata reference","title":"Reference"},{"location":"blog/vscode/dev_container/dev_container/","tags":["vscode","dev"],"text":"References # install vscode server","title":"VSCode dev-containers"},{"location":"blog/vscode/dev_container/dev_container/#references","text":"install vscode server","title":"References"},{"location":"blog/vscode/dev_container/python_project/","tags":["vscode","dev","docker"],"text":"Reference # How to create a Devcontainer for your Python project","title":"How to create a Devcontainer for your Python project"},{"location":"blog/vscode/dev_container/python_project/#reference","text":"How to create a Devcontainer for your Python project","title":"Reference"},{"location":"blog/yocto/part1_hello_yocto/","tags":["yocto","101"],"text":"Elements of embedded linux # Toolchain: Compiler and other tools needed to build code for target device Bootloader: The program that init the board and load the linux kernel Kernel Root F.S: Contain all programs and libraries for our system Yocto # Yocto project provide tools for create custom linux distributions for any H.W Poky # Poky is a reference/example linux distribution create by yocto The poky repository is an aggregation of several repositories: - openembedded-core - bitbake - meta-poky - yocto-docs Poky = Bitback + Metadata Note Yocto is a origination like canonical Poky is like ubuntu Note the \u2018meta\u2019 folder in the poky repository corresponds to the Openembedded Core layer, e.g. https://git.openembedded.org/openembedded-core/. OE Core includes the main components/recipes that are widely used for any configuration. Metadata # Build instructions From where obtain sources Changes / additions to sources Metadata in yocto is collection of - configuration file (.conf) - Recipes (.bb and .bbappend) - Class (.bbclass) - Includes (.inc) Note he \u2018meta-oe\u2019 folder in meta-openembedded is another layer typically called the \u2018openembedded\u2019 layer. meta-oe contains a large amount of additional recipes. Bitback # Task scheduler BSP: Board Support Package # BSP is collection of information that defines how to support particular HW HW futures Kernel configuration Additional S.W Note poky support by default x86, x86-64, BeagleBone devices (has BSP for each H.W type) Reference # udemy yocto","title":"Part1 - Yocto tutorial"},{"location":"blog/yocto/part1_hello_yocto/#elements-of-embedded-linux","text":"Toolchain: Compiler and other tools needed to build code for target device Bootloader: The program that init the board and load the linux kernel Kernel Root F.S: Contain all programs and libraries for our system","title":"Elements of embedded linux"},{"location":"blog/yocto/part1_hello_yocto/#yocto","text":"Yocto project provide tools for create custom linux distributions for any H.W","title":"Yocto"},{"location":"blog/yocto/part1_hello_yocto/#poky","text":"Poky is a reference/example linux distribution create by yocto The poky repository is an aggregation of several repositories: - openembedded-core - bitbake - meta-poky - yocto-docs Poky = Bitback + Metadata Note Yocto is a origination like canonical Poky is like ubuntu Note the \u2018meta\u2019 folder in the poky repository corresponds to the Openembedded Core layer, e.g. https://git.openembedded.org/openembedded-core/. OE Core includes the main components/recipes that are widely used for any configuration.","title":"Poky"},{"location":"blog/yocto/part1_hello_yocto/#metadata","text":"Build instructions From where obtain sources Changes / additions to sources Metadata in yocto is collection of - configuration file (.conf) - Recipes (.bb and .bbappend) - Class (.bbclass) - Includes (.inc) Note he \u2018meta-oe\u2019 folder in meta-openembedded is another layer typically called the \u2018openembedded\u2019 layer. meta-oe contains a large amount of additional recipes.","title":"Metadata"},{"location":"blog/yocto/part1_hello_yocto/#bitback","text":"Task scheduler","title":"Bitback"},{"location":"blog/yocto/part1_hello_yocto/#bsp-board-support-package","text":"BSP is collection of information that defines how to support particular HW HW futures Kernel configuration Additional S.W Note poky support by default x86, x86-64, BeagleBone devices (has BSP for each H.W type)","title":"BSP: Board Support Package"},{"location":"blog/yocto/part1_hello_yocto/#reference","text":"udemy yocto","title":"Reference"},{"location":"blog/yocto/part2_hello_poky/","tags":["yocto","poky","101"],"text":"init environment # # from poky folder source oe-init-build-env <location of build folder> create folder and files under chosen build location local.conf bblayers.conf Build # Building custom linux distribution # bitbake <image name> bitbake core-image-minimal Fix If bitbake failed to resolve URI set CONNECTIVITY_CHECK_URIS field in conf/local.conf ```bash title=\u201dso 52395512\u201d check connectivity using google # CONNECTIVITY_CHECK_URIS = \u201chttps://www.google.com/\u201d skip connectivity checks # CONNECTIVITY_CHECK_URIS = \u201c\u201d ```","title":"Part2 - Yocto tutorial"},{"location":"blog/yocto/part2_hello_poky/#init-environment","text":"# from poky folder source oe-init-build-env <location of build folder> create folder and files under chosen build location local.conf bblayers.conf","title":"init environment"},{"location":"blog/yocto/part2_hello_poky/#build","text":"Building custom linux distribution # bitbake <image name> bitbake core-image-minimal Fix If bitbake failed to resolve URI set CONNECTIVITY_CHECK_URIS field in conf/local.conf ```bash title=\u201dso 52395512\u201d","title":"Build"},{"location":"blog/yocto/part2_hello_poky/#check-connectivity-using-google","text":"CONNECTIVITY_CHECK_URIS = \u201chttps://www.google.com/\u201d","title":"check connectivity using google"},{"location":"blog/yocto/part2_hello_poky/#skip-connectivity-checks","text":"CONNECTIVITY_CHECK_URIS = \u201c\u201d ```","title":"skip connectivity checks"},{"location":"blog/yocto/part3_run_qemu/","tags":["yocto","qemu","101"],"text":"runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-20220406114623.qemuboot.conf runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-20220406114623.qemuboot.conf nographic Note quit QEMU nographic mode by press ctrl-a then x","title":"Part3 - Yocto tutorial"},{"location":"blog/yocto/part4_add_ssh/","tags":["yocto","qemu","101"],"text":"Yocto project tree # meta-external meta-openembedded poky meta-external share git project across multiple yocto project Help git submodule git submodule add git submodule update \u2013init \u2013recursive meta-external # Collection of yocto git repositories from git meta-openembedded git submodule add https://github.com/openembedded/meta-openembedded.git layers # Add layers to bblayers.conf file bitbake-layers show-layers NOTE: Starting bitbake server... layer path priority ========================================================================== meta /home/user/yocto/poky/meta 5 meta-poky /home/user/yocto/poky/meta-poky 5 meta-yocto-bsp /home/user/yocto/poky/meta-yocto-bsp 5 meta-oe /home/user/yocto/meta-external/meta-openembedded/meta-oe 6 meta-python /home/user/yocto/meta-external/meta-openembedded/meta-python 7 Add dropbear ssh # OpenEmbedded # Search for dropbear recipe in openembedded Layer index Check openembedded-core is part of poky meta ? Yes I found dropbear under meta/recipes-core/dropbear setup # Add to local.conf append to local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear\" Note IMAGE_INSTALL is the variable that controls what is included in any image. CORE_IMAGE_EXTRA_INSTALL is a convenience variable that enable you to add extra packages to an image based on the core-image class Create image # # from build folder bitbake core-image-minimal Check # # under build folder ll tmp/work/qemux86_64-poky-linux/core-image-minimal/1.0-r0/rootfs/usr/sbin/dropbear run image with qemu # run image runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-<build number>.qemuboot.conf nographic check dropbear is running ps | grep drop 259 root 3020 S /usr/sbin/dropbear -r /etc/dropbear/dropbear_rsa_host_key -p 22 -B 293 root 4224 S grep drop ssh from host # ssh root@192.168.7.2 check recipe location # bitbake -e dropbear | grep ^FILE = # Result FILE = \"/home/user/yocto/poky/meta/recipes-core/dropbear/dropbear_2020.81.bb\" # Add python3 # Search recipe Show recipe more info setup # Add to local.conf append to local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear python3\" check recipe location # bitbake -e python3 | grep ^FILE = FILE = \"/home/user/yocto/poky/meta/recipes-devtools/python/python3_3.9.9.bb\" Create image # # from build folder bitbake core-image-minimal","title":"Part4 - Yocto tutorial"},{"location":"blog/yocto/part4_add_ssh/#yocto-project-tree","text":"meta-external meta-openembedded poky meta-external share git project across multiple yocto project Help git submodule git submodule add git submodule update \u2013init \u2013recursive","title":"Yocto project tree"},{"location":"blog/yocto/part4_add_ssh/#meta-external","text":"Collection of yocto git repositories from git meta-openembedded git submodule add https://github.com/openembedded/meta-openembedded.git","title":"meta-external"},{"location":"blog/yocto/part4_add_ssh/#layers","text":"Add layers to bblayers.conf file bitbake-layers show-layers NOTE: Starting bitbake server... layer path priority ========================================================================== meta /home/user/yocto/poky/meta 5 meta-poky /home/user/yocto/poky/meta-poky 5 meta-yocto-bsp /home/user/yocto/poky/meta-yocto-bsp 5 meta-oe /home/user/yocto/meta-external/meta-openembedded/meta-oe 6 meta-python /home/user/yocto/meta-external/meta-openembedded/meta-python 7","title":"layers"},{"location":"blog/yocto/part4_add_ssh/#add-dropbear-ssh","text":"","title":"Add dropbear ssh"},{"location":"blog/yocto/part4_add_ssh/#openembedded","text":"Search for dropbear recipe in openembedded Layer index Check openembedded-core is part of poky meta ? Yes I found dropbear under meta/recipes-core/dropbear","title":"OpenEmbedded"},{"location":"blog/yocto/part4_add_ssh/#setup","text":"Add to local.conf append to local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear\" Note IMAGE_INSTALL is the variable that controls what is included in any image. CORE_IMAGE_EXTRA_INSTALL is a convenience variable that enable you to add extra packages to an image based on the core-image class","title":"setup"},{"location":"blog/yocto/part4_add_ssh/#create-image","text":"# from build folder bitbake core-image-minimal","title":"Create image"},{"location":"blog/yocto/part4_add_ssh/#check","text":"# under build folder ll tmp/work/qemux86_64-poky-linux/core-image-minimal/1.0-r0/rootfs/usr/sbin/dropbear","title":"Check"},{"location":"blog/yocto/part4_add_ssh/#run-image-with-qemu","text":"run image runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-<build number>.qemuboot.conf nographic check dropbear is running ps | grep drop 259 root 3020 S /usr/sbin/dropbear -r /etc/dropbear/dropbear_rsa_host_key -p 22 -B 293 root 4224 S grep drop","title":"run image with qemu"},{"location":"blog/yocto/part4_add_ssh/#ssh-from-host","text":"ssh root@192.168.7.2","title":"ssh from host"},{"location":"blog/yocto/part4_add_ssh/#check-recipe-location","text":"","title":"check recipe location"},{"location":"blog/yocto/part4_add_ssh/#bitbake--e-dropbear--grep-file-resultfilehomeuseryoctopokymetarecipes-coredropbeardropbear_202081bb","text":"","title":"bitbake -e dropbear | grep ^FILE=\n# Result\nFILE=&quot;/home/user/yocto/poky/meta/recipes-core/dropbear/dropbear_2020.81.bb&quot;\n"},{"location":"blog/yocto/part4_add_ssh/#add-python3","text":"Search recipe Show recipe more info","title":"Add python3"},{"location":"blog/yocto/part4_add_ssh/#setup_1","text":"Add to local.conf append to local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear python3\"","title":"setup"},{"location":"blog/yocto/part4_add_ssh/#check-recipe-location_1","text":"bitbake -e python3 | grep ^FILE = FILE = \"/home/user/yocto/poky/meta/recipes-devtools/python/python3_3.9.9.bb\"","title":"check recipe location"},{"location":"blog/yocto/part4_add_ssh/#create-image_1","text":"# from build folder bitbake core-image-minimal","title":"Create image"},{"location":"blog/yocto/part5-terminology/","tags":["yocto","101"],"text":"Recipe # A recipe is a set of instructions that is read and processed by the bitbake (file with .bb extension) A recipe describes: - Where to fetch source code - Which patch to apply - Configuration options - Compile options - Install - License Configuration # Tell the build system what to build and put into the image (file with .conf extension) Types # Machine configuration option Distribution option Compiler tuning options General Common configuration options User options (local.conf) Example machine config # User local.conf we set the machine for example MACHINE ??= \"qemux86-64\" This setting tell the system to load machine configuration option meta/conf/machine/qemux86-64.conf Class # Class files are used to share common functionality across recipes (file with .bbclsss extension) Note classes useally locate in classes directory inside the meta* directory usage from recipe # inherit classname Layers # A collection of related recipes. layer isolate meta data according to functionality recipes are folders under layer folder Note name convention for layer meta-layername name description meta-poky Distro metadata meta-yocto-bsp BSP metadata BBLAYERS variable present in build/conf/bblayers.conf show layers bitbake-layers show-layers Find a layer # OpenEmbedded Layer Index raspberrypi ros2 layers Image # An image is the top level recipe image define how the root filesystem is built , with what packages. list all images ls meta*/recipes*/images/*.bb Packages # A package is a binary file with name .deb, .rpm Packages are produces by recipe A signal recipe produces many packages. all recipe packages describe is PACKAGES variable","title":"Part5 - Yocto terminology"},{"location":"blog/yocto/part5-terminology/#recipe","text":"A recipe is a set of instructions that is read and processed by the bitbake (file with .bb extension) A recipe describes: - Where to fetch source code - Which patch to apply - Configuration options - Compile options - Install - License","title":"Recipe"},{"location":"blog/yocto/part5-terminology/#configuration","text":"Tell the build system what to build and put into the image (file with .conf extension)","title":"Configuration"},{"location":"blog/yocto/part5-terminology/#types","text":"Machine configuration option Distribution option Compiler tuning options General Common configuration options User options (local.conf)","title":"Types"},{"location":"blog/yocto/part5-terminology/#example-machine-config","text":"User local.conf we set the machine for example MACHINE ??= \"qemux86-64\" This setting tell the system to load machine configuration option meta/conf/machine/qemux86-64.conf","title":"Example machine config"},{"location":"blog/yocto/part5-terminology/#class","text":"Class files are used to share common functionality across recipes (file with .bbclsss extension) Note classes useally locate in classes directory inside the meta* directory","title":"Class"},{"location":"blog/yocto/part5-terminology/#usage-from-recipe","text":"inherit classname","title":"usage from recipe"},{"location":"blog/yocto/part5-terminology/#layers","text":"A collection of related recipes. layer isolate meta data according to functionality recipes are folders under layer folder Note name convention for layer meta-layername name description meta-poky Distro metadata meta-yocto-bsp BSP metadata BBLAYERS variable present in build/conf/bblayers.conf show layers bitbake-layers show-layers","title":"Layers"},{"location":"blog/yocto/part5-terminology/#find-a-layer","text":"OpenEmbedded Layer Index raspberrypi ros2 layers","title":"Find a layer"},{"location":"blog/yocto/part5-terminology/#image","text":"An image is the top level recipe image define how the root filesystem is built , with what packages. list all images ls meta*/recipes*/images/*.bb","title":"Image"},{"location":"blog/yocto/part5-terminology/#packages","text":"A package is a binary file with name .deb, .rpm Packages are produces by recipe A signal recipe produces many packages. all recipe packages describe is PACKAGES variable","title":"Packages"},{"location":"blog/yocto/part6-tips/","tags":["yocto","101"],"text":"Sharing downloads # DL_DIR ?= \"/home/user/yocto/downloads/\" Fix Resolve # CONNECTIVITY_CHECK_URIS = \"https://www.google.com/\" parallel # # Determines the number of tasks that BitBake will perform in parallel (for bitbake command) BB_NUMBER_THREADS = \"6\" # Determine the number of processes that make can run in parallel (for make command) PARALLEL_MAKE = \"-j 6\"","title":"Part6 - Tips"},{"location":"blog/yocto/part6-tips/#sharing-downloads","text":"DL_DIR ?= \"/home/user/yocto/downloads/\"","title":"Sharing downloads"},{"location":"blog/yocto/part6-tips/#fix-resolve","text":"CONNECTIVITY_CHECK_URIS = \"https://www.google.com/\"","title":"Fix Resolve"},{"location":"blog/yocto/part6-tips/#parallel","text":"# Determines the number of tasks that BitBake will perform in parallel (for bitbake command) BB_NUMBER_THREADS = \"6\" # Determine the number of processes that make can run in parallel (for make command) PARALLEL_MAKE = \"-j 6\"","title":"parallel"},{"location":"blog/yocto/part7-operators/","tags":["yocto","101"],"text":"Variables # Variables can assign in conf and recipe files VARIABLE = \"value\" variable in conf # This command display variable value after config file are parsed bitbake -e | grep ^<VARIABLENAME> = # Example bitbake -e | grep ^BBPATH = # Result BBPATH = \"/home/user/yocto/poky/meta-poky:/home/user/yocto/poky/build:/home/user/yocto/poky/meta:/home/user/yocto/poky/meta-yocto-bsp:/home/user/yocto/meta-external/meta-openembedded/meta-oe:/home/user/yocto/meta-external/meta-openembedded/meta-python\" bitbake -e | grep ^TOPDIR = TOPDIR = \"/home/user/yocto/poky/build\" variable from recipe bitbake -e <recipe></recipe> | grep ^<VARIABLE> = # Example bitbake -e dropbear | grep ^DEPENDS = DEPENDS = \"autoconf-native automake-native libtool-native libtool-cross virtual/x86_64-poky-linux-gcc virtual/x86_64-poky-linux-compilerlibs virtual/libc zlib virtual/crypt update-rc.d initscripts virtual/update-alternatives\" Variable soft assignment (?=) # if variable assign as hard assignment the value is lost if no hard assignment this value are the default one MACHINE ?= \"qemuarm\" Note if ww have multiple soft assignment the first one is hold/assign Weaker default value (??=) # Assignment is made at the end of the parsing process, rather then immediately if variable assign as hard assignment the weaker value is lost if variable assign as default assignment the weaker value is lost Note if ww have multiple weak assignment the last one is hold/assign Variable Expansion # Variable can reference the content of other variable using the ${variable_name} syntax A = \"${B} hello\" B = \"${C} world\" C = \"linux\" Waring if variable not declare no expansion will happen the string is keep as is","title":"Part7 - Operators"},{"location":"blog/yocto/part7-operators/#variables","text":"Variables can assign in conf and recipe files VARIABLE = \"value\" variable in conf # This command display variable value after config file are parsed bitbake -e | grep ^<VARIABLENAME> = # Example bitbake -e | grep ^BBPATH = # Result BBPATH = \"/home/user/yocto/poky/meta-poky:/home/user/yocto/poky/build:/home/user/yocto/poky/meta:/home/user/yocto/poky/meta-yocto-bsp:/home/user/yocto/meta-external/meta-openembedded/meta-oe:/home/user/yocto/meta-external/meta-openembedded/meta-python\" bitbake -e | grep ^TOPDIR = TOPDIR = \"/home/user/yocto/poky/build\" variable from recipe bitbake -e <recipe></recipe> | grep ^<VARIABLE> = # Example bitbake -e dropbear | grep ^DEPENDS = DEPENDS = \"autoconf-native automake-native libtool-native libtool-cross virtual/x86_64-poky-linux-gcc virtual/x86_64-poky-linux-compilerlibs virtual/libc zlib virtual/crypt update-rc.d initscripts virtual/update-alternatives\"","title":"Variables"},{"location":"blog/yocto/part7-operators/#variable-soft-assignment-","text":"if variable assign as hard assignment the value is lost if no hard assignment this value are the default one MACHINE ?= \"qemuarm\" Note if ww have multiple soft assignment the first one is hold/assign","title":"Variable soft assignment (?=)"},{"location":"blog/yocto/part7-operators/#weaker-default-value-","text":"Assignment is made at the end of the parsing process, rather then immediately if variable assign as hard assignment the weaker value is lost if variable assign as default assignment the weaker value is lost Note if ww have multiple weak assignment the last one is hold/assign","title":"Weaker default value (??=)"},{"location":"blog/yocto/part7-operators/#variable-expansion","text":"Variable can reference the content of other variable using the ${variable_name} syntax A = \"${B} hello\" B = \"${C} world\" C = \"linux\" Waring if variable not declare no expansion will happen the string is keep as is","title":"Variable Expansion"},{"location":"blog/yocto/part8-custom_layer/","tags":["yocto","custom"],"text":"Custom layer # bitbake-layers create-layer <layer name> tree meta-mylayer /home/user/yocto/meta-mylayer/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 layer.conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u2514\u2500\u2500 recipes-example \u2514\u2500\u2500 example \u2514\u2500\u2500 example_0.1.bb Add layer to project # # Add bitbake-layers add-layer ~/yocto/meta-mylayer/ # Show bitbake-layers show-layers NOTE: Starting bitbake server... layer path priority ========================================================================== meta /home/user/yocto/poky/meta 5 meta-poky /home/user/yocto/poky/meta-poky 5 meta-yocto-bsp /home/user/yocto/poky/meta-yocto-bsp 5 meta-mylayer /home/user/yocto/meta-mylayer 6 Note Priority : This is the value used by BitBake to decide which recipe to use and the order in which the .bbappend files should be joined. It means that if two layers include the same recipe (.bb) file, the one with the higher priority is used. Add custom recipe # meta-mylayer/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 layer.conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u251c\u2500\u2500 recipes-example \u2502 \u2514\u2500\u2500 example \u2502 \u2514\u2500\u2500 example_0.1.bb \u2514\u2500\u2500 recipes-hello \u2514\u2500\u2500 hello \u251c\u2500\u2500 files \u2502 \u2514\u2500\u2500 hello.c \u2514\u2500\u2500 hello_1.0.bb files # recipes-hello.bb DESCRIPTION = \"Hello-my first recipe\" SECTION = \"Mywork\" LICENSE = \"CLOSED\" LIC_FILES_CHKSUM = \"file:// ${ COMMON_LICENSE_DIR } /MIT;md5=0835ade698e0bcf8506ecda2f7b4f302\" SRC_URI = \"file://hello.c\" S = \" ${ WORKDIR } \" TARGET_CC_ARCH += \" ${ LDFLAGS } \" do_compile () { ${ CC } hello.c -o hello } do_install () { install -d ${ D }${ bindir } install -m 0755 hello ${ D }${ bindir } } variables # meta/conf/bitbake.conf export exec_prefix = \"/usr\" export bindir = \"${exec_prefix}/bin\" TMPDIR ?= \"${TOPDIR}/tmp\" WORKDIR = \"${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PF}\" D = \"${WORKDIR}/image\" # TOPDIR bitbake -e | grep ^TOPDIR = TOPDIR = \"/home/user/yocto/poky/build\" hello.c #include <stdio.h> int main () { printf ( \"Hello yocto \\n \" ); return 0 ; } conf/local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear \\ python3 \\ hello \\ \" Build # bitbake core-image-minimal Test # # Run qemu runqemu qemux86-64 nographic # login $ ls -l /usr/bin/hello -rwxr-xr-x 1 root root 14376 Mar 9 2018 /usr/bin/hello # run program $ hello Hello yocto Reference # Yocto : Lab 02_Creating Custom layer and writing Recipe for Hello world","title":"Part8 - Custom layer"},{"location":"blog/yocto/part8-custom_layer/#custom-layer","text":"bitbake-layers create-layer <layer name> tree meta-mylayer /home/user/yocto/meta-mylayer/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 layer.conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u2514\u2500\u2500 recipes-example \u2514\u2500\u2500 example \u2514\u2500\u2500 example_0.1.bb","title":"Custom layer"},{"location":"blog/yocto/part8-custom_layer/#add-layer-to-project","text":"# Add bitbake-layers add-layer ~/yocto/meta-mylayer/ # Show bitbake-layers show-layers NOTE: Starting bitbake server... layer path priority ========================================================================== meta /home/user/yocto/poky/meta 5 meta-poky /home/user/yocto/poky/meta-poky 5 meta-yocto-bsp /home/user/yocto/poky/meta-yocto-bsp 5 meta-mylayer /home/user/yocto/meta-mylayer 6 Note Priority : This is the value used by BitBake to decide which recipe to use and the order in which the .bbappend files should be joined. It means that if two layers include the same recipe (.bb) file, the one with the higher priority is used.","title":"Add layer to project"},{"location":"blog/yocto/part8-custom_layer/#add-custom-recipe","text":"meta-mylayer/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 layer.conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u251c\u2500\u2500 recipes-example \u2502 \u2514\u2500\u2500 example \u2502 \u2514\u2500\u2500 example_0.1.bb \u2514\u2500\u2500 recipes-hello \u2514\u2500\u2500 hello \u251c\u2500\u2500 files \u2502 \u2514\u2500\u2500 hello.c \u2514\u2500\u2500 hello_1.0.bb","title":"Add custom recipe"},{"location":"blog/yocto/part8-custom_layer/#files","text":"recipes-hello.bb DESCRIPTION = \"Hello-my first recipe\" SECTION = \"Mywork\" LICENSE = \"CLOSED\" LIC_FILES_CHKSUM = \"file:// ${ COMMON_LICENSE_DIR } /MIT;md5=0835ade698e0bcf8506ecda2f7b4f302\" SRC_URI = \"file://hello.c\" S = \" ${ WORKDIR } \" TARGET_CC_ARCH += \" ${ LDFLAGS } \" do_compile () { ${ CC } hello.c -o hello } do_install () { install -d ${ D }${ bindir } install -m 0755 hello ${ D }${ bindir } }","title":"files"},{"location":"blog/yocto/part8-custom_layer/#variables","text":"meta/conf/bitbake.conf export exec_prefix = \"/usr\" export bindir = \"${exec_prefix}/bin\" TMPDIR ?= \"${TOPDIR}/tmp\" WORKDIR = \"${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PF}\" D = \"${WORKDIR}/image\" # TOPDIR bitbake -e | grep ^TOPDIR = TOPDIR = \"/home/user/yocto/poky/build\" hello.c #include <stdio.h> int main () { printf ( \"Hello yocto \\n \" ); return 0 ; } conf/local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear \\ python3 \\ hello \\ \"","title":"variables"},{"location":"blog/yocto/part8-custom_layer/#build","text":"bitbake core-image-minimal","title":"Build"},{"location":"blog/yocto/part8-custom_layer/#test","text":"# Run qemu runqemu qemux86-64 nographic # login $ ls -l /usr/bin/hello -rwxr-xr-x 1 root root 14376 Mar 9 2018 /usr/bin/hello # run program $ hello Hello yocto","title":"Test"},{"location":"blog/yocto/part8-custom_layer/#reference","text":"Yocto : Lab 02_Creating Custom layer and writing Recipe for Hello world","title":"Reference"},{"location":"blog/yocto/yocto-rpi-1/","tags":["rpi","yocto"],"text":"clone meta-raspberrypi # cd meta-external git submodule add git://git.yoctoproject.org/meta-raspberrypi # checkout hardknott config # bblayers.conf POKY_BBLAYERS_CONF_VERSION = \"2\" BBPATH = \" ${ TOPDIR } \" BBFILES ? = \"\" BBLAYERS ? = \" \\ /home/user/yocto/poky/meta \\ /home/user/yocto/poky/meta-poky \\ /home/user/yocto/poky/meta-yocto-bsp \\ /home/user/yocto/meta-external/meta-raspberrypi \\ \" local.conf CONF_VERSION = \"1\" MACHINE ? = \"raspberrypi4\" BB_NUMBER_THREADS = \"6\" PARALLEL_MAKE = \"-j 6\" DL_DIR ? = \"/home/user/yocto/downloads/\" CONNECTIVITY_CHECK_URIS = \"https://www.google.com/\" IMAGE_FSTYPES = \"ext4.xz rpi-sdimg\" # for SD-CARD SDIMG_ROOTFS_TYPE = \"ext4.xz\" build image # # rpi-basic-image deprecated bitbake core-image-base other packages # IMAGE_INSTALL_append = \" nano\"","title":"Yocto RPI part 1"},{"location":"blog/yocto/yocto-rpi-1/#clone-meta-raspberrypi","text":"cd meta-external git submodule add git://git.yoctoproject.org/meta-raspberrypi # checkout hardknott","title":"clone meta-raspberrypi"},{"location":"blog/yocto/yocto-rpi-1/#config","text":"bblayers.conf POKY_BBLAYERS_CONF_VERSION = \"2\" BBPATH = \" ${ TOPDIR } \" BBFILES ? = \"\" BBLAYERS ? = \" \\ /home/user/yocto/poky/meta \\ /home/user/yocto/poky/meta-poky \\ /home/user/yocto/poky/meta-yocto-bsp \\ /home/user/yocto/meta-external/meta-raspberrypi \\ \" local.conf CONF_VERSION = \"1\" MACHINE ? = \"raspberrypi4\" BB_NUMBER_THREADS = \"6\" PARALLEL_MAKE = \"-j 6\" DL_DIR ? = \"/home/user/yocto/downloads/\" CONNECTIVITY_CHECK_URIS = \"https://www.google.com/\" IMAGE_FSTYPES = \"ext4.xz rpi-sdimg\" # for SD-CARD SDIMG_ROOTFS_TYPE = \"ext4.xz\"","title":"config"},{"location":"blog/yocto/yocto-rpi-1/#build-image","text":"# rpi-basic-image deprecated bitbake core-image-base","title":"build image"},{"location":"blog/yocto/yocto-rpi-1/#other-packages","text":"IMAGE_INSTALL_append = \" nano\"","title":"other packages"},{"location":"projects/","text":"","title":"Projects"},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/","tags":["gazebo","world","plugin"],"text":"projects rrbot_gazebo \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 world_plug.launch.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 simple_world_plugin.cpp \u2514\u2500\u2500 worlds \u2514\u2500\u2500 world_plug.world Worlds # world_plug.world <?xml version=\"1.0\" ?> <sdf version= \"1.4\" > <!-- We use a custom world for the rrbot so that the camera angle is launched correctly --> <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <!-- Global light source --> <include> <uri> model://sun </uri> </include> <plugin name= \"simple\" filename= \"libsimple_world_plugin.so\" /> </world> </sdf> package.xml # <export> <build_type> ament_cmake </build_type> <gazebo_ros plugin_path= \"${prefix}\" ></gazebo_ros> </export> plugin source # simple_world_plugin.cpp #include <gazebo/common/Plugin.hh> #include <rclcpp/rclcpp.hpp> #include <iostream> namespace gazebo { class WorldPluginTutorial : public WorldPlugin { public : WorldPluginTutorial () : WorldPlugin () { // gazebo log gzmsg << \"gazebo message\" << std :: endl ; gzwarn << \"gazebo warning\" << std :: endl ; gzerr << \"gazebo error\" << std :: endl ; // ROS log RCLCPP_INFO ( rclcpp :: get_logger ( \"world_plug\" ), \" ------ Hello World! ------ \" ); RCLCPP_WARN ( rclcpp :: get_logger ( \"world_plug\" ), \" ------ warning! ------ \" ); RCLCPP_ERROR ( rclcpp :: get_logger ( \"world_plug\" ), \" ------ Error! ------ \" ); } void Load ( physics :: WorldPtr _world , sdf :: ElementPtr _sdf ) { } }; GZ_REGISTER_WORLD_PLUGIN ( WorldPluginTutorial ) } CMakeLists # cmake_minimum_required ( VERSION 3.5 ) project ( rrbot_gazebo ) # Default to C++14 if ( NOT CMAKE_CXX_STANDARD ) set ( CMAKE_CXX_STANDARD 14 ) endif () if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( gazebo REQUIRED ) find_package ( gazebo_ros REQUIRED ) find_package ( rclcpp REQUIRED ) add_library ( simple_world_plugin SHARED src / simple_world_plugin . cpp ) target_include_directories ( simple_world_plugin PUBLIC $ < BUILD_INTERFACE : $ { CMAKE_CURRENT_SOURCE_DIR } / include > $ < INSTALL_INTERFACE : include > ) ament_target_dependencies ( simple_world_plugin \"gazebo_ros\" \"rclcpp\" ) install ( TARGETS simple_world_plugin DESTINATION share / $ { PROJECT_NAME }) install ( DIRECTORY worlds DESTINATION share / $ { PROJECT_NAME } ) install ( DIRECTORY launch DESTINATION share / $ { PROJECT_NAME } ) ament_package () launch # world_plug.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource package_name = 'rrbot_gazebo' world_file = 'world_plug.world' def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) pkg_simulation = get_package_share_directory ( package_name ) # launch Gazebo by including its definition gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gazebo.launch.py' ), ) ) verbose_arg = DeclareLaunchArgument ( 'verbose' , default_value = 'true' , description = 'Set \"true\" to increase messages written to terminal.' ) # load the world file world_arg = DeclareLaunchArgument ( 'world' , default_value = [ os . path . join ( pkg_simulation , 'worlds' , world_file ), '' ], description = 'SDF world file' ) return LaunchDescription ([ world_arg , verbose_arg , gazebo , ]) Usage and Run # ros2 launch rrbot_gazebo world_plug.launch.py The first three log line came from gazebo log API The Other three came from ROS log API","title":"Simple world plugin"},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/#worlds","text":"world_plug.world <?xml version=\"1.0\" ?> <sdf version= \"1.4\" > <!-- We use a custom world for the rrbot so that the camera angle is launched correctly --> <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <!-- Global light source --> <include> <uri> model://sun </uri> </include> <plugin name= \"simple\" filename= \"libsimple_world_plugin.so\" /> </world> </sdf>","title":"Worlds"},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/#packagexml","text":"<export> <build_type> ament_cmake </build_type> <gazebo_ros plugin_path= \"${prefix}\" ></gazebo_ros> </export>","title":"package.xml"},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/#plugin-source","text":"simple_world_plugin.cpp #include <gazebo/common/Plugin.hh> #include <rclcpp/rclcpp.hpp> #include <iostream> namespace gazebo { class WorldPluginTutorial : public WorldPlugin { public : WorldPluginTutorial () : WorldPlugin () { // gazebo log gzmsg << \"gazebo message\" << std :: endl ; gzwarn << \"gazebo warning\" << std :: endl ; gzerr << \"gazebo error\" << std :: endl ; // ROS log RCLCPP_INFO ( rclcpp :: get_logger ( \"world_plug\" ), \" ------ Hello World! ------ \" ); RCLCPP_WARN ( rclcpp :: get_logger ( \"world_plug\" ), \" ------ warning! ------ \" ); RCLCPP_ERROR ( rclcpp :: get_logger ( \"world_plug\" ), \" ------ Error! ------ \" ); } void Load ( physics :: WorldPtr _world , sdf :: ElementPtr _sdf ) { } }; GZ_REGISTER_WORLD_PLUGIN ( WorldPluginTutorial ) }","title":"plugin source"},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/#cmakelists","text":"cmake_minimum_required ( VERSION 3.5 ) project ( rrbot_gazebo ) # Default to C++14 if ( NOT CMAKE_CXX_STANDARD ) set ( CMAKE_CXX_STANDARD 14 ) endif () if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( gazebo REQUIRED ) find_package ( gazebo_ros REQUIRED ) find_package ( rclcpp REQUIRED ) add_library ( simple_world_plugin SHARED src / simple_world_plugin . cpp ) target_include_directories ( simple_world_plugin PUBLIC $ < BUILD_INTERFACE : $ { CMAKE_CURRENT_SOURCE_DIR } / include > $ < INSTALL_INTERFACE : include > ) ament_target_dependencies ( simple_world_plugin \"gazebo_ros\" \"rclcpp\" ) install ( TARGETS simple_world_plugin DESTINATION share / $ { PROJECT_NAME }) install ( DIRECTORY worlds DESTINATION share / $ { PROJECT_NAME } ) install ( DIRECTORY launch DESTINATION share / $ { PROJECT_NAME } ) ament_package ()","title":"CMakeLists"},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/#launch","text":"world_plug.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource package_name = 'rrbot_gazebo' world_file = 'world_plug.world' def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) pkg_simulation = get_package_share_directory ( package_name ) # launch Gazebo by including its definition gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gazebo.launch.py' ), ) ) verbose_arg = DeclareLaunchArgument ( 'verbose' , default_value = 'true' , description = 'Set \"true\" to increase messages written to terminal.' ) # load the world file world_arg = DeclareLaunchArgument ( 'world' , default_value = [ os . path . join ( pkg_simulation , 'worlds' , world_file ), '' ], description = 'SDF world file' ) return LaunchDescription ([ world_arg , verbose_arg , gazebo , ])","title":"launch"},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/#usage-and-run","text":"ros2 launch rrbot_gazebo world_plug.launch.py The first three log line came from gazebo log API The Other three came from ROS log API","title":"Usage and Run"},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/","tags":["ros2","gazebo","plugin"],"text":"Module plugin minimal template show how to subscribe message from ROS publish message to ROS logging The minimal project include two projects Plugin (demo_gazebo_plugin) Tester (demo_gazebo_plugin_sim) Projects # # Plugin demo_gazebo_plugin \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 demo_gazebo_plugin \u2502 \u2514\u2500\u2500 demo_gazebo_plugin.hpp \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 src \u2514\u2500\u2500 demo_gazebo_plugin.cpp # Tester demo_gazebo_plugin_sim/ \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 demo_gazebo_plugin_sim \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 sim_bringup.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 demo_model \u2502 \u251c\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 src Plugin # ros2 pkg create demo_gazebo_plugin \\ --build-type ament_cmake \\ --dependencies rclcpp std_msgs gazebo_ros header # demo_gazebo_plugin.hpp #ifndef DEMO_GAZEBO_PLUGIN_HPP #define DEMO_GAZEBO_PLUGIN_HPP #include <gazebo/common/PID.hh> #include <gazebo/common/Plugin.hh> #include <rclcpp/rclcpp.hpp> #include \"std_msgs/msg/string.hpp\" namespace demo_gazebo_plugin { class DemoGazeboPlugin : public gazebo :: ModelPlugin { public : DemoGazeboPlugin (); void Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr sdf ); private : rclcpp :: Node :: SharedPtr ros_node_ ; rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr command_sub_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr command_pub_ ; void sub_handler ( const std_msgs :: msg :: String :: SharedPtr msg ); }; } #endif plugin # demo_gazebo_plugin.cpp #include \"demo_gazebo_plugin/demo_gazebo_plugin.hpp\" #include <gazebo_ros/node.hpp> #include <std_msgs/msg/string.hpp> using namespace std :: placeholders ; namespace demo_gazebo_plugin { const std :: string SUB_TOPIC = \"/demo_gazebo_cmd\" ; const std :: string PUB_TOPIC = \"/demo_gazebo_echo\" ; DemoGazeboPlugin :: DemoGazeboPlugin () { } void DemoGazeboPlugin :: Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr sdf ){ ros_node_ = gazebo_ros :: Node :: Get ( sdf ); RCLCPP_INFO ( ros_node_ -> get_logger (), \"info Demo Gazebo Plugin\" ); RCLCPP_WARN ( ros_node_ -> get_logger (), \"warning Demo Gazebo Plugin\" ); RCLCPP_ERROR ( ros_node_ -> get_logger (), \"error Demo Gazebo Plugin\" ); // gzmsg << \"gz message\\n\"; // gzerr << \"gz error message\\n\"; command_pub_ = ros_node_ -> create_publisher < std_msgs :: msg :: String > ( PUB_TOPIC , 10 ); command_sub_ = ros_node_ -> create_subscription < std_msgs :: msg :: String > ( SUB_TOPIC , 10 , std :: bind ( & DemoGazeboPlugin :: sub_handler , this , _1 ) ); } void DemoGazeboPlugin :: sub_handler ( const std_msgs :: msg :: String :: SharedPtr msg ){ RCLCPP_WARN ( ros_node_ -> get_logger (), \"------ %s ------\" , msg -> data . c_str ()); auto echo_msg = std_msgs :: msg :: String (); echo_msg . data = msg -> data + \"_echo\" ; command_pub_ -> publish ( echo_msg ); } GZ_REGISTER_MODEL_PLUGIN ( DemoGazeboPlugin ) } CmakeLists.txt # CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( demo_gazebo_plugin ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( gazebo_ros REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( std_msgs REQUIRED ) add_library ( demo_gazebo_plugin SHARED src / demo_gazebo_plugin . cpp ) target_include_directories ( demo_gazebo_plugin PUBLIC $ < BUILD_INTERFACE : $ { CMAKE_CURRENT_SOURCE_DIR } / include > $ < INSTALL_INTERFACE : include > ) ament_target_dependencies ( demo_gazebo_plugin \"gazebo_ros\" \"rclcpp\" \"std_msgs\" ) install ( TARGETS demo_gazebo_plugin DESTINATION share / $ { PROJECT_NAME }) ament_package () Test Project # ros2 pkg create demo_gazebo_plugin \\ --build-type ament_cmake \\ --dependencies demo_gazebo_plugin Add plugin to model <plugin name= \"demo_gazebo_plugin\" filename= \"libdemo_gazebo_plugin.so\" /> launch # Set plugin path Launch gazebo Spawn model sim_bringup.launch.py from launch import LaunchDescription import os from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory from launch.actions import ( AppendEnvironmentVariable , DeclareLaunchArgument ) from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource import xacro PACKAGE = \"demo_gazebo_plugin_sim\" WORLD = \"empty.world\" MODEL = \"demo_model\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) pkg_plugin = get_package_share_directory ( \"demo_gazebo_plugin\" ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) plugins = [ pkg_plugin ] plugin_env = AppendEnvironmentVariable ( name = \"GAZEBO_PLUGIN_PATH\" , value = \":\" . join ( plugins ) ) robot_description_path = os . path . join ( pkg , \"models\" , MODEL , \"model.sdf\" ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_description = doc . toxml () robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , parameters = [{ \"use_sim_time\" : sim_time , \"robot_description\" : robot_description }], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-topic\" , \"robot_description\" , \"-z\" , \"0.0\" ], output = \"screen\" , ) ld . add_action ( resource_env ) ld . add_action ( plugin_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( arg_sim_time ) ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity ) return ld CMakeLists.txt # CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( demo_gazebo_plugin_sim ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( demo_gazebo_plugin REQUIRED ) install ( DIRECTORY launch models DESTINATION share / $ { PROJECT_NAME }) ament_package () Run / Usage # terminal1 # Run gazebo ros2 launch demo_gazebo_plugin_sim sim_bringup.launch.py terminal2 # pub message to plugin ros2 topic pub --once /demo_gazebo_cmd std_msgs/String \"data: hello\" publisher: beginning loop publishing #1: std_msgs.msg.String(data='hello') terminal2 # sub message from gazebo ros2 topic echo /demo_gazebo_echo data: hello_echo --- Reference # BoldBot gazebo plugin Debugging ROS2 Gazebo Plugins With VSCode","title":"ROS2 module plugin template"},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#projects","text":"# Plugin demo_gazebo_plugin \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 demo_gazebo_plugin \u2502 \u2514\u2500\u2500 demo_gazebo_plugin.hpp \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 src \u2514\u2500\u2500 demo_gazebo_plugin.cpp # Tester demo_gazebo_plugin_sim/ \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 demo_gazebo_plugin_sim \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 sim_bringup.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 demo_model \u2502 \u251c\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 src","title":"Projects"},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#plugin","text":"ros2 pkg create demo_gazebo_plugin \\ --build-type ament_cmake \\ --dependencies rclcpp std_msgs gazebo_ros","title":"Plugin"},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#header","text":"demo_gazebo_plugin.hpp #ifndef DEMO_GAZEBO_PLUGIN_HPP #define DEMO_GAZEBO_PLUGIN_HPP #include <gazebo/common/PID.hh> #include <gazebo/common/Plugin.hh> #include <rclcpp/rclcpp.hpp> #include \"std_msgs/msg/string.hpp\" namespace demo_gazebo_plugin { class DemoGazeboPlugin : public gazebo :: ModelPlugin { public : DemoGazeboPlugin (); void Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr sdf ); private : rclcpp :: Node :: SharedPtr ros_node_ ; rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr command_sub_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr command_pub_ ; void sub_handler ( const std_msgs :: msg :: String :: SharedPtr msg ); }; } #endif","title":"header"},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#plugin_1","text":"demo_gazebo_plugin.cpp #include \"demo_gazebo_plugin/demo_gazebo_plugin.hpp\" #include <gazebo_ros/node.hpp> #include <std_msgs/msg/string.hpp> using namespace std :: placeholders ; namespace demo_gazebo_plugin { const std :: string SUB_TOPIC = \"/demo_gazebo_cmd\" ; const std :: string PUB_TOPIC = \"/demo_gazebo_echo\" ; DemoGazeboPlugin :: DemoGazeboPlugin () { } void DemoGazeboPlugin :: Load ( gazebo :: physics :: ModelPtr model , sdf :: ElementPtr sdf ){ ros_node_ = gazebo_ros :: Node :: Get ( sdf ); RCLCPP_INFO ( ros_node_ -> get_logger (), \"info Demo Gazebo Plugin\" ); RCLCPP_WARN ( ros_node_ -> get_logger (), \"warning Demo Gazebo Plugin\" ); RCLCPP_ERROR ( ros_node_ -> get_logger (), \"error Demo Gazebo Plugin\" ); // gzmsg << \"gz message\\n\"; // gzerr << \"gz error message\\n\"; command_pub_ = ros_node_ -> create_publisher < std_msgs :: msg :: String > ( PUB_TOPIC , 10 ); command_sub_ = ros_node_ -> create_subscription < std_msgs :: msg :: String > ( SUB_TOPIC , 10 , std :: bind ( & DemoGazeboPlugin :: sub_handler , this , _1 ) ); } void DemoGazeboPlugin :: sub_handler ( const std_msgs :: msg :: String :: SharedPtr msg ){ RCLCPP_WARN ( ros_node_ -> get_logger (), \"------ %s ------\" , msg -> data . c_str ()); auto echo_msg = std_msgs :: msg :: String (); echo_msg . data = msg -> data + \"_echo\" ; command_pub_ -> publish ( echo_msg ); } GZ_REGISTER_MODEL_PLUGIN ( DemoGazeboPlugin ) }","title":"plugin"},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#cmakeliststxt","text":"CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( demo_gazebo_plugin ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( gazebo_ros REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( std_msgs REQUIRED ) add_library ( demo_gazebo_plugin SHARED src / demo_gazebo_plugin . cpp ) target_include_directories ( demo_gazebo_plugin PUBLIC $ < BUILD_INTERFACE : $ { CMAKE_CURRENT_SOURCE_DIR } / include > $ < INSTALL_INTERFACE : include > ) ament_target_dependencies ( demo_gazebo_plugin \"gazebo_ros\" \"rclcpp\" \"std_msgs\" ) install ( TARGETS demo_gazebo_plugin DESTINATION share / $ { PROJECT_NAME }) ament_package ()","title":"CmakeLists.txt"},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#test-project","text":"ros2 pkg create demo_gazebo_plugin \\ --build-type ament_cmake \\ --dependencies demo_gazebo_plugin Add plugin to model <plugin name= \"demo_gazebo_plugin\" filename= \"libdemo_gazebo_plugin.so\" />","title":"Test Project"},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#launch","text":"Set plugin path Launch gazebo Spawn model sim_bringup.launch.py from launch import LaunchDescription import os from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory from launch.actions import ( AppendEnvironmentVariable , DeclareLaunchArgument ) from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource import xacro PACKAGE = \"demo_gazebo_plugin_sim\" WORLD = \"empty.world\" MODEL = \"demo_model\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) pkg_plugin = get_package_share_directory ( \"demo_gazebo_plugin\" ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) plugins = [ pkg_plugin ] plugin_env = AppendEnvironmentVariable ( name = \"GAZEBO_PLUGIN_PATH\" , value = \":\" . join ( plugins ) ) robot_description_path = os . path . join ( pkg , \"models\" , MODEL , \"model.sdf\" ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_description = doc . toxml () robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , parameters = [{ \"use_sim_time\" : sim_time , \"robot_description\" : robot_description }], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-topic\" , \"robot_description\" , \"-z\" , \"0.0\" ], output = \"screen\" , ) ld . add_action ( resource_env ) ld . add_action ( plugin_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( arg_sim_time ) ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity ) return ld","title":"launch"},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#cmakeliststxt_1","text":"CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( demo_gazebo_plugin_sim ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( demo_gazebo_plugin REQUIRED ) install ( DIRECTORY launch models DESTINATION share / $ { PROJECT_NAME }) ament_package ()","title":"CMakeLists.txt"},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#run--usage","text":"terminal1 # Run gazebo ros2 launch demo_gazebo_plugin_sim sim_bringup.launch.py terminal2 # pub message to plugin ros2 topic pub --once /demo_gazebo_cmd std_msgs/String \"data: hello\" publisher: beginning loop publishing #1: std_msgs.msg.String(data='hello') terminal2 # sub message from gazebo ros2 topic echo /demo_gazebo_echo data: hello_echo ---","title":"Run / Usage"},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#reference","text":"BoldBot gazebo plugin Debugging ROS2 Gazebo Plugins With VSCode","title":"Reference"},{"location":"projects/ROS2%20mini%20projects/simple_joint/","text":"","title":"Index"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/","tags":["control","gazebo_ros2_control","gazebo","position_controller"],"text":"Using ros_control2 to control joint position - Using gazebo hardware - Add gazebo control section and plugin - Launch and run - position command - get joint status Gazebo control hardware and plugin # config hardware # load gazebo hardware config joint command and state <ros2_control name= \"GazeboSystem\" type= \"system\" > <hardware> <plugin> gazebo_ros2_control/GazeboSystem </plugin> </hardware> <joint name= \"base_to_second_joint\" > <command_interface name= \"position\" /> <state_interface name= \"position\" /> <state_interface name= \"velocity\" /> <state_interface name= \"effort\" /> </joint> </ros2_control> plugin # <gazebo> <plugin filename= \"libgazebo_ros2_control.so\" name= \"gazebo_ros2_control\" > <parameters> $(find simple_joint)/config/position.yaml </parameters> </plugin> </gazebo> plugin yaml # position.yaml controller_manager : ros__parameters : update_rate : 100 # Hz position_controller : type : position_controllers/JointGroupPositionController joint_state_broadcaster : type : joint_state_broadcaster/JointStateBroadcaster position_controller : ros__parameters : joints : - base_to_second_joint interface_name : position command_interfaces : - position state_interfaces : - position - velocity Demo # Launch gazebo Load controllers Set position command Get state gazebo log # load plugin Init hardware Loading controller manager [gazebo_ros2_control]: Loading gazebo_ros2_control plugin [gazebo_ros2_control]: Starting gazebo_ros2_control plugin in namespace: / [gazebo_ros2_control]: Starting gazebo_ros2_control plugin in ros 2 node: gazebo_ros2_control [gazebo_ros2_control]: Loading parameter file /home/user/ros2_ws/install/simple_joint/share/simple_joint/config/position.yaml [gazebo_ros2_control]: connected to service!! robot_state_publisher [gazebo_ros2_control]: Recieved urdf from param server, parsing... [gazebo_ros2_control]: Loading joint: base_to_second_joint [gazebo_ros2_control]: State: [gazebo_ros2_control]: position [gazebo_ros2_control]: velocity [gazebo_ros2_control]: effort [gazebo_ros2_control]: Command: [gazebo_ros2_control]: position [resource_manager]: Initialize hardware 'GazeboSystem' [resource_manager]: Successful initialization of hardware 'GazeboSystem' [resource_manager]: 'configure' hardware 'GazeboSystem' [resource_manager]: Successful 'configure' of hardware 'GazeboSystem' [resource_manager]: 'activate' hardware 'GazeboSystem' [resource_manager]: Successful 'activate' of hardware 'GazeboSystem' [gazebo_ros2_control]: Loading controller_manager [gazebo_ros2_control]: Desired controller update period (0.01 s) is slower than the gazebo simulation period (0.001 s). [gazebo_ros2_control]: Loaded gazebo_ros2_control. load controllers # joint state controller # ros2 run controller_manager spawner joint_state_broadcaster position controller # ros2 run controller_manager spawner position_controller usage # ros2 control list_controllers position_controller [ position_controllers/JointGroupPositionController ] active joint_state_broadcaster [ joint_state_broadcaster/JointStateBroadcaster ] active ros2 topic list # /joint_state_broadcaster/transition_event /joint_states ... /position_controller/commands /position_controller/transition_event /robot_description /rosout /tf /tf_static position_controller/command # ros2 topic info /position_controller/commands Type: std_msgs/msg/Float64MultiArray Publisher count: 0 Subscription count: 1 ros2 topic pub --once \\ /position_controller/commands \\ std_msgs/msg/Float64MultiArray \\ \"{data: [1.57]}\" joint_states # ros2 topic echo --once /joint_states A message was lost!!! total count change:1 total count: 1 --- header: stamp: sec: 776 nanosec: 550000000 frame_id: '' name: - base_to_second_joint position: - 1 .5700000000000003 velocity: - 0 .0 effort: - 0 .0 --- source # urdf # ```xml title=\u201drobot_v2.urdf <material name=\"blue\"> <color rgba=\"0 0 0.8 1\"/> </material> <material name=\"black\"> <color rgba=\"0 0 0 1\"/> </material> <joint name=\"word2base\" type=\"fixed\"> <parent link=\"world\"/> <child link=\"base_link\"/> <origin xyz=\"0.0 0.0 0.12\" rpy=\"0.0 0.0 0.0\"/> </joint> <link name=\"base_link\"> <inertial> <mass value=\"10\" /> <inertia ixx=\"0.4\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.4\" iyz=\"0.0\" izz=\"0.2\"/> </inertial> <collision> <geometry> <cylinder radius=\"0.05\" length=\"0.24\" /> </geometry> </collision> <visual> <geometry> <cylinder radius=\"0.05\" length=\"0.24\" /> </geometry> <material name=\"black\"/> </visual> </link> <link name=\"second_link\"> <inertial> <mass value=\"0.18\" /> <inertia ixx=\"0.0002835\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.0002835\" iyz=\"0.0\" izz=\"0.000324\" /> </inertial> <origin rpy=\"0.0 0.0 0.0\" xyz=\"0.0 0.0 0.0\" /> <collision> <geometry> <box size=\"0.15 0.05 0.05\" /> </geometry> </collision> <visual> <geometry> <box size=\"0.15 0.05 0.05\" /> </geometry> <material name=\"blue\"/> </visual> </link> <joint name=\"base_to_second_joint\" type=\"continuous\"> <parent link=\"base_link\"/> <child link=\"second_link\"/> <axis xyz=\"0 0 1\"/> <origin xyz=\"0.0 0.0 0.2\" rpy=\"0.0 0.0 0.0\"/> <dynamics damping=\"0.1\" friction=\"1\"/> </joint> <gazebo reference=\"base_link\"> <material>Gazebo/Black</material> </gazebo> <gazebo reference=\"second_link\"> <material>Gazebo/Red</material> </gazebo> <!-- Position Config --> <ros2_control name=\"GazeboSystem\" type=\"system\"> <hardware> <plugin>gazebo_ros2_control/GazeboSystem</plugin> </hardware> <joint name=\"base_to_second_joint\"> <command_interface name=\"position\"/> <state_interface name=\"position\"/> <state_interface name=\"velocity\"/> <state_interface name=\"effort\"/> </joint> </ros2_control> <gazebo> <plugin filename=\"libgazebo_ros2_control.so\" name=\"gazebo_ros2_control\"> <parameters>$(find simple_joint)/config/position.yaml</parameters> <!-- <parameters>$(find simple_joint)/config/velocity.yaml</parameters> --> <!-- <parameters>$(find simple_joint)/config/effort.yaml</parameters> --> </plugin> </gazebo> ``` launch # python title=\"position_control.launch.py\" from launch import LaunchDescription import os from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable, DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource import xacro PACKAGE = \"simple_joint\" WORLD = \"empty.world\" URDF = \"robot_v2.urdf\" def generate_launch_description(): ld = LaunchDescription() pkg = get_package_share_directory(PACKAGE) gazebo_pkg = get_package_share_directory('gazebo_ros') verbose = LaunchConfiguration(\"verbose\") arg_gazebo_verbose = DeclareLaunchArgument(\"verbose\", default_value=\"true\") world = LaunchConfiguration(\"world\") arg_gazebo_world = DeclareLaunchArgument(\"world\", default_value=WORLD) resources = [os.path.join(pkg, \"worlds\")] resource_env = AppendEnvironmentVariable( name=\"GAZEBO_RESOURCE_PATH\", value=\":\".join(resources) ) sim_time = LaunchConfiguration(\"sim_time\") arg_sim_time = DeclareLaunchArgument(\"sim_time\", default_value=\"true\") robot_description_path = os.path.join(pkg, \"urdf\", URDF) doc = xacro.parse(open(robot_description_path)) xacro.process_doc(doc) robot_description = doc.toxml() robot_state_publisher = Node( package=\"robot_state_publisher\", executable=\"robot_state_publisher\", parameters=[{\"use_sim_time\": sim_time, \"robot_description\": robot_description}], ) gazebo = IncludeLaunchDescription( PythonLaunchDescriptionSource([os.path.join( gazebo_pkg, 'launch', 'gazebo.launch.py')]), launch_arguments={'verbose': verbose, \"world\": world}.items() ) spawn_entity = Node( package=\"gazebo_ros\", executable=\"spawn_entity.py\", arguments=[\"-entity\", \"demo\", \"-topic\", \"robot_description\", \"-z\", \"0.0\"], output=\"screen\", ) ld.add_action(resource_env) ld.add_action(arg_gazebo_verbose) ld.add_action(arg_gazebo_world) ld.add_action(arg_sim_time) ld.add_action(robot_state_publisher) ld.add_action(gazebo) ld.add_action(spawn_entity) return ld","title":"Robot and control2"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#gazebo-control-hardware-and-plugin","text":"","title":"Gazebo control hardware and plugin"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#config-hardware","text":"load gazebo hardware config joint command and state <ros2_control name= \"GazeboSystem\" type= \"system\" > <hardware> <plugin> gazebo_ros2_control/GazeboSystem </plugin> </hardware> <joint name= \"base_to_second_joint\" > <command_interface name= \"position\" /> <state_interface name= \"position\" /> <state_interface name= \"velocity\" /> <state_interface name= \"effort\" /> </joint> </ros2_control>","title":"config hardware"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#plugin","text":"<gazebo> <plugin filename= \"libgazebo_ros2_control.so\" name= \"gazebo_ros2_control\" > <parameters> $(find simple_joint)/config/position.yaml </parameters> </plugin> </gazebo>","title":"plugin"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#plugin-yaml","text":"position.yaml controller_manager : ros__parameters : update_rate : 100 # Hz position_controller : type : position_controllers/JointGroupPositionController joint_state_broadcaster : type : joint_state_broadcaster/JointStateBroadcaster position_controller : ros__parameters : joints : - base_to_second_joint interface_name : position command_interfaces : - position state_interfaces : - position - velocity","title":"plugin yaml"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#demo","text":"Launch gazebo Load controllers Set position command Get state","title":"Demo"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#gazebo-log","text":"load plugin Init hardware Loading controller manager [gazebo_ros2_control]: Loading gazebo_ros2_control plugin [gazebo_ros2_control]: Starting gazebo_ros2_control plugin in namespace: / [gazebo_ros2_control]: Starting gazebo_ros2_control plugin in ros 2 node: gazebo_ros2_control [gazebo_ros2_control]: Loading parameter file /home/user/ros2_ws/install/simple_joint/share/simple_joint/config/position.yaml [gazebo_ros2_control]: connected to service!! robot_state_publisher [gazebo_ros2_control]: Recieved urdf from param server, parsing... [gazebo_ros2_control]: Loading joint: base_to_second_joint [gazebo_ros2_control]: State: [gazebo_ros2_control]: position [gazebo_ros2_control]: velocity [gazebo_ros2_control]: effort [gazebo_ros2_control]: Command: [gazebo_ros2_control]: position [resource_manager]: Initialize hardware 'GazeboSystem' [resource_manager]: Successful initialization of hardware 'GazeboSystem' [resource_manager]: 'configure' hardware 'GazeboSystem' [resource_manager]: Successful 'configure' of hardware 'GazeboSystem' [resource_manager]: 'activate' hardware 'GazeboSystem' [resource_manager]: Successful 'activate' of hardware 'GazeboSystem' [gazebo_ros2_control]: Loading controller_manager [gazebo_ros2_control]: Desired controller update period (0.01 s) is slower than the gazebo simulation period (0.001 s). [gazebo_ros2_control]: Loaded gazebo_ros2_control.","title":"gazebo log"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#load-controllers","text":"","title":"load controllers"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#joint-state-controller","text":"ros2 run controller_manager spawner joint_state_broadcaster","title":"joint state controller"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#position-controller","text":"ros2 run controller_manager spawner position_controller","title":"position controller"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#usage","text":"ros2 control list_controllers position_controller [ position_controllers/JointGroupPositionController ] active joint_state_broadcaster [ joint_state_broadcaster/JointStateBroadcaster ] active ros2 topic list # /joint_state_broadcaster/transition_event /joint_states ... /position_controller/commands /position_controller/transition_event /robot_description /rosout /tf /tf_static","title":"usage"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#position_controllercommand","text":"ros2 topic info /position_controller/commands Type: std_msgs/msg/Float64MultiArray Publisher count: 0 Subscription count: 1 ros2 topic pub --once \\ /position_controller/commands \\ std_msgs/msg/Float64MultiArray \\ \"{data: [1.57]}\"","title":"position_controller/command"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#joint_states","text":"ros2 topic echo --once /joint_states A message was lost!!! total count change:1 total count: 1 --- header: stamp: sec: 776 nanosec: 550000000 frame_id: '' name: - base_to_second_joint position: - 1 .5700000000000003 velocity: - 0 .0 effort: - 0 .0 ---","title":"joint_states"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#source","text":"","title":"source"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#urdf","text":"```xml title=\u201drobot_v2.urdf <material name=\"blue\"> <color rgba=\"0 0 0.8 1\"/> </material> <material name=\"black\"> <color rgba=\"0 0 0 1\"/> </material> <joint name=\"word2base\" type=\"fixed\"> <parent link=\"world\"/> <child link=\"base_link\"/> <origin xyz=\"0.0 0.0 0.12\" rpy=\"0.0 0.0 0.0\"/> </joint> <link name=\"base_link\"> <inertial> <mass value=\"10\" /> <inertia ixx=\"0.4\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.4\" iyz=\"0.0\" izz=\"0.2\"/> </inertial> <collision> <geometry> <cylinder radius=\"0.05\" length=\"0.24\" /> </geometry> </collision> <visual> <geometry> <cylinder radius=\"0.05\" length=\"0.24\" /> </geometry> <material name=\"black\"/> </visual> </link> <link name=\"second_link\"> <inertial> <mass value=\"0.18\" /> <inertia ixx=\"0.0002835\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.0002835\" iyz=\"0.0\" izz=\"0.000324\" /> </inertial> <origin rpy=\"0.0 0.0 0.0\" xyz=\"0.0 0.0 0.0\" /> <collision> <geometry> <box size=\"0.15 0.05 0.05\" /> </geometry> </collision> <visual> <geometry> <box size=\"0.15 0.05 0.05\" /> </geometry> <material name=\"blue\"/> </visual> </link> <joint name=\"base_to_second_joint\" type=\"continuous\"> <parent link=\"base_link\"/> <child link=\"second_link\"/> <axis xyz=\"0 0 1\"/> <origin xyz=\"0.0 0.0 0.2\" rpy=\"0.0 0.0 0.0\"/> <dynamics damping=\"0.1\" friction=\"1\"/> </joint> <gazebo reference=\"base_link\"> <material>Gazebo/Black</material> </gazebo> <gazebo reference=\"second_link\"> <material>Gazebo/Red</material> </gazebo> <!-- Position Config --> <ros2_control name=\"GazeboSystem\" type=\"system\"> <hardware> <plugin>gazebo_ros2_control/GazeboSystem</plugin> </hardware> <joint name=\"base_to_second_joint\"> <command_interface name=\"position\"/> <state_interface name=\"position\"/> <state_interface name=\"velocity\"/> <state_interface name=\"effort\"/> </joint> </ros2_control> <gazebo> <plugin filename=\"libgazebo_ros2_control.so\" name=\"gazebo_ros2_control\"> <parameters>$(find simple_joint)/config/position.yaml</parameters> <!-- <parameters>$(find simple_joint)/config/velocity.yaml</parameters> --> <!-- <parameters>$(find simple_joint)/config/effort.yaml</parameters> --> </plugin> </gazebo> ```","title":"urdf"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#launch","text":"python title=\"position_control.launch.py\" from launch import LaunchDescription import os from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable, DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource import xacro PACKAGE = \"simple_joint\" WORLD = \"empty.world\" URDF = \"robot_v2.urdf\" def generate_launch_description(): ld = LaunchDescription() pkg = get_package_share_directory(PACKAGE) gazebo_pkg = get_package_share_directory('gazebo_ros') verbose = LaunchConfiguration(\"verbose\") arg_gazebo_verbose = DeclareLaunchArgument(\"verbose\", default_value=\"true\") world = LaunchConfiguration(\"world\") arg_gazebo_world = DeclareLaunchArgument(\"world\", default_value=WORLD) resources = [os.path.join(pkg, \"worlds\")] resource_env = AppendEnvironmentVariable( name=\"GAZEBO_RESOURCE_PATH\", value=\":\".join(resources) ) sim_time = LaunchConfiguration(\"sim_time\") arg_sim_time = DeclareLaunchArgument(\"sim_time\", default_value=\"true\") robot_description_path = os.path.join(pkg, \"urdf\", URDF) doc = xacro.parse(open(robot_description_path)) xacro.process_doc(doc) robot_description = doc.toxml() robot_state_publisher = Node( package=\"robot_state_publisher\", executable=\"robot_state_publisher\", parameters=[{\"use_sim_time\": sim_time, \"robot_description\": robot_description}], ) gazebo = IncludeLaunchDescription( PythonLaunchDescriptionSource([os.path.join( gazebo_pkg, 'launch', 'gazebo.launch.py')]), launch_arguments={'verbose': verbose, \"world\": world}.items() ) spawn_entity = Node( package=\"gazebo_ros\", executable=\"spawn_entity.py\", arguments=[\"-entity\", \"demo\", \"-topic\", \"robot_description\", \"-z\", \"0.0\"], output=\"screen\", ) ld.add_action(resource_env) ld.add_action(arg_gazebo_verbose) ld.add_action(arg_gazebo_world) ld.add_action(arg_sim_time) ld.add_action(robot_state_publisher) ld.add_action(gazebo) ld.add_action(spawn_entity) return ld","title":"launch"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_2/","tags":["control","gazebo_ros2_control","gazebo","position_controller"],"text":"Run controllers from launch file load controllers from launch file # Spawn controller with controller_manager Spawn joint_state_broadcaster Spawn position_controller Register to OnProcessExit event to load controller after controller join_states load after robot_spawn position controller load after joint_states Tip Name set by YAML file controller manager # joint_state_broadcaster_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"joint_state_broadcaster\" , \"--controller-manager\" , \"/controller_manager\" , ], ) robot_controller_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"position_controller\" , \"--controller-manager\" , \"/controller_manager\" ], ) events # spawn_entity_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = spawn_entity , on_exit = [ joint_state_broadcaster_spawner ], ) ) joint_state_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = joint_state_broadcaster_spawner , on_exit = [ robot_controller_spawner ], ) ) source # control_v2.launch.py from launch import LaunchDescription import os from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory from launch.actions import ( AppendEnvironmentVariable , DeclareLaunchArgument , RegisterEventHandler ) from launch.event_handlers import OnProcessExit from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource import xacro PACKAGE = \"simple_joint\" WORLD = \"empty.world\" URDF = \"robot_v2.urdf\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) robot_description_path = os . path . join ( pkg , \"urdf\" , URDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_description = doc . toxml () robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , parameters = [{ \"use_sim_time\" : sim_time , \"robot_description\" : robot_description }], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-topic\" , \"robot_description\" , \"-z\" , \"0.0\" ], output = \"screen\" , ) joint_state_broadcaster_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"joint_state_broadcaster\" , \"--controller-manager\" , \"/controller_manager\" , ], ) robot_controller_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"position_controller\" , \"--controller-manager\" , \"/controller_manager\" ], ) spawn_entity_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = spawn_entity , on_exit = [ joint_state_broadcaster_spawner ], ) ) joint_state_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = joint_state_broadcaster_spawner , on_exit = [ robot_controller_spawner ], ) ) ld . add_action ( resource_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( arg_sim_time ) ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity_event ) ld . add_action ( joint_state_event ) ld . add_action ( spawn_entity ) return ld","title":"Robot and control2"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_2/#load-controllers-from-launch-file","text":"Spawn controller with controller_manager Spawn joint_state_broadcaster Spawn position_controller Register to OnProcessExit event to load controller after controller join_states load after robot_spawn position controller load after joint_states Tip Name set by YAML file","title":"load controllers from launch file"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_2/#controller-manager","text":"joint_state_broadcaster_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"joint_state_broadcaster\" , \"--controller-manager\" , \"/controller_manager\" , ], ) robot_controller_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"position_controller\" , \"--controller-manager\" , \"/controller_manager\" ], )","title":"controller manager"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_2/#events","text":"spawn_entity_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = spawn_entity , on_exit = [ joint_state_broadcaster_spawner ], ) ) joint_state_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = joint_state_broadcaster_spawner , on_exit = [ robot_controller_spawner ], ) )","title":"events"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_2/#source","text":"control_v2.launch.py from launch import LaunchDescription import os from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory from launch.actions import ( AppendEnvironmentVariable , DeclareLaunchArgument , RegisterEventHandler ) from launch.event_handlers import OnProcessExit from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource import xacro PACKAGE = \"simple_joint\" WORLD = \"empty.world\" URDF = \"robot_v2.urdf\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) robot_description_path = os . path . join ( pkg , \"urdf\" , URDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_description = doc . toxml () robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , parameters = [{ \"use_sim_time\" : sim_time , \"robot_description\" : robot_description }], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-topic\" , \"robot_description\" , \"-z\" , \"0.0\" ], output = \"screen\" , ) joint_state_broadcaster_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"joint_state_broadcaster\" , \"--controller-manager\" , \"/controller_manager\" , ], ) robot_controller_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"position_controller\" , \"--controller-manager\" , \"/controller_manager\" ], ) spawn_entity_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = spawn_entity , on_exit = [ joint_state_broadcaster_spawner ], ) ) joint_state_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = joint_state_broadcaster_spawner , on_exit = [ robot_controller_spawner ], ) ) ld . add_action ( resource_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( arg_sim_time ) ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity_event ) ld . add_action ( joint_state_event ) ld . add_action ( spawn_entity ) return ld","title":"source"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/","tags":["control","gazebo_ros2_control","effort_controller"],"text":"Load and use effort controller launch: load controllers # launch robot_controller_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"joint_effort_controller\" , \"--controller-manager\" , \"/controller_manager\" ], ) urdf control section # urdf <ros2_control name= \"GazeboSystem\" type= \"system\" > <hardware> <plugin> gazebo_ros2_control/GazeboSystem </plugin> </hardware> <joint name= \"base_to_second_joint\" > <command_interface name= \"effort\" /> <state_interface name= \"position\" /> <state_interface name= \"velocity\" /> <state_interface name= \"effort\" /> </joint> </ros2_control> <gazebo> <plugin filename= \"libgazebo_ros2_control.so\" name= \"gazebo_ros2_control\" > <parameters> $(find simple_joint)/config/effort.yaml </parameters> </plugin> </gazebo> usage # ros2 topic list .. /joint_effort_controller/commands /joint_effort_controller/transition_event /joint_state_broadcaster/transition_event /joint_states /parameter_events /performance_metrics /robot_description /rosout /tf /tf_static # more info about the controller ros2 topic info /joint_effort_controller/commands Type: std_msgs/msg/Float64MultiArray Publisher count: 0 Subscription count: 1 ros2 topic pub --once \\ /joint_effort_controller/commands \\ std_msgs/msg/Float64MultiArray \\ \"{data: [1.1]}\" source # yaml config file # effort.yaml controller_manager : ros__parameters : update_rate : 100 # Hz joint_effort_controller : type : effort_controllers/JointGroupEffortController joint_state_broadcaster : type : joint_state_broadcaster/JointStateBroadcaster joint_effort_controller : ros__parameters : joints : - base_to_second_joint interface_name : effort command_interfaces : - effort state_interfaces : - position - velocity robot.urdf # <?xml version=\"1.0\"?> <robot name= \"simple_example\" > <link name= \"world\" /> <material name= \"blue\" > <color rgba= \"0 0 0.8 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 1\" /> </material> <joint name= \"word2base\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"base_link\" /> <origin xyz= \"0.0 0.0 0.12\" rpy= \"0.0 0.0 0.0\" /> </joint> <link name= \"base_link\" > <inertial> <mass value= \"10\" /> <inertia ixx= \"0.4\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"0.4\" iyz= \"0.0\" izz= \"0.2\" /> </inertial> <collision> <geometry> <cylinder radius= \"0.05\" length= \"0.24\" /> </geometry> </collision> <visual> <geometry> <cylinder radius= \"0.05\" length= \"0.24\" /> </geometry> <material name= \"black\" /> </visual> </link> <link name= \"second_link\" > <inertial> <mass value= \"0.18\" /> <inertia ixx= \"0.0002835\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"0.0002835\" iyz= \"0.0\" izz= \"0.000324\" /> </inertial> <origin rpy= \"0.0 0.0 0.0\" xyz= \"0.0 0.0 0.0\" /> <collision> <geometry> <box size= \"0.15 0.05 0.05\" /> </geometry> </collision> <visual> <geometry> <box size= \"0.15 0.05 0.05\" /> </geometry> <material name= \"blue\" /> </visual> </link> <joint name= \"base_to_second_joint\" type= \"continuous\" > <parent link= \"base_link\" /> <child link= \"second_link\" /> <axis xyz= \"0 0 1\" /> <origin xyz= \"0.0 0.0 0.2\" rpy= \"0.0 0.0 0.0\" /> <dynamics damping= \"0.1\" friction= \"1\" /> </joint> <gazebo reference= \"base_link\" > <material> Gazebo/Black </material> </gazebo> <gazebo reference= \"second_link\" > <material> Gazebo/Red </material> </gazebo> <!-- Position Config --> <ros2_control name= \"GazeboSystem\" type= \"system\" > <hardware> <plugin> gazebo_ros2_control/GazeboSystem </plugin> </hardware> <joint name= \"base_to_second_joint\" > <command_interface name= \"effort\" /> <state_interface name= \"position\" /> <state_interface name= \"velocity\" /> <state_interface name= \"effort\" /> </joint> </ros2_control> <gazebo> <plugin filename= \"libgazebo_ros2_control.so\" name= \"gazebo_ros2_control\" > <parameters> $(find simple_joint)/config/effort.yaml </parameters> </plugin> </gazebo> </robot> launch # from launch import LaunchDescription import os from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory from launch.actions import ( AppendEnvironmentVariable , DeclareLaunchArgument , RegisterEventHandler ) from launch.event_handlers import OnProcessExit from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource import xacro PACKAGE = \"simple_joint\" WORLD = \"empty.world\" URDF = \"robot_effort.urdf\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) robot_description_path = os . path . join ( pkg , \"urdf\" , URDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_description = doc . toxml () robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , parameters = [{ \"use_sim_time\" : sim_time , \"robot_description\" : robot_description }], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-topic\" , \"robot_description\" , \"-z\" , \"0.0\" ], output = \"screen\" , ) joint_state_broadcaster_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"joint_state_broadcaster\" , \"--controller-manager\" , \"/controller_manager\" , ], ) robot_controller_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"joint_effort_controller\" , \"--controller-manager\" , \"/controller_manager\" ], ) spawn_entity_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = spawn_entity , on_exit = [ joint_state_broadcaster_spawner ], ) ) joint_state_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = joint_state_broadcaster_spawner , on_exit = [ robot_controller_spawner ], ) ) ld . add_action ( resource_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( arg_sim_time ) ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity_event ) ld . add_action ( joint_state_event ) ld . add_action ( spawn_entity ) return ld","title":"Control2 joint effort"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#launch-load-controllers","text":"launch robot_controller_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"joint_effort_controller\" , \"--controller-manager\" , \"/controller_manager\" ], )","title":"launch: load controllers"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#urdf-control-section","text":"urdf <ros2_control name= \"GazeboSystem\" type= \"system\" > <hardware> <plugin> gazebo_ros2_control/GazeboSystem </plugin> </hardware> <joint name= \"base_to_second_joint\" > <command_interface name= \"effort\" /> <state_interface name= \"position\" /> <state_interface name= \"velocity\" /> <state_interface name= \"effort\" /> </joint> </ros2_control> <gazebo> <plugin filename= \"libgazebo_ros2_control.so\" name= \"gazebo_ros2_control\" > <parameters> $(find simple_joint)/config/effort.yaml </parameters> </plugin> </gazebo>","title":"urdf control section"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#usage","text":"ros2 topic list .. /joint_effort_controller/commands /joint_effort_controller/transition_event /joint_state_broadcaster/transition_event /joint_states /parameter_events /performance_metrics /robot_description /rosout /tf /tf_static # more info about the controller ros2 topic info /joint_effort_controller/commands Type: std_msgs/msg/Float64MultiArray Publisher count: 0 Subscription count: 1 ros2 topic pub --once \\ /joint_effort_controller/commands \\ std_msgs/msg/Float64MultiArray \\ \"{data: [1.1]}\"","title":"usage"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#source","text":"","title":"source"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#yaml-config-file","text":"effort.yaml controller_manager : ros__parameters : update_rate : 100 # Hz joint_effort_controller : type : effort_controllers/JointGroupEffortController joint_state_broadcaster : type : joint_state_broadcaster/JointStateBroadcaster joint_effort_controller : ros__parameters : joints : - base_to_second_joint interface_name : effort command_interfaces : - effort state_interfaces : - position - velocity","title":"yaml config file"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#roboturdf","text":"<?xml version=\"1.0\"?> <robot name= \"simple_example\" > <link name= \"world\" /> <material name= \"blue\" > <color rgba= \"0 0 0.8 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 1\" /> </material> <joint name= \"word2base\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"base_link\" /> <origin xyz= \"0.0 0.0 0.12\" rpy= \"0.0 0.0 0.0\" /> </joint> <link name= \"base_link\" > <inertial> <mass value= \"10\" /> <inertia ixx= \"0.4\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"0.4\" iyz= \"0.0\" izz= \"0.2\" /> </inertial> <collision> <geometry> <cylinder radius= \"0.05\" length= \"0.24\" /> </geometry> </collision> <visual> <geometry> <cylinder radius= \"0.05\" length= \"0.24\" /> </geometry> <material name= \"black\" /> </visual> </link> <link name= \"second_link\" > <inertial> <mass value= \"0.18\" /> <inertia ixx= \"0.0002835\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"0.0002835\" iyz= \"0.0\" izz= \"0.000324\" /> </inertial> <origin rpy= \"0.0 0.0 0.0\" xyz= \"0.0 0.0 0.0\" /> <collision> <geometry> <box size= \"0.15 0.05 0.05\" /> </geometry> </collision> <visual> <geometry> <box size= \"0.15 0.05 0.05\" /> </geometry> <material name= \"blue\" /> </visual> </link> <joint name= \"base_to_second_joint\" type= \"continuous\" > <parent link= \"base_link\" /> <child link= \"second_link\" /> <axis xyz= \"0 0 1\" /> <origin xyz= \"0.0 0.0 0.2\" rpy= \"0.0 0.0 0.0\" /> <dynamics damping= \"0.1\" friction= \"1\" /> </joint> <gazebo reference= \"base_link\" > <material> Gazebo/Black </material> </gazebo> <gazebo reference= \"second_link\" > <material> Gazebo/Red </material> </gazebo> <!-- Position Config --> <ros2_control name= \"GazeboSystem\" type= \"system\" > <hardware> <plugin> gazebo_ros2_control/GazeboSystem </plugin> </hardware> <joint name= \"base_to_second_joint\" > <command_interface name= \"effort\" /> <state_interface name= \"position\" /> <state_interface name= \"velocity\" /> <state_interface name= \"effort\" /> </joint> </ros2_control> <gazebo> <plugin filename= \"libgazebo_ros2_control.so\" name= \"gazebo_ros2_control\" > <parameters> $(find simple_joint)/config/effort.yaml </parameters> </plugin> </gazebo> </robot>","title":"robot.urdf"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#launch","text":"from launch import LaunchDescription import os from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory from launch.actions import ( AppendEnvironmentVariable , DeclareLaunchArgument , RegisterEventHandler ) from launch.event_handlers import OnProcessExit from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource import xacro PACKAGE = \"simple_joint\" WORLD = \"empty.world\" URDF = \"robot_effort.urdf\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) robot_description_path = os . path . join ( pkg , \"urdf\" , URDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_description = doc . toxml () robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , parameters = [{ \"use_sim_time\" : sim_time , \"robot_description\" : robot_description }], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-topic\" , \"robot_description\" , \"-z\" , \"0.0\" ], output = \"screen\" , ) joint_state_broadcaster_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"joint_state_broadcaster\" , \"--controller-manager\" , \"/controller_manager\" , ], ) robot_controller_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"joint_effort_controller\" , \"--controller-manager\" , \"/controller_manager\" ], ) spawn_entity_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = spawn_entity , on_exit = [ joint_state_broadcaster_spawner ], ) ) joint_state_event = RegisterEventHandler ( event_handler = OnProcessExit ( target_action = joint_state_broadcaster_spawner , on_exit = [ robot_controller_spawner ], ) ) ld . add_action ( resource_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( arg_sim_time ) ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity_event ) ld . add_action ( joint_state_event ) ld . add_action ( spawn_entity ) return ld","title":"launch"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_velocity/","tags":["control","gazebo_ros2_control","velocity_controller"],"text":"Load and use velocity controller launch: load controllers # robot_controller_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"joint_velocity_controller\" , \"--controller-manager\" , \"/controller_manager\" ], ) urdf control section # <ros2_control name= \"GazeboSystem\" type= \"system\" > <hardware> <plugin> gazebo_ros2_control/GazeboSystem </plugin> </hardware> <joint name= \"base_to_second_joint\" > <command_interface name= \"velocity\" /> <state_interface name= \"position\" /> <state_interface name= \"velocity\" /> <state_interface name= \"effort\" /> </joint> </ros2_control> <gazebo> <plugin filename= \"libgazebo_ros2_control.so\" name= \"gazebo_ros2_control\" > <parameters> $(find simple_joint)/config/velocity.yaml </parameters> </plugin> </gazebo> usage # ros2 topic pub --once \\ /joint_velocity_controller/commands \\ std_msgs/msg/Float64MultiArray \\ \"{data: [6.28]}\" source # velocity.yaml controller_manager : ros__parameters : update_rate : 100 # Hz joint_velocity_controller : type : velocity_controllers/JointGroupVelocityController joint_state_broadcaster : type : joint_state_broadcaster/JointStateBroadcaster joint_velocity_controller : ros__parameters : joints : - base_to_second_joint interface_name : velocity command_interfaces : - velocity state_interfaces : - position - velocity","title":"Control2 joint velocity"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_velocity/#launch-load-controllers","text":"robot_controller_spawner = Node ( package = \"controller_manager\" , executable = \"spawner\" , arguments = [ \"joint_velocity_controller\" , \"--controller-manager\" , \"/controller_manager\" ], )","title":"launch: load controllers"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_velocity/#urdf-control-section","text":"<ros2_control name= \"GazeboSystem\" type= \"system\" > <hardware> <plugin> gazebo_ros2_control/GazeboSystem </plugin> </hardware> <joint name= \"base_to_second_joint\" > <command_interface name= \"velocity\" /> <state_interface name= \"position\" /> <state_interface name= \"velocity\" /> <state_interface name= \"effort\" /> </joint> </ros2_control> <gazebo> <plugin filename= \"libgazebo_ros2_control.so\" name= \"gazebo_ros2_control\" > <parameters> $(find simple_joint)/config/velocity.yaml </parameters> </plugin> </gazebo>","title":"urdf control section"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_velocity/#usage","text":"ros2 topic pub --once \\ /joint_velocity_controller/commands \\ std_msgs/msg/Float64MultiArray \\ \"{data: [6.28]}\"","title":"usage"},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_velocity/#source","text":"velocity.yaml controller_manager : ros__parameters : update_rate : 100 # Hz joint_velocity_controller : type : velocity_controllers/JointGroupVelocityController joint_state_broadcaster : type : joint_state_broadcaster/JointStateBroadcaster joint_velocity_controller : ros__parameters : joints : - base_to_second_joint interface_name : velocity command_interfaces : - velocity state_interfaces : - position - velocity","title":"source"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/","tags":["urdf","gazebo","launch","gazebo_ros_force","gazebo_ros_joint_state_publisher"],"text":"launch gazebo and spawn our simple_joint robot - apply torque to link from gazebo gui - Add gazebo_force plugin - apply torque from command line launch gazebo # urdf # ```xml title=\u201drobot_v1.urdf| <material name=\"blue\"> <color rgba=\"0 0 0.8 1\"/> </material> <material name=\"black\"> <color rgba=\"0 0 0 1\"/> </material> <joint name=\"word2base\" type=\"fixed\"> <parent link=\"world\"/> <child link=\"base_link\"/> <origin xyz=\"0.0 0.0 0.12\" rpy=\"0.0 0.0 0.0\"/> </joint> <link name=\"base_link\"> <inertial> <mass value=\"10\" /> <inertia ixx=\"0.4\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.4\" iyz=\"0.0\" izz=\"0.2\"/> </inertial> <collision> <geometry> <cylinder radius=\"0.05\" length=\"0.24\" /> </geometry> </collision> <visual> <geometry> <cylinder radius=\"0.05\" length=\"0.24\" /> </geometry> <material name=\"black\"/> </visual> </link> <link name=\"second_link\"> <inertial> <mass value=\"0.18\" /> <inertia ixx=\"0.0002835\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.0002835\" iyz=\"0.0\" izz=\"0.000324\" /> </inertial> <origin rpy=\"0.0 0.0 0.0\" xyz=\"0.0 0.0 0.0\" /> <collision> <geometry> <box size=\"0.05 0.05 0.15\" /> </geometry> </collision> <visual> <geometry> <box size=\"0.05 0.05 0.15\" /> </geometry> <material name=\"blue\"/> </visual> </link> <joint name=\"base_to_second_joint\" type=\"continuous\"> <parent link=\"base_link\"/> <child link=\"second_link\"/> <axis xyz=\"0 0 1\"/> <origin xyz=\"0.0 0.0 0.2\" rpy=\"0.0 0.0 0.0\"/> </joint> <gazebo> <plugin name=\"gazebo_ros_joint_state_publisher\" filename=\"libgazebo_ros_joint_state_publisher.so\"> <update_rate>50</update_rate> <joint_name>base_to_second_joint</joint_name> </plugin> </gazebo> <gazebo reference=\"base_link\"> <material>Gazebo/Black</material> </gazebo> <gazebo reference=\"second_link\"> <material>Gazebo/Red</material> </gazebo> ``` launch # python title=\"gz_sim.launch.py\" from launch import LaunchDescription import os from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable, DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource import xacro PACKAGE = \"simple_joint\" WORLD = \"empty.world\" URDF = \"robot_v1.urdf\" def generate_launch_description(): ld = LaunchDescription() pkg = get_package_share_directory(PACKAGE) gazebo_pkg = get_package_share_directory('gazebo_ros') verbose = LaunchConfiguration(\"verbose\") arg_gazebo_verbose = DeclareLaunchArgument(\"verbose\", default_value=\"true\") world = LaunchConfiguration(\"world\") arg_gazebo_world = DeclareLaunchArgument(\"world\", default_value=WORLD) resources = [os.path.join(pkg, \"worlds\")] resource_env = AppendEnvironmentVariable( name=\"GAZEBO_RESOURCE_PATH\", value=\":\".join(resources) ) sim_time = LaunchConfiguration(\"sim_time\") arg_sim_time = DeclareLaunchArgument(\"sim_time\", default_value=\"true\") robot_description_path = os.path.join(pkg, \"urdf\", URDF) doc = xacro.parse(open(robot_description_path)) xacro.process_doc(doc) robot_description = doc.toxml() robot_state_publisher = Node( package=\"robot_state_publisher\", executable=\"robot_state_publisher\", parameters=[{\"use_sim_time\": sim_time, \"robot_description\": robot_description}], ) gazebo = IncludeLaunchDescription( PythonLaunchDescriptionSource([os.path.join( gazebo_pkg, 'launch', 'gazebo.launch.py')]), launch_arguments={'verbose': verbose, \"world\": world}.items() ) spawn_entity = Node( package=\"gazebo_ros\", executable=\"spawn_entity.py\", arguments=[\"-entity\", \"demo\", \"-topic\", \"robot_description\", \"-z\", \"0.0\"], output=\"screen\", ) ld.add_action(resource_env) ld.add_action(arg_gazebo_verbose) ld.add_action(arg_gazebo_world) ld.add_action(arg_sim_time) ld.add_action(robot_state_publisher) ld.add_action(gazebo) ld.add_action(spawn_entity) return ld Apply torque # Apply torque to joint gazebo joint state plugin <gazebo> <plugin name=\"gazebo_ros_joint_state_publisher\" filename=\"libgazebo_ros_joint_state_publisher.so\"> <update_rate>50</update_rate> <joint_name>base_to_second_joint</joint_name> </plugin> </gazebo> Apply Force/ Torque using Wrench msg # Create topic with Wrench message Note xml <joint name=\"base_to_second_joint\" type=\"continuous\"> <parent link=\"base_link\"/> <child link=\"second_link\"/> <axis xyz=\"0 0 1\"/> <origin xyz=\"0.0 0.0 0.2\" rpy=\"0.0 0.0 0.0\"/> <dynamics damping=\"0.1\" friction=\"1\"/> </joint> xml <gazebo> <plugin name=\"gazebo_ros_force\" filename=\"libgazebo_ros_force.so\"> <link_name>second_link</link_name> <force_frame>world</force_frame> </plugin> </gazebo> ### Wrench msg ros2 topic pub --once /gazebo_ros_force geometry_msgs/msg/Wrench \"{force: {x: 0.0, y: 0.0, z: 0.0}, torque: {x: 0.0,y: 0.0,z: 1.1}}\" Reference # urdf joint gazebo-ros-force","title":"Simple joint gazebo simulation"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/#launch-gazebo","text":"","title":"launch gazebo"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/#urdf","text":"```xml title=\u201drobot_v1.urdf| <material name=\"blue\"> <color rgba=\"0 0 0.8 1\"/> </material> <material name=\"black\"> <color rgba=\"0 0 0 1\"/> </material> <joint name=\"word2base\" type=\"fixed\"> <parent link=\"world\"/> <child link=\"base_link\"/> <origin xyz=\"0.0 0.0 0.12\" rpy=\"0.0 0.0 0.0\"/> </joint> <link name=\"base_link\"> <inertial> <mass value=\"10\" /> <inertia ixx=\"0.4\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.4\" iyz=\"0.0\" izz=\"0.2\"/> </inertial> <collision> <geometry> <cylinder radius=\"0.05\" length=\"0.24\" /> </geometry> </collision> <visual> <geometry> <cylinder radius=\"0.05\" length=\"0.24\" /> </geometry> <material name=\"black\"/> </visual> </link> <link name=\"second_link\"> <inertial> <mass value=\"0.18\" /> <inertia ixx=\"0.0002835\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.0002835\" iyz=\"0.0\" izz=\"0.000324\" /> </inertial> <origin rpy=\"0.0 0.0 0.0\" xyz=\"0.0 0.0 0.0\" /> <collision> <geometry> <box size=\"0.05 0.05 0.15\" /> </geometry> </collision> <visual> <geometry> <box size=\"0.05 0.05 0.15\" /> </geometry> <material name=\"blue\"/> </visual> </link> <joint name=\"base_to_second_joint\" type=\"continuous\"> <parent link=\"base_link\"/> <child link=\"second_link\"/> <axis xyz=\"0 0 1\"/> <origin xyz=\"0.0 0.0 0.2\" rpy=\"0.0 0.0 0.0\"/> </joint> <gazebo> <plugin name=\"gazebo_ros_joint_state_publisher\" filename=\"libgazebo_ros_joint_state_publisher.so\"> <update_rate>50</update_rate> <joint_name>base_to_second_joint</joint_name> </plugin> </gazebo> <gazebo reference=\"base_link\"> <material>Gazebo/Black</material> </gazebo> <gazebo reference=\"second_link\"> <material>Gazebo/Red</material> </gazebo> ```","title":"urdf"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/#launch","text":"python title=\"gz_sim.launch.py\" from launch import LaunchDescription import os from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable, DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource import xacro PACKAGE = \"simple_joint\" WORLD = \"empty.world\" URDF = \"robot_v1.urdf\" def generate_launch_description(): ld = LaunchDescription() pkg = get_package_share_directory(PACKAGE) gazebo_pkg = get_package_share_directory('gazebo_ros') verbose = LaunchConfiguration(\"verbose\") arg_gazebo_verbose = DeclareLaunchArgument(\"verbose\", default_value=\"true\") world = LaunchConfiguration(\"world\") arg_gazebo_world = DeclareLaunchArgument(\"world\", default_value=WORLD) resources = [os.path.join(pkg, \"worlds\")] resource_env = AppendEnvironmentVariable( name=\"GAZEBO_RESOURCE_PATH\", value=\":\".join(resources) ) sim_time = LaunchConfiguration(\"sim_time\") arg_sim_time = DeclareLaunchArgument(\"sim_time\", default_value=\"true\") robot_description_path = os.path.join(pkg, \"urdf\", URDF) doc = xacro.parse(open(robot_description_path)) xacro.process_doc(doc) robot_description = doc.toxml() robot_state_publisher = Node( package=\"robot_state_publisher\", executable=\"robot_state_publisher\", parameters=[{\"use_sim_time\": sim_time, \"robot_description\": robot_description}], ) gazebo = IncludeLaunchDescription( PythonLaunchDescriptionSource([os.path.join( gazebo_pkg, 'launch', 'gazebo.launch.py')]), launch_arguments={'verbose': verbose, \"world\": world}.items() ) spawn_entity = Node( package=\"gazebo_ros\", executable=\"spawn_entity.py\", arguments=[\"-entity\", \"demo\", \"-topic\", \"robot_description\", \"-z\", \"0.0\"], output=\"screen\", ) ld.add_action(resource_env) ld.add_action(arg_gazebo_verbose) ld.add_action(arg_gazebo_world) ld.add_action(arg_sim_time) ld.add_action(robot_state_publisher) ld.add_action(gazebo) ld.add_action(spawn_entity) return ld","title":"launch"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/#apply-torque","text":"Apply torque to joint gazebo joint state plugin <gazebo> <plugin name=\"gazebo_ros_joint_state_publisher\" filename=\"libgazebo_ros_joint_state_publisher.so\"> <update_rate>50</update_rate> <joint_name>base_to_second_joint</joint_name> </plugin> </gazebo>","title":"Apply torque"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/#apply-force-torque-using-wrench-msg","text":"Create topic with Wrench message Note xml <joint name=\"base_to_second_joint\" type=\"continuous\"> <parent link=\"base_link\"/> <child link=\"second_link\"/> <axis xyz=\"0 0 1\"/> <origin xyz=\"0.0 0.0 0.2\" rpy=\"0.0 0.0 0.0\"/> <dynamics damping=\"0.1\" friction=\"1\"/> </joint> xml <gazebo> <plugin name=\"gazebo_ros_force\" filename=\"libgazebo_ros_force.so\"> <link_name>second_link</link_name> <force_frame>world</force_frame> </plugin> </gazebo> ### Wrench msg ros2 topic pub --once /gazebo_ros_force geometry_msgs/msg/Wrench \"{force: {x: 0.0, y: 0.0, z: 0.0}, torque: {x: 0.0,y: 0.0,z: 1.1}}\"","title":"Apply Force/ Torque using Wrench msg"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/#reference","text":"urdf joint gazebo-ros-force","title":"Reference"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/","tags":["urdf","rviz","launch","robot_state_publisher","joint_state_publisher"],"text":"launch robot and control it\u2019s joint using - joint_state_publisher - joint_state_publisher using preset position (param and yaml file) - joint_state_publisher_gui urdf # robot.urdf <?xml version=\"1.0\"?> <robot name= \"simple_example\" > <link name= \"world\" /> <material name= \"blue\" > <color rgba= \"0 0 0.8 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 1\" /> </material> <joint name= \"word2base\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"base_link\" /> <origin xyz= \"0.0 0.0 0.12\" rpy= \"0.0 0.0 0.0\" /> </joint> <link name= \"base_link\" > <inertial> <mass value= \"10\" /> <inertia ixx= \"0.4\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"0.4\" iyz= \"0.0\" izz= \"0.2\" /> </inertial> <collision> <geometry> <cylinder radius= \"0.05\" length= \"0.24\" /> </geometry> </collision> <visual> <geometry> <cylinder radius= \"0.05\" length= \"0.24\" /> </geometry> <material name= \"black\" /> </visual> </link> <link name= \"second_link\" > <inertial> <mass value= \"0.18\" /> <inertia ixx= \"0.0002835\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"0.0002835\" iyz= \"0.0\" izz= \"0.000324\" /> </inertial> <origin rpy= \"0.0 0.0 0.0\" xyz= \"0.0 0.0 0.0\" /> <collision> <geometry> <box size= \"0.05 0.05 0.15\" /> </geometry> </collision> <visual> <geometry> <box size= \"0.05 0.05 0.15\" /> </geometry> <material name= \"blue\" /> </visual> </link> <joint name= \"base_to_second_joint\" type= \"continuous\" > <parent link= \"base_link\" /> <child link= \"second_link\" /> <axis xyz= \"0 0 1\" /> <origin xyz= \"0.0 0.0 0.2\" rpy= \"0.0 0.0 0.0\" /> </joint> </robot> launch # load robot urdf run robot_state_publisher run joint_state_publisher run rviz to check robot_description and joints sim_visual_v1.launch.py from launch import LaunchDescription from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory import os import xacro PACKAGE = \"simple_joint\" URDF = \"robot.urdf\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) robot_description_path = os . path . join ( pkg , \"urdf\" , URDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , parameters = [{ \"robot_description\" : doc . toxml ()}], ) joint_state_publisher_node = Node ( package = \"joint_state_publisher\" , executable = \"joint_state_publisher\" , name = \"joint_state_publisher\" ) rviz_node = Node ( package = \"rviz2\" , namespace = \"\" , executable = \"rviz2\" , name = \"rviz2\" , arguments = [ \"-d\" + os . path . join ( pkg , \"config\" , \"rviz.rviz\" )], ) ld . add_action ( joint_state_publisher_node ) ld . add_action ( robot_state_publisher ) ld . add_action ( rviz_node ) return ld topics and nodes # ros2 topic list # ... /joint_states /robot_description /rosout /tf /tf_static rviz # tf tree # joint preset # using joint_state_publisher to set joint position joint_state_publisher_node = Node ( package = \"joint_state_publisher\" , executable = \"joint_state_publisher\" , name = \"joint_state_publisher\" , parameters = [{ 'zeros.base_to_second_joint' : 1.5 }] ) or using yaml config = os . path . join ( pkg , 'config' , 'init_position.yaml' ) joint_state_publisher_node = Node ( package = \"joint_state_publisher\" , executable = \"joint_state_publisher\" , name = \"joint_state_publisher\" , parameters = [ config ] ) config/init_position.yaml joint_state_publisher : ros__parameters : zeros : base_to_second_joint : 1.57 joint_state_gui # joint_state_publisher_gui joint_state_publisher_node = Node ( package = \"joint_state_publisher_gui\" , executable = \"joint_state_publisher_gui\" , name = \"joint_state_publisher_gui\" , parameters = [ config ] ) Reference # Getting Ready for ROS Part 6: The Transform System","title":"Robot URDF tf and joints position"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#urdf","text":"robot.urdf <?xml version=\"1.0\"?> <robot name= \"simple_example\" > <link name= \"world\" /> <material name= \"blue\" > <color rgba= \"0 0 0.8 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 1\" /> </material> <joint name= \"word2base\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"base_link\" /> <origin xyz= \"0.0 0.0 0.12\" rpy= \"0.0 0.0 0.0\" /> </joint> <link name= \"base_link\" > <inertial> <mass value= \"10\" /> <inertia ixx= \"0.4\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"0.4\" iyz= \"0.0\" izz= \"0.2\" /> </inertial> <collision> <geometry> <cylinder radius= \"0.05\" length= \"0.24\" /> </geometry> </collision> <visual> <geometry> <cylinder radius= \"0.05\" length= \"0.24\" /> </geometry> <material name= \"black\" /> </visual> </link> <link name= \"second_link\" > <inertial> <mass value= \"0.18\" /> <inertia ixx= \"0.0002835\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"0.0002835\" iyz= \"0.0\" izz= \"0.000324\" /> </inertial> <origin rpy= \"0.0 0.0 0.0\" xyz= \"0.0 0.0 0.0\" /> <collision> <geometry> <box size= \"0.05 0.05 0.15\" /> </geometry> </collision> <visual> <geometry> <box size= \"0.05 0.05 0.15\" /> </geometry> <material name= \"blue\" /> </visual> </link> <joint name= \"base_to_second_joint\" type= \"continuous\" > <parent link= \"base_link\" /> <child link= \"second_link\" /> <axis xyz= \"0 0 1\" /> <origin xyz= \"0.0 0.0 0.2\" rpy= \"0.0 0.0 0.0\" /> </joint> </robot>","title":"urdf"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#launch","text":"load robot urdf run robot_state_publisher run joint_state_publisher run rviz to check robot_description and joints sim_visual_v1.launch.py from launch import LaunchDescription from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory import os import xacro PACKAGE = \"simple_joint\" URDF = \"robot.urdf\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) robot_description_path = os . path . join ( pkg , \"urdf\" , URDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , parameters = [{ \"robot_description\" : doc . toxml ()}], ) joint_state_publisher_node = Node ( package = \"joint_state_publisher\" , executable = \"joint_state_publisher\" , name = \"joint_state_publisher\" ) rviz_node = Node ( package = \"rviz2\" , namespace = \"\" , executable = \"rviz2\" , name = \"rviz2\" , arguments = [ \"-d\" + os . path . join ( pkg , \"config\" , \"rviz.rviz\" )], ) ld . add_action ( joint_state_publisher_node ) ld . add_action ( robot_state_publisher ) ld . add_action ( rviz_node ) return ld","title":"launch"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#topics-and-nodes","text":"ros2 topic list # ... /joint_states /robot_description /rosout /tf /tf_static","title":"topics and nodes"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#rviz","text":"","title":"rviz"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#tf-tree","text":"","title":"tf tree"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#joint-preset","text":"using joint_state_publisher to set joint position joint_state_publisher_node = Node ( package = \"joint_state_publisher\" , executable = \"joint_state_publisher\" , name = \"joint_state_publisher\" , parameters = [{ 'zeros.base_to_second_joint' : 1.5 }] ) or using yaml config = os . path . join ( pkg , 'config' , 'init_position.yaml' ) joint_state_publisher_node = Node ( package = \"joint_state_publisher\" , executable = \"joint_state_publisher\" , name = \"joint_state_publisher\" , parameters = [ config ] ) config/init_position.yaml joint_state_publisher : ros__parameters : zeros : base_to_second_joint : 1.57","title":"joint preset"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#joint_state_gui","text":"joint_state_publisher_gui joint_state_publisher_node = Node ( package = \"joint_state_publisher_gui\" , executable = \"joint_state_publisher_gui\" , name = \"joint_state_publisher_gui\" , parameters = [ config ] )","title":"joint_state_gui"},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#reference","text":"Getting Ready for ROS Part 6: The Transform System","title":"Reference"},{"location":"projects/follow_the_line/","tags":["ros2","projects"],"text":"Project # \u251c\u2500\u2500 basic_mobile_robot \u2502 \u251c\u2500\u2500 follow_line.py \u2502 \u251c\u2500\u2500 follow.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 viewer.py \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 description \u2502 \u251c\u2500\u2500 camera.xacro \u2502 \u251c\u2500\u2500 depth_camera.xacro \u2502 \u251c\u2500\u2500 face.xacro \u2502 \u251c\u2500\u2500 gazebo_control.xacro \u2502 \u251c\u2500\u2500 inertial_macros.xacro \u2502 \u251c\u2500\u2500 lidar.xacro \u2502 \u251c\u2500\u2500 robot_core.xacro \u2502 \u251c\u2500\u2500 robot.urdf.xacro \u2502 \u2514\u2500\u2500 ros2_control.xacro \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 articubot_one \u2502 \u2502 \u251c\u2500\u2500 articubot_one.launch.py \u2502 \u2502 \u2514\u2500\u2500 rsp.launch.py \u2502 \u2514\u2500\u2500 follow \u2502 \u2514\u2500\u2500 follow.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 ground_course \u2502 \u251c\u2500\u2500 materials \u2502 \u2502 \u251c\u2500\u2500 scripts \u2502 \u2502 \u2502 \u2514\u2500\u2500 course.material \u2502 \u2502 \u2514\u2500\u2500 textures \u2502 \u2502 \u2514\u2500\u2500 course.png \u2502 \u251c\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 src \u2514\u2500\u2500 worlds \u2514\u2500\u2500 course.world Demo # ros2 launch basic_mobile_robot follow.launch.py","title":"Follow the line"},{"location":"projects/follow_the_line/#project","text":"\u251c\u2500\u2500 basic_mobile_robot \u2502 \u251c\u2500\u2500 follow_line.py \u2502 \u251c\u2500\u2500 follow.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 viewer.py \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 description \u2502 \u251c\u2500\u2500 camera.xacro \u2502 \u251c\u2500\u2500 depth_camera.xacro \u2502 \u251c\u2500\u2500 face.xacro \u2502 \u251c\u2500\u2500 gazebo_control.xacro \u2502 \u251c\u2500\u2500 inertial_macros.xacro \u2502 \u251c\u2500\u2500 lidar.xacro \u2502 \u251c\u2500\u2500 robot_core.xacro \u2502 \u251c\u2500\u2500 robot.urdf.xacro \u2502 \u2514\u2500\u2500 ros2_control.xacro \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 articubot_one \u2502 \u2502 \u251c\u2500\u2500 articubot_one.launch.py \u2502 \u2502 \u2514\u2500\u2500 rsp.launch.py \u2502 \u2514\u2500\u2500 follow \u2502 \u2514\u2500\u2500 follow.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 ground_course \u2502 \u251c\u2500\u2500 materials \u2502 \u2502 \u251c\u2500\u2500 scripts \u2502 \u2502 \u2502 \u2514\u2500\u2500 course.material \u2502 \u2502 \u2514\u2500\u2500 textures \u2502 \u2502 \u2514\u2500\u2500 course.png \u2502 \u251c\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 src \u2514\u2500\u2500 worlds \u2514\u2500\u2500 course.world","title":"Project"},{"location":"projects/follow_the_line/#demo","text":"ros2 launch basic_mobile_robot follow.launch.py","title":"Demo"},{"location":"projects/ros2_project_from_dev_to_prod/","tags":["ros2","projects","deploy"],"text":"Objective # write basic python package with external dependencies git hook run lint run tests pack the package deploy as DEB package check deploy package with docker multi arch (x86, arm) steps # minimal python package with pub sub nodes create debian package create docker image run with docker compose","title":"ROS2 project deploy from dev to production"},{"location":"projects/ros2_project_from_dev_to_prod/#objective","text":"write basic python package with external dependencies git hook run lint run tests pack the package deploy as DEB package check deploy package with docker multi arch (x86, arm)","title":"Objective"},{"location":"projects/ros2_project_from_dev_to_prod/#steps","text":"minimal python package with pub sub nodes create debian package create docker image run with docker compose","title":"steps"},{"location":"projects/ros2_project_from_dev_to_prod/create_deb_package/","tags":["ros2","projects","deploy"],"text":"Prerequisites # Set package.xml with all dependencies Init rosdep and install all package dependencies rosdep rosdep is a command-line tool for installing system dependencies. install # sudo apt install \\ python3-bloom \\ python3-rosdep \\ fakeroot \\ debhelper \\ dh-python init rosdep # sudo rosdep init resdep update usage # cd <package root folder> # run bloom-generate rosdebian # run fakeroot debian/rules binary Assuming that all required dependencies are available and that compilation succeeds, the new package will be available in the parent directory of this directory. Reference # Building a custom Debian package","title":"Create debian package from ROS package"},{"location":"projects/ros2_project_from_dev_to_prod/create_deb_package/#prerequisites","text":"Set package.xml with all dependencies Init rosdep and install all package dependencies rosdep rosdep is a command-line tool for installing system dependencies.","title":"Prerequisites"},{"location":"projects/ros2_project_from_dev_to_prod/create_deb_package/#install","text":"sudo apt install \\ python3-bloom \\ python3-rosdep \\ fakeroot \\ debhelper \\ dh-python","title":"install"},{"location":"projects/ros2_project_from_dev_to_prod/create_deb_package/#init-rosdep","text":"sudo rosdep init resdep update","title":"init rosdep"},{"location":"projects/ros2_project_from_dev_to_prod/create_deb_package/#usage","text":"cd <package root folder> # run bloom-generate rosdebian # run fakeroot debian/rules binary Assuming that all required dependencies are available and that compilation succeeds, the new package will be available in the parent directory of this directory.","title":"usage"},{"location":"projects/ros2_project_from_dev_to_prod/create_deb_package/#reference","text":"Building a custom Debian package","title":"Reference"},{"location":"projects/ros2_project_from_dev_to_prod/make_docker/","tags":["ros2","projects","deploy","docker"],"text":"Following the ROS install instructions - Base on ubuntu 22.04 - Install language - Install timezone - Install common application - Create new source.list for ROS and install humble-base Additional installs and settings - Install some DEV tools like compiler, debugger and python pip - Add user ros FROM ubuntu:22.04 AS base ENV DEBIAN_FRONTEND = noninteractive # Install language RUN apt-get update && apt-get install -y \\ locales \\ && locale-gen en_US.UTF-8 \\ && update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 \\ && rm -rf /var/lib/apt/lists/* ENV LANG en_US.UTF-8 # Install timezone RUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime \\ && export DEBIAN_FRONTEND = noninteractive \\ && apt-get update \\ && apt-get install -y tzdata \\ && dpkg-reconfigure --frontend noninteractive tzdata \\ && rm -rf /var/lib/apt/lists/* RUN apt-get update && apt-get -y upgrade \\ && rm -rf /var/lib/apt/lists/* # Install common programs RUN apt-get update && apt-get install -y --no-install-recommends \\ curl \\ gnupg2 \\ lsb-release \\ sudo \\ software-properties-common \\ wget \\ && rm -rf /var/lib/apt/lists/* # Install ROS2 RUN sudo add-apt-repository universe \\ && curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \\ && echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( . /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null \\ && apt-get update && apt-get install -y --no-install-recommends \\ ros-humble-ros-base \\ python3-argcomplete \\ && rm -rf /var/lib/apt/lists/* ENV ROS_DISTRO = humble ENV AMENT_PREFIX_PATH = /opt/ros/humble ENV COLCON_PREFIX_PATH = /opt/ros/humble ENV LD_LIBRARY_PATH = /opt/ros/humble/lib ENV PATH = /opt/ros/humble/bin: $PATH ENV PYTHONPATH = /opt/ros/humble/lib/python3.10/site-packages ENV ROS_PYTHON_VERSION = 3 ENV ROS_VERSION = 2 ENV DEBIAN_FRONTEND = ########################################### # Develop image ########################################### FROM base AS dev ENV DEBIAN_FRONTEND = noninteractive RUN apt-get update && apt-get install -y --no-install-recommends \\ bash-completion \\ build-essential \\ cmake \\ gdb \\ git \\ openssh-client \\ python3-argcomplete \\ python3-pip \\ ros-dev-tools \\ vim \\ && rm -rf /var/lib/apt/lists/* \\ && rosdep init || echo \"rosdep already initialized\" ARG USERNAME = ros ARG USER_UID = 1000 ARG USER_GID = $USER_UID # Create a non-root user RUN groupadd --gid $USER_GID $USERNAME \\ && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\ # [ Optional ] Add sudo support for the non-root user && apt-get update \\ && apt-get install -y sudo git-core bash-completion \\ && echo $USERNAME ALL = \\( root \\) NOPASSWD:ALL > /etc/sudoers.d/ $USERNAME \\ && chmod 0440 /etc/sudoers.d/ $USERNAME \\ # Cleanup && rm -rf /var/lib/apt/lists/* \\ && echo \"if [ -f /opt/ros/ ${ ROS_DISTRO } /setup.bash ]; then source /opt/ros/ ${ ROS_DISTRO } /setup.bash; fi\" >> /home/ $USERNAME /.bashrc ENV DEBIAN_FRONTEND = ENV AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS = 1 Reference # Allison github","title":"Create ROS2 Docker image"},{"location":"projects/ros2_project_from_dev_to_prod/make_docker/#reference","text":"Allison github","title":"Reference"},{"location":"projects/ros2_project_from_dev_to_prod/minimal_python_package/","tags":["ros2","projects","deploy"],"text":"import rclpy from rclpy.node import Node from rclpy.qos import qos_profile_system_default from std_msgs.msg import Int32 TOPIC = \"my_topic\" PERIOD = 1.0 class MyNode ( Node ): def __init__ ( self ) -> None : node_name = \"minimal_pub\" super () . __init__ ( node_name ) self . __pub = self . create_publisher ( Int32 , TOPIC , qos_profile = qos_profile_system_default ) self . __timer = self . create_timer ( PERIOD , self . __timer_handler ) self . __counter = 0 self . get_logger () . info ( \"start minimal pub\" ) def __timer_handler ( self ) -> int : msg = Int32 () msg . data = self . __counter self . __pub . publish ( msg ) self . __counter += 1 self . get_logger () . info ( f \"publish message count: { self . __counter } \" ) def main ( args = None ) -> None : rclpy . init ( args = args ) node = MyNode () try : rclpy . spin ( node ) except KeyboardInterrupt : print ( \"User exit\" ) finally : node . destroy_node () rclpy . try_shutdown () if __name__ == \"__main__\" : main ()","title":"ROS2 python project deploy minimal package"},{"location":"projects/ros2_project_from_dev_to_prod/run_with_docker_compose/","tags":["ros2","projects","deploy"],"text":"version : '3' services : ros : image : humble:dev volumes : - /home/user/projects/py_cook_ws/src:/tmp","title":"Run with docker compose"},{"location":"projects/vrx/buoyancy_plugin/","tags":["vrx","buoyancy"],"text":"vrx buoyancy plugin demo plugin code and world from vrx project usv_gazebo_plugins buoyancy_gazebo_plugin depend on wave_gazebo_plugins project also from vrx project Plugin # linear drag \\[ F_d = \\beta_l m \\frac{V}{V_T} (\\boldsymbol{v_w} - \\boldsymbol{v_c}) \\] angular drag (torque) \\[ T_d = \\beta_a m \\frac{V}{V_T} L^2 \\omega \\] <model name= \"2_box\" > <pose> 0.1 0.5 0.5 1.0 0 0 </pose> <static> False </static> <link name= \"link\" > <visual name= \"visual\" > <geometry> <box> <size> 0.171 0.171 0.171 </size> </box> </geometry> </visual> <collision name= \"collision\" > <geometry> <box> <size> 0.171 0.171 0.171 </size> </box> </geometry> </collision> <inertial> <mass> 2 </mass> <inertia> <ixx> 0.009708012000000002 </ixx> <ixy> 0 </ixy> <ixz> 0 </ixz> <iyy> 0.009708012000000002 </iyy> <iyz> 0 </iyz> <izz> 0.009708012000000002 </izz> </inertia> </inertial> </link> <plugin filename= \"libbuoyancy_gazebo_plugin.so\" name= \"BuoyancyPlugin\" > <fluid_density> 1000 </fluid_density> <fluid_level> 0.0 </fluid_level> <linear_drag> 10.0 </linear_drag> <angular_drag> 4.0 </angular_drag> <buoyancy name= \"buoyancy\" > <link_name> link </link_name> <geometry> <box> <size> 0.171 0.171 0.171 </size> </box> </geometry> </buoyancy> </plugin> </model> Note The above code is part of buoyancy_plugin_demo.world References # - vrx github - vrx buoyancy_plugin","title":"vrx buoyancy plugin"},{"location":"projects/vrx/buoyancy_plugin/#plugin","text":"linear drag \\[ F_d = \\beta_l m \\frac{V}{V_T} (\\boldsymbol{v_w} - \\boldsymbol{v_c}) \\] angular drag (torque) \\[ T_d = \\beta_a m \\frac{V}{V_T} L^2 \\omega \\] <model name= \"2_box\" > <pose> 0.1 0.5 0.5 1.0 0 0 </pose> <static> False </static> <link name= \"link\" > <visual name= \"visual\" > <geometry> <box> <size> 0.171 0.171 0.171 </size> </box> </geometry> </visual> <collision name= \"collision\" > <geometry> <box> <size> 0.171 0.171 0.171 </size> </box> </geometry> </collision> <inertial> <mass> 2 </mass> <inertia> <ixx> 0.009708012000000002 </ixx> <ixy> 0 </ixy> <ixz> 0 </ixz> <iyy> 0.009708012000000002 </iyy> <iyz> 0 </iyz> <izz> 0.009708012000000002 </izz> </inertia> </inertial> </link> <plugin filename= \"libbuoyancy_gazebo_plugin.so\" name= \"BuoyancyPlugin\" > <fluid_density> 1000 </fluid_density> <fluid_level> 0.0 </fluid_level> <linear_drag> 10.0 </linear_drag> <angular_drag> 4.0 </angular_drag> <buoyancy name= \"buoyancy\" > <link_name> link </link_name> <geometry> <box> <size> 0.171 0.171 0.171 </size> </box> </geometry> </buoyancy> </plugin> </model> Note The above code is part of buoyancy_plugin_demo.world","title":"Plugin"},{"location":"projects/vrx/buoyancy_plugin/#references","text":"- vrx github - vrx buoyancy_plugin","title":"References"},{"location":"tags/","text":"","title":"Tags"}]}