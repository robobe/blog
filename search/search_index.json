{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".md-typeset .cover { display: none; } .md-typeset .cover + hr { display: none; } .md-typeset h1, .md-typeset h2 { color: orangered; } .md-typeset .cards .card { border-radius: 1em; padding: 1em; } .md-typeset .cards .col:first-of-type { margin-left: -1em; } .md-typeset .cards .col:last-of-type { margin-right: -1em; } .md-typeset .cards .card h2 { margin-top: 0; } Robots Inside # First steps in robotics Systems. From hardware to applications. Step by step. Blog # Each post is what I\u2019ve learned, and I wrote them down to share. Hope you\u2019ll find something interesting there. Read news Projects # A list of my projects which are done for learning and practicing in free time. See projects ROS2 # Enter Igition # Enter","title":"Home"},{"location":"#robots-inside","text":"First steps in robotics Systems. From hardware to applications. Step by step.","title":"Robots Inside"},{"location":"#blog","text":"Each post is what I\u2019ve learned, and I wrote them down to share. Hope you\u2019ll find something interesting there. Read news","title":" Blog"},{"location":"#projects","text":"A list of my projects which are done for learning and practicing in free time. See projects","title":" Projects"},{"location":"#ros2","text":"Enter","title":" ROS2"},{"location":"#igition","text":"Enter","title":" Igition"},{"location":"blog/","text":"","title":"Recent posts"},{"location":"blog/AI/ai_start_here/","tags":["ai","101","pytorch"],"text":"Introduction to Deep Learning # Introduction to Deep Learning Youtube github # Computer Vision III: Detection, Segmentation and Tracking (CV3DST) Youtube Reference # Get Started with AI and Machine Learning in 3 Months 8 Free Resources To Learn PyTorch In 2021 sentdex Deep SORT","title":"AI Start here"},{"location":"blog/AI/ai_start_here/#introduction-to-deep-learning","text":"Introduction to Deep Learning Youtube github","title":"Introduction to Deep Learning"},{"location":"blog/AI/ai_start_here/#_1","text":"Computer Vision III: Detection, Segmentation and Tracking (CV3DST) Youtube","title":""},{"location":"blog/AI/ai_start_here/#reference","text":"Get Started with AI and Machine Learning in 3 Months 8 Free Resources To Learn PyTorch In 2021 sentdex Deep SORT","title":"Reference"},{"location":"blog/AI/must_dog_classification/","tags":["pytorch","classification","101"],"text":"Reference # PyTorch for Beginners: Image Classification using Pre-trained models PyTorch for Beginners: Comparison of pre-trained models for Image Classification","title":"PyTorch simple classification"},{"location":"blog/AI/must_dog_classification/#reference","text":"PyTorch for Beginners: Image Classification using Pre-trained models PyTorch for Beginners: Comparison of pre-trained models for Image Classification","title":"Reference"},{"location":"blog/AI/pc_nvidia_install/","tags":["nvidia","cuda","install"],"text":"Install driver # ubuntu-drivers devices sudo ubuntu-drivers autoinstall reboot Tip set /etc/apt/sources.list to us.archive.ubuntu.com Check after install # nvidia-smi +-----------------------------------------------------------------------------+ | NVIDIA-SMI 510.60.02 Driver Version: 510.60.02 CUDA Version: 11.6 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 NVIDIA GeForce ... Off | 00000000:58:00.0 Off | N/A | | N/A 43C P0 N/A / N/A | 9MiB / 2048MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | 0 N/A N/A 991 G /usr/lib/xorg/Xorg 4MiB | | 0 N/A N/A 1634 G /usr/lib/xorg/Xorg 4MiB | +-----------------------------------------------------------------------------+ Warning After Kernel/OS update the driver stop working sometimes Reinstall the driver solve the problem # 510 - driver version sudo apt install --reinstall nvidia-driver-510 sudo apt install --reinstall nvidia-dkms-510 cuda toolkit # Nvidia install page Environment # .bashrc export PATH = /usr/local/cuda-11.6/bin ${ PATH :+: ${ PATH }} export LD_LIBRARY_PATH = /usr/local/cuda-11.6/lib64 ${ LD_LIBRARY_PATH :+: ${ LD_LIBRARY_PATH }} export CUDA_HOME = /usr/local/cuda Tip trick to avoid adding an extra : when $PATH is not set. ${PATH:+:${PATH}} cuDNN # NVIDIA cuDNN is a GPU-accelerated library of primitives for deep neural networks. Nvidia download Warning Need nvidia membership to download cuDNN Install # install-guide sudo dpkg -i cudnn-local-repo-ubuntu2004-8.4.0.27_1.0-1_amd64.deb sudo apt-key add /var/cudnn-local-repo-*/7fa2af80.pub sudo apt-get update sudo apt install libcudnn8=8.4.0.27-1+cuda11.6","title":"NVIDIA - install on ubuntu 20.04"},{"location":"blog/AI/pc_nvidia_install/#install-driver","text":"ubuntu-drivers devices sudo ubuntu-drivers autoinstall reboot Tip set /etc/apt/sources.list to us.archive.ubuntu.com","title":"Install driver"},{"location":"blog/AI/pc_nvidia_install/#check-after-install","text":"nvidia-smi +-----------------------------------------------------------------------------+ | NVIDIA-SMI 510.60.02 Driver Version: 510.60.02 CUDA Version: 11.6 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 NVIDIA GeForce ... Off | 00000000:58:00.0 Off | N/A | | N/A 43C P0 N/A / N/A | 9MiB / 2048MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | 0 N/A N/A 991 G /usr/lib/xorg/Xorg 4MiB | | 0 N/A N/A 1634 G /usr/lib/xorg/Xorg 4MiB | +-----------------------------------------------------------------------------+ Warning After Kernel/OS update the driver stop working sometimes Reinstall the driver solve the problem # 510 - driver version sudo apt install --reinstall nvidia-driver-510 sudo apt install --reinstall nvidia-dkms-510","title":"Check after install"},{"location":"blog/AI/pc_nvidia_install/#cuda-toolkit","text":"Nvidia install page","title":"cuda toolkit"},{"location":"blog/AI/pc_nvidia_install/#environment","text":".bashrc export PATH = /usr/local/cuda-11.6/bin ${ PATH :+: ${ PATH }} export LD_LIBRARY_PATH = /usr/local/cuda-11.6/lib64 ${ LD_LIBRARY_PATH :+: ${ LD_LIBRARY_PATH }} export CUDA_HOME = /usr/local/cuda Tip trick to avoid adding an extra : when $PATH is not set. ${PATH:+:${PATH}}","title":"Environment"},{"location":"blog/AI/pc_nvidia_install/#cudnn","text":"NVIDIA cuDNN is a GPU-accelerated library of primitives for deep neural networks. Nvidia download Warning Need nvidia membership to download cuDNN","title":"cuDNN"},{"location":"blog/AI/pc_nvidia_install/#install","text":"install-guide sudo dpkg -i cudnn-local-repo-ubuntu2004-8.4.0.27_1.0-1_amd64.deb sudo apt-key add /var/cudnn-local-repo-*/7fa2af80.pub sudo apt-get update sudo apt install libcudnn8=8.4.0.27-1+cuda11.6","title":"Install"},{"location":"blog/AI/pytorch_install/","tags":["pytorch","cuda","install"],"text":"Install # pytorch.org Note PyTorch wheel came with it\u2019s on cuda and cuDNN check torch installation import torch >>> torch . __version__ 1.5.1 + cu101 >>> torch . version . cuda 10.1 >>> torch . cuda . current_device () 0 >>> torch . cuda . device_count () 1 >>> torch . backends . cudnn . version () 7603 >>> torch . cuda . is_available () True","title":"PyTorch install"},{"location":"blog/AI/pytorch_install/#install","text":"pytorch.org Note PyTorch wheel came with it\u2019s on cuda and cuDNN check torch installation import torch >>> torch . __version__ 1.5.1 + cu101 >>> torch . version . cuda 10.1 >>> torch . cuda . current_device () 0 >>> torch . cuda . device_count () 1 >>> torch . backends . cudnn . version () 7603 >>> torch . cuda . is_available () True","title":"Install"},{"location":"blog/AI/nvidia/tensorrt_step1/","tags":["nvidia","tensorrt"],"text":"TensorRT is a machine learning framework that is published by Nvidia to run inference. TensorRT is highly optimized to run on NVIDIA GPUs Install # Install on x86 ubuntu 20.04 machine Prerequisite # nvidia driver (check with nvidia-smi if working) cuda Install TensorRT # Download version from nvidia dev site (authentication needed) EA vs GA EA: Early access GA: Stable version # sudo dpkg -i nv-tensorrt-repo-<ubuntu version>-<cuda version>-<...> sudo dpkg -i nv-tensorrt-repo-ubuntu2004-cuda11.4-trt8.2.5.1-ga-20220505_1-1_amd64.deb sudo apt-key add /var/nv-tensorrt-repo-ubuntu2004-cuda11.4-trt8.2.5.1-ga-20220505/82307095.pub sudo apt update sudo apt install tensorrt sudo apt-get install python3-libnvinfer-dev sudo apt-get install onnx-graphsurgeon References # What is TensorRT?","title":"TensorRT first step"},{"location":"blog/AI/nvidia/tensorrt_step1/#install","text":"Install on x86 ubuntu 20.04 machine","title":"Install"},{"location":"blog/AI/nvidia/tensorrt_step1/#prerequisite","text":"nvidia driver (check with nvidia-smi if working) cuda","title":"Prerequisite"},{"location":"blog/AI/nvidia/tensorrt_step1/#install-tensorrt","text":"Download version from nvidia dev site (authentication needed) EA vs GA EA: Early access GA: Stable version # sudo dpkg -i nv-tensorrt-repo-<ubuntu version>-<cuda version>-<...> sudo dpkg -i nv-tensorrt-repo-ubuntu2004-cuda11.4-trt8.2.5.1-ga-20220505_1-1_amd64.deb sudo apt-key add /var/nv-tensorrt-repo-ubuntu2004-cuda11.4-trt8.2.5.1-ga-20220505/82307095.pub sudo apt update sudo apt install tensorrt sudo apt-get install python3-libnvinfer-dev sudo apt-get install onnx-graphsurgeon","title":"Install TensorRT"},{"location":"blog/AI/nvidia/tensorrt_step1/#references","text":"What is TensorRT?","title":"References"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/","tags":["yolo","cuda"],"text":"Using openCV dnn module to run yolo5 models Convert pytorch models to onnx model using export.py from yolo5 repository project # All the code and module are download from LearnOpenCV \u251c\u2500\u2500 coco.names \u251c\u2500\u2500 detect.py \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 yolov5n.onnx \u2502 \u2514\u2500\u2500 yolov5s.onnx \u2514\u2500\u2500 sample.jpg detect code # Warning When use cuda, first image initialize the pipe between the cpu memory and gpu Tip using dnn cuda support from opencv 4.2 net . setPreferableBackend ( cv2 . dnn . DNN_BACKEND_CUDA ) net . setPreferableTarget ( cv2 . dnn . DNN_TARGET_CUDA ) -- 8 <-- blog / examples / open_cv / dnn / yolo5 / detect . py Run sample # small model # cpu # run time: 130 ms gpu # run time: 39 ms References # Object Detection using YOLOv5 Object Detection using YOLOv5 github How to use OpenCV DNN Module with NVIDIA GPUs","title":"YOLOv5"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#project","text":"All the code and module are download from LearnOpenCV \u251c\u2500\u2500 coco.names \u251c\u2500\u2500 detect.py \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 yolov5n.onnx \u2502 \u2514\u2500\u2500 yolov5s.onnx \u2514\u2500\u2500 sample.jpg","title":"project"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#detect-code","text":"Warning When use cuda, first image initialize the pipe between the cpu memory and gpu Tip using dnn cuda support from opencv 4.2 net . setPreferableBackend ( cv2 . dnn . DNN_BACKEND_CUDA ) net . setPreferableTarget ( cv2 . dnn . DNN_TARGET_CUDA ) -- 8 <-- blog / examples / open_cv / dnn / yolo5 / detect . py","title":"detect code"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#run-sample","text":"","title":"Run sample"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#small-model","text":"","title":"small model"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#cpu","text":"run time: 130 ms","title":"cpu"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#gpu","text":"run time: 39 ms","title":"gpu"},{"location":"blog/AI/yolo/YOLOv5_and_OpenCV/#references","text":"Object Detection using YOLOv5 Object Detection using YOLOv5 github How to use OpenCV DNN Module with NVIDIA GPUs","title":"References"},{"location":"blog/Ardupilot/","tags":["ardupilot","None"],"text":"Tutorial # Run SITL and Ignition simulator Reference # ros-gz-rover Ardupilot SITL models for gazebo and ignition BlueROV2 in Ignition Gazebo","title":"Ardupilot"},{"location":"blog/Ardupilot/#tutorial","text":"Run SITL and Ignition simulator","title":"Tutorial"},{"location":"blog/Ardupilot/#reference","text":"ros-gz-rover Ardupilot SITL models for gazebo and ignition BlueROV2 in Ignition Gazebo","title":"Reference"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/","tags":["ardupilot","sitl","plugin"],"text":"Objective # Run Ardupilot (copter) SITL and ignition simulation - fortress - ardupilot_gazebo (plugin) - MAVProxy ardupilot_gazebo # clone https://github.com/ArduPilot/ardupilot_gazebo.git ignition-garden branch build check instruction https://github.com/ArduPilot/ardupilot_gazebo#installation- # Clone ardupilot_gazebo repository branch ignition-fortress # git subfolder mkdir ~/git cd git git clone -b <branchname> <remote-repo-url> git clone -b ignition-garden https://github.com/ArduPilot/ardupilot_gazebo.git Run # terminal1 export IGN_GAZEBO_SYSTEM_PLUGIN_PATH = $HOME /git/ardupilot_gazebo/build: ${ IGN_GAZEBO_SYSTEM_PLUGIN_PATH } export IGN_GAZEBO_RESOURCE_PATH = $HOME /git/ardupilot_gazebo/models: $HOME /git/ardupilot_gazebo/worlds: ${ IGN_GAZEBO_RESOURCE_PATH } # note remove sky tag from sdf ign gazebo -v 1 -r iris_arducopter_runway.world SITL # terminal2 - run SITL ./arducopter -S --model JSON \\ --speedup 1 \\ --defaults copter.parm,gazebo-iris.parm \\ -I0 MAVProxy # mavproxy mavproxy.py --master tcp:127.0.0.1:5760 # Arm and takeoff mode guided arm throttle takeoff 5 iris with gimbal and camera # Use iris_with_ardupilot model Add Sensors plugin to world Load model from fule change camera sensor topic to /gimbal/camera Run bridge View camera image in rqt_image_view Add sensors plugin to world <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> fule dashboard load model from fule <include> <name> gimbal_small_2d </name> <uri> https://fuel.gazebosim.org/1.0/OpenRobotics/models/Gimbal Small 2D </uri> <pose> 0 -0.01 0.070 1.57 0 1.57 </pose> </include> gz cache location ~/.ignition/fuel # ~/.ignition/fuel/fuel.gazebosim.org/openrobotics/models run bridge ros2 run ros_gz_bridge parameter_bridge /gimbal/camera@sensor_msgs/msg/Image@ignition.msgs.Image run RQT ros2 run rqt_image_view rqt_image_view /gimbal/camera Reference # ardupilot_gazebo ros gz bridge","title":"Ardupilot SITL with ignition simulator"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#objective","text":"Run Ardupilot (copter) SITL and ignition simulation - fortress - ardupilot_gazebo (plugin) - MAVProxy","title":"Objective"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#ardupilot_gazebo","text":"clone https://github.com/ArduPilot/ardupilot_gazebo.git ignition-garden branch build check instruction https://github.com/ArduPilot/ardupilot_gazebo#installation- # Clone ardupilot_gazebo repository branch ignition-fortress # git subfolder mkdir ~/git cd git git clone -b <branchname> <remote-repo-url> git clone -b ignition-garden https://github.com/ArduPilot/ardupilot_gazebo.git","title":"ardupilot_gazebo"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#run","text":"terminal1 export IGN_GAZEBO_SYSTEM_PLUGIN_PATH = $HOME /git/ardupilot_gazebo/build: ${ IGN_GAZEBO_SYSTEM_PLUGIN_PATH } export IGN_GAZEBO_RESOURCE_PATH = $HOME /git/ardupilot_gazebo/models: $HOME /git/ardupilot_gazebo/worlds: ${ IGN_GAZEBO_RESOURCE_PATH } # note remove sky tag from sdf ign gazebo -v 1 -r iris_arducopter_runway.world","title":"Run"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#sitl","text":"terminal2 - run SITL ./arducopter -S --model JSON \\ --speedup 1 \\ --defaults copter.parm,gazebo-iris.parm \\ -I0","title":"SITL"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#mavproxy","text":"mavproxy mavproxy.py --master tcp:127.0.0.1:5760 # Arm and takeoff mode guided arm throttle takeoff 5","title":"MAVProxy"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#iris-with-gimbal-and-camera","text":"Use iris_with_ardupilot model Add Sensors plugin to world Load model from fule change camera sensor topic to /gimbal/camera Run bridge View camera image in rqt_image_view Add sensors plugin to world <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> fule dashboard load model from fule <include> <name> gimbal_small_2d </name> <uri> https://fuel.gazebosim.org/1.0/OpenRobotics/models/Gimbal Small 2D </uri> <pose> 0 -0.01 0.070 1.57 0 1.57 </pose> </include> gz cache location ~/.ignition/fuel # ~/.ignition/fuel/fuel.gazebosim.org/openrobotics/models run bridge ros2 run ros_gz_bridge parameter_bridge /gimbal/camera@sensor_msgs/msg/Image@ignition.msgs.Image run RQT ros2 run rqt_image_view rqt_image_view /gimbal/camera","title":"iris with gimbal and camera"},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#reference","text":"ardupilot_gazebo ros gz bridge","title":"Reference"},{"location":"blog/Ardupilot/precise_landing/","tags":["ardupilot"],"text":"Reference # patrickpoirier51","title":"precise landing"},{"location":"blog/Ardupilot/precise_landing/#reference","text":"patrickpoirier51","title":"Reference"},{"location":"blog/CPP/cpp_vscode/","tags":["cmake","gtest","ctest"],"text":"","title":"C++ VSCode project with cmake and gtests"},{"location":"blog/CPP/cmake/cmake_hello/","tags":["cmake","101"],"text":"build system is a software tools that is used to facilitate the build process build is the process of \u201ctranslating\u201d source code files into executable binary code files cmake hello # cmake_minimum_required ( VERSION 3.11 ) project ( HelloWorld ) add_executable ( hello_world hello_world . c ) Add compiler option # add_compile_options ( - Wall - Wextra - Wpedantic ) Reference # CMake: Best Practices More Modern CMake","title":"cmake 101"},{"location":"blog/CPP/cmake/cmake_hello/#cmake-hello","text":"cmake_minimum_required ( VERSION 3.11 ) project ( HelloWorld ) add_executable ( hello_world hello_world . c )","title":"cmake hello"},{"location":"blog/CPP/cmake/cmake_hello/#add-compiler-option","text":"add_compile_options ( - Wall - Wextra - Wpedantic )","title":"Add compiler option"},{"location":"blog/CPP/cmake/cmake_hello/#reference","text":"CMake: Best Practices More Modern CMake","title":"Reference"},{"location":"blog/CPP/gtest/","tags":["cpp","gtest","cmake"],"text":"LAB objective # Build cpp project with library using cmake Create testing with GTest Config VSCode install # sudo apt install libgtest-dev \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.cpp \u251c\u2500\u2500 helper \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 helper \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 helper.cpp \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u2514\u2500\u2500 test_helper.cpp \u2502 \u2514\u2500\u2500 CMakeLists.txt lib # header file (definition) cpp file (declaration) cmake file include/helper/helper.h #pragma once namespace helper { int add ( int x , int y ); } src/helper.cpp #include \"helper.h\" namespace helper { int add ( int x , int y ) { return x + y ; } } CMakeLists.txt set ( SOURCES src / helper . cpp ) add_library ( helper $ { SOURCES }) target_include_directories ( helper PUBLIC include / helper ) app # cpp file cmake file app/src/main.cpp #include <iostream> #include <helper.h> using namespace std ; int main ( int argc , char const * argv []) { cout << helper :: add ( 1 , 1 ) << endl ; return 0 ; } CMakeLists.txt add_executable ( main src / main . cpp ) target_link_libraries ( main helper ) test # Test file example cmake file test_helper #include <gtest/gtest.h> #include <helper.h> TEST ( helper , add ){ EXPECT_EQ ( 0 , helper :: add ( 1 , -1 )); } tests/CMakeList.txt add_subdirectory ( / usr / src / gtest $ { PROJECT_BINARY_DIR } / gtest ) include ( CTest ) set ( TEST_BINARY $ { PROJECT_NAME } _test ) add_executable ( $ { TEST_BINARY } test_helper . cpp ) target_link_libraries ( $ { TEST_BINARY } helper gtest gtest_main ) add_test ( NAME $ { TEST_BINARY } COMMAND $ { EXECUTABLE_OUTPUT_PATH } / $ { TEST_BINARY } ) root # Root cmake file root cmake must contain enable_testing cmake function for testing tests/CMakeList.txt cmake_minimum_required ( VERSION 3.10 ) project ( demo ) enable_testing () add_subdirectory ( helper ) add_subdirectory ( app ) add_subdirectory ( tests ) usage # command line # ctest -VV # ... test 1 Start 1 : demo_test 1 : Test command: /home/user/projects/gtest_tutorial/build/tests/demo_test 1 : Test timeout computed to be: 1500 1 : Running main () from /usr/src/gtest/src/gtest_main.cc 1 : [==========] Running 1 test from 1 test suite. 1 : [ ---------- ] Global test environment set-up. 1 : [ ---------- ] 1 test from helper 1 : [ RUN ] helper.add 1 : [ OK ] helper.add ( 0 ms ) 1 : [ ---------- ] 1 test from helper ( 0 ms total ) 1 : 1 : [ ---------- ] Global test environment tear-down 1 : [==========] 1 test from 1 test suite ran. ( 0 ms total ) 1 : [ PASSED ] 1 test. 1 /1 Test #1: demo_test ........................ Passed 0.00 sec VSCode # VSCode marketplace Usage #","title":"GTest with cmake and VSCode"},{"location":"blog/CPP/gtest/#lab-objective","text":"Build cpp project with library using cmake Create testing with GTest Config VSCode","title":"LAB objective"},{"location":"blog/CPP/gtest/#install","text":"sudo apt install libgtest-dev \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.cpp \u251c\u2500\u2500 helper \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 include \u2502 \u2502 \u2514\u2500\u2500 helper \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 helper.cpp \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u2514\u2500\u2500 test_helper.cpp \u2502 \u2514\u2500\u2500 CMakeLists.txt","title":"install"},{"location":"blog/CPP/gtest/#lib","text":"header file (definition) cpp file (declaration) cmake file include/helper/helper.h #pragma once namespace helper { int add ( int x , int y ); } src/helper.cpp #include \"helper.h\" namespace helper { int add ( int x , int y ) { return x + y ; } } CMakeLists.txt set ( SOURCES src / helper . cpp ) add_library ( helper $ { SOURCES }) target_include_directories ( helper PUBLIC include / helper )","title":"lib"},{"location":"blog/CPP/gtest/#app","text":"cpp file cmake file app/src/main.cpp #include <iostream> #include <helper.h> using namespace std ; int main ( int argc , char const * argv []) { cout << helper :: add ( 1 , 1 ) << endl ; return 0 ; } CMakeLists.txt add_executable ( main src / main . cpp ) target_link_libraries ( main helper )","title":"app"},{"location":"blog/CPP/gtest/#test","text":"Test file example cmake file test_helper #include <gtest/gtest.h> #include <helper.h> TEST ( helper , add ){ EXPECT_EQ ( 0 , helper :: add ( 1 , -1 )); } tests/CMakeList.txt add_subdirectory ( / usr / src / gtest $ { PROJECT_BINARY_DIR } / gtest ) include ( CTest ) set ( TEST_BINARY $ { PROJECT_NAME } _test ) add_executable ( $ { TEST_BINARY } test_helper . cpp ) target_link_libraries ( $ { TEST_BINARY } helper gtest gtest_main ) add_test ( NAME $ { TEST_BINARY } COMMAND $ { EXECUTABLE_OUTPUT_PATH } / $ { TEST_BINARY } )","title":"test"},{"location":"blog/CPP/gtest/#root","text":"Root cmake file root cmake must contain enable_testing cmake function for testing tests/CMakeList.txt cmake_minimum_required ( VERSION 3.10 ) project ( demo ) enable_testing () add_subdirectory ( helper ) add_subdirectory ( app ) add_subdirectory ( tests )","title":"root"},{"location":"blog/CPP/gtest/#usage","text":"","title":"usage"},{"location":"blog/CPP/gtest/#command-line","text":"ctest -VV # ... test 1 Start 1 : demo_test 1 : Test command: /home/user/projects/gtest_tutorial/build/tests/demo_test 1 : Test timeout computed to be: 1500 1 : Running main () from /usr/src/gtest/src/gtest_main.cc 1 : [==========] Running 1 test from 1 test suite. 1 : [ ---------- ] Global test environment set-up. 1 : [ ---------- ] 1 test from helper 1 : [ RUN ] helper.add 1 : [ OK ] helper.add ( 0 ms ) 1 : [ ---------- ] 1 test from helper ( 0 ms total ) 1 : 1 : [ ---------- ] Global test environment tear-down 1 : [==========] 1 test from 1 test suite ran. ( 0 ms total ) 1 : [ PASSED ] 1 test. 1 /1 Test #1: demo_test ........................ Passed 0.00 sec","title":"command line"},{"location":"blog/CPP/gtest/#vscode","text":"VSCode marketplace","title":"VSCode"},{"location":"blog/CPP/gtest/#usage_1","text":"","title":"Usage"},{"location":"blog/CPP/modern/","text":"Courses # uni-bonn modern cpp 2018","title":"modern cpp"},{"location":"blog/CPP/modern/#courses","text":"uni-bonn modern cpp 2018","title":"Courses"},{"location":"blog/CPP/modern/casting/","tags":["cpp"],"text":"static_cast reinterpret_cast dynamic_cast static_cast # Convert type of variable at compile time Rarely need to be use explicit Drive class can be upcast to its base class static_cast < NewType > ( variable ) reinterpret_cast # Reinterpret the bytes of a variable as another type Mostly used when writing binary data reinterpret_cast < NewType > ( variable ) dynamic_cast # Google-style - AVOID","title":"casting"},{"location":"blog/CPP/modern/casting/#static_cast","text":"Convert type of variable at compile time Rarely need to be use explicit Drive class can be upcast to its base class static_cast < NewType > ( variable )","title":"static_cast"},{"location":"blog/CPP/modern/casting/#reinterpret_cast","text":"Reinterpret the bytes of a variable as another type Mostly used when writing binary data reinterpret_cast < NewType > ( variable )","title":"reinterpret_cast"},{"location":"blog/CPP/modern/casting/#dynamic_cast","text":"Google-style - AVOID","title":"dynamic_cast"},{"location":"blog/CPP/modern/filesystem_hello/","tags":["cpp"],"text":"create_directories directory_iterator path filename extension stem exists #include <filesystem> #include <iostream> using namespace std ; namespace fs = std :: filesystem ; int main (){ std :: string ppath = \"/tmp/fs_demo\" ; fs :: create_directories ( ppath ); for ( auto p : fs :: directory_iterator ( ppath )) { std :: cout << p . path () << std :: endl ; cout << fs :: path ( p . path ()). filename () << endl ; cout << fs :: path ( p . path ()). extension () << endl ; cout << fs :: path ( p . path ()). stem () << endl ; } cout << boolalpha << fs :: exists ( ppath ) << endl ; return 0 ; }","title":"filesystem hello"},{"location":"blog/CPP/modern/fmt_hello/","tags":["cpp","format","fmt"],"text":"install # sudo apt install libfmt-dev Demo # fmt_hello.cpp #include <iostream> #include <fmt/core.h> using namespace std ; int main ( int argc , char const * argv []) { string s = \"world\" ; fmt :: print ( \"hello {} \\n \" , s ); auto data = fmt :: format ( \"{1} {0}\" , \"hello\" , 1 , 2 , 3 ); cout << data << endl ; return 0 ; } CMakeLists.txt find_package ( fmt REQUIRED ) add_executable ( fmt_hello fmt_hello . cpp ) target_link_libraries ( fmt_hello PRIVATE fmt :: fmt ) Resource # {fmt} Formatting & Printing Library","title":"fmt"},{"location":"blog/CPP/modern/fmt_hello/#install","text":"sudo apt install libfmt-dev","title":"install"},{"location":"blog/CPP/modern/fmt_hello/#demo","text":"fmt_hello.cpp #include <iostream> #include <fmt/core.h> using namespace std ; int main ( int argc , char const * argv []) { string s = \"world\" ; fmt :: print ( \"hello {} \\n \" , s ); auto data = fmt :: format ( \"{1} {0}\" , \"hello\" , 1 , 2 , 3 ); cout << data << endl ; return 0 ; } CMakeLists.txt find_package ( fmt REQUIRED ) add_executable ( fmt_hello fmt_hello . cpp ) target_link_libraries ( fmt_hello PRIVATE fmt :: fmt )","title":"Demo"},{"location":"blog/CPP/modern/fmt_hello/#resource","text":"{fmt} Formatting & Printing Library","title":"Resource"},{"location":"blog/CPP/modern/move_hello/","tags":["cpp"],"text":"Move object ownership #include <iostream> #include <vector> using namespace std ; int main ( int argc , char const * argv []) { string str = \"Hello\" ; vector < string > v ; v . push_back ( str ); cout << \"str After copy is: \" << str << endl ; // move str into vector , str might no be empty v . push_back ( move ( str )); cout << \"str After copy is: \" << str << endl ; return 0 ; }","title":"Move"},{"location":"blog/CPP/modern/smart_pointer/","tags":["cpp"],"text":"Unique Pointers # release it\u2019s memory when out of scope Unique pointer has no copy constructor Cannot be copied, can be moved Guarantees that memory is always owned by a single unique pointer scope #include <iostream> #include <memory> using std :: cout ; using std :: endl ; class Basic { public : Basic (){ cout << \"construct\" << endl ; } ~ Basic (){ cout << \"de construct\" << endl ; } int a = 10 ; }; void run (){ auto a_ptr = std :: make_unique < Basic > (); cout << a_ptr -> a << endl ; } int main ( int argc , char const * argv []) { cout << \"run call\" << endl ; run (); cout << \"run exit\" << endl ; return 0 ; } owner #include <iostream> #include <memory> using std :: cout ; using std :: endl ; class Basic { public : int a = 10 ; }; int main ( int argc , char const * argv []) { auto a_ptr = std :: make_unique < Basic > (); cout << a_ptr -> a << endl ; auto b_ptr = std :: move ( a_ptr ); cout << b_ptr -> a << endl ; return 0 ; } Smart pointer # Store a usage counter and a raw pointer Increases usage counter when copied Decreases when destructed #include <iostream> #include <memory> using std :: cout ; using std :: endl ; class Basic { public : Basic ( int a ) : a_ ( a ){ cout << \"construct\" << endl ; } ~ Basic (){ cout << \"de construct\" << endl ;} private : int a_ ; }; int main ( int argc , char const * argv []) { auto a_ptr = std :: make_shared < Basic > ( 10 ); cout << a_ptr . use_count () << endl ; { // auto b_ptr = std::move(a_ptr); auto b_ptr = a_ptr ; cout << b_ptr . use_count () << endl ; } return 0 ; }","title":"Smart pointer"},{"location":"blog/CPP/modern/smart_pointer/#unique-pointers","text":"release it\u2019s memory when out of scope Unique pointer has no copy constructor Cannot be copied, can be moved Guarantees that memory is always owned by a single unique pointer scope #include <iostream> #include <memory> using std :: cout ; using std :: endl ; class Basic { public : Basic (){ cout << \"construct\" << endl ; } ~ Basic (){ cout << \"de construct\" << endl ; } int a = 10 ; }; void run (){ auto a_ptr = std :: make_unique < Basic > (); cout << a_ptr -> a << endl ; } int main ( int argc , char const * argv []) { cout << \"run call\" << endl ; run (); cout << \"run exit\" << endl ; return 0 ; } owner #include <iostream> #include <memory> using std :: cout ; using std :: endl ; class Basic { public : int a = 10 ; }; int main ( int argc , char const * argv []) { auto a_ptr = std :: make_unique < Basic > (); cout << a_ptr -> a << endl ; auto b_ptr = std :: move ( a_ptr ); cout << b_ptr -> a << endl ; return 0 ; }","title":"Unique Pointers"},{"location":"blog/CPP/modern/smart_pointer/#smart-pointer","text":"Store a usage counter and a raw pointer Increases usage counter when copied Decreases when destructed #include <iostream> #include <memory> using std :: cout ; using std :: endl ; class Basic { public : Basic ( int a ) : a_ ( a ){ cout << \"construct\" << endl ; } ~ Basic (){ cout << \"de construct\" << endl ;} private : int a_ ; }; int main ( int argc , char const * argv []) { auto a_ptr = std :: make_shared < Basic > ( 10 ); cout << a_ptr . use_count () << endl ; { // auto b_ptr = std::move(a_ptr); auto b_ptr = a_ptr ; cout << b_ptr . use_count () << endl ; } return 0 ; }","title":"Smart pointer"},{"location":"blog/CPP/multithreading/","tags":["cpp","multithreading"],"text":"Reference # Bo Qian Concurrent Programing list","title":"CPP Multithreading"},{"location":"blog/CPP/multithreading/#reference","text":"Bo Qian Concurrent Programing list","title":"Reference"},{"location":"blog/CPP/multithreading/async_future_promise/","tags":["multithreading","cpp"],"text":"async_future.cpp #include <iostream> #include <future> using std :: cout ; using std :: endl ; int factorial ( int N ){ int res = 1 ; for ( int i = N ; i > 1 ; i -- ) { res *= i ; } return res ; } int main ( int argc , char const * argv []) { std :: future < int > fu = std :: async ( factorial , 4 ); //call with a profile , force a new thread //std::future<int> fu = std::async(std::launch::async, factorial, 4); // wait for result from async int x = fu . get (); cout << x << endl ; return 0 ; } Async profile # launch::deferred: Deferred the call in the same thread only when get call launch::async: Call the function in new thread launch::deferred | launch::async (default) promise # async_future_promise.cpp #include <iostream> #include <future> #include <chrono> #include <thread> using std :: cout ; using std :: endl ; int factorial ( std :: future < int >& f ){ int res = 1 ; // wait for promise value int N = f . get (); for ( int i = N ; i > 1 ; i -- ) { res *= i ; } return res ; } int main ( int argc , char const * argv []) { std :: promise < int > p ; std :: future < int > f = p . get_future (); // promise a value in the future std :: future < int > fu = std :: async ( std :: launch :: async , factorial , std :: ref ( f )); std :: this_thread :: sleep_for ( std :: chrono :: milliseconds ( 20 )); // send the promise value p . set_value ( 4 ); int x = fu . get (); cout << x << endl ; return 0 ; } Reference # C++ Threading #7: Future, Promise and async()","title":"Async Future and Promise"},{"location":"blog/CPP/multithreading/async_future_promise/#async-profile","text":"launch::deferred: Deferred the call in the same thread only when get call launch::async: Call the function in new thread launch::deferred | launch::async (default)","title":"Async profile"},{"location":"blog/CPP/multithreading/async_future_promise/#promise","text":"async_future_promise.cpp #include <iostream> #include <future> #include <chrono> #include <thread> using std :: cout ; using std :: endl ; int factorial ( std :: future < int >& f ){ int res = 1 ; // wait for promise value int N = f . get (); for ( int i = N ; i > 1 ; i -- ) { res *= i ; } return res ; } int main ( int argc , char const * argv []) { std :: promise < int > p ; std :: future < int > f = p . get_future (); // promise a value in the future std :: future < int > fu = std :: async ( std :: launch :: async , factorial , std :: ref ( f )); std :: this_thread :: sleep_for ( std :: chrono :: milliseconds ( 20 )); // send the promise value p . set_value ( 4 ); int x = fu . get (); cout << x << endl ; return 0 ; }","title":"promise"},{"location":"blog/CPP/multithreading/async_future_promise/#reference","text":"C++ Threading #7: Future, Promise and async()","title":"Reference"},{"location":"blog/CPP/spdlog/","tags":["spdlog"],"text":"install # sudo apt install libspdlog-dev basic usage # hello_spd #include <spdlog/spdlog.h> int main ( int argc , char const * argv []) { spdlog :: set_level ( spdlog :: level :: debug ); spdlog :: debug ( \"debug {}\" , \"more data\" ); spdlog :: info ( \"info {} {}\" , \"data\" , 1 ); spdlog :: warn ( \"warn\" ); spdlog :: error ( \"error\" ); return 0 ; } CMakeLists.txt find_package ( spdlog REQUIRED ) add_executable ( hello_spd hello_spd . cpp ) target_link_libraries ( hello_spd PRIVATE spdlog :: spdlog_header_only )","title":"spdlog hello"},{"location":"blog/CPP/spdlog/#install","text":"sudo apt install libspdlog-dev","title":"install"},{"location":"blog/CPP/spdlog/#basic-usage","text":"hello_spd #include <spdlog/spdlog.h> int main ( int argc , char const * argv []) { spdlog :: set_level ( spdlog :: level :: debug ); spdlog :: debug ( \"debug {}\" , \"more data\" ); spdlog :: info ( \"info {} {}\" , \"data\" , 1 ); spdlog :: warn ( \"warn\" ); spdlog :: error ( \"error\" ); return 0 ; } CMakeLists.txt find_package ( spdlog REQUIRED ) add_executable ( hello_spd hello_spd . cpp ) target_link_libraries ( hello_spd PRIVATE spdlog :: spdlog_header_only )","title":"basic usage"},{"location":"blog/CPP/spdlog/log_to_file/","tags":["spdlog"],"text":"#include <spdlog/spdlog.h> #include <spdlog/sinks/basic_file_sink.h> int main ( int argc , char const * argv []) { auto my_logger = spdlog :: basic_logger_mt ( \"my_logger\" , \"log.txt\" ); my_logger -> set_level ( spdlog :: level :: debug ); my_logger -> debug ( \"debug {}\" , \"more data\" ); my_logger -> info ( \"info {} {}\" , \"data\" , 1 ); my_logger -> warn ( \"warn\" ); my_logger -> error ( \"error\" ); return 0 ; } CMakeLists.txt find_package ( spdlog REQUIRED ) add_executable ( hello_spd hello_spd . cpp ) target_link_libraries ( hello_spd PRIVATE spdlog :: spdlog_header_only )","title":"spdlog log to file"},{"location":"blog/CV/camera_world_coordinate/","tags":["camera","coordinate system"],"text":"cx optical center width / 2 cy optical center height / 2 fx focal length fx=fy fy","title":"Camera world coordinate system"},{"location":"blog/CV/matching/orb_matcher/","tags":["orb","matching","opencv"],"text":"Hamming Distance # Hamming Distance measures the similarity between two strings of the same length. Hamming distance is the number of bit positions in which the two bits are different. BFMatcher # Brute-Force matching take each feature from image query and compares it to all the other/train image Matcher result # match method DMatch distance imgIdx: train image index queryIdx: query descriptor index trainIdx: train descriptor index Basic Demo # import numpy as np import cv2 # Read the query image as query_img # and train image This query image # is what you need to find in train image # Save it in the same directory # with the name image.jpg query_img = cv2 . imread ( 'query.jpg' ) train_img = cv2 . imread ( 'train.jpg' ) # Convert it to grayscale query_img_bw = cv2 . cvtColor ( query_img , cv2 . COLOR_BGR2GRAY ) train_img_bw = cv2 . cvtColor ( train_img , cv2 . COLOR_BGR2GRAY ) # Initialize the ORB detector algorithm orb = cv2 . ORB_create () # Now detect the keypoints and compute # the descriptors for the query image # and train image queryKeypoints , queryDescriptors = orb . detectAndCompute ( query_img_bw , mask = None ) trainKeypoints , trainDescriptors = orb . detectAndCompute ( train_img_bw , mask = None ) # Initialize the Matcher for matching # the keypoints and then match the # keypoints matcher = cv2 . BFMatcher () matches = matcher . match ( queryDescriptors , trainDescriptors ) # draw the matches to the final image # containing both the images the drawMatches() # function takes both images and keypoints # and outputs the matched query image with # its train image final_img = cv2 . drawMatches ( query_img , queryKeypoints , train_img , trainKeypoints , matches [: 20 ], None ) final_img = cv2 . resize ( final_img , ( 1000 , 650 )) # Show the final image cv2 . imshow ( \"Matches\" , final_img ) cv2 . waitKey ( 3000 ) # Reference # OpenCV-python-tests Different types of distance used in Machine Learning. comparing_images","title":"opencv feature matching"},{"location":"blog/CV/matching/orb_matcher/#hamming-distance","text":"Hamming Distance measures the similarity between two strings of the same length. Hamming distance is the number of bit positions in which the two bits are different.","title":"Hamming Distance"},{"location":"blog/CV/matching/orb_matcher/#bfmatcher","text":"Brute-Force matching take each feature from image query and compares it to all the other/train image","title":"BFMatcher"},{"location":"blog/CV/matching/orb_matcher/#matcher-result","text":"match method DMatch distance imgIdx: train image index queryIdx: query descriptor index trainIdx: train descriptor index","title":"Matcher result"},{"location":"blog/CV/matching/orb_matcher/#basic-demo","text":"","title":"Basic Demo"},{"location":"blog/CV/matching/orb_matcher/#import-numpy-as-npimport-cv2-read-the-query-image-as-query_img-and-train-image-this-query-image-is-what-you-need-to-find-in-train-image-save-it-in-the-same-directory-with-the-name-imagejpg-query_img--cv2imreadqueryjpgtrain_img--cv2imreadtrainjpg-convert-it-to-grayscalequery_img_bw--cv2cvtcolorquery_imgcv2color_bgr2graytrain_img_bw--cv2cvtcolortrain_img-cv2color_bgr2gray-initialize-the-orb-detector-algorithmorb--cv2orb_create-now-detect-the-keypoints-and-compute-the-descriptors-for-the-query-image-and-train-imagequerykeypoints-querydescriptors--orbdetectandcomputequery_img_bw-masknonetrainkeypoints-traindescriptors--orbdetectandcomputetrain_img_bw-masknone-initialize-the-matcher-for-matching-the-keypoints-and-then-match-the-keypointsmatcher--cv2bfmatchermatches--matchermatchquerydescriptorstraindescriptors-draw-the-matches-to-the-final-image-containing-both-the-images-the-drawmatches-function-takes-both-images-and-keypoints-and-outputs-the-matched-query-image-with-its-train-imagefinal_img--cv2drawmatchesquery_img-querykeypointstrain_img-trainkeypoints-matches20nonefinal_img--cv2resizefinal_img-1000650-show-the-final-imagecv2imshowmatches-final_imgcv2waitkey3000","text":"","title":"import numpy as np\nimport cv2\n\n\n# Read the query image as query_img\n# and train image This query image\n# is what you need to find in train image\n# Save it in the same directory\n# with the name image.jpg \nquery_img = cv2.imread(&#39;query.jpg&#39;)\ntrain_img = cv2.imread(&#39;train.jpg&#39;)\n\n# Convert it to grayscale\nquery_img_bw = cv2.cvtColor(query_img,cv2.COLOR_BGR2GRAY)\ntrain_img_bw = cv2.cvtColor(train_img, cv2.COLOR_BGR2GRAY)\n\n# Initialize the ORB detector algorithm\norb = cv2.ORB_create()\n\n# Now detect the keypoints and compute\n# the descriptors for the query image\n# and train image\nqueryKeypoints, queryDescriptors = orb.detectAndCompute(query_img_bw, mask=None)\ntrainKeypoints, trainDescriptors = orb.detectAndCompute(train_img_bw, mask=None)\n\n# Initialize the Matcher for matching\n# the keypoints and then match the\n# keypoints\nmatcher = cv2.BFMatcher()\nmatches = matcher.match(queryDescriptors,trainDescriptors)\n\n# draw the matches to the final image\n# containing both the images the drawMatches()\n# function takes both images and keypoints\n# and outputs the matched query image with\n# its train image\nfinal_img = cv2.drawMatches(query_img, queryKeypoints,\ntrain_img, trainKeypoints, matches[:20],None)\n\nfinal_img = cv2.resize(final_img, (1000,650))\n\n# Show the final image\ncv2.imshow(&quot;Matches&quot;, final_img)\ncv2.waitKey(3000)\n"},{"location":"blog/CV/matching/orb_matcher/#reference","text":"OpenCV-python-tests Different types of distance used in Machine Learning. comparing_images","title":"Reference"},{"location":"blog/CV/opencv/build_with_cuda_support/","tags":["opencv","build","cuda"],"text":"Build OpenCV on x64 ubuntu machine Prerequisites # install nvidia driver \u2026 install cudnn \u2026 install cmake gui install all opencv dependencies sudo apt install cmake-qt-gui install dependencies sudo apt-get update sudo apt-get upgrade sudo apt-get install build-essential cmake unzip pkg-config sudo apt-get install libjpeg-dev libpng-dev libtiff-dev sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev sudo apt-get install libv4l-dev libxvidcore-dev libx264-dev sudo apt-get install libgtk-3-dev sudo apt-get install libblas-dev liblapack-dev gfortran sudo apt-get install python3-dev Download source # wget https://github.com/opencv/opencv/archive/4.5.5.zip wget https://github.com/opencv/opencv_contrib/archive/4.5.5.zip # unzip build process # set all option run configure run generate run make -j 8 from/on build folder check config # Select source and build folder config python config cuda gpu arch wikipedia cuda gpu support dnn blas fast math contrib pkgconfig config result # show my changes Commandline options: -DOPENCV_EXTRA_MODULES_PATH:PATH=\"/home/user/opencv/opencv_contrib-4.5.5/modules\" \\ -DOPENCV_GENERATE_PKGCONFIG:BOOL=\"1\" \\ -DWITH_CUDA:BOOL=\"1\" \\ -DCUDA_ARCH_BIN:STRING=\"7.5\" \\ -DOPENCV_DNN_CUDA:BOOL=\"1\" \\ -DENABLE_FAST_MATH:BOOL=\"1\" \\ -DPYTHON3_EXECUTABLE:FILEPATH=\"/usr/bin/python3\" -DBUILD_opencv_world:BOOL=\"1\" \\ -DCUDA_FAST_MATH:BOOL=\"1\" Cache file: OPENCV_EXTRA_MODULES_PATH:PATH=/home/user/opencv/opencv_contrib-4.5.5/modules OPENCV_GENERATE_PKGCONFIG:BOOL=1 WITH_CUDA:BOOL=1 CUDA_ARCH_BIN:STRING=7.5 OPENCV_DNN_CUDA:BOOL=1 ENABLE_FAST_MATH:BOOL=1 PYTHON3_EXECUTABLE:FILEPATH=/usr/bin/python3 BUILD_opencv_world:BOOL=1 CUDA_FAST_MATH:BOOL=1 Check # create new virtual env and activate run setup.py from build/python_loader folder import cv2 cv2 . __version__ cv2 . cuda . getCudaEnabledDeviceCount ()","title":"Build OpenCV with CUDA"},{"location":"blog/CV/opencv/build_with_cuda_support/#prerequisites","text":"install nvidia driver \u2026 install cudnn \u2026 install cmake gui install all opencv dependencies sudo apt install cmake-qt-gui install dependencies sudo apt-get update sudo apt-get upgrade sudo apt-get install build-essential cmake unzip pkg-config sudo apt-get install libjpeg-dev libpng-dev libtiff-dev sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev sudo apt-get install libv4l-dev libxvidcore-dev libx264-dev sudo apt-get install libgtk-3-dev sudo apt-get install libblas-dev liblapack-dev gfortran sudo apt-get install python3-dev","title":"Prerequisites"},{"location":"blog/CV/opencv/build_with_cuda_support/#download-source","text":"wget https://github.com/opencv/opencv/archive/4.5.5.zip wget https://github.com/opencv/opencv_contrib/archive/4.5.5.zip # unzip","title":"Download source"},{"location":"blog/CV/opencv/build_with_cuda_support/#build-process","text":"set all option run configure run generate run make -j 8 from/on build folder check","title":"build process"},{"location":"blog/CV/opencv/build_with_cuda_support/#config","text":"Select source and build folder config python config cuda gpu arch wikipedia cuda gpu support dnn blas fast math contrib pkgconfig","title":"config"},{"location":"blog/CV/opencv/build_with_cuda_support/#config-result","text":"show my changes Commandline options: -DOPENCV_EXTRA_MODULES_PATH:PATH=\"/home/user/opencv/opencv_contrib-4.5.5/modules\" \\ -DOPENCV_GENERATE_PKGCONFIG:BOOL=\"1\" \\ -DWITH_CUDA:BOOL=\"1\" \\ -DCUDA_ARCH_BIN:STRING=\"7.5\" \\ -DOPENCV_DNN_CUDA:BOOL=\"1\" \\ -DENABLE_FAST_MATH:BOOL=\"1\" \\ -DPYTHON3_EXECUTABLE:FILEPATH=\"/usr/bin/python3\" -DBUILD_opencv_world:BOOL=\"1\" \\ -DCUDA_FAST_MATH:BOOL=\"1\" Cache file: OPENCV_EXTRA_MODULES_PATH:PATH=/home/user/opencv/opencv_contrib-4.5.5/modules OPENCV_GENERATE_PKGCONFIG:BOOL=1 WITH_CUDA:BOOL=1 CUDA_ARCH_BIN:STRING=7.5 OPENCV_DNN_CUDA:BOOL=1 ENABLE_FAST_MATH:BOOL=1 PYTHON3_EXECUTABLE:FILEPATH=/usr/bin/python3 BUILD_opencv_world:BOOL=1 CUDA_FAST_MATH:BOOL=1","title":"config result"},{"location":"blog/CV/opencv/build_with_cuda_support/#check","text":"create new virtual env and activate run setup.py from build/python_loader folder import cv2 cv2 . __version__ cv2 . cuda . getCudaEnabledDeviceCount ()","title":"Check"},{"location":"blog/CV/opencv/cpp/","tags":["opencv","cpp"],"text":"include <opencv2/opencv.hpp> Namespace cv:: ```cpp main=\u201d\u201c include # include # int main(int argc, char** argv ) { cv::Mat image; image = cv::imread(\u201clana.png\u201d); if ( !image.data ) { printf(\u201cNo image data n\u201c); return -1; } cv::namedWindow(\u201cDisplay Image\u201d, cv::WINDOW_AUTOSIZE ); cv::imshow(\u201cDisplay Image\u201d, image); cv::waitKey(0); return 0; } ```c title=\"CMakeLists.txt\" cmake_minimum_required(VERSION 3.22) project(cpp_tutorial) find_package( OpenCV REQUIRED ) include_directories( ${OpenCV_INCLUDE_DIRS} ) add_executable( cv_hello main.cpp ) target_link_libraries( cv_hello ${OpenCV_LIBS} )","title":"OpenCV cpp tutorial"},{"location":"blog/CV/opencv/cpp/#include","text":"","title":"include "},{"location":"blog/CV/opencv/cpp/#include_1","text":"int main(int argc, char** argv ) { cv::Mat image; image = cv::imread(\u201clana.png\u201d); if ( !image.data ) { printf(\u201cNo image data n\u201c); return -1; } cv::namedWindow(\u201cDisplay Image\u201d, cv::WINDOW_AUTOSIZE ); cv::imshow(\u201cDisplay Image\u201d, image); cv::waitKey(0); return 0; } ```c title=\"CMakeLists.txt\" cmake_minimum_required(VERSION 3.22) project(cpp_tutorial) find_package( OpenCV REQUIRED ) include_directories( ${OpenCV_INCLUDE_DIRS} ) add_executable( cv_hello main.cpp ) target_link_libraries( cv_hello ${OpenCV_LIBS} )","title":"include "},{"location":"blog/CV/opencv/image_trasformation/","tags":["transformation","computer vision"],"text":"Translation # opencv demo # import cv2 import numpy as np image = cv2 . imread ( '/home/user/projects/blog/examples/open_cv/homography/images/lana.png' ) height , width = image . shape [: 2 ] tx = 100 ty = 100 T = np . float32 ([[ 1 , 0 , tx ], [ 0 , 1 , ty ]]) img_translation = cv2 . warpAffine ( image , T , ( width , height )) cv2 . imshow ( \"src\" , image ) cv2 . imshow ( \"dst\" , img_translation ) cv2 . warpAffine ( image , T , ( width , height )) cv2 . waitKey ( 0 ) Rotation # rotate import cv2 import numpy as np image = cv2 . imread ( '/home/user/projects/blog/examples/open_cv/homography/images/lana.png' ) height , width = image . shape [: 2 ] center = ( width / 2 , height / 2 ) angle = 45 scale = 1 M = cv2 . getRotationMatrix2D ( center , angle , scale ) img_translation = cv2 . warpAffine ( image , M , ( width , height )) cv2 . imshow ( \"src\" , image ) cv2 . imshow ( \"dst\" , img_translation ) cv2 . waitKey ( 0 ) Scale # Reference # Pratik jain computer vision How to resize, translate, flip and rotate an image with OpenCV understanding-geometric-transformation","title":"Image Transforms and Rotation"},{"location":"blog/CV/opencv/image_trasformation/#translation","text":"","title":"Translation"},{"location":"blog/CV/opencv/image_trasformation/#opencv-demo","text":"import cv2 import numpy as np image = cv2 . imread ( '/home/user/projects/blog/examples/open_cv/homography/images/lana.png' ) height , width = image . shape [: 2 ] tx = 100 ty = 100 T = np . float32 ([[ 1 , 0 , tx ], [ 0 , 1 , ty ]]) img_translation = cv2 . warpAffine ( image , T , ( width , height )) cv2 . imshow ( \"src\" , image ) cv2 . imshow ( \"dst\" , img_translation ) cv2 . warpAffine ( image , T , ( width , height )) cv2 . waitKey ( 0 )","title":"opencv demo"},{"location":"blog/CV/opencv/image_trasformation/#rotation","text":"rotate import cv2 import numpy as np image = cv2 . imread ( '/home/user/projects/blog/examples/open_cv/homography/images/lana.png' ) height , width = image . shape [: 2 ] center = ( width / 2 , height / 2 ) angle = 45 scale = 1 M = cv2 . getRotationMatrix2D ( center , angle , scale ) img_translation = cv2 . warpAffine ( image , M , ( width , height )) cv2 . imshow ( \"src\" , image ) cv2 . imshow ( \"dst\" , img_translation ) cv2 . waitKey ( 0 )","title":"Rotation"},{"location":"blog/CV/opencv/image_trasformation/#scale","text":"","title":"Scale"},{"location":"blog/CV/opencv/image_trasformation/#reference","text":"Pratik jain computer vision How to resize, translate, flip and rotate an image with OpenCV understanding-geometric-transformation","title":"Reference"},{"location":"blog/CV/opencv/image_trasformation/homography/","tags":["homography","computer vision"],"text":"Demo # import cv2 import numpy as np rotXdeg = 90 rotYdeg = 90 rotZdeg = 90 f = 500 dist = 500 def onRotXChange ( val ): global rotXdeg rotXdeg = val def onRotYChange ( val ): global rotYdeg rotYdeg = val def onRotZChange ( val ): global rotZdeg rotZdeg = val def onFchange ( val ): global f f = val def onDistChange ( val ): global dist dist = val if __name__ == '__main__' : #Read input image, and create output image src = cv2 . imread ( '/home/user/projects/blog/examples/open_cv/homography/images/lana.png' ) dst = np . ndarray ( shape = src . shape , dtype = src . dtype ) #Create user interface with trackbars that will allow to modify the parameters of the transformation wndname1 = \"Source:\" wndname2 = \"WarpPerspective: \" cv2 . namedWindow ( wndname1 , 1 ) cv2 . namedWindow ( wndname2 , 1 ) cv2 . createTrackbar ( \"Rotation X\" , wndname2 , rotXdeg , 180 , onRotXChange ) cv2 . createTrackbar ( \"Rotation Y\" , wndname2 , rotYdeg , 180 , onRotYChange ) cv2 . createTrackbar ( \"Rotation Z\" , wndname2 , rotZdeg , 180 , onRotZChange ) cv2 . createTrackbar ( \"f\" , wndname2 , f , 2000 , onFchange ) cv2 . createTrackbar ( \"Distance\" , wndname2 , dist , 2000 , onDistChange ) #Show original image cv2 . imshow ( wndname1 , src ) h , w = src . shape [: 2 ] while True : rotX = ( rotXdeg - 90 ) * np . pi / 180 rotY = ( rotYdeg - 90 ) * np . pi / 180 rotZ = ( rotZdeg - 90 ) * np . pi / 180 #Projection 2D -> 3D matrix A1 = np . matrix ([[ 1 , 0 , - w / 2 ], [ 0 , 1 , - h / 2 ], [ 0 , 0 , 0 ], [ 0 , 0 , 1 ]]) # Rotation matrices around the X,Y,Z axis RX = np . matrix ([[ 1 , 0 , 0 , 0 ], [ 0 , np . cos ( rotX ), - np . sin ( rotX ), 0 ], [ 0 , np . sin ( rotX ), np . cos ( rotX ) , 0 ], [ 0 , 0 , 0 , 1 ]]) RY = np . matrix ([[ np . cos ( rotY ), 0 , np . sin ( rotY ), 0 ], [ 0 , 1 , 0 , 0 ], [ - np . sin ( rotY ), 0 , np . cos ( rotY ), 0 ], [ 0 , 0 , 0 , 1 ]]) RZ = np . matrix ([[ np . cos ( rotZ ), - np . sin ( rotZ ), 0 , 0 ], [ np . sin ( rotZ ), np . cos ( rotZ ), 0 , 0 ], [ 0 , 0 , 1 , 0 ], [ 0 , 0 , 0 , 1 ]]) #Composed rotation matrix with (RX,RY,RZ) R = RX * RY * RZ #Translation matrix on the Z axis change dist will change the height T = np . matrix ([[ 1 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 0 ], [ 0 , 0 , 1 , dist ], [ 0 , 0 , 0 , 1 ]]) #Camera Intrisecs matrix 3D -> 2D A2 = np . matrix ([[ f , 0 , w / 2 , 0 ], [ 0 , f , h / 2 , 0 ], [ 0 , 0 , 1 , 0 ]]) # Final and overall transformation matrix H = A2 * ( T * ( R * A1 )) # Apply matrix transformation cv2 . warpPerspective ( src , H , ( w , h ), dst , cv2 . INTER_CUBIC ) #Show the image cv2 . imshow ( wndname2 , dst ) cv2 . waitKey ( 1 ) Reference # Compute homograph for virtual camera with opencv Python create image with new camera position","title":"Image Homography"},{"location":"blog/CV/opencv/image_trasformation/homography/#demo","text":"import cv2 import numpy as np rotXdeg = 90 rotYdeg = 90 rotZdeg = 90 f = 500 dist = 500 def onRotXChange ( val ): global rotXdeg rotXdeg = val def onRotYChange ( val ): global rotYdeg rotYdeg = val def onRotZChange ( val ): global rotZdeg rotZdeg = val def onFchange ( val ): global f f = val def onDistChange ( val ): global dist dist = val if __name__ == '__main__' : #Read input image, and create output image src = cv2 . imread ( '/home/user/projects/blog/examples/open_cv/homography/images/lana.png' ) dst = np . ndarray ( shape = src . shape , dtype = src . dtype ) #Create user interface with trackbars that will allow to modify the parameters of the transformation wndname1 = \"Source:\" wndname2 = \"WarpPerspective: \" cv2 . namedWindow ( wndname1 , 1 ) cv2 . namedWindow ( wndname2 , 1 ) cv2 . createTrackbar ( \"Rotation X\" , wndname2 , rotXdeg , 180 , onRotXChange ) cv2 . createTrackbar ( \"Rotation Y\" , wndname2 , rotYdeg , 180 , onRotYChange ) cv2 . createTrackbar ( \"Rotation Z\" , wndname2 , rotZdeg , 180 , onRotZChange ) cv2 . createTrackbar ( \"f\" , wndname2 , f , 2000 , onFchange ) cv2 . createTrackbar ( \"Distance\" , wndname2 , dist , 2000 , onDistChange ) #Show original image cv2 . imshow ( wndname1 , src ) h , w = src . shape [: 2 ] while True : rotX = ( rotXdeg - 90 ) * np . pi / 180 rotY = ( rotYdeg - 90 ) * np . pi / 180 rotZ = ( rotZdeg - 90 ) * np . pi / 180 #Projection 2D -> 3D matrix A1 = np . matrix ([[ 1 , 0 , - w / 2 ], [ 0 , 1 , - h / 2 ], [ 0 , 0 , 0 ], [ 0 , 0 , 1 ]]) # Rotation matrices around the X,Y,Z axis RX = np . matrix ([[ 1 , 0 , 0 , 0 ], [ 0 , np . cos ( rotX ), - np . sin ( rotX ), 0 ], [ 0 , np . sin ( rotX ), np . cos ( rotX ) , 0 ], [ 0 , 0 , 0 , 1 ]]) RY = np . matrix ([[ np . cos ( rotY ), 0 , np . sin ( rotY ), 0 ], [ 0 , 1 , 0 , 0 ], [ - np . sin ( rotY ), 0 , np . cos ( rotY ), 0 ], [ 0 , 0 , 0 , 1 ]]) RZ = np . matrix ([[ np . cos ( rotZ ), - np . sin ( rotZ ), 0 , 0 ], [ np . sin ( rotZ ), np . cos ( rotZ ), 0 , 0 ], [ 0 , 0 , 1 , 0 ], [ 0 , 0 , 0 , 1 ]]) #Composed rotation matrix with (RX,RY,RZ) R = RX * RY * RZ #Translation matrix on the Z axis change dist will change the height T = np . matrix ([[ 1 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 0 ], [ 0 , 0 , 1 , dist ], [ 0 , 0 , 0 , 1 ]]) #Camera Intrisecs matrix 3D -> 2D A2 = np . matrix ([[ f , 0 , w / 2 , 0 ], [ 0 , f , h / 2 , 0 ], [ 0 , 0 , 1 , 0 ]]) # Final and overall transformation matrix H = A2 * ( T * ( R * A1 )) # Apply matrix transformation cv2 . warpPerspective ( src , H , ( w , h ), dst , cv2 . INTER_CUBIC ) #Show the image cv2 . imshow ( wndname2 , dst ) cv2 . waitKey ( 1 )","title":"Demo"},{"location":"blog/CV/opencv/image_trasformation/homography/#reference","text":"Compute homograph for virtual camera with opencv Python create image with new camera position","title":"Reference"},{"location":"blog/CV/optical_flow/lk_sparse_demo/","tags":["optical flow","of","opencv"],"text":"lk_sparse_demo.py import numpy as np import cv2 from os import path # https://www.bogotobogo.com/python/OpenCV_Python/images/mean_shift_tracking/ url = path . join ( path . dirname ( __file__ ), \"slow_traffic_small.mp4\" ) cap = cv2 . VideoCapture ( url ) font = cv2 . FONT_HERSHEY_SIMPLEX # params for ShiTomasi corner detection feature_params = dict ( maxCorners = 100 , qualityLevel = 0.3 , minDistance = 7 , blockSize = 7 ) # Parameters for lucas kanade optical flow lk_params = dict ( winSize = ( 15 , 15 ), maxLevel = 2 , criteria = ( cv2 . TERM_CRITERIA_EPS | cv2 . TERM_CRITERIA_COUNT , 10 , 0.03 )) color = np . random . randint ( 0 , 255 , ( 100 , 3 )) ret , first_frame = cap . read () #roi variable will save xy coordinate of left top corner and bottom right corner point of bounding box roi = cv2 . selectROI ( \"select\" , first_frame ) cv2 . destroyWindow ( \"select\" ) old_gray = cv2 . cvtColor ( first_frame , cv2 . COLOR_BGR2GRAY ) mask = np . zeros_like ( old_gray ) mask [ int ( roi [ 1 ]): int ( roi [ 1 ] + roi [ 3 ]), int ( roi [ 0 ]): int ( roi [ 0 ] + roi [ 2 ])] = 255 p0 = cv2 . goodFeaturesToTrack ( old_gray , mask = mask , ** feature_params ) mask = np . zeros_like ( first_frame ) while True : ret , frame = cap . read () if not ret : print ( \"no frame grabbed\" ) break gray_frame = cv2 . cvtColor ( frame , cv2 . COLOR_BGR2GRAY ) p1 , st , err = cv2 . calcOpticalFlowPyrLK ( old_gray , gray_frame , p0 , None , ** lk_params ) # Select good points if p1 is not None : good_new = p1 [ st == 1 ] good_old = p0 [ st == 1 ] for i , ( new , old ) in enumerate ( zip ( good_new , good_old )): a , b = new . ravel () c , d = old . ravel () # mask not renew each frame, lines draw from the first image mask = cv2 . line ( mask , ( int ( a ), int ( b )), ( int ( c ), int ( d )), color [ i ] . tolist (), 2 ) frame = cv2 . circle ( frame , ( int ( a ), int ( b )), 5 , color [ i ] . tolist (), - 1 ) img = cv2 . add ( frame , mask ) cv2 . putText ( img , f 'good_new: { good_new . size / 2 } ' ,( 10 , 60 ), font , 0.7 ,( 0 , 255 , 0 ), 1 , cv2 . LINE_AA ) cv2 . putText ( img , f 'good_old: { good_old . size / 2 } ' ,( 10 , 80 ), font , 0.7 ,( 0 , 255 , 0 ), 1 , cv2 . LINE_AA ) cv2 . imshow ( \"lk\" , img ) k = cv2 . waitKey ( 30 ) & 0xFF if k == 27 : break # Now update the previous frame and previous points old_gray = gray_frame . copy () p0 = good_new . reshape ( - 1 , 1 , 2 ) cap . release () cv2 . destroyAllWindows ()","title":"opencv lk optical flow demo"},{"location":"blog/CV/optical_flow/open_cv_optical_flow_lk_sparse/","tags":["optical flow","of","opencv"],"text":"api link Reference # Introduction to Motion Estimation with Optical Flow above code - github","title":"opencv lk optical flow"},{"location":"blog/CV/optical_flow/open_cv_optical_flow_lk_sparse/#reference","text":"Introduction to Motion Estimation with Optical Flow above code - github","title":"Reference"},{"location":"blog/CV/trackers/siam_mask/","tags":["ai","trackers","cv"],"text":"SiamMask # SiamMask used to tracking and segment objects from videos in each frame, initializing a single bounding box and outputing binary segmentation mask and rotated objects boxes SiamMask needs to be initialized with a single bounding box so it can track the desired object. However, this also means that multiple object tracking (MOT) is not viable with SiamMask alias # VOT: Visual Object Tracking MOT: Multiple Object Tracking VOS: Video Object Segmentation SOT: Signal Object Tracking Demo # Clone project Setup environment Download model Run clone git clone https://github.com/augmentedstartups/SiamMask.git !!! Note title=\u201drequirements.txt\u201d Running different python package version from github settings Cython==0.29.28 colorama==0.4.4 numpy==1.21.5 requests==2.22.0 fire==0.4.0 torch==1.5.1+cu101 matplotlib==3.5.1 numba==0.55.1 scipy==1.7.3 h5py==3.6.0 pandas==1.4.0 tqdm==4.64.0 tensorboardX==2.5 torchvision==0.6.1+cu101 **build from source** opencv 4.5.4 cd SiamMask bash make.sh setp env # Add SiamMask root project and demo folder siammask_sharp folder to PYTHONPATH cd SiamMask export PYTHONPATH = ` pwd ` : $PYTHONPATH cd experiments/siammask_sharp export PYTHONPATH = ` pwd ` : $PYTHONPATH download models cd SiamMask/experiments/siammask_sharp wget http://www.robots.ox.ac.uk/~qwang/SiamMask_VOT.pth wget http://www.robots.ox.ac.uk/~qwang/SiamMask_DAVIS.pth bash title=\"run python ../../tools/demo.py --resume SiamMask_DAVIS.pth --config config_davis.json Note DAVIS_2016: Video object segmentation dataset DAVIS16 is a dataset for video object segmentation which consists of 50 videos in total (30 videos for training and 20 for testing). Per-frame pixel-wise annotations are offered. dataset Reference # SiamMask Siam Mask Object Tracking and Segmentation in OpenCV Python SiamMask github To check # SenseTime Research platform for single object tracking, implementing algorithms like SiamRPN and SiamMask - pysot","title":"SiamMask"},{"location":"blog/CV/trackers/siam_mask/#siammask","text":"SiamMask used to tracking and segment objects from videos in each frame, initializing a single bounding box and outputing binary segmentation mask and rotated objects boxes SiamMask needs to be initialized with a single bounding box so it can track the desired object. However, this also means that multiple object tracking (MOT) is not viable with SiamMask","title":"SiamMask"},{"location":"blog/CV/trackers/siam_mask/#alias","text":"VOT: Visual Object Tracking MOT: Multiple Object Tracking VOS: Video Object Segmentation SOT: Signal Object Tracking","title":"alias"},{"location":"blog/CV/trackers/siam_mask/#demo","text":"Clone project Setup environment Download model Run clone git clone https://github.com/augmentedstartups/SiamMask.git !!! Note title=\u201drequirements.txt\u201d Running different python package version from github settings Cython==0.29.28 colorama==0.4.4 numpy==1.21.5 requests==2.22.0 fire==0.4.0 torch==1.5.1+cu101 matplotlib==3.5.1 numba==0.55.1 scipy==1.7.3 h5py==3.6.0 pandas==1.4.0 tqdm==4.64.0 tensorboardX==2.5 torchvision==0.6.1+cu101 **build from source** opencv 4.5.4 cd SiamMask bash make.sh setp env # Add SiamMask root project and demo folder siammask_sharp folder to PYTHONPATH cd SiamMask export PYTHONPATH = ` pwd ` : $PYTHONPATH cd experiments/siammask_sharp export PYTHONPATH = ` pwd ` : $PYTHONPATH download models cd SiamMask/experiments/siammask_sharp wget http://www.robots.ox.ac.uk/~qwang/SiamMask_VOT.pth wget http://www.robots.ox.ac.uk/~qwang/SiamMask_DAVIS.pth bash title=\"run python ../../tools/demo.py --resume SiamMask_DAVIS.pth --config config_davis.json Note DAVIS_2016: Video object segmentation dataset DAVIS16 is a dataset for video object segmentation which consists of 50 videos in total (30 videos for training and 20 for testing). Per-frame pixel-wise annotations are offered. dataset","title":"Demo"},{"location":"blog/CV/trackers/siam_mask/#reference","text":"SiamMask Siam Mask Object Tracking and Segmentation in OpenCV Python SiamMask github","title":"Reference"},{"location":"blog/CV/trackers/siam_mask/#to-check","text":"SenseTime Research platform for single object tracking, implementing algorithms like SiamRPN and SiamMask - pysot","title":"To check"},{"location":"blog/DDS/cyclondds/python-bindings/","tags":["dds","cyclonedds"],"text":"LAB # Install cyclonedds on lxc container, config vscode as remote container Install cyclonedds python bindings from pip Config VSCode remote container Run Hello world example rtspsrc location=rtsp://<user></user>:<pass>@<ip>:<port>/<channel> caps=\u201capplication/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H264\u201d latency=100 ! queue ! rtph264depay ! avdec_h264 ! videoconvert ! video/x-raw,format=BGRA ! appsink name=outsink","title":"Eclipse cyclonedds python bindings"},{"location":"blog/DDS/cyclondds/python-bindings/#lab","text":"Install cyclonedds on lxc container, config vscode as remote container Install cyclonedds python bindings from pip Config VSCode remote container Run Hello world example rtspsrc location=rtsp://<user></user>:<pass>@<ip>:<port>/<channel> caps=\u201capplication/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H264\u201d latency=100 ! queue ! rtph264depay ! avdec_h264 ! videoconvert ! video/x-raw,format=BGRA ! appsink name=outsink","title":"LAB"},{"location":"blog/DDS/eprosima/fastdds-hello/","tags":["dds","eprosima","fastdds"],"text":"Objective # Run fastdds basic example Setup # Download eprosima fastdds docker download Load docker docker load -i <path>/ubuntu-fastdds v2.7.1.tar Run docker docker run -it --privileged ubuntu-fastdds:v2.7.1 Run Hello example # Hello world example locate at /usr/local/eprosima/fastrtps/examples/cpp/dds/HelloWorldExample/bin Run tmux start new session Split window Run publisher in Pane1 Run subscriber in Pane2 tmux new session tmux new-session # # press c-b and \" to split horizontal publisher # -s number of samples # -i interval in ms ./DDSHelloWorldExample publisher -s 20 -i 500 Starting Publisher running 20 samples. Publisher matched. Message: HelloWorld with index: 1 SENT Message: HelloWorld with index: 2 SENT Message: HelloWorld with index: 3 SENT Message: HelloWorld with index: 4 SENT subscriber ./DDSHelloWorldExample subscriber # Subscriber matched. Message HelloWorld 1 RECEIVED Message HelloWorld 2 RECEIVED Message HelloWorld 3 RECEIVED Message HelloWorld 4 RECEIVED Profiles # export FASTRTPS_DEFAULT_PROFILES_FILE = /usr/local/eprosima/fastrtps/examples/cpp/dds/HelloWorldExample/bin/DEFAULT_FASTRTPS_PROFILES.xml","title":"eprosima fastdds hello"},{"location":"blog/DDS/eprosima/fastdds-hello/#objective","text":"Run fastdds basic example","title":"Objective"},{"location":"blog/DDS/eprosima/fastdds-hello/#setup","text":"Download eprosima fastdds docker download Load docker docker load -i <path>/ubuntu-fastdds v2.7.1.tar Run docker docker run -it --privileged ubuntu-fastdds:v2.7.1","title":"Setup"},{"location":"blog/DDS/eprosima/fastdds-hello/#run-hello-example","text":"Hello world example locate at /usr/local/eprosima/fastrtps/examples/cpp/dds/HelloWorldExample/bin Run tmux start new session Split window Run publisher in Pane1 Run subscriber in Pane2 tmux new session tmux new-session # # press c-b and \" to split horizontal publisher # -s number of samples # -i interval in ms ./DDSHelloWorldExample publisher -s 20 -i 500 Starting Publisher running 20 samples. Publisher matched. Message: HelloWorld with index: 1 SENT Message: HelloWorld with index: 2 SENT Message: HelloWorld with index: 3 SENT Message: HelloWorld with index: 4 SENT subscriber ./DDSHelloWorldExample subscriber # Subscriber matched. Message HelloWorld 1 RECEIVED Message HelloWorld 2 RECEIVED Message HelloWorld 3 RECEIVED Message HelloWorld 4 RECEIVED","title":"Run Hello example"},{"location":"blog/DDS/eprosima/fastdds-hello/#profiles","text":"export FASTRTPS_DEFAULT_PROFILES_FILE = /usr/local/eprosima/fastrtps/examples/cpp/dds/HelloWorldExample/bin/DEFAULT_FASTRTPS_PROFILES.xml","title":"Profiles"},{"location":"blog/Ignition/","tags":["simulation","gazebo"],"text":"All tutorial run on Fortress version Newer version garden for example move from ign to gz official site # gazebo sim IGN_GAZEBO_RESOURCE_PATH IGN_GAZEBO_SYSTEM_PLUGIN_PATH export IGN_GAZEBO_RESOURCE_PATH=~/projects/ign_tutorial/worlds:~/projects/ign_tutorial/models $ ign topic -t \"/model/vehicle_blue/cmd_vel\" -m ignition.msgs.Twist -p \"linear: {x: 0.5}, angular: {z: 0.05}\" /usr/share/ignition/ignition-gazebo6/worlds Resource # fortress LTS docs gazebodoc Tutorials # hello ignition gazebo/sim gui config ignition tutorial - building your own robot (gazebosim) ignition tutorial - moving the robot (gazebosim) moving robot using ros_gz camera sensor imu lidar and more (gazebosim)","title":"Ignition simulator"},{"location":"blog/Ignition/#official-site","text":"gazebo sim IGN_GAZEBO_RESOURCE_PATH IGN_GAZEBO_SYSTEM_PLUGIN_PATH export IGN_GAZEBO_RESOURCE_PATH=~/projects/ign_tutorial/worlds:~/projects/ign_tutorial/models $ ign topic -t \"/model/vehicle_blue/cmd_vel\" -m ignition.msgs.Twist -p \"linear: {x: 0.5}, angular: {z: 0.05}\" /usr/share/ignition/ignition-gazebo6/worlds","title":"official site"},{"location":"blog/Ignition/#resource","text":"fortress LTS docs gazebodoc","title":"Resource"},{"location":"blog/Ignition/#tutorials","text":"hello ignition gazebo/sim gui config ignition tutorial - building your own robot (gazebosim) ignition tutorial - moving the robot (gazebosim) moving robot using ros_gz camera sensor imu lidar and more (gazebosim)","title":"Tutorials"},{"location":"blog/Ignition/gui-control/","tags":["config"],"text":"Resource # GUI Configuration","title":"ignition gui control"},{"location":"blog/Ignition/gui-control/#resource","text":"GUI Configuration","title":"Resource"},{"location":"blog/Ignition/hello/","tags":["gazebo"],"text":"First try # Run gazebo with empty world from install worlds install worlds /usr/share/ignition/ignition-gazebo6 ign gazebo empty.sdf -v 4 # -v 4 => verbose ign cli # ign cli hello run custom world control gui options spawn and delete entities from cli ign command # ign --help The 'ign' command provides a command line interface to the ignition tools. ign <command> [ options ] List of available commands : help: Print this help text. ... gazebo: Run and manage Gazebo. msg: Print information about messages. ... topic: Print information about topics. service: Print information about services. ... ign gazebo command # ign gazebo --help -r Run simulation on start. -v [ --verbose ] [ arg ] Adjust the level of console output ( 0 ~4 ) . --gui-config [ arg ] Ignition GUI configuration file to load. Environment variables # Variable Description IGN_GAZEBO_RESOURCE_PATH Colon separated paths used to locate resources such as worlds and models. IGN_GAZEBO_SYSTEM_PLUGIN_PATH Colon separated paths used to locate system plugins. for more check ign gazebo \u2013help Custom world.sdf # load minimal world control gui layout spawn / delete model from cli Set ignition resource path export IGN_GAZEBO_RESOURCE_PATH = /home/user/projects/ign_tutorial/ my_empty.sdf <sdf version= \"1.6\" > <world name= \"empty\" > <physics name= \"1ms\" type= \"ignored\" > <max_step_size> 0.001 </max_step_size> <real_time_factor> 1.0 </real_time_factor> </physics> <gui> <plugin filename= \"GzScene3D\" name= \"3D View\" > <ignition-gui> <title> 3D View </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> <engine> ogre2 </engine> <scene> scene </scene> <ambient_light> 0.4 0.4 0.4 </ambient_light> <background_color> 0.8 0.8 0.8 </background_color> </plugin> </gui> <plugin filename= \"ignition-gazebo-physics-system\" name= \"ignition::gazebo::systems::Physics\" > </plugin> <plugin filename= \"ignition-gazebo-user-commands-system\" name= \"ignition::gazebo::systems::UserCommands\" > </plugin> <plugin filename= \"ignition-gazebo-scene-broadcaster-system\" name= \"ignition::gazebo::systems::SceneBroadcaster\" > </plugin> <plugin filename= \"ignition-gazebo-contact-system\" name= \"ignition::gazebo::systems::Contact\" > </plugin> <light type= \"directional\" name= \"sun\" > <cast_shadows> true </cast_shadows> <pose> 0 0 10 0 0 0 </pose> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.2 0.2 0.2 1 </specular> <attenuation> <range> 1000 </range> <constant> 0.9 </constant> <linear> 0.01 </linear> <quadratic> 0.001 </quadratic> </attenuation> <direction> -0.5 0.1 -0.9 </direction> </light> <model name= \"ground_plane\" > <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> </collision> <visual name= \"visual\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> <material> <ambient> 0.8 0.8 0.8 1 </ambient> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.8 0.8 0.8 1 </specular> </material> </visual> </link> </model> </world> </sdf> Everything control by plugin Spawn and remove models # user-commands-system # Allow user control from cli <plugin filename= \"ignition-gazebo-user-commands-system\" name= \"ignition::gazebo::systems::UserCommands\" > </plugin> ign service / msg command # # list services ign service --list ... /world/empty/create ... /world/empty/remove ... # more info about the service ign service --info --service /world/empty/remove # result Service providers [ Address, Request Message Type, Response Message Type ] : tcp://172.18.0.1:45365, ignition.msgs.Entity, ignition.msgs.Boolean # Service has two type of message # request: ignition.msgs.Entity # response: ignition.msgs.Boolean # message fields ## serach for boolean msg ign msg --list | grep Boolean ign_msgs.Boolean # show msg fields with --info argument user@lap2:~/projects/blog$ ign msg --info ign_msgs.Boolean Name: ignition.msgs.Boolean File: ignition/msgs/boolean.proto message Boolean { .ignition.msgs.Header header = 1 ; bool data = 2 ; } Spawn SDF # using ign service to Spawn and remove entities from SDF file ign service -s /world/empty/create --reqtype ignition.msgs.EntityFactory --reptype ignition.msgs.Boolean --timeout 300 --req 'sdf_filename: \"models/my_ball/model.sdf\" pose: {position: {z: 5}} name: \"new_name\"' from SDF string Remove # ign service -s /world/empty/remove \\ --reqtype ignition.msgs.Entity \\ --reptype ignition.msgs.Boolean \\ --timeout 300 \\ --req 'name: \"new_name\" type: MODEL' models/my_ball/model.sdf <sdf version= \"1.6\" > <model name= \"spawned_model\" > <link name= \"link\" > <visual name= \"visual\" > <geometry> <sphere> <radius> 2.0 </radius> </sphere> </geometry> </visual> <collision name= \"visual\" > <geometry> <sphere> <radius> 2.0 </radius> </sphere> </geometry> </collision> </link> </model> </sdf>","title":"gazebo ignition hello world"},{"location":"blog/Ignition/hello/#first-try","text":"Run gazebo with empty world from install worlds install worlds /usr/share/ignition/ignition-gazebo6 ign gazebo empty.sdf -v 4 # -v 4 => verbose","title":"First try"},{"location":"blog/Ignition/hello/#ign-cli","text":"ign cli hello run custom world control gui options spawn and delete entities from cli","title":"ign cli"},{"location":"blog/Ignition/hello/#ign-command","text":"ign --help The 'ign' command provides a command line interface to the ignition tools. ign <command> [ options ] List of available commands : help: Print this help text. ... gazebo: Run and manage Gazebo. msg: Print information about messages. ... topic: Print information about topics. service: Print information about services. ...","title":"ign command"},{"location":"blog/Ignition/hello/#ign-gazebo-command","text":"ign gazebo --help -r Run simulation on start. -v [ --verbose ] [ arg ] Adjust the level of console output ( 0 ~4 ) . --gui-config [ arg ] Ignition GUI configuration file to load.","title":"ign gazebo command"},{"location":"blog/Ignition/hello/#environment-variables","text":"Variable Description IGN_GAZEBO_RESOURCE_PATH Colon separated paths used to locate resources such as worlds and models. IGN_GAZEBO_SYSTEM_PLUGIN_PATH Colon separated paths used to locate system plugins. for more check ign gazebo \u2013help","title":"Environment variables"},{"location":"blog/Ignition/hello/#custom-worldsdf","text":"load minimal world control gui layout spawn / delete model from cli Set ignition resource path export IGN_GAZEBO_RESOURCE_PATH = /home/user/projects/ign_tutorial/ my_empty.sdf <sdf version= \"1.6\" > <world name= \"empty\" > <physics name= \"1ms\" type= \"ignored\" > <max_step_size> 0.001 </max_step_size> <real_time_factor> 1.0 </real_time_factor> </physics> <gui> <plugin filename= \"GzScene3D\" name= \"3D View\" > <ignition-gui> <title> 3D View </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> <engine> ogre2 </engine> <scene> scene </scene> <ambient_light> 0.4 0.4 0.4 </ambient_light> <background_color> 0.8 0.8 0.8 </background_color> </plugin> </gui> <plugin filename= \"ignition-gazebo-physics-system\" name= \"ignition::gazebo::systems::Physics\" > </plugin> <plugin filename= \"ignition-gazebo-user-commands-system\" name= \"ignition::gazebo::systems::UserCommands\" > </plugin> <plugin filename= \"ignition-gazebo-scene-broadcaster-system\" name= \"ignition::gazebo::systems::SceneBroadcaster\" > </plugin> <plugin filename= \"ignition-gazebo-contact-system\" name= \"ignition::gazebo::systems::Contact\" > </plugin> <light type= \"directional\" name= \"sun\" > <cast_shadows> true </cast_shadows> <pose> 0 0 10 0 0 0 </pose> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.2 0.2 0.2 1 </specular> <attenuation> <range> 1000 </range> <constant> 0.9 </constant> <linear> 0.01 </linear> <quadratic> 0.001 </quadratic> </attenuation> <direction> -0.5 0.1 -0.9 </direction> </light> <model name= \"ground_plane\" > <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> </collision> <visual name= \"visual\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> <material> <ambient> 0.8 0.8 0.8 1 </ambient> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.8 0.8 0.8 1 </specular> </material> </visual> </link> </model> </world> </sdf> Everything control by plugin","title":"Custom world.sdf"},{"location":"blog/Ignition/hello/#spawn-and-remove-models","text":"","title":"Spawn and remove models"},{"location":"blog/Ignition/hello/#user-commands-system","text":"Allow user control from cli <plugin filename= \"ignition-gazebo-user-commands-system\" name= \"ignition::gazebo::systems::UserCommands\" > </plugin>","title":"user-commands-system"},{"location":"blog/Ignition/hello/#ign-service--msg-command","text":"# list services ign service --list ... /world/empty/create ... /world/empty/remove ... # more info about the service ign service --info --service /world/empty/remove # result Service providers [ Address, Request Message Type, Response Message Type ] : tcp://172.18.0.1:45365, ignition.msgs.Entity, ignition.msgs.Boolean # Service has two type of message # request: ignition.msgs.Entity # response: ignition.msgs.Boolean # message fields ## serach for boolean msg ign msg --list | grep Boolean ign_msgs.Boolean # show msg fields with --info argument user@lap2:~/projects/blog$ ign msg --info ign_msgs.Boolean Name: ignition.msgs.Boolean File: ignition/msgs/boolean.proto message Boolean { .ignition.msgs.Header header = 1 ; bool data = 2 ; }","title":"ign service / msg command"},{"location":"blog/Ignition/hello/#spawn-sdf","text":"using ign service to Spawn and remove entities from SDF file ign service -s /world/empty/create --reqtype ignition.msgs.EntityFactory --reptype ignition.msgs.Boolean --timeout 300 --req 'sdf_filename: \"models/my_ball/model.sdf\" pose: {position: {z: 5}} name: \"new_name\"' from SDF string","title":"Spawn SDF"},{"location":"blog/Ignition/hello/#remove","text":"ign service -s /world/empty/remove \\ --reqtype ignition.msgs.Entity \\ --reptype ignition.msgs.Boolean \\ --timeout 300 \\ --req 'name: \"new_name\" type: MODEL' models/my_ball/model.sdf <sdf version= \"1.6\" > <model name= \"spawned_model\" > <link name= \"link\" > <visual name= \"visual\" > <geometry> <sphere> <radius> 2.0 </radius> </sphere> </geometry> </visual> <collision name= \"visual\" > <geometry> <sphere> <radius> 2.0 </radius> </sphere> </geometry> </collision> </link> </model> </sdf>","title":"Remove"},{"location":"blog/Ignition/moving_robot_ex/","tags":["ros2","ignition","bridge"],"text":"sudo apt install ros-humble-ros-ign diff drive # ros2 command ros2 topic pub -1 /model/vehicle_blue/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0}}\" ign command ign topic -t \"/model/vehicle_green/cmd_vel\" -m ignition.msgs.Twist -p \"linear: {x: 0.5}, angular: {z: 0.05}\" launch # bridge # bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/model/vehicle_blue/cmd_vel@geometry_msgs/msg/Twist@ignition.msgs.Twist' , '/model/vehicle_blue/odometry@nav_msgs/msg/Odometry@ignition.msgs.Odometry' , '/model/vehicle_green/cmd_vel@geometry_msgs/msg/Twist@ignition.msgs.Twist' , '/model/vehicle_green/odometry@nav_msgs/msg/Odometry@ignition.msgs.Odometry' ], parameters = [{ 'qos_overrides./model/vehicle_blue.subscriber.reliability' : 'reliable' , 'qos_overrides./model/vehicle_green.subscriber.reliability' : 'reliable' }], output = 'screen' ) # topic@ros2 msg type@ignition msg type / model / vehicle_blue / cmd_vel @geometry_msgs / msg / Twist @ignition . msgs . Twist","title":"ignition ros2 bridge"},{"location":"blog/Ignition/moving_robot_ex/#diff-drive","text":"ros2 command ros2 topic pub -1 /model/vehicle_blue/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0}}\" ign command ign topic -t \"/model/vehicle_green/cmd_vel\" -m ignition.msgs.Twist -p \"linear: {x: 0.5}, angular: {z: 0.05}\"","title":"diff drive"},{"location":"blog/Ignition/moving_robot_ex/#launch","text":"","title":"launch"},{"location":"blog/Ignition/moving_robot_ex/#bridge","text":"bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/model/vehicle_blue/cmd_vel@geometry_msgs/msg/Twist@ignition.msgs.Twist' , '/model/vehicle_blue/odometry@nav_msgs/msg/Odometry@ignition.msgs.Odometry' , '/model/vehicle_green/cmd_vel@geometry_msgs/msg/Twist@ignition.msgs.Twist' , '/model/vehicle_green/odometry@nav_msgs/msg/Odometry@ignition.msgs.Odometry' ], parameters = [{ 'qos_overrides./model/vehicle_blue.subscriber.reliability' : 'reliable' , 'qos_overrides./model/vehicle_green.subscriber.reliability' : 'reliable' }], output = 'screen' ) # topic@ros2 msg type@ignition msg type / model / vehicle_blue / cmd_vel @geometry_msgs / msg / Twist @ignition . msgs . Twist","title":"bridge"},{"location":"blog/Ignition/physics/","text":"Reference # Physics simulation concepts Louise Pouble","title":"Reference"},{"location":"blog/Ignition/physics/#reference","text":"Physics simulation concepts Louise Pouble","title":"Reference"},{"location":"blog/Ignition/tips/","tags":["sdf","tips"],"text":"validate / check sdf file # ign sdf -k <sdf.file>","title":"SDF specification and tools"},{"location":"blog/Ignition/tips/#validate--check-sdf-file","text":"ign sdf -k <sdf.file>","title":"validate / check sdf file"},{"location":"blog/Ignition/programing/","text":"demos # ignition dev stand alone, hello example","title":"Index"},{"location":"blog/Ignition/programing/#demos","text":"ignition dev stand alone, hello example","title":"demos"},{"location":"blog/Ignition/programing/ignition_dev_hello/","tags":["ignition","ign-transport"],"text":"Objective # Subscriber to ign topic demo # project # \u251c\u2500\u2500 build \u251c\u2500\u2500 main.cpp \u2514\u2500\u2500 CMakeLists.txt code # main.cpp #include <iostream> #include \"ignition/msgs/clock.pb.h\" #include \"ignition/transport/Node.hh\" void cb ( const ignition :: msgs :: Clock & msg ) { std :: cout << msg . DebugString () << std :: endl ; } int main ( int , char ** ) { std :: cout << \"Hello, ignition ! \\n \" ; std :: string topic = \"/clock\" ; ignition :: transport :: Node node ; node . Subscribe ( topic , cb ); ignition :: transport :: waitForShutdown (); } CMakeLists.txt cmake_minimum_required ( VERSION 3.10.0 ) project ( ign_demos VERSION 0.1.0 ) find_package ( ignition - transport11 QUIET REQUIRED OPTIONAL_COMPONENTS log ) set ( IGN_TRANSPORT_VER $ { ignition - transport11_VERSION_MAJOR }) add_executable ( main main . cpp ) target_link_libraries ( main ignition - transport$ { IGN_TRANSPORT_VER } :: core ) Run demo # terminal1 ign gazebo -r terminal2 ./main system { sec: 1666468493 nsec: 778510659 } real { sec: 15 nsec: 459216049 } sim { sec: 14 nsec: 393000000 } Clock topic # ign topic --info -t /clock # Publishers [ Address, Message Type ] : tcp://172.18.0.1:34283, ignition.msgs.Clock ign msg --info ignition.msgs.Clock # Name: ignition.msgs.Clock File: ignition/msgs/clock.proto message Clock { .ignition.msgs.Header header = 1 ; .ignition.msgs.Time system = 2 ; .ignition.msgs.Time real = 3 ; .ignition.msgs.Time sim = 4 ; }","title":"Ignition programing"},{"location":"blog/Ignition/programing/ignition_dev_hello/#objective","text":"Subscriber to ign topic","title":"Objective"},{"location":"blog/Ignition/programing/ignition_dev_hello/#demo","text":"","title":"demo"},{"location":"blog/Ignition/programing/ignition_dev_hello/#project","text":"\u251c\u2500\u2500 build \u251c\u2500\u2500 main.cpp \u2514\u2500\u2500 CMakeLists.txt","title":"project"},{"location":"blog/Ignition/programing/ignition_dev_hello/#code","text":"main.cpp #include <iostream> #include \"ignition/msgs/clock.pb.h\" #include \"ignition/transport/Node.hh\" void cb ( const ignition :: msgs :: Clock & msg ) { std :: cout << msg . DebugString () << std :: endl ; } int main ( int , char ** ) { std :: cout << \"Hello, ignition ! \\n \" ; std :: string topic = \"/clock\" ; ignition :: transport :: Node node ; node . Subscribe ( topic , cb ); ignition :: transport :: waitForShutdown (); } CMakeLists.txt cmake_minimum_required ( VERSION 3.10.0 ) project ( ign_demos VERSION 0.1.0 ) find_package ( ignition - transport11 QUIET REQUIRED OPTIONAL_COMPONENTS log ) set ( IGN_TRANSPORT_VER $ { ignition - transport11_VERSION_MAJOR }) add_executable ( main main . cpp ) target_link_libraries ( main ignition - transport$ { IGN_TRANSPORT_VER } :: core )","title":"code"},{"location":"blog/Ignition/programing/ignition_dev_hello/#run-demo","text":"terminal1 ign gazebo -r terminal2 ./main system { sec: 1666468493 nsec: 778510659 } real { sec: 15 nsec: 459216049 } sim { sec: 14 nsec: 393000000 }","title":"Run demo"},{"location":"blog/Ignition/programing/ignition_dev_hello/#clock-topic","text":"ign topic --info -t /clock # Publishers [ Address, Message Type ] : tcp://172.18.0.1:34283, ignition.msgs.Clock ign msg --info ignition.msgs.Clock # Name: ignition.msgs.Clock File: ignition/msgs/clock.proto message Clock { .ignition.msgs.Header header = 1 ; .ignition.msgs.Time system = 2 ; .ignition.msgs.Time real = 3 ; .ignition.msgs.Time sim = 4 ; }","title":"Clock topic"},{"location":"blog/Ignition/sensors/camera/","tags":["camera","sensors"],"text":"check camera_sensor.sdf at example worlds don\u2019t forget world sensors plugin <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> <sensor name= \"camera\" type= \"camera\" > <camera> <horizontal_fov> 1.047 </horizontal_fov> <image> <width> 320 </width> <height> 240 </height> </image> <clip> <near> 0.1 </near> <far> 100 </far> </clip> </camera> <always_on> 1 </always_on> <update_rate> 15 </update_rate> <visualize> true </visualize> <topic> /vehicle/front_camera </topic> </sensor> ign topic --list | grep camera # result /gui/camera/pose /vehicle/camera_info /vehicle/front_camera # info ign topic --info --topic /vehicle/front_camera Publishers [ Address, Message Type ] : tcp://172.18.0.1:45921, ignition.msgs.Image # echo ign topic --echo -t /vehicle/front_camera # msg ign msg --info ign_msgs.Image Name: ignition.msgs.Image File: ignition/msgs/image.proto message Image { .ignition.msgs.Header header = 1 ; uint32 width = 2 ; uint32 height = 3 ; uint32 step = 4 ; bytes data = 5 ; .ignition.msgs.PixelFormatType pixel_format_type = 6 ; } ignition image_display # Add ImageDisplay to sdf # Add ImageDisplay plugin under gui tag <plugin filename= \"ImageDisplay\" name= \"Image Display\" > <ignition-gui> <property key= \"state\" type= \"string\" > docked </property> </ignition-gui> </plugin> ros2 bridge # ros_gz_bridge https://github.com/gazebosim/ros_gz/tree/humble/ros_gz_bridge don\u2019t forget to hit play, or Gazebo Sim won\u2019t generate any images terminal2 ros2 run ros_gz_bridge parameter_bridge /vehicle/front_camera@sensor_msgs/msg/Image@ignition.msgs.Image terminal3 ros2 run rqt_image_view rqt_image_view /vehicle/front_camera","title":"ignition camera sensor"},{"location":"blog/Ignition/sensors/camera/#ignition-image_display","text":"","title":"ignition image_display"},{"location":"blog/Ignition/sensors/camera/#add-imagedisplay-to-sdf","text":"Add ImageDisplay plugin under gui tag <plugin filename= \"ImageDisplay\" name= \"Image Display\" > <ignition-gui> <property key= \"state\" type= \"string\" > docked </property> </ignition-gui> </plugin>","title":"Add ImageDisplay to sdf"},{"location":"blog/Ignition/sensors/camera/#ros2-bridge","text":"ros_gz_bridge https://github.com/gazebosim/ros_gz/tree/humble/ros_gz_bridge don\u2019t forget to hit play, or Gazebo Sim won\u2019t generate any images terminal2 ros2 run ros_gz_bridge parameter_bridge /vehicle/front_camera@sensor_msgs/msg/Image@ignition.msgs.Image terminal3 ros2 run rqt_image_view rqt_image_view /vehicle/front_camera","title":"ros2 bridge"},{"location":"blog/Ignition/sensors/lidar/","tags":["lidar","sensors"],"text":"Add sensor plugin under <world> tag <plugin filename= \"libignition-gazebo-sensors-system.so\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> LIDAR sensor example # <sensor name= 'gpu_lidar' type= 'gpu_lidar' > \" <pose relative_to= 'lidar_frame' > 0 0 0 0 0 0 </pose> <topic> lidar </topic> <update_rate> 10 </update_rate> <lidar> <scan> <horizontal> <samples> 640 </samples> <resolution> 1 </resolution> <min_angle> -1.396263 </min_angle> <max_angle> 1.396263 </max_angle> </horizontal> <vertical> <samples> 1 </samples> <resolution> 1 </resolution> <min_angle> 0.0 </min_angle> <max_angle> 0.0 </max_angle> </vertical> </scan> <range> <min> 0.08 </min> <max> 10.0 </max> <resolution> 0.01 </resolution> </range> </lidar> <always_on> 1 </always_on> <visualize> true </visualize> </sensor> ign LaserScan msg # ign msg --info ign_msgs.LaserScan # Name: ignition.msgs.LaserScan File: ignition/msgs/laserscan.proto message LaserScan { .ignition.msgs.Header header = 1 ; string frame = 2 ; .ignition.msgs.Pose world_pose = 3 ; double angle_min = 4 ; double angle_max = 5 ; double angle_step = 6 ; double range_min = 7 ; double range_max = 8 ; uint32 count = 9 ; double vertical_angle_min = 10 ; double vertical_angle_max = 11 ; double vertical_angle_step = 12 ; uint32 vertical_count = 13 ; repeated double ranges = 14 ; repeated double intensities = 15 ; show in rviz # using ros_gz_bridge ros_gz_bridge ros2 run ros_gz_bridge parameter_bridge /lidar@sensor_msgs/msg/LaserScan@ignition.msgs.LaserScan ros2 run rviz2 rviz2 settings # field value Fixed Frame Topic size 0.1 # get frame from message ign topic --echo -t /lidar | grep -i frame","title":"ignition lidar sensor"},{"location":"blog/Ignition/sensors/lidar/#lidar-sensor-example","text":"<sensor name= 'gpu_lidar' type= 'gpu_lidar' > \" <pose relative_to= 'lidar_frame' > 0 0 0 0 0 0 </pose> <topic> lidar </topic> <update_rate> 10 </update_rate> <lidar> <scan> <horizontal> <samples> 640 </samples> <resolution> 1 </resolution> <min_angle> -1.396263 </min_angle> <max_angle> 1.396263 </max_angle> </horizontal> <vertical> <samples> 1 </samples> <resolution> 1 </resolution> <min_angle> 0.0 </min_angle> <max_angle> 0.0 </max_angle> </vertical> </scan> <range> <min> 0.08 </min> <max> 10.0 </max> <resolution> 0.01 </resolution> </range> </lidar> <always_on> 1 </always_on> <visualize> true </visualize> </sensor>","title":"LIDAR sensor example"},{"location":"blog/Ignition/sensors/lidar/#ign-laserscan-msg","text":"ign msg --info ign_msgs.LaserScan # Name: ignition.msgs.LaserScan File: ignition/msgs/laserscan.proto message LaserScan { .ignition.msgs.Header header = 1 ; string frame = 2 ; .ignition.msgs.Pose world_pose = 3 ; double angle_min = 4 ; double angle_max = 5 ; double angle_step = 6 ; double range_min = 7 ; double range_max = 8 ; uint32 count = 9 ; double vertical_angle_min = 10 ; double vertical_angle_max = 11 ; double vertical_angle_step = 12 ; uint32 vertical_count = 13 ; repeated double ranges = 14 ; repeated double intensities = 15 ;","title":"ign LaserScan msg"},{"location":"blog/Ignition/sensors/lidar/#show-in-rviz","text":"using ros_gz_bridge ros_gz_bridge ros2 run ros_gz_bridge parameter_bridge /lidar@sensor_msgs/msg/LaserScan@ignition.msgs.LaserScan ros2 run rviz2 rviz2","title":"show in rviz"},{"location":"blog/Ignition/sensors/lidar/#settings","text":"field value Fixed Frame Topic size 0.1 # get frame from message ign topic --echo -t /lidar | grep -i frame","title":"settings"},{"location":"blog/Misl/Tools/Youtube_download/","tags":["tools","youtube"],"text":"Install # # uninstall previous version sudo apt purge youtube-dl sudo pip3 uninstall youtube-dl # Download from http://ftp.us.debian.org/debian/pool/main/y/youtube-dl/ wget http://ftp.us.debian.org/debian/pool/main/y/youtube-dl/youtube-dl_2021.12.17-1_all.deb sudo dpkg -i youtube-dl_2021.12.17-1_all.deb USage # simple youtube-dl <video url>","title":"YouTube download tool"},{"location":"blog/Misl/Tools/Youtube_download/#install","text":"# uninstall previous version sudo apt purge youtube-dl sudo pip3 uninstall youtube-dl # Download from http://ftp.us.debian.org/debian/pool/main/y/youtube-dl/ wget http://ftp.us.debian.org/debian/pool/main/y/youtube-dl/youtube-dl_2021.12.17-1_all.deb sudo dpkg -i youtube-dl_2021.12.17-1_all.deb","title":"Install"},{"location":"blog/Misl/Tools/Youtube_download/#usage","text":"simple youtube-dl <video url>","title":"USage"},{"location":"blog/Misl/aptly/","tags":["aptly","apt"],"text":"Aptly is a free Debian repository management tool that allows you to mirror remote repositories, manage local package repositories, take snapshots, pull new versions of packages along with dependencies LAB - create local repo # aptly -distribution = \"focal\" -architectures = amd64 repo create my_local_repo gpg using gpg version 1 replace all the gpg command with gpg1 command Reference # tutorials","title":"Aptly Swiss army knife for Debian repository management"},{"location":"blog/Misl/aptly/#lab---create-local-repo","text":"aptly -distribution = \"focal\" -architectures = amd64 repo create my_local_repo gpg using gpg version 1 replace all the gpg command with gpg1 command","title":"LAB - create local repo"},{"location":"blog/Misl/aptly/#reference","text":"tutorials","title":"Reference"},{"location":"blog/Misl/deb/","tags":["deb"],"text":"Reference # Building binary deb packages: a practical guide","title":"Build custom DEB file"},{"location":"blog/Misl/deb/#reference","text":"Building binary deb packages: a practical guide","title":"Reference"},{"location":"blog/Misl/docker/","tags":["docker"],"text":"Docker desktop # Install Docker Desktop on Ubuntu Download deb install with apt sudo apt-get install ./docker-desktop-<version>-<arch>.deb useful cli # remove all containers docker rm $( docker ps -a -q ) remove all images sudo docker rmi $( sudo docker images -q ) Dockerfiles # minimal ubuntu # --8<-- blog/Misl/docker/dockerfiles/ubuntu/minimal/Dockerfile noninteractive \u2013 You use this mode when you need zero interaction while installing or upgrading the system via apt \u2013no-install-recommends By passing this option, the user lets apt-get know not to consider recommended packages as a dependency to install. run # # run as root docker run -it --rm --name = \"test\" ubuntu_base /bin/bash # run as user docker run -u user -it --rm --name = \"test\" ubuntu_base /bin/bash Reference # Behnam Asadi Docker concepts","title":"Docker"},{"location":"blog/Misl/docker/#docker-desktop","text":"Install Docker Desktop on Ubuntu Download deb install with apt sudo apt-get install ./docker-desktop-<version>-<arch>.deb","title":"Docker desktop"},{"location":"blog/Misl/docker/#useful-cli","text":"remove all containers docker rm $( docker ps -a -q ) remove all images sudo docker rmi $( sudo docker images -q )","title":"useful cli"},{"location":"blog/Misl/docker/#dockerfiles","text":"","title":"Dockerfiles"},{"location":"blog/Misl/docker/#minimal-ubuntu","text":"--8<-- blog/Misl/docker/dockerfiles/ubuntu/minimal/Dockerfile noninteractive \u2013 You use this mode when you need zero interaction while installing or upgrading the system via apt \u2013no-install-recommends By passing this option, the user lets apt-get know not to consider recommended packages as a dependency to install.","title":"minimal ubuntu"},{"location":"blog/Misl/docker/#run","text":"# run as root docker run -it --rm --name = \"test\" ubuntu_base /bin/bash # run as user docker run -u user -it --rm --name = \"test\" ubuntu_base /bin/bash","title":"run"},{"location":"blog/Misl/docker/#reference","text":"Behnam Asadi Docker concepts","title":"Reference"},{"location":"blog/Misl/docker/docker_nvidia_install/","tags":["docker","nvidia"],"text":"Prerequisite Install nvidia driver on host machine Install docker follow digitalocean Install nvidia-container-toolkit Check Install # nvidia-container-toolkit # distribution = $( . /etc/os-release ; echo $ID$VERSION_ID ) # key curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - # apt curl -s -L https://nvidia.github.io/nvidia-docker/ $distribution /nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list # install sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit Note nvidia-docker.list point to ubuntu 18.04 Checking # first run docker run --gpus all nvidia/cuda:10.0-base nvidia-smi Unable to find image 'nvidia/cuda:10.0-base' locally 10 .0-base: Pulling from nvidia/cuda 25fa05cd42bd: Pull complete 2d6e353a95ec: Pull complete df0051b6f25d: Pull complete ad1e3e71b0c0: Pull complete d26e14de793e: Pull complete Digest: sha256:2f608ac9f6c6a9abb34112ccd85058877f669d4c976d7e3fc1c7cafcf5ef7dff Status: Downloaded newer image for nvidia/cuda:10.0-base Fri Jun 3 05 :56:41 2022 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 510 .73.05 Driver Version: 510 .73.05 CUDA Version: 11 .6 | | -------------------------------+----------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | | =============================== + ====================== + ====================== | | 0 NVIDIA GeForce ... Off | 00000000 :58:00.0 Off | N/A | | N/A 46C P0 N/A / N/A | 9MiB / 2048MiB | 0 % Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | | ============================================================================= | +-----------------------------------------------------------------------------+ Note --gps all arg in docker run command gui # xhost +local:docker docker run --gpus all -it \\ -e DISPLAY = $DISPLAY \\ -v /tmp/.X11-unix:/tmp/.X11-unix \\ nathzi1505:darknet bash Reference # How To Install and Use Docker on Ubuntu 20.04 nvidia docker docker nvidia How to get your CUDA application running in a Docker container","title":"Install docker with nvidia support"},{"location":"blog/Misl/docker/docker_nvidia_install/#install","text":"","title":"Install"},{"location":"blog/Misl/docker/docker_nvidia_install/#nvidia-container-toolkit","text":"distribution = $( . /etc/os-release ; echo $ID$VERSION_ID ) # key curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - # apt curl -s -L https://nvidia.github.io/nvidia-docker/ $distribution /nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list # install sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit Note nvidia-docker.list point to ubuntu 18.04","title":"nvidia-container-toolkit"},{"location":"blog/Misl/docker/docker_nvidia_install/#checking","text":"first run docker run --gpus all nvidia/cuda:10.0-base nvidia-smi Unable to find image 'nvidia/cuda:10.0-base' locally 10 .0-base: Pulling from nvidia/cuda 25fa05cd42bd: Pull complete 2d6e353a95ec: Pull complete df0051b6f25d: Pull complete ad1e3e71b0c0: Pull complete d26e14de793e: Pull complete Digest: sha256:2f608ac9f6c6a9abb34112ccd85058877f669d4c976d7e3fc1c7cafcf5ef7dff Status: Downloaded newer image for nvidia/cuda:10.0-base Fri Jun 3 05 :56:41 2022 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 510 .73.05 Driver Version: 510 .73.05 CUDA Version: 11 .6 | | -------------------------------+----------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | | =============================== + ====================== + ====================== | | 0 NVIDIA GeForce ... Off | 00000000 :58:00.0 Off | N/A | | N/A 46C P0 N/A / N/A | 9MiB / 2048MiB | 0 % Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | | ============================================================================= | +-----------------------------------------------------------------------------+ Note --gps all arg in docker run command","title":"Checking"},{"location":"blog/Misl/docker/docker_nvidia_install/#gui","text":"xhost +local:docker docker run --gpus all -it \\ -e DISPLAY = $DISPLAY \\ -v /tmp/.X11-unix:/tmp/.X11-unix \\ nathzi1505:darknet bash","title":"gui"},{"location":"blog/Misl/docker/docker_nvidia_install/#reference","text":"How To Install and Use Docker on Ubuntu 20.04 nvidia docker docker nvidia How to get your CUDA application running in a Docker container","title":"Reference"},{"location":"blog/Misl/docker/docker_vscode/","tags":["docker","vscode"],"text":"Simple Run # from docker ext run iteractive Using docker-compose # How To Install and Use Docker Compose on Ubuntu 20.04 install # copy to /usr/local/bin sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose # Set permission sudo chmod +x /usr/local/bin/docker-compose cli # Run docker image using compose file usage # cd to `docker-compose.yml` location docker-compose up","title":"Docker VSCode integration"},{"location":"blog/Misl/docker/docker_vscode/#simple-run","text":"from docker ext run iteractive","title":"Simple Run"},{"location":"blog/Misl/docker/docker_vscode/#using-docker-compose","text":"How To Install and Use Docker Compose on Ubuntu 20.04 install # copy to /usr/local/bin sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose # Set permission sudo chmod +x /usr/local/bin/docker-compose","title":"Using docker-compose"},{"location":"blog/Misl/docker/docker_vscode/#cli","text":"Run docker image using compose file usage # cd to `docker-compose.yml` location docker-compose up","title":"cli"},{"location":"blog/Misl/docker/snippets/","tags":["cheat sheet"],"text":"language # RUN apt-get update && apt-get install -y \\ locales \\ && locale-gen en_US.UTF-8 \\ && update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 \\ && rm -rf /var/lib/apt/lists/* ENV LANG en_US.UTF-8","title":"Dockerfile - snippets"},{"location":"blog/Misl/docker/snippets/#language","text":"RUN apt-get update && apt-get install -y \\ locales \\ && locale-gen en_US.UTF-8 \\ && update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 \\ && rm -rf /var/lib/apt/lists/* ENV LANG en_US.UTF-8","title":"language"},{"location":"blog/Misl/docker/tutorial/","tags":["docker","tutorial"],"text":"Note docker image are immutable docker container are temporary and not persists state Command Description pull Download docker from Registry/Hub to local storage images list all images search commit commit container file changes into new image rm Remove one or more containers Executing the Docker Command Without Sudo # # add user to docker group sudo usermod -aG docker ${ USER } # execute new session or logout su - ${ USER } # check groups #check if docker seen in the output Save and Restore containers # docker image save -o image.tar <image_id> docker image load -i image.tar login as none root # docker run -it --rm --user user <image>","title":"Hello docker - install"},{"location":"blog/Misl/docker/tutorial/#executing-the-docker-command-without-sudo","text":"# add user to docker group sudo usermod -aG docker ${ USER } # execute new session or logout su - ${ USER } # check groups #check if docker seen in the output","title":"Executing the Docker Command Without Sudo"},{"location":"blog/Misl/docker/tutorial/#save-and-restore-containers","text":"docker image save -o image.tar <image_id> docker image load -i image.tar","title":"Save and Restore containers"},{"location":"blog/Misl/docker/tutorial/#login-as-none-root","text":"docker run -it --rm --user user <image>","title":"login as none root"},{"location":"blog/Misl/docker/tutorial/create_new_image/","tags":["docker"],"text":"commit # Run base image (without \u2013rm attribute) Install and change the container Exit/Pause the container Commit the changes to new image demo # install git client and save container as new image # run base image docker run -it --name my_ubuntu ubuntu:latest # update and install apt update apt install git exit # exit running container docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 325852406c0a ubuntu \"bash\" 33 seconds ago Exited ( 0 ) 5 seconds ago my_ubuntu # commit # docker commit <container id> <new image name> docker commit 325852406c0a ea/ubuntu-git # list images check for new one docker images ea/ubuntu-git latest 1db4558d31c9 5 seconds ago 188MB ubuntu latest 27941809078c 7 weeks ago 77 .8MB # run and check docker run -it --name my_ubuntu --rm ea/ubuntu-git:latest ## run git git Docker file # Reference # Docker file cheat sheet","title":"Docker - custom image"},{"location":"blog/Misl/docker/tutorial/create_new_image/#commit","text":"Run base image (without \u2013rm attribute) Install and change the container Exit/Pause the container Commit the changes to new image","title":"commit"},{"location":"blog/Misl/docker/tutorial/create_new_image/#demo","text":"install git client and save container as new image # run base image docker run -it --name my_ubuntu ubuntu:latest # update and install apt update apt install git exit # exit running container docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 325852406c0a ubuntu \"bash\" 33 seconds ago Exited ( 0 ) 5 seconds ago my_ubuntu # commit # docker commit <container id> <new image name> docker commit 325852406c0a ea/ubuntu-git # list images check for new one docker images ea/ubuntu-git latest 1db4558d31c9 5 seconds ago 188MB ubuntu latest 27941809078c 7 weeks ago 77 .8MB # run and check docker run -it --name my_ubuntu --rm ea/ubuntu-git:latest ## run git git","title":"demo"},{"location":"blog/Misl/docker/tutorial/create_new_image/#docker-file","text":"","title":"Docker file"},{"location":"blog/Misl/docker/tutorial/create_new_image/#reference","text":"Docker file cheat sheet","title":"Reference"},{"location":"blog/Misl/docker/tutorial/hello_docker/","tags":["docker","tutorial"],"text":"Assign port # -p HostPort:ContainerPort demo # Run webserver and map internal port to port 8080 on host # run docker container as daemon (-d) # assing container name (--name) # map ports (-p) docker run -d --name MyWebServer -p 8080 :80 httpd # check port mapping docker port MyWebServer 80 /tcp -> 0 .0.0.0:8080 80 /tcp -> :::8080 Reference # Docker Tutorial Series","title":"Hello docker - Network"},{"location":"blog/Misl/docker/tutorial/hello_docker/#assign-port","text":"-p HostPort:ContainerPort","title":"Assign port"},{"location":"blog/Misl/docker/tutorial/hello_docker/#demo","text":"Run webserver and map internal port to port 8080 on host # run docker container as daemon (-d) # assing container name (--name) # map ports (-p) docker run -d --name MyWebServer -p 8080 :80 httpd # check port mapping docker port MyWebServer 80 /tcp -> 0 .0.0.0:8080 80 /tcp -> :::8080","title":"demo"},{"location":"blog/Misl/docker/tutorial/hello_docker/#reference","text":"Docker Tutorial Series","title":"Reference"},{"location":"blog/Misl/docker/tutorial/volume_and/","tags":["docker"],"text":"Data volume help as to separate the container and data There are 2 way to manage data in docker - Data volumes - Data volume container Data volumes # Bind mount / Mounting host directory as a data volume # bind mount is to mount an existing directory or file on the host to the container. -v HostFolder:ContainerVolumeName demo # mount share folder in user home directory on container root (/) named data docker run -it --name b1 -v /home/user/share:/data busybox # create file with touch and exit # check file exists on host folder Docker managed volume # # no need to specify the mount source -v ContainerVolumeName","title":"Docker Volumes"},{"location":"blog/Misl/docker/tutorial/volume_and/#data-volumes","text":"","title":"Data volumes"},{"location":"blog/Misl/docker/tutorial/volume_and/#bind-mount--mounting-host-directory-as-a-data-volume","text":"bind mount is to mount an existing directory or file on the host to the container. -v HostFolder:ContainerVolumeName","title":"Bind mount / Mounting host directory as a data volume"},{"location":"blog/Misl/docker/tutorial/volume_and/#demo","text":"mount share folder in user home directory on container root (/) named data docker run -it --name b1 -v /home/user/share:/data busybox # create file with touch and exit # check file exists on host folder","title":"demo"},{"location":"blog/Misl/docker/tutorial/volume_and/#docker-managed-volume","text":"# no need to specify the mount source -v ContainerVolumeName","title":"Docker managed volume"},{"location":"blog/Misl/github/github_pro_tips/","tags":["orb","matching","opencv"],"text":"Fuzzy file finder # Press t in any repository to access it and start typing the name of the file you want to find Browse files and directories with ease # Great browser extension called Octotree helps you navigate directories, and open files with a familiar tree-like structure. Reference # GitHub Protips: Tips, tricks, hacks, and secrets from Lee Reilly","title":"github pro tips"},{"location":"blog/Misl/github/github_pro_tips/#fuzzy-file-finder","text":"Press t in any repository to access it and start typing the name of the file you want to find","title":"Fuzzy file finder"},{"location":"blog/Misl/github/github_pro_tips/#browse-files-and-directories-with-ease","text":"Great browser extension called Octotree helps you navigate directories, and open files with a familiar tree-like structure.","title":"Browse files and directories with ease"},{"location":"blog/Misl/github/github_pro_tips/#reference","text":"GitHub Protips: Tips, tricks, hacks, and secrets from Lee Reilly","title":"Reference"},{"location":"blog/Misl/lxd/","tags":["lxd","container"],"text":"LXD system container and virtual machine manager. Virtual machines emulate a physical machine, using the hardware of the host system from a full and completely isolated operating system implemented through the use of qemu. System containers , on the other hand, use the OS kernel of the host system instead of creating their own environment Install # sudo apt update sudo apt install lxd # pick version 4.0 Add user to lxd group # sudo adduser $USER lxd # check with id command id uid = 1000 ( user ) gid = 1000 ( user ) groups = 1000 ( user ) ,4 ( adm ) ,20 ( dialout ) ,24 ( cdrom ) ,27 ( sudo ) ,132 ( lxd ) ,998 ( docker ) Init LXD # lxd init Create first container # launch # launch Create and start instances from images lxc launch images: { distro } / { version } / { arch } { container-name } launch ubuntu 22.04 lxc launch images:ubuntu/22.04/amd64 ubuntu2204 lxc list # result +------------+---------+--------------------+-----------------------------------------------+-----------+-----------+ | NAME | STATE | IPV4 | IPV6 | TYPE | SNAPSHOTS | +------------+---------+--------------------+-----------------------------------------------+-----------+-----------+ | ubuntu2204 | RUNNING | 10 .10.10.62 ( eth0 ) | fd42:5179:549e:e81d:216:3eff:fe3f:5b92 ( eth0 ) | CONTAINER | 0 | +------------+---------+--------------------+-----------------------------------------------+-----------+-----------+ Get shell # lxc exec ubuntu2204 -- /bin/bash root@ubuntu2204:~# id uid=0(root) gid=0(root) groups=0(root) root@ubuntu2204:~# cat /etc/lsb-release DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION=\"Ubuntu 22.04.1 LTS\" login as none root # lxc exec ubuntu2204 --user 1000 /bin/bash # ubuntu@ubuntu2204:/$ id uid = 1000 ( ubuntu ) gid = 0 ( root ) groups = 0 ( root ) Basic lxc # lxc list lxc info <container name> lxc exec <container name> <command> lxc stop <container name> lxc move <container name> < new container name> lxc copy <container name> < new container name> lxc delete <container name> lxc config lxc file push source <container name>/dest lxc file pull <container name>/source dest lxc file edit <container name>/file path alias / custom commands lxc list -c n,s,4,image.description:image login with ssh # install openssh-server in container sudo apt install openssh-server Copy host pub key to container cp ~/.ssh/id_rsa.pub /tmp/authorized_keys lxc file push /tmp/authorized_keys ubuntu2204/home/ubuntu/.ssh/authorized_keys -p Snapshot # lxc snapshot <container name> lxc info <container name> # more info about the snapshot lxc restore <container name> <snap name> lxc delete <container name>/<snap name> # sharing # https://www.cyberciti.biz/faq/how-to-add-or-mount-directory-in-lxd-linux-container/ mkdir ~/share lxc config device add ubuntu2204 share disk source = ~/share path = /home/ubuntu/share # Device share added to ubuntu2204 # show lxc config device show ubuntu2204 # result share: path: /home/ubuntu/share source: /home/user/share type: disk # show on container ll /home/user/ubuntu # ... drwxrwxr-x 2 nobody nogroup 4096 Jul 28 15 :42 share/ # fix permission # lxc config set ubuntu2204 raw.idmap \"both 1000 1000\" # restart container lxc restart ubuntu2204 Reference # LXD LXD getting started The LXD 2.0: Blog post series [0/12] Install ROS 2 Humble in Ubuntu 20.04 or 18.04 using LXD containers ROS Development with LXD","title":"LXD hello"},{"location":"blog/Misl/lxd/#install","text":"sudo apt update sudo apt install lxd # pick version 4.0","title":"Install"},{"location":"blog/Misl/lxd/#add-user-to-lxd-group","text":"sudo adduser $USER lxd # check with id command id uid = 1000 ( user ) gid = 1000 ( user ) groups = 1000 ( user ) ,4 ( adm ) ,20 ( dialout ) ,24 ( cdrom ) ,27 ( sudo ) ,132 ( lxd ) ,998 ( docker )","title":"Add user to lxd group"},{"location":"blog/Misl/lxd/#init-lxd","text":"lxd init","title":"Init LXD"},{"location":"blog/Misl/lxd/#create-first-container","text":"","title":"Create first container"},{"location":"blog/Misl/lxd/#launch","text":"launch Create and start instances from images lxc launch images: { distro } / { version } / { arch } { container-name } launch ubuntu 22.04 lxc launch images:ubuntu/22.04/amd64 ubuntu2204 lxc list # result +------------+---------+--------------------+-----------------------------------------------+-----------+-----------+ | NAME | STATE | IPV4 | IPV6 | TYPE | SNAPSHOTS | +------------+---------+--------------------+-----------------------------------------------+-----------+-----------+ | ubuntu2204 | RUNNING | 10 .10.10.62 ( eth0 ) | fd42:5179:549e:e81d:216:3eff:fe3f:5b92 ( eth0 ) | CONTAINER | 0 | +------------+---------+--------------------+-----------------------------------------------+-----------+-----------+","title":"launch"},{"location":"blog/Misl/lxd/#get-shell","text":"lxc exec ubuntu2204 -- /bin/bash root@ubuntu2204:~# id uid=0(root) gid=0(root) groups=0(root) root@ubuntu2204:~# cat /etc/lsb-release DISTRIB_ID=Ubuntu DISTRIB_RELEASE=22.04 DISTRIB_CODENAME=jammy DISTRIB_DESCRIPTION=\"Ubuntu 22.04.1 LTS\"","title":"Get shell"},{"location":"blog/Misl/lxd/#login-as-none-root","text":"lxc exec ubuntu2204 --user 1000 /bin/bash # ubuntu@ubuntu2204:/$ id uid = 1000 ( ubuntu ) gid = 0 ( root ) groups = 0 ( root )","title":"login as none root"},{"location":"blog/Misl/lxd/#basic-lxc","text":"lxc list lxc info <container name> lxc exec <container name> <command> lxc stop <container name> lxc move <container name> < new container name> lxc copy <container name> < new container name> lxc delete <container name> lxc config lxc file push source <container name>/dest lxc file pull <container name>/source dest lxc file edit <container name>/file path alias / custom commands lxc list -c n,s,4,image.description:image","title":"Basic lxc"},{"location":"blog/Misl/lxd/#login-with-ssh","text":"install openssh-server in container sudo apt install openssh-server Copy host pub key to container cp ~/.ssh/id_rsa.pub /tmp/authorized_keys lxc file push /tmp/authorized_keys ubuntu2204/home/ubuntu/.ssh/authorized_keys -p","title":"login with ssh"},{"location":"blog/Misl/lxd/#snapshot","text":"","title":"Snapshot"},{"location":"blog/Misl/lxd/#lxc-snapshot-container-namelxc-info-container-name--more-info-about-the-snapshotlxc-restore-container-name-snap-name-lxc-delete-container-namesnap-name","text":"","title":"lxc snapshot &lt;container name&gt;\nlxc info &lt;container name&gt; # more info about the snapshot\nlxc restore &lt;container name&gt; &lt;snap name&gt; \nlxc delete &lt;container name&gt;/&lt;snap name&gt; \n"},{"location":"blog/Misl/lxd/#sharing","text":"https://www.cyberciti.biz/faq/how-to-add-or-mount-directory-in-lxd-linux-container/ mkdir ~/share lxc config device add ubuntu2204 share disk source = ~/share path = /home/ubuntu/share # Device share added to ubuntu2204 # show lxc config device show ubuntu2204 # result share: path: /home/ubuntu/share source: /home/user/share type: disk # show on container ll /home/user/ubuntu # ... drwxrwxr-x 2 nobody nogroup 4096 Jul 28 15 :42 share/ # fix permission # lxc config set ubuntu2204 raw.idmap \"both 1000 1000\" # restart container lxc restart ubuntu2204","title":"sharing"},{"location":"blog/Misl/lxd/#reference","text":"LXD LXD getting started The LXD 2.0: Blog post series [0/12] Install ROS 2 Humble in Ubuntu 20.04 or 18.04 using LXD containers ROS Development with LXD","title":"Reference"},{"location":"blog/Misl/lxd/container_configuration/","tags":["lxd","lxc"],"text":"Config # lxc config set <container> <key> <value> Profile # lxc profile list lxc profile show lxc profile edit <profile lxc profile add , lxc profile assign ,","title":"LXD - Container configuration and profile"},{"location":"blog/Misl/lxd/container_configuration/#config","text":"lxc config set <container> <key> <value>","title":"Config"},{"location":"blog/Misl/lxd/container_configuration/#profile","text":"lxc profile list lxc profile show lxc profile edit <profile lxc profile add , lxc profile assign ,","title":"Profile"},{"location":"blog/Misl/lxd/lxd_with_x11/","tags":["lxd","lxc","x11","profile"],"text":"x11.profile config : environment . DISPLAY : : 0 environment . PULSE_SERVER : unix :/ home / ubuntu / pulse - native nvidia . driver . capabilities : all nvidia . runtime : \"true\" user . user - data : | #cloud-config runcmd : - ' sed - i \"s/; enable-shm = yes/enable-shm = no/g\" / etc / pulse / client . conf ' packages : - x11 - apps - mesa - utils - pulseaudio description : GUI LXD profile devices : PASocket1 : bind : container connect : unix :/ run / user / 1000 / pulse / native listen : unix :/ home / ubuntu / pulse - native security . gid : \"1000\" security . uid : \"1000\" uid : \"1000\" gid : \"1000\" mode : \"0777\" type : proxy X0 : bind : container connect : unix : @ / tmp / . X11 - unix / X1 listen : unix : @ / tmp / . X11 - unix / X0 security . gid : \"1000\" security . uid : \"1000\" type : proxy mygpu : type : gpu name : x11 used_by : [] $DISPLAY X0: bind: container connect: unix:@/tmp/.X11-unix/X1 The number X1 drive from $DISPLAY environment variable # Create profile lxc profile create x11 # Edit/load profile cat x11.profile | lxc profile edit x11 # add profile to container lxc profile add ubuntu2204 x11 # or launch with profile lxc launch ubuntu2204 --user 1000 --profile default --profile x11 /bin/bash Check # Reference # Running X11 software in LXD containers","title":"LXD - Running GUI application"},{"location":"blog/Misl/lxd/lxd_with_x11/#check","text":"","title":"Check"},{"location":"blog/Misl/lxd/lxd_with_x11/#reference","text":"Running X11 software in LXD containers","title":"Reference"},{"location":"blog/Misl/lxd/nvidia_gpu/","tags":["nvidia","lxc","lxd"],"text":"Objective # Run cuda app inside lxc LAB # Using the pervious container add nvidia and cuda capabilities Note Nvidia and cuda installed on the host machine lxc config set ubuntu2204 nvidia.runtime=true lxc config device add ubuntu2204 gpu gpu # restart container lxc restart ubuntu2204 # attach shell lxc exec ubuntu2204 --user 1000 /bin/bash # run nvidia-smi nvidia-smi Test cuda # copy bandwidthTest binary from host to container and run Note My Host installed with cuda 11.6 version lxc file push /usr/local/cuda-11.6/extras/demo_suite/bandwidthTest ubuntu2204/home/ubuntu/ # from container shell run ./bandwidthTest [ CUDA Bandwidth Test ] - Starting... Running on... Device 0 : NVIDIA GeForce MX450 Quick Mode Host to Device Bandwidth, 1 Device ( s ) PINNED Memory Transfers Transfer Size ( Bytes ) Bandwidth ( MB/s ) 33554432 3076 .7 Device to Host Bandwidth, 1 Device ( s ) PINNED Memory Transfers Transfer Size ( Bytes ) Bandwidth ( MB/s ) 33554432 3214 .5 Device to Device Bandwidth, 1 Device ( s ) PINNED Memory Transfers Transfer Size ( Bytes ) Bandwidth ( MB/s ) 33554432 70878 .8 Result = PASS Reference # GPU data processing inside LXD","title":"Nvida GPU inside LXD"},{"location":"blog/Misl/lxd/nvidia_gpu/#objective","text":"Run cuda app inside lxc","title":"Objective"},{"location":"blog/Misl/lxd/nvidia_gpu/#lab","text":"Using the pervious container add nvidia and cuda capabilities Note Nvidia and cuda installed on the host machine lxc config set ubuntu2204 nvidia.runtime=true lxc config device add ubuntu2204 gpu gpu # restart container lxc restart ubuntu2204 # attach shell lxc exec ubuntu2204 --user 1000 /bin/bash # run nvidia-smi nvidia-smi","title":"LAB"},{"location":"blog/Misl/lxd/nvidia_gpu/#test-cuda","text":"copy bandwidthTest binary from host to container and run Note My Host installed with cuda 11.6 version lxc file push /usr/local/cuda-11.6/extras/demo_suite/bandwidthTest ubuntu2204/home/ubuntu/ # from container shell run ./bandwidthTest [ CUDA Bandwidth Test ] - Starting... Running on... Device 0 : NVIDIA GeForce MX450 Quick Mode Host to Device Bandwidth, 1 Device ( s ) PINNED Memory Transfers Transfer Size ( Bytes ) Bandwidth ( MB/s ) 33554432 3076 .7 Device to Host Bandwidth, 1 Device ( s ) PINNED Memory Transfers Transfer Size ( Bytes ) Bandwidth ( MB/s ) 33554432 3214 .5 Device to Device Bandwidth, 1 Device ( s ) PINNED Memory Transfers Transfer Size ( Bytes ) Bandwidth ( MB/s ) 33554432 70878 .8 Result = PASS","title":"Test cuda"},{"location":"blog/Misl/lxd/nvidia_gpu/#reference","text":"GPU data processing inside LXD","title":"Reference"},{"location":"blog/Misl/video/examples/","tags":["video","ffmpeg","gstreamer","cheat-sheet"],"text":"jpeg # Stream jpeg stream over udp using gstreamer Play stream using FFPlay and sdp file Terminal1: gstreamer udp stream gst-launch-1.0 -v videotestsrc \\ ! video/x-raw,width=640,height=480 \\ ! timeoverlay \\ ! tee name=\"local\" \\ ! queue \\ ! videoconvert \\ ! autovideosink sync=false\\ local. \\ ! queue \\ ! jpegenc \\ ! rtpjpegpay \\ ! udpsink host=127.0.0.1 port= 5000 udp.sdp m=video 5000 RTP/AVP 26 a=rtpmap:26 JPEG/90000; c=IN IP4 127.0.0.1 Terminal 2: ffplay ffplay \\ -protocol_whitelist file,rtp,udp \\ -fflags nobuffer \\ -flags low_delay \\ -framedrop \\ -i udp.sdp","title":"FFMpeg and Gstreamer Examples"},{"location":"blog/Misl/video/examples/#jpeg","text":"Stream jpeg stream over udp using gstreamer Play stream using FFPlay and sdp file Terminal1: gstreamer udp stream gst-launch-1.0 -v videotestsrc \\ ! video/x-raw,width=640,height=480 \\ ! timeoverlay \\ ! tee name=\"local\" \\ ! queue \\ ! videoconvert \\ ! autovideosink sync=false\\ local. \\ ! queue \\ ! jpegenc \\ ! rtpjpegpay \\ ! udpsink host=127.0.0.1 port= 5000 udp.sdp m=video 5000 RTP/AVP 26 a=rtpmap:26 JPEG/90000; c=IN IP4 127.0.0.1 Terminal 2: ffplay ffplay \\ -protocol_whitelist file,rtp,udp \\ -fflags nobuffer \\ -flags low_delay \\ -framedrop \\ -i udp.sdp","title":"jpeg"},{"location":"blog/Misl/video/ffmpeg/","tags":["video","ffmpeg","sdp"],"text":"SDP # Session Description Protocol Refernces # RTP (I): Intro to RTP and SDP","title":"FFMpeg"},{"location":"blog/Misl/video/ffmpeg/#sdp","text":"Session Description Protocol","title":"SDP"},{"location":"blog/Misl/video/ffmpeg/#refernces","text":"RTP (I): Intro to RTP and SDP","title":"Refernces"},{"location":"blog/Misl/video/gstreamer/","tags":["video","gstreamer","nvidia"],"text":"Install # sudo apt-get install libgstreamer1.0-0 \\ gstreamer1.0-dev \\ gstreamer1.0-tools \\ gstreamer1.0-doc sudo apt-get install gstreamer1.0-plugins-base \\ gstreamer1.0-plugins-good # nvidia plugs sudo apt-install deepstream-6.0 Demos # H265 gst-launch-1.0 videotestsrc \\ ! video/x-raw,width = 640 ,height = 480 ,framerate = 25 /1,format = I420 \\ ! timeoverlay valignment = 4 halignment = 1 \\ ! nvvidconv \\ ! 'video/x-raw(memory:NVMM),width=640,height=480' \\ ! nvv4l2h265enc insert-sps-pps = 1 idrinterval = 15 \\ ! h265parse \\ ! rtph265pay \\ ! udpsink port = 5000 host = \"192.168.1.207\" sdp c=IN IP4 192.168.1.207 m=video 5000 RTP/AVP 96 a=rtpmap:96 H265/90000 # rtsp client # ffprob ffprobe rtsp : //wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 # ffprobe ffprobe < rtsp url > # Result Stream # 0 : 0 : Audio : aac ( LC ), 12000 Hz , stereo , fltp Stream # 0 : 1 : Video : h264 ( High ), yuv420p ( progressive ), 240 x160 [ SAR 32 : 27 DAR 16 : 9 ], 24 fps , 24.08 tbr , 90 k tbn , 48 tbc pipe # gst-launch-1.0 rtspsrc location = rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 latency = 100 \\ ! queue \\ ! rtph264depay \\ ! h264parse \\ ! avdec_h264 \\ ! videoconvert \\ ! videoscale ! video/x-raw,width = 640 ,height = 480 \\ ! autovideosink gst-launch-1.0 rtspsrc location=rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 latency=0 buffer-mode=auto \\ ! decodebin \\ ! autovideosink sync=false Send and play # pppppppppppppppp","title":"Gstreamer"},{"location":"blog/Misl/video/gstreamer/#install","text":"sudo apt-get install libgstreamer1.0-0 \\ gstreamer1.0-dev \\ gstreamer1.0-tools \\ gstreamer1.0-doc sudo apt-get install gstreamer1.0-plugins-base \\ gstreamer1.0-plugins-good # nvidia plugs sudo apt-install deepstream-6.0","title":"Install"},{"location":"blog/Misl/video/gstreamer/#demos","text":"H265 gst-launch-1.0 videotestsrc \\ ! video/x-raw,width = 640 ,height = 480 ,framerate = 25 /1,format = I420 \\ ! timeoverlay valignment = 4 halignment = 1 \\ ! nvvidconv \\ ! 'video/x-raw(memory:NVMM),width=640,height=480' \\ ! nvv4l2h265enc insert-sps-pps = 1 idrinterval = 15 \\ ! h265parse \\ ! rtph265pay \\ ! udpsink port = 5000 host = \"192.168.1.207\"","title":"Demos"},{"location":"blog/Misl/video/gstreamer/#sdpcin-ip4-1921681207mvideo-5000-rtpavp-96artpmap96-h26590000","text":"","title":"sdpc=IN IP4 192.168.1.207\nm=video 5000 RTP/AVP 96\na=rtpmap:96 H265/90000\n"},{"location":"blog/Misl/video/gstreamer/#rtsp-client","text":"ffprob ffprobe rtsp : //wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 # ffprobe ffprobe < rtsp url > # Result Stream # 0 : 0 : Audio : aac ( LC ), 12000 Hz , stereo , fltp Stream # 0 : 1 : Video : h264 ( High ), yuv420p ( progressive ), 240 x160 [ SAR 32 : 27 DAR 16 : 9 ], 24 fps , 24.08 tbr , 90 k tbn , 48 tbc pipe # gst-launch-1.0 rtspsrc location = rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 latency = 100 \\ ! queue \\ ! rtph264depay \\ ! h264parse \\ ! avdec_h264 \\ ! videoconvert \\ ! videoscale ! video/x-raw,width = 640 ,height = 480 \\ ! autovideosink gst-launch-1.0 rtspsrc location=rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 latency=0 buffer-mode=auto \\ ! decodebin \\ ! autovideosink sync=false","title":"rtsp client"},{"location":"blog/Misl/video/gstreamer/#send-and-play","text":"pppppppppppppppp","title":"Send and play"},{"location":"blog/Misl/video/gstreamer/python_binding/gst_appsink_demo/","tags":["video","gstreamer","gi"],"text":"appsrc demo import sys import numpy as np import traceback import time import gi gi . require_version ( 'Gst' , '1.0' ) from gi.repository import Gst , GLib # Initializes Gstreamer, it's variables, paths Gst . init ( sys . argv ) PIPELINE = \"\"\"videotestsrc num-buffers=100 \\ ! video/x-raw, width=320, height=240 \\ ! queue \\ ! video/x-raw, format=BGR ! appsink name=sink sync=true max-buffers=1 drop=true emit-signals=true\"\"\" def on_new_sample ( app_sink ): sample = app_sink . emit ( 'pull-sample' ) caps = sample . get_caps () # Extract the width and height info from the sample's caps height = caps . get_structure ( 0 ) . get_value ( \"height\" ) width = caps . get_structure ( 0 ) . get_value ( \"width\" ) buf = sample . get_buffer () array = np . ndarray (( height , width , 3 ), buffer = buf . extract_dup ( 0 , buf . get_size ()), dtype = np . uint8 ) print ( array . shape ) return Gst . FlowReturn . OK def on_message ( bus : Gst . Bus , message : Gst . Message , loop : GLib . MainLoop ): mtype = message . type if mtype == Gst . MessageType . EOS : print ( \"End of stream\" ) loop . quit () elif mtype == Gst . MessageType . ERROR : err , debug = message . parse_error () print ( err , debug ) loop . quit () elif mtype == Gst . MessageType . WARNING : err , debug = message . parse_warning () print ( err , debug ) return True pipeline = Gst . parse_launch ( PIPELINE ) bus = pipeline . get_bus () # allow bus to emit messages to main thread bus . add_signal_watch () # Start pipeline pipeline . set_state ( Gst . State . PLAYING ) # Init GObject loop to handle Gstreamer Bus Events loop = GLib . MainLoop () # Add handler to specific signal bus . connect ( \"message\" , on_message , loop ) appsink = pipeline . get_by_name ( \"sink\" ) handler_id = appsink . connect ( \"new-sample\" , on_new_sample ) try : loop . run () except Exception : traceback . print_exc () loop . quit () # Stop Pipeline pipeline . set_state ( Gst . State . NULL ) Reference # ardusub Receive and display stream","title":"Gstreamer python binding appsink pipe"},{"location":"blog/Misl/video/gstreamer/python_binding/gst_appsink_demo/#reference","text":"ardusub Receive and display stream","title":"Reference"},{"location":"blog/Misl/video/gstreamer/python_binding/gst_appsrc_demo/","tags":["video","gstreamer","gi"],"text":"appsrc demo import sys import numpy as np import traceback import time import gi gi . require_version ( 'Gst' , '1.0' ) from gi.repository import Gst , GLib # Initializes Gstreamer, it's variables, paths Gst . init ( sys . argv ) PIPELINE = \"appsrc name=app_src ! video/x-raw,width=640,height=480,format=BGR,framerate=10/1 ! videoconvert ! autovideosink\" def ndarray_to_gst_buffer ( array : np . ndarray ) -> Gst . Buffer : \"\"\"Converts numpy array to Gst.Buffer\"\"\" return Gst . Buffer . new_wrapped ( array . tobytes ()) def on_message ( bus : Gst . Bus , message : Gst . Message , loop : GLib . MainLoop ): mtype = message . type if mtype == Gst . MessageType . EOS : print ( \"End of stream\" ) loop . quit () elif mtype == Gst . MessageType . ERROR : err , debug = message . parse_error () print ( err , debug ) loop . quit () elif mtype == Gst . MessageType . WARNING : err , debug = message . parse_warning () print ( err , debug ) return True pipeline = Gst . parse_launch ( PIPELINE ) appsource = pipeline . get_by_name ( \"app_src\" ) bus = pipeline . get_bus () # allow bus to emit messages to main thread bus . add_signal_watch () # Start pipeline pipeline . set_state ( Gst . State . PLAYING ) # Init GObject loop to handle Gstreamer Bus Events loop = GLib . MainLoop () # Add handler to specific signal bus . connect ( \"message\" , on_message , loop ) # Push buffer and check for _ in range ( 10 ): arr = np . random . randint ( low = 0 , high = 255 , size = ( 480 , 640 , 3 ), dtype = np . uint8 ) appsource . emit ( \"push-buffer\" , ndarray_to_gst_buffer ( arr )) time . sleep ( 1 / 10 ) appsource . emit ( \"end-of-stream\" ) try : loop . run () except Exception : traceback . print_exc () loop . quit () # Stop Pipeline pipeline . set_state ( Gst . State . NULL )","title":"Gstreamer python binding appsrc pipe"},{"location":"blog/Misl/video/gstreamer/python_binding/gst_simple_demo/","tags":["video","gstreamer","gi"],"text":"basic gst binding import sys import traceback import gi gi . require_version ( 'Gst' , '1.0' ) from gi.repository import Gst , GLib # Initializes Gstreamer, it's variables, paths Gst . init ( sys . argv ) PIPELINE = \"videotestsrc num-buffers=100 ! autovideosink\" def on_message ( bus : Gst . Bus , message : Gst . Message , loop : GLib . MainLoop ): mtype = message . type if mtype == Gst . MessageType . EOS : print ( \"End of stream\" ) loop . quit () elif mtype == Gst . MessageType . ERROR : err , debug = message . parse_error () print ( err , debug ) loop . quit () elif mtype == Gst . MessageType . WARNING : err , debug = message . parse_warning () print ( err , debug ) return True pipeline = Gst . parse_launch ( PIPELINE ) bus = pipeline . get_bus () # allow bus to emit messages to main thread bus . add_signal_watch () # Start pipeline pipeline . set_state ( Gst . State . PLAYING ) # Init GObject loop to handle Gstreamer Bus Events loop = GLib . MainLoop () # Add handler to specific signal bus . connect ( \"message\" , on_message , loop ) try : loop . run () except Exception : traceback . print_exc () loop . quit () # Stop Pipeline pipeline . set_state ( Gst . State . NULL )","title":"Gstreamer python binding basic pipe"},{"location":"blog/Misl/video/gstreamer/python_binding/python_binding_hello/","tags":["video","gstreamer","gi"],"text":"Install # Gstreamer python bindings implement by PyGObject Note PyGObject is a Python package which provides bindings for GObject based libraries such as GTK, GStreamer and many more. install # Install mark library installed other dependencies sudo apt install \\ libgirepository1.0-dev \\ libcairo2-dev \\ python3-dev \\ gir1.2-gtk-3.0 pip3 install pycairo pip3 install PyGObject PyGObject site ubuntu Install instruction Simple example # gst import gi gi . require_version ( 'Gst' , '1.0' ) from gi.repository import Gst , GLib import sys import traceback Gst . init ( sys . argv ) command = \"videotestsrc ! autovideosink\" pipeline = Gst . parse_launch ( command ) pipeline . set_state ( Gst . State . PLAYING ) loop = GLib . MainLoop () try : loop . run () except : traceback . print_exc () Reference # demo to check","title":"Gstreamer python binding"},{"location":"blog/Misl/video/gstreamer/python_binding/python_binding_hello/#install","text":"Gstreamer python bindings implement by PyGObject Note PyGObject is a Python package which provides bindings for GObject based libraries such as GTK, GStreamer and many more. install # Install mark library installed other dependencies sudo apt install \\ libgirepository1.0-dev \\ libcairo2-dev \\ python3-dev \\ gir1.2-gtk-3.0 pip3 install pycairo pip3 install PyGObject PyGObject site ubuntu Install instruction","title":"Install"},{"location":"blog/Misl/video/gstreamer/python_binding/python_binding_hello/#simple-example","text":"gst import gi gi . require_version ( 'Gst' , '1.0' ) from gi.repository import Gst , GLib import sys import traceback Gst . init ( sys . argv ) command = \"videotestsrc ! autovideosink\" pipeline = Gst . parse_launch ( command ) pipeline . set_state ( Gst . State . PLAYING ) loop = GLib . MainLoop () try : loop . run () except : traceback . print_exc ()","title":"Simple example"},{"location":"blog/Misl/video/gstreamer/python_binding/python_binding_hello/#reference","text":"demo to check","title":"Reference"},{"location":"blog/Python/snippets/","tags":["snippets","cheat Sheet"],"text":"log # log to console log = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO , format = \"[ %(asctime)s ] [ %(name)s ] %(levelname)s - %(message)s \" , datefmt = '%H:%M:%S' )","title":"Python snippets"},{"location":"blog/Python/snippets/#log","text":"log to console log = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO , format = \"[ %(asctime)s ] [ %(name)s ] %(levelname)s - %(message)s \" , datefmt = '%H:%M:%S' )","title":"log"},{"location":"blog/Python/asyncio/future_demo/","tags":["python","asyncio","future"],"text":"future_demo import asyncio import time import threading import logging logging . basicConfig ( format = \"[ %(levelname)s ] %(asctime)s %(message)s \" , level = logging . DEBUG ) log = logging . getLogger ( __name__ ) start = None def fetch ( with_time : int ) -> None : log . info ( threading . current_thread () . name ) time . sleep ( with_time ) async def do_work ( delay , work ): await asyncio . sleep ( delay ) log . info ( work ) def callback ( future : asyncio . Future ) -> None : end = time . time () log . info ( f \"callback run after: { end - start } \" ) async def main (): log . info ( threading . current_thread () . name ) my_loop = asyncio . get_event_loop () asyncio . create_task ( do_work ( 1 , \"hello\" )) asyncio . create_task ( do_work ( 2 , \"hello2\" )) future = my_loop . run_in_executor ( None , fetch , 3 ) global start start = time . time () future . add_done_callback ( callback ) await future end = time . time () log . info ( f \"continue run after await time { end - start } \" ) await asyncio . create_task ( do_work ( 1 , \"hello end \" )) asyncio . run ( main ())","title":"future demo"},{"location":"blog/Python/asyncio/hello_asyncio/","tags":["python","asyncio"],"text":"Reference # Guide to Concurrency in Python with Asyncio","title":"python asyncio"},{"location":"blog/Python/asyncio/hello_asyncio/#reference","text":"Guide to Concurrency in Python with Asyncio","title":"Reference"},{"location":"blog/Python/multithreading/","text":"barrier","title":"Index"},{"location":"blog/Python/multithreading/barrier/","tags":["multithreading"],"text":"Barrier objects are used to wait for a fixed number of thread to complete execution before any particular thread can proceed forward with is execution Demo # sleep function simulate to work load init barrier for 2 threads thread t2 wait for t1 on barrier when t1 reach the barrier both threads t1, t2 can continue barrier import threading import logging import time log = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO , format = \"[ %(asctime)s ] [ %(name)s ] %(levelname)s - %(message)s \" , datefmt = \"%H:%M:%S\" , ) def job ( name : str , wait_time : int ) -> None : log . info ( f \"Thread { name } running\" ) time . sleep ( wait_time ) log . info ( f \"Thread { name } wait on barrier\" ) barrier . wait () log . info ( f \"Thread { name } continue running\" ) barrier = threading . Barrier ( 2 ) t1 = threading . Thread ( target = job , args = ( \"t1\" , 5 )) t2 = threading . Thread ( target = job , args = ( \"t2\" , 3 )) t1 . start () t2 . start () result # [07:17:58] [__main__] INFO - Thread t1 running [07:17:58] [__main__] INFO - Thread t2 running [07:18:01] [__main__] INFO - Thread t2 wait on barrier [07:18:03] [__main__] INFO - Thread t1 wait on barrier [07:18:03] [__main__] INFO - Thread t1 continue running [07:18:03] [__main__] INFO - Thread t2 continue running Reference # Python\u2019s Thread Barriers in 8 mins","title":"Multithreading - barrier"},{"location":"blog/Python/multithreading/barrier/#demo","text":"sleep function simulate to work load init barrier for 2 threads thread t2 wait for t1 on barrier when t1 reach the barrier both threads t1, t2 can continue barrier import threading import logging import time log = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO , format = \"[ %(asctime)s ] [ %(name)s ] %(levelname)s - %(message)s \" , datefmt = \"%H:%M:%S\" , ) def job ( name : str , wait_time : int ) -> None : log . info ( f \"Thread { name } running\" ) time . sleep ( wait_time ) log . info ( f \"Thread { name } wait on barrier\" ) barrier . wait () log . info ( f \"Thread { name } continue running\" ) barrier = threading . Barrier ( 2 ) t1 = threading . Thread ( target = job , args = ( \"t1\" , 5 )) t2 = threading . Thread ( target = job , args = ( \"t2\" , 3 )) t1 . start () t2 . start ()","title":"Demo"},{"location":"blog/Python/multithreading/barrier/#result","text":"[07:17:58] [__main__] INFO - Thread t1 running [07:17:58] [__main__] INFO - Thread t2 running [07:18:01] [__main__] INFO - Thread t2 wait on barrier [07:18:03] [__main__] INFO - Thread t1 wait on barrier [07:18:03] [__main__] INFO - Thread t1 continue running [07:18:03] [__main__] INFO - Thread t2 continue running","title":"result"},{"location":"blog/Python/multithreading/barrier/#reference","text":"Python\u2019s Thread Barriers in 8 mins","title":"Reference"},{"location":"blog/Python/numpy/numpy_reshape/","tags":["python","numpy"],"text":"The new shape should be compatible with the original shape\u2019 Tips Set one of the reshape parameters as -1 Allow numpy to figure unknown dimension keep the above criteria s = np . array ([[ 1 , 2 , 3 , 4 ], [ 5 , 6 , 7 , 8 ], [ 9 , 10 , 11 , 12 ]]) s . shape ( 3 , 4 ) s1 = np . reshape ( s , - 1 ) s1 . shape ( 12 ,) s2 = s . reshape ( 1 , - 1 ) s2 . shape ( 1 , 12 ) s3 = s . reshape ( - 1 , 1 , 2 ) ( 6 , 1 , 2 ) s3 array ([ [[ 1 , 2 ]], [[ 3 , 4 ]], [[ 5 , 6 ]], [[ 7 , 8 ]], [[ 9 , 10 ]], [[ 11 , 12 ]]]) Reference # Numpy Tutorial \u2013 Your first numpy guide to build python coding foundations Python NumPy For Your Grandma","title":"numpy reshape"},{"location":"blog/Python/numpy/numpy_reshape/#reference","text":"Numpy Tutorial \u2013 Your first numpy guide to build python coding foundations Python NumPy For Your Grandma","title":"Reference"},{"location":"blog/Python/project_template/","tags":["python","project"],"text":"This post explain project structure and how to create github template repository Other post show how to config virtual environment install package unittest and tools usage part 1: this post part 2: venv and pip part 3: unitest using pytest Tools: part 4: pylint project tree # py_template/ \u251c\u2500\u2500 .vscode \u251c\u2500\u2500 docs \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 py_template \u251c\u2500\u2500 README.md \u251c\u2500\u2500 .pylintrc \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests | \u2514\u2500\u2500 requirements.txt \u251c\u2500\u2500 venv \u2514\u2500\u2500 version.py file name description Makefile automate validation and running tests .pylintrc pylint rules GitHUB # Set project as a Template my python projct template on github Reference # template example Python Dev Environment","title":"Python project template"},{"location":"blog/Python/project_template/#project-tree","text":"py_template/ \u251c\u2500\u2500 .vscode \u251c\u2500\u2500 docs \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 py_template \u251c\u2500\u2500 README.md \u251c\u2500\u2500 .pylintrc \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests | \u2514\u2500\u2500 requirements.txt \u251c\u2500\u2500 venv \u2514\u2500\u2500 version.py file name description Makefile automate validation and running tests .pylintrc pylint rules","title":"project tree"},{"location":"blog/Python/project_template/#github","text":"Set project as a Template my python projct template on github","title":"GitHUB"},{"location":"blog/Python/project_template/#reference","text":"template example Python Dev Environment","title":"Reference"},{"location":"blog/Python/project_template/black/","tags":["python","project","template","black","isort"],"text":"VSCode settings # settings.json { \"editor.formatOnSave\" : true , \"[python]\" : { \"editor.codeActionsOnSave\" : { \"source.organizeImports\" : true } }, \"python.formatting.provider\" : \"black\" , } black and isort args/settings # pyproject.toml [tool.black] line-length = 99 # override black's default line-length exclude = ''' /( \\.git | \\.mypy_cache | \\.tox | venv | \\.venv | _build | buck-out | build | dist )/ ''' [tool.isort] # make it compatible with black profile = \"black\"","title":"Python project template - black and isort"},{"location":"blog/Python/project_template/black/#vscode-settings","text":"settings.json { \"editor.formatOnSave\" : true , \"[python]\" : { \"editor.codeActionsOnSave\" : { \"source.organizeImports\" : true } }, \"python.formatting.provider\" : \"black\" , }","title":"VSCode settings"},{"location":"blog/Python/project_template/black/#black-and-isort-argssettings","text":"pyproject.toml [tool.black] line-length = 99 # override black's default line-length exclude = ''' /( \\.git | \\.mypy_cache | \\.tox | venv | \\.venv | _build | buck-out | build | dist )/ ''' [tool.isort] # make it compatible with black profile = \"black\"","title":"black and isort args/settings"},{"location":"blog/Python/project_template/mypy/","tags":["python","project","template","mypy"],"text":"install # pip install mypy demo # demo.py def func ( a , b ): return a + b usage # from cli # shell mypy demo.py Success: no issues found in 1 source file ## Strict mode mypy --strict demo.py error: Function is missing a type annotation Found 1 error in 1 file ( checked 1 source file ) VSCode # Enabled mypy Set strict argument settings.json \"python.linting.mypyEnabled\" : true config # pyproject.toml [tool.mypy] strict = true","title":"Python project template - mypy"},{"location":"blog/Python/project_template/mypy/#install","text":"pip install mypy","title":"install"},{"location":"blog/Python/project_template/mypy/#demo","text":"demo.py def func ( a , b ): return a + b","title":"demo"},{"location":"blog/Python/project_template/mypy/#usage","text":"","title":"usage"},{"location":"blog/Python/project_template/mypy/#from-cli","text":"shell mypy demo.py Success: no issues found in 1 source file ## Strict mode mypy --strict demo.py error: Function is missing a type annotation Found 1 error in 1 file ( checked 1 source file )","title":"from cli"},{"location":"blog/Python/project_template/mypy/#vscode","text":"Enabled mypy Set strict argument settings.json \"python.linting.mypyEnabled\" : true","title":"VSCode"},{"location":"blog/Python/project_template/mypy/#config","text":"pyproject.toml [tool.mypy] strict = true","title":"config"},{"location":"blog/Python/project_template/project_unittest/","tags":["python","project","template","unittest","pytest"],"text":"Install and Setup # Add pytest to requirements-dev.txt Run pip install -r requirements-dev.txt again Create tests sub folder under root project folder Add tests modules files prefix with test_ Add function to modules start also with test_ prefix Install project using pip install -e . Run pytest demo # demp_proj project py_template/ \u251c\u2500\u2500 .vscode \u251c\u2500\u2500 py_template | \u2514\u2500\u2500 example.py \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests | \u2514\u2500\u2500 test_example.py \u251c\u2500\u2500 venv \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 requirements-dev.txt \u2514\u2500\u2500 version.py test_example.py # import pytest # from py_template import example # \"\"\" # # Run only tests mark as foo # python -m pytest -m foo # \"\"\" # @pytest.mark.foo # def test_foo() -> None: # result = example.foo() # assert result is True # @pytest.mark.foo # def test_foo_with_assert_description() -> None: # result = example.foo() # assert result is True, \"assert description\" # def test_bar() -> None: # result = example.bar(1) # assert result == 2.0 # def test_bar_with_exception() -> None: # with pytest.raises(ZeroDivisionError): # example.bar(0) # def test_bar_with_exception_II() -> None: # \"\"\" # catch general exception # check exception type with assert # \"\"\" # with pytest.raises(Exception) as e: # example.bar(0) # assert e.type == ZeroDivisionError example.py from queue import Queue import logging import threading import time from collections import deque from threading import Event log = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO , format = \"[ %(asctime)s ] [ %(name)s ] %(levelname)s - %(message)s \" , datefmt = '%H:%M:%S' ) # some_queue: Queue = Queue(1) some_queue : deque = deque ( maxlen = 1 ) sync_event = Event () def pub () -> None : counter = 0 while True : try : some_queue . append ( counter ) sync_event . set () sync_event . clear () time . sleep ( 1 / 5 ) counter += 1 except Exception : pass def sub () -> None : while True : try : sync_event . wait () data = some_queue . popleft () # sync_event.clear() if data % 2 : raise Exception ( \"odd exception\" ) log . info ( data ) except Exception : pass # log.warning(\"Exception handling\", exc_info=True) # time.sleep(1) if __name__ == \"__main__\" : t1 = threading . Thread ( target = pub ) t2 = threading . Thread ( target = sub ) t1 . start () t2 . start () t1 . join () t2 . join ()","title":"Python project template - unittest"},{"location":"blog/Python/project_template/project_unittest/#install-and-setup","text":"Add pytest to requirements-dev.txt Run pip install -r requirements-dev.txt again Create tests sub folder under root project folder Add tests modules files prefix with test_ Add function to modules start also with test_ prefix Install project using pip install -e . Run pytest","title":"Install and Setup"},{"location":"blog/Python/project_template/project_unittest/#demo","text":"demp_proj project py_template/ \u251c\u2500\u2500 .vscode \u251c\u2500\u2500 py_template | \u2514\u2500\u2500 example.py \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 tests | \u2514\u2500\u2500 test_example.py \u251c\u2500\u2500 venv \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 requirements-dev.txt \u2514\u2500\u2500 version.py test_example.py # import pytest # from py_template import example # \"\"\" # # Run only tests mark as foo # python -m pytest -m foo # \"\"\" # @pytest.mark.foo # def test_foo() -> None: # result = example.foo() # assert result is True # @pytest.mark.foo # def test_foo_with_assert_description() -> None: # result = example.foo() # assert result is True, \"assert description\" # def test_bar() -> None: # result = example.bar(1) # assert result == 2.0 # def test_bar_with_exception() -> None: # with pytest.raises(ZeroDivisionError): # example.bar(0) # def test_bar_with_exception_II() -> None: # \"\"\" # catch general exception # check exception type with assert # \"\"\" # with pytest.raises(Exception) as e: # example.bar(0) # assert e.type == ZeroDivisionError example.py from queue import Queue import logging import threading import time from collections import deque from threading import Event log = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO , format = \"[ %(asctime)s ] [ %(name)s ] %(levelname)s - %(message)s \" , datefmt = '%H:%M:%S' ) # some_queue: Queue = Queue(1) some_queue : deque = deque ( maxlen = 1 ) sync_event = Event () def pub () -> None : counter = 0 while True : try : some_queue . append ( counter ) sync_event . set () sync_event . clear () time . sleep ( 1 / 5 ) counter += 1 except Exception : pass def sub () -> None : while True : try : sync_event . wait () data = some_queue . popleft () # sync_event.clear() if data % 2 : raise Exception ( \"odd exception\" ) log . info ( data ) except Exception : pass # log.warning(\"Exception handling\", exc_info=True) # time.sleep(1) if __name__ == \"__main__\" : t1 = threading . Thread ( target = pub ) t2 = threading . Thread ( target = sub ) t1 . start () t2 . start () t1 . join () t2 . join ()","title":"demo"},{"location":"blog/Python/project_template/pylint/","tags":["python","project","template","pylint"],"text":"Linting is the automated source code checking for programmatic and stylistic errors. A lint tool is a basic static code analyzer pylint is default VSCode linter and it enable by default install pip install pylint vscode settings \"python.linting.pylintEnabled\" : true Control # create .pylintrc pylint --generate-rcfile Disable messages # [MASTER] disable= C0114, # (missing-module-docstring) C0115, # (missing-class-docstring)","title":"Python project template - pylint"},{"location":"blog/Python/project_template/pylint/#control","text":"create .pylintrc pylint --generate-rcfile","title":"Control"},{"location":"blog/Python/project_template/pylint/#disable-messages","text":"[MASTER] disable= C0114, # (missing-module-docstring) C0115, # (missing-class-docstring)","title":"Disable messages"},{"location":"blog/Python/project_template/venv_pip_and_requirements/","tags":["python","project"],"text":"venv # create python -m venv venv usage # Clear all outside reference unset PYTHONPATH source venv/bin/activate virtual env Clear all other reference to python libraries by unset PYTHONPATH variable pip # auto complation pip complation --bash >> ~/.bashrc source ~/.bashrc Dependencies # Using pip to install project dependencies Separate dependencies to two or more files dev packages prod packages(reference prod file from setup.py) project source reference project # Install / Reference project from virtualenv pip install -e . Tip pip install -e . require setup.py file requirements # Tip Call prod file from dev using -r option -r requirements.txt prod # requirements.txt # Add project requirements here dev # requirements-dev.txt -r requirements.txt black mypy isort usage pip install -r requirements-dev.txt setup.py # minimal setup from setuptools import setup , find_packages setup ( name = 'MyPackageName' , version = '1.0.0' , url = 'https://github.com/mypackage.git' , author = 'Author Name' , author_email = 'author@gmail.com' , description = 'Description of my package' , packages = find_packages (), install_requires = [], )","title":"Python project template - venv"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#venv","text":"create python -m venv venv usage # Clear all outside reference unset PYTHONPATH source venv/bin/activate virtual env Clear all other reference to python libraries by unset PYTHONPATH variable","title":"venv"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#pip","text":"auto complation pip complation --bash >> ~/.bashrc source ~/.bashrc","title":"pip"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#dependencies","text":"Using pip to install project dependencies Separate dependencies to two or more files dev packages prod packages(reference prod file from setup.py) project source reference","title":"Dependencies"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#project","text":"Install / Reference project from virtualenv pip install -e . Tip pip install -e . require setup.py file","title":"project"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#requirements","text":"Tip Call prod file from dev using -r option -r requirements.txt","title":"requirements"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#prod","text":"requirements.txt # Add project requirements here","title":"prod"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#dev","text":"requirements-dev.txt -r requirements.txt black mypy isort usage pip install -r requirements-dev.txt","title":"dev"},{"location":"blog/Python/project_template/venv_pip_and_requirements/#setuppy","text":"minimal setup from setuptools import setup , find_packages setup ( name = 'MyPackageName' , version = '1.0.0' , url = 'https://github.com/mypackage.git' , author = 'Author Name' , author_email = 'author@gmail.com' , description = 'Description of my package' , packages = find_packages (), install_requires = [], )","title":"setup.py"},{"location":"blog/Python/project_template/vscode/","tags":["python","project","vscode"],"text":"Project explorer # exclude files \"files.exclude\" : { \"venv/\" : true , \"**/__pycache__\" : true , }","title":"Python project template - VSCode"},{"location":"blog/Python/project_template/vscode/#project-explorer","text":"exclude files \"files.exclude\" : { \"venv/\" : true , \"**/__pycache__\" : true , }","title":"Project explorer"},{"location":"blog/Python/pytest/","tags":["pytest","unittest","python"],"text":"Test # Arrange (setup) Act (object/method under test) Assert Cleanup Groping Tests # Custom markers # Using pytest.mark decorator we can group tests Idea for custom marker - sanity - regression import pytest @pytest . mark . g1 def test_demo (): assert True python -m pytest -m g1 g2 Builtin markers # pytest --markers ... @pytest.mark.skip ( reason = None ) @pytest.mark.skipif ( condition, ..., *, reason = ... ) @pytest.mark.xfail ( condition, ..., *, reason = ..., run = True, raises = None, strict = xfail_strict ) ... xfail # mark the test function as an expected failure for example if function under test not implement yet # Reference # PyTest for Absolute Beginners pytest IndianPythonista","title":"Pytest"},{"location":"blog/Python/pytest/#test","text":"Arrange (setup) Act (object/method under test) Assert Cleanup","title":"Test"},{"location":"blog/Python/pytest/#groping-tests","text":"","title":"Groping Tests"},{"location":"blog/Python/pytest/#custom-markers","text":"Using pytest.mark decorator we can group tests Idea for custom marker - sanity - regression import pytest @pytest . mark . g1 def test_demo (): assert True python -m pytest -m g1 g2","title":"Custom markers"},{"location":"blog/Python/pytest/#builtin-markers","text":"pytest --markers ... @pytest.mark.skip ( reason = None ) @pytest.mark.skipif ( condition, ..., *, reason = ... ) @pytest.mark.xfail ( condition, ..., *, reason = ..., run = True, raises = None, strict = xfail_strict ) ...","title":"Builtin markers"},{"location":"blog/Python/pytest/#xfail","text":"mark the test function as an expected failure","title":"xfail"},{"location":"blog/Python/pytest/#for-example-if-function-under-test-not-implement-yet","text":"","title":"for example if function under test not implement yet"},{"location":"blog/Python/pytest/#reference","text":"PyTest for Absolute Beginners pytest IndianPythonista","title":"Reference"},{"location":"blog/Python/pytest/conftest/","tags":["pytest","unittest","python"],"text":"Using conftest.py to share fixtures and hooks among all tests autouse # conftest.py from typing import Iterator import pytest @pytest . fixture ( autouse = True ) def setup_teardownII () -> Iterator [ None ]: print ( \"run setup fixture before test\" ) yield print ( \"run tear down fixture after test\" ) autouse Set autouse to run this fixture for all tests test_file.py def test_with_fixture () -> None : print ( \"run test III\" ) assert True run pytest verbose python -m pytest -s <test file> Run tests # python -m pytest -s test_file.py # run setup fixture before test run test III .run tear down fixture after test scope # Fixture scopes Fixtures are created when first requested by a test, and are destroyed based on their scope: function: (default) The fixture is destroy at the end of the test, class: module: package: session: The fixture destroy at the end of the last session. scope demo # conftest.py from typing import Iterator import pytest @pytest . fixture ( scope = \"session\" , autouse = True ) def setup_teardownII () -> Iterator [ None ]: print ( \" \\n run setup fixture before session start\" ) yield print ( \"run tear down fixture after session end\" ) test_file.py def test_with_fixture () -> None : print ( \"run test\" ) assert True def test_with_fixture_II () -> None : print ( \"run testII\" ) assert True def test_with_fixtureIII () -> None : print ( \"run test III\" ) assert True run # python -m pytest -s tests/test_file.py # run setup fixture before session start run test .run testII .run test III .run tear down fixture after session end","title":"Pytest conftest"},{"location":"blog/Python/pytest/conftest/#autouse","text":"conftest.py from typing import Iterator import pytest @pytest . fixture ( autouse = True ) def setup_teardownII () -> Iterator [ None ]: print ( \"run setup fixture before test\" ) yield print ( \"run tear down fixture after test\" ) autouse Set autouse to run this fixture for all tests test_file.py def test_with_fixture () -> None : print ( \"run test III\" ) assert True run pytest verbose python -m pytest -s <test file>","title":"autouse"},{"location":"blog/Python/pytest/conftest/#run-tests","text":"python -m pytest -s test_file.py # run setup fixture before test run test III .run tear down fixture after test","title":"Run tests"},{"location":"blog/Python/pytest/conftest/#scope","text":"Fixture scopes Fixtures are created when first requested by a test, and are destroyed based on their scope: function: (default) The fixture is destroy at the end of the test, class: module: package: session: The fixture destroy at the end of the last session.","title":"scope"},{"location":"blog/Python/pytest/conftest/#scope-demo","text":"conftest.py from typing import Iterator import pytest @pytest . fixture ( scope = \"session\" , autouse = True ) def setup_teardownII () -> Iterator [ None ]: print ( \" \\n run setup fixture before session start\" ) yield print ( \"run tear down fixture after session end\" ) test_file.py def test_with_fixture () -> None : print ( \"run test\" ) assert True def test_with_fixture_II () -> None : print ( \"run testII\" ) assert True def test_with_fixtureIII () -> None : print ( \"run test III\" ) assert True","title":"scope demo"},{"location":"blog/Python/pytest/conftest/#run","text":"python -m pytest -s tests/test_file.py # run setup fixture before session start run test .run testII .run test III .run tear down fixture after session end","title":"run"},{"location":"blog/Python/pytest/fixture/","tags":["pytest","unittest","python"],"text":"Fixture are function that help us to arrange the domain/ environment before test and then help us to clean the mess after the test These are accessed by test functions through arguments see demo from typing import Callable from typing import Iterator import pytest @pytest . fixture def setup () -> None : print ( \"run setup fixture before test\" ) @pytest . fixture def setup_teardown () -> Iterator [ None ]: print ( \"run setup fixture before test\" ) yield print ( \"run teardown fixture after test\" ) def test_with_fixture ( setup : Callable ) -> None : print ( \"run test\" ) assert True def test_with_fixture_II ( setup_teardown : Callable ) -> None : print ( \"run testII\" ) assert True run pytest verbose python -m pytest -s <test file>","title":"Pytest fixture"},{"location":"blog/Python/pytest/mock/","tags":["pytest","mock"],"text":"mocking A mock object is a simulated object that mimics the behavior of the smallest testable parts of an application in controlled ways. It\u2019s replace of one or more function or objects calls A mock function call return a predefined value immediately without doing any work In Python mocking implement by unittest.mock module Simple demo # project search \u251c\u2500\u2500 tutorial \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 demo.py \u2514\u2500\u2500 tests \u2514\u2500\u2500 test_demo.py demo.py # method to mock def get_number () -> int : return 5 # function under test def add ( a : int ) -> int : b = get_number () return a + b test_demo.py from unittest.mock import patch , MagicMock @patch ( \"tutorial.demo.get_number\" ) def test_add_mock ( mock_get_number : MagicMock ) -> None : mock_get_number . return_value = 2 result = add ( 1 ) assert result == 3 Warning @path full name of the function or class to patch module_name.func_name for example to path get_number function in demo module. @patch(\"demo.get_number\") MagicMock # Provide a simple mocking interface that allow to mock partial real object that we wont to patch return_value # allows you to choose what the patched callable returns, usually we return the same type of the real callable but controllable side_effect # Change the behavior of the mock side_effect = Iterable # yield the values from defined iterable on subsequent call >>> from unittest.mock import MagicMock >>> m = MagicMock () >>> m.get_data.side_effect = [ 5 , 10 , 15 ] >>> m.get_data () 5 >>> m.get_data () 10 >>> m.get_data () 15 from unittest.mock import patch def my_input () -> int : return 1 def method_to_test (): a = my_input () b = my_input () return a + b @patch ( \"test_demo.my_input\" ) def test_multiple ( mock_my_input ): mock_my_input . side_effect = [ 1 , 2 ] result = method_to_test () assert result == 3 side_effect = Exception # m.check.side_effect = Exception ( \"custom exception\" ) >>> m.check () Traceback ( most recent call last ) : File \"<stdin>\" , line 1 , in <module> File \"/usr/lib/python3.8/unittest/mock.py\" , ... raise effect Exception: custom exception ide_effect = callable # The callable will be executed on each call with the parameters passed when calling the mocked method >>> def call_me ( name ) : ... print ( name ) ... >>> m.run_call.side_effect = call_me >>> m.run_call ( \"a\" ) a >>> m.run_call ( \"b\" ) b >>> m.run_call.call_count 2 >>> m.run_call ( \"b\" ) b >>> m.run_call.call_count 3 Reference # Mock\u2019s return_value & side effect Unit Testing in Python with pytest | Introduction to mock (Part-9) Unit Testing in Python with pytest | Advanced Mocking (Part-10)","title":"PyTest - Mocking"},{"location":"blog/Python/pytest/mock/#simple-demo","text":"project search \u251c\u2500\u2500 tutorial \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 demo.py \u2514\u2500\u2500 tests \u2514\u2500\u2500 test_demo.py demo.py # method to mock def get_number () -> int : return 5 # function under test def add ( a : int ) -> int : b = get_number () return a + b test_demo.py from unittest.mock import patch , MagicMock @patch ( \"tutorial.demo.get_number\" ) def test_add_mock ( mock_get_number : MagicMock ) -> None : mock_get_number . return_value = 2 result = add ( 1 ) assert result == 3 Warning @path full name of the function or class to patch module_name.func_name for example to path get_number function in demo module. @patch(\"demo.get_number\")","title":"Simple demo"},{"location":"blog/Python/pytest/mock/#magicmock","text":"Provide a simple mocking interface that allow to mock partial real object that we wont to patch","title":"MagicMock"},{"location":"blog/Python/pytest/mock/#return_value","text":"allows you to choose what the patched callable returns, usually we return the same type of the real callable but controllable","title":"return_value"},{"location":"blog/Python/pytest/mock/#side_effect","text":"Change the behavior of the mock","title":"side_effect"},{"location":"blog/Python/pytest/mock/#reference","text":"Mock\u2019s return_value & side effect Unit Testing in Python with pytest | Introduction to mock (Part-9) Unit Testing in Python with pytest | Advanced Mocking (Part-10)","title":"Reference"},{"location":"blog/Python/pytest/params/","tags":["pytest","unittest","python"],"text":"fixture # test_with_params.py from typing import Callable import pytest from _pytest.fixtures import SubRequest @pytest . fixture ( params = [ 10 , 20 , 30 ]) def demo_fixture ( request : SubRequest ) -> None : print ( f \" \\n run test with param: { request . param } \" ) def test_with_fixture ( demo_fixture : Callable ) -> None : print ( \"run test\" ) assert True python -m pytest -s tests/test_with_params.py # tests/test_with_params.py run test with param: 10 run test . run test with param: 20 run test . run test with param: 30 run test . marker.parametrize # from typing import Callable import pytest from _pytest.fixtures import SubRequest @pytest . mark . parametrize ( \"a, b, result\" , [( 1 , 2 , 3 ), ( 5 , 5 , 11 ), ( 2 , 2 , 4 )]) def test_add ( a : int , b : int , result : int ) -> None : assert a + b == result run test # python -m pytest -s -v tests/test_with_params.py # tests/test_with_params.py::test_add [ 1 -2-3 ] PASSED tests/test_with_params.py::test_add [ 5 -5-11 ] FAILED tests/test_with_params.py::test_add [ 2 -2-4 ] PASSED ====================================================================== FAILURES ======================================================================= __________________________________________________________________ test_add [ 5 -5-11 ] ___________________________________________________________________ a = 5 , b = 5 , result = 11 @pytest.mark.parametrize ( \"a, b, result\" , [( 1 , 2 , 3 ) , ( 5 , 5 , 11 ) , ( 2 , 2 , 4 )]) def test_add ( a: int, b: int, result: int ) -> None: > assert a + b == result E assert 10 == 11 E -10 E +11 tests/test_with_params.py:18: AssertionError ========================================================= 1 failed, 2 passed in 0 .03 seconds","title":"pytest parameterize tests"},{"location":"blog/Python/pytest/params/#fixture","text":"test_with_params.py from typing import Callable import pytest from _pytest.fixtures import SubRequest @pytest . fixture ( params = [ 10 , 20 , 30 ]) def demo_fixture ( request : SubRequest ) -> None : print ( f \" \\n run test with param: { request . param } \" ) def test_with_fixture ( demo_fixture : Callable ) -> None : print ( \"run test\" ) assert True python -m pytest -s tests/test_with_params.py # tests/test_with_params.py run test with param: 10 run test . run test with param: 20 run test . run test with param: 30 run test .","title":"fixture"},{"location":"blog/Python/pytest/params/#markerparametrize","text":"from typing import Callable import pytest from _pytest.fixtures import SubRequest @pytest . mark . parametrize ( \"a, b, result\" , [( 1 , 2 , 3 ), ( 5 , 5 , 11 ), ( 2 , 2 , 4 )]) def test_add ( a : int , b : int , result : int ) -> None : assert a + b == result","title":"marker.parametrize"},{"location":"blog/Python/pytest/params/#run-test","text":"python -m pytest -s -v tests/test_with_params.py # tests/test_with_params.py::test_add [ 1 -2-3 ] PASSED tests/test_with_params.py::test_add [ 5 -5-11 ] FAILED tests/test_with_params.py::test_add [ 2 -2-4 ] PASSED ====================================================================== FAILURES ======================================================================= __________________________________________________________________ test_add [ 5 -5-11 ] ___________________________________________________________________ a = 5 , b = 5 , result = 11 @pytest.mark.parametrize ( \"a, b, result\" , [( 1 , 2 , 3 ) , ( 5 , 5 , 11 ) , ( 2 , 2 , 4 )]) def test_add ( a: int, b: int, result: int ) -> None: > assert a + b == result E assert 10 == 11 E -10 E +11 tests/test_with_params.py:18: AssertionError ========================================================= 1 failed, 2 passed in 0 .03 seconds","title":"run test"},{"location":"blog/Python/python/iterator_and_generator/","tags":["python","iterator","generator"],"text":"Iterator in Python is simply an object that can be iterated upon. An object which will return data, one element at a time. Python iterator object must implement two special methods (iterator protocol) - iter () - next () iterable An object is called iterable if we can get an iterator from it. Container like list and tuple are iterable object Custom iterators # class Base2 (): def __init__ ( self , max ) -> None : self . __max = max self . __current = 0 def __iter__ ( self ): return self def __next__ ( self ): if self . __current > self . __max : raise StopIteration () result = 2 ** self . __current self . __current += 1 return result iter and next iter(obj) and next(obj) method is the same like calling obj.__next__() and obj.__iter__() method iterator usage # Iterator raise StopIteration exception when it\u2019s ended worker = Base2 ( 2 ) worker_iter = worker . __iter__ () print ( next ( worker_iter )) print ( worker_iter . __next__ ()) print ( next ( worker_iter )) print ( next ( worker_iter )) 1 2 4 Traceback ( most recent call last ): File \"/home/user/projects/blog/examples/python/python/custom_iterators.py\" , line 22 , in < module > print ( next ( worker_iter )) File \"/home/user/projects/blog/examples/python/python/custom_iterators.py\" , line 12 , in __next__ raise StopIteration () StopIteration Generator # def base2 ( max ): for x in range ( max ): yield 2 ** x print ( base2 ( 3 )) for i in base2 ( 3 ): print ( i ) < generator object base2 at 0x7f8aa5cc07b0 > 1 2 4 Generator Expression # g = ( 2 ** x for x in range ( 3 )) print ( g ) for i in g : print ( i ) # < generator object < genexpr > at 0x7f9af03247b0 > 1 2 4 Reference # How to make an iterator in Python","title":"Iterator and Generator hello"},{"location":"blog/Python/python/iterator_and_generator/#custom-iterators","text":"class Base2 (): def __init__ ( self , max ) -> None : self . __max = max self . __current = 0 def __iter__ ( self ): return self def __next__ ( self ): if self . __current > self . __max : raise StopIteration () result = 2 ** self . __current self . __current += 1 return result iter and next iter(obj) and next(obj) method is the same like calling obj.__next__() and obj.__iter__() method","title":"Custom iterators"},{"location":"blog/Python/python/iterator_and_generator/#iterator-usage","text":"Iterator raise StopIteration exception when it\u2019s ended worker = Base2 ( 2 ) worker_iter = worker . __iter__ () print ( next ( worker_iter )) print ( worker_iter . __next__ ()) print ( next ( worker_iter )) print ( next ( worker_iter )) 1 2 4 Traceback ( most recent call last ): File \"/home/user/projects/blog/examples/python/python/custom_iterators.py\" , line 22 , in < module > print ( next ( worker_iter )) File \"/home/user/projects/blog/examples/python/python/custom_iterators.py\" , line 12 , in __next__ raise StopIteration () StopIteration","title":"iterator usage"},{"location":"blog/Python/python/iterator_and_generator/#generator","text":"def base2 ( max ): for x in range ( max ): yield 2 ** x print ( base2 ( 3 )) for i in base2 ( 3 ): print ( i ) < generator object base2 at 0x7f8aa5cc07b0 > 1 2 4","title":"Generator"},{"location":"blog/Python/python/iterator_and_generator/#generator-expression","text":"g = ( 2 ** x for x in range ( 3 )) print ( g ) for i in g : print ( i ) # < generator object < genexpr > at 0x7f9af03247b0 > 1 2 4","title":"Generator Expression"},{"location":"blog/Python/python/iterator_and_generator/#reference","text":"How to make an iterator in Python","title":"Reference"},{"location":"blog/Python/python/bytearray/","tags":["python"],"text":"The bytearray class is a mutable sequence of integers in the range 0 <= x < 256. data = bytearray ( 10 ) data bytearray ( b ' \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ' ) mutable vs immutable A mutable object can be changed after it\u2019s created, and an immutable object can\u2019t. bytearray, bytes and string # bytes and bytearray classes both hold arrays of bytes, where each byte can take on a value between 0 and 255. The primary difference is that a bytes object is immutable , meaning that once created, you cannot modify its elements. By contrast, a bytearray object allows you to modify its elements # create array with 10 bytes data = bytearray ( 10 ) b = bytes ( data ) >>> b b ' \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ' my_str = \"abcd\" >>> my_data = bytearray ( my_str , 'ascii' ) >>> my_data bytearray ( b 'abcd' ) >>> len ( my_data ) 4 >>> my_data = bytearray ( my_str , 'utf-16' ) >>> len ( my_data ) 10 more # >>> data = bytearray ([ 65 , 66 , 67 ]) >>> data bytearray ( b 'ABC' ) # show etch value as hex >>> [ hex ( c ) for c in data ] [ '0x41' , '0x42' , '0x43' ] # append >>> data . append ( 68 ) data bytearray ( b 'ABCD' ) # replace >>> data [ 1 : 3 ] = [ 0x62 , 0x63 ] >>> data bytearray ( b 'AbcD' ) # extend >>> data . extend ([ 0x45 , 0x46 ]) >>> data bytearray ( b 'AbcDEF' ) # extend >>> new_data = bytearray ( b \"GH\" ) >>> new_data bytearray ( b 'GH' ) >>> data + new_data bytearray ( b 'AbcDEFGH' )","title":"Bytearray"},{"location":"blog/Python/python/bytearray/#bytearray-bytes-and-string","text":"bytes and bytearray classes both hold arrays of bytes, where each byte can take on a value between 0 and 255. The primary difference is that a bytes object is immutable , meaning that once created, you cannot modify its elements. By contrast, a bytearray object allows you to modify its elements # create array with 10 bytes data = bytearray ( 10 ) b = bytes ( data ) >>> b b ' \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ' my_str = \"abcd\" >>> my_data = bytearray ( my_str , 'ascii' ) >>> my_data bytearray ( b 'abcd' ) >>> len ( my_data ) 4 >>> my_data = bytearray ( my_str , 'utf-16' ) >>> len ( my_data ) 10","title":"bytearray, bytes and string"},{"location":"blog/Python/python/bytearray/#more","text":">>> data = bytearray ([ 65 , 66 , 67 ]) >>> data bytearray ( b 'ABC' ) # show etch value as hex >>> [ hex ( c ) for c in data ] [ '0x41' , '0x42' , '0x43' ] # append >>> data . append ( 68 ) data bytearray ( b 'ABCD' ) # replace >>> data [ 1 : 3 ] = [ 0x62 , 0x63 ] >>> data bytearray ( b 'AbcD' ) # extend >>> data . extend ([ 0x45 , 0x46 ]) >>> data bytearray ( b 'AbcDEF' ) # extend >>> new_data = bytearray ( b \"GH\" ) >>> new_data bytearray ( b 'GH' ) >>> data + new_data bytearray ( b 'AbcDEFGH' )","title":"more"},{"location":"blog/Python/python/logging/","tags":["python"],"text":"Logging # Add Custom level Color log","title":"Python Logging"},{"location":"blog/Python/python/logging/#logging","text":"Add Custom level Color log","title":"Logging"},{"location":"blog/Python/python/logging/color_log_by_level/","tags":["python","logging"],"text":"Logging Formatting # Formatter enrich the log message by adding more information like: time, python file, logger name and more simple_formatter.py import logging FMT = \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" logging . basicConfig ( format = FMT , level = logging . INFO ) log = logging . getLogger ( \"demo\" ) log . info ( \"formatter example\" ) result 2022 -11-26 07 :10:35,660 - demo - INFO - formatter example name format desc asctime %(asctime)s time when the LogRecord was created name %(name)s Name of the logger used to log the call. levelname %(levelname)s Text logging level for the message (\u2018DEBUG\u2019, \u2018INFO\u2019, \u2018WARNING\u2019, \u2018ERROR\u2019, \u2018CRITICAL\u2019) message %(message)s The logged message, computed as msg % args Tip more log record attribute Custom formatter # Extend the logging.Formatter class and override the format method Color formatter Custom Level logging/color.py import logging FMT = \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" class CustomFormatter ( logging . Formatter ): GRAY = ' \\u001b [38;21m' BLUE = ' \\u001b [38;5;39m' YELLOW = ' \\u001b [38;5;226m' RED = ' \\u001b [38;5;196m' BOLD_RED = ' \\u001b [31;1m' __reset = ' \\u001b [0m' GREEN = \" \\u001b [32m\" MAGENTA = \" \\u001b [35m\" CYAN = \" \\u001b [36m\" BACKGROUND_RED = \" \\u001b [41m\" BACKGROUND_GREEN = \" \\u001b [42m\" def __init__ ( self , fmt ): super () . __init__ () self . fmt = fmt self . __color_formats = { logging . DEBUG : self . GRAY + self . fmt + self . __reset , logging . INFO : self . BLUE + self . fmt + self . __reset , logging . WARNING : self . YELLOW + self . fmt + self . __reset , logging . ERROR : self . RED + self . fmt + self . __reset , logging . CRITICAL : self . BOLD_RED + self . fmt + self . __reset , } def set_level_color ( self , level , color ): \"\"\" Color code: https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html \"\"\" self . __color_formats [ level ] = color + self . fmt + self . __reset def format ( self , record ): log_fmt = self . __color_formats . get ( record . levelno ) formatter = logging . Formatter ( log_fmt ) return formatter . format ( record ) logger = logging . getLogger ( __name__ ) logger . setLevel ( logging . DEBUG ) LOG_LEVEL_CLIENT = 21 logging . CLIENT = LOG_LEVEL_CLIENT logging . addLevelName ( logging . CLIENT , \"CLIENT\" ) logger = logging . getLogger ( \"color_logger\" ) logger . setLevel ( logging . DEBUG ) #create console handler and set level to debug handler = logging . StreamHandler () handler . setLevel ( logging . DEBUG ) color_formatter = CustomFormatter ( FMT ) color_formatter . set_level_color ( logging . CLIENT , CustomFormatter . BACKGROUND_GREEN ) handler . setFormatter ( color_formatter ) logger . addHandler ( handler ) # usage logger . debug ( 'This is a debug-level message' ) logger . info ( 'This is an info-level message' ) logger . warning ( 'This is a warning-level message' ) logger . error ( 'This is an error-level message' ) logger . critical ( 'This is a critical-level message' ) logger . log ( logging . CLIENT , \"this is client\" )","title":"Color log"},{"location":"blog/Python/python/logging/color_log_by_level/#logging-formatting","text":"Formatter enrich the log message by adding more information like: time, python file, logger name and more simple_formatter.py import logging FMT = \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" logging . basicConfig ( format = FMT , level = logging . INFO ) log = logging . getLogger ( \"demo\" ) log . info ( \"formatter example\" ) result 2022 -11-26 07 :10:35,660 - demo - INFO - formatter example name format desc asctime %(asctime)s time when the LogRecord was created name %(name)s Name of the logger used to log the call. levelname %(levelname)s Text logging level for the message (\u2018DEBUG\u2019, \u2018INFO\u2019, \u2018WARNING\u2019, \u2018ERROR\u2019, \u2018CRITICAL\u2019) message %(message)s The logged message, computed as msg % args Tip more log record attribute","title":"Logging Formatting"},{"location":"blog/Python/python/logging/color_log_by_level/#custom-formatter","text":"Extend the logging.Formatter class and override the format method Color formatter Custom Level logging/color.py import logging FMT = \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" class CustomFormatter ( logging . Formatter ): GRAY = ' \\u001b [38;21m' BLUE = ' \\u001b [38;5;39m' YELLOW = ' \\u001b [38;5;226m' RED = ' \\u001b [38;5;196m' BOLD_RED = ' \\u001b [31;1m' __reset = ' \\u001b [0m' GREEN = \" \\u001b [32m\" MAGENTA = \" \\u001b [35m\" CYAN = \" \\u001b [36m\" BACKGROUND_RED = \" \\u001b [41m\" BACKGROUND_GREEN = \" \\u001b [42m\" def __init__ ( self , fmt ): super () . __init__ () self . fmt = fmt self . __color_formats = { logging . DEBUG : self . GRAY + self . fmt + self . __reset , logging . INFO : self . BLUE + self . fmt + self . __reset , logging . WARNING : self . YELLOW + self . fmt + self . __reset , logging . ERROR : self . RED + self . fmt + self . __reset , logging . CRITICAL : self . BOLD_RED + self . fmt + self . __reset , } def set_level_color ( self , level , color ): \"\"\" Color code: https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html \"\"\" self . __color_formats [ level ] = color + self . fmt + self . __reset def format ( self , record ): log_fmt = self . __color_formats . get ( record . levelno ) formatter = logging . Formatter ( log_fmt ) return formatter . format ( record ) logger = logging . getLogger ( __name__ ) logger . setLevel ( logging . DEBUG ) LOG_LEVEL_CLIENT = 21 logging . CLIENT = LOG_LEVEL_CLIENT logging . addLevelName ( logging . CLIENT , \"CLIENT\" ) logger = logging . getLogger ( \"color_logger\" ) logger . setLevel ( logging . DEBUG ) #create console handler and set level to debug handler = logging . StreamHandler () handler . setLevel ( logging . DEBUG ) color_formatter = CustomFormatter ( FMT ) color_formatter . set_level_color ( logging . CLIENT , CustomFormatter . BACKGROUND_GREEN ) handler . setFormatter ( color_formatter ) logger . addHandler ( handler ) # usage logger . debug ( 'This is a debug-level message' ) logger . info ( 'This is an info-level message' ) logger . warning ( 'This is a warning-level message' ) logger . error ( 'This is an error-level message' ) logger . critical ( 'This is a critical-level message' ) logger . log ( logging . CLIENT , \"this is client\" )","title":"Custom formatter"},{"location":"blog/Python/python/logging/custom_level/","tags":["python","logging"],"text":"Python has six log levels with each one assigned a specific integer indicating the severity of the log: NOTSET=0 DEBUG=10 INFO=20 WARN=30 ERROR=40 CRITICAL=50 using setLevel method on logging and handlers we can control/filter the output logging severity Demo # custom_level.py import logging #create new log level LOG_LEVEL_CLIENT = 21 logging . CLIENT = LOG_LEVEL_CLIENT logging . addLevelName ( logging . CLIENT , \"CLIENT\" ) #create logger with \"mylogger\" logger = logging . getLogger ( \"mylogger\" ) logger . setLevel ( logging . DEBUG ) #create console handler and set level to debug handler = logging . StreamHandler () handler . setLevel ( logging . INFO ) logger . addHandler ( handler ) #create formatter formatter = logging . Formatter ( \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" ) handler . setFormatter ( formatter ) logger . debug ( \"this is debug\" ) logger . info ( \"this is info\" ) logger . log ( logging . CLIENT , \"this is client\" ) logger . warning ( \"this is warning\" ) logger . error ( \"this is error\" ) logger . critical ( \"this is critical\" ) Result 2022-11-26 06:44:19,616 - mylogger - INFO -this is info 2022-11-26 06:44:19,616 - mylogger - CLIENT -this is client 2022-11-26 06:44:19,616 - mylogger - WARNING -this is warning 2022-11-26 06:44:19,616 - mylogger - ERROR -this is error 2022-11-26 06:44:19,616 - mylogger - CRITICAL -this is critical setLevel The above example setLevel method set to severity output to Info No DEBUG logging is \u201cprint\u201d","title":"Add custom level"},{"location":"blog/Python/python/logging/custom_level/#demo","text":"custom_level.py import logging #create new log level LOG_LEVEL_CLIENT = 21 logging . CLIENT = LOG_LEVEL_CLIENT logging . addLevelName ( logging . CLIENT , \"CLIENT\" ) #create logger with \"mylogger\" logger = logging . getLogger ( \"mylogger\" ) logger . setLevel ( logging . DEBUG ) #create console handler and set level to debug handler = logging . StreamHandler () handler . setLevel ( logging . INFO ) logger . addHandler ( handler ) #create formatter formatter = logging . Formatter ( \" %(asctime)s - %(name)s - %(levelname)s - %(message)s \" ) handler . setFormatter ( formatter ) logger . debug ( \"this is debug\" ) logger . info ( \"this is info\" ) logger . log ( logging . CLIENT , \"this is client\" ) logger . warning ( \"this is warning\" ) logger . error ( \"this is error\" ) logger . critical ( \"this is critical\" ) Result 2022-11-26 06:44:19,616 - mylogger - INFO -this is info 2022-11-26 06:44:19,616 - mylogger - CLIENT -this is client 2022-11-26 06:44:19,616 - mylogger - WARNING -this is warning 2022-11-26 06:44:19,616 - mylogger - ERROR -this is error 2022-11-26 06:44:19,616 - mylogger - CRITICAL -this is critical setLevel The above example setLevel method set to severity output to Info No DEBUG logging is \u201cprint\u201d","title":"Demo"},{"location":"blog/Python/python/named_tuple/named_tuple/","tags":["python","tuple","namedtuple"],"text":"Basic usage # NameTuple from typing import NamedTuple class MyTuple ( NamedTuple ): id : int name : str t1 = MyTuple ( 1 , \"A\" ) t2 = MyTuple ( * ( 2 , \"B\" )) t3 = MyTuple ( ** { \"id\" : 3 , \"name\" : \"C\" }) t4 = MyTuple . _make ([ 4 , \"D\" ]) print ( t1 ) print ( t2 ) print ( t3 ) print ( t4 )","title":"Python NamedTuple 101"},{"location":"blog/Python/python/named_tuple/named_tuple/#basic-usage","text":"NameTuple from typing import NamedTuple class MyTuple ( NamedTuple ): id : int name : str t1 = MyTuple ( 1 , \"A\" ) t2 = MyTuple ( * ( 2 , \"B\" )) t3 = MyTuple ( ** { \"id\" : 3 , \"name\" : \"C\" }) t4 = MyTuple . _make ([ 4 , \"D\" ]) print ( t1 ) print ( t2 ) print ( t3 ) print ( t4 )","title":"Basic usage"},{"location":"blog/Python/zmq/","tags":["pyzmq"],"text":"Cookbook # ZMQ Req/Rep pattern with dataclass and msgpack","title":"PyZmq"},{"location":"blog/Python/zmq/#cookbook","text":"ZMQ Req/Rep pattern with dataclass and msgpack","title":"Cookbook"},{"location":"blog/Python/zmq/req_rep_msgpack/","tags":["python","zmq","msgpack"],"text":"ZMQ Req/Rep zmq pattern with dataclasses and msgpack install dependencies pip install msgpack pip install pyzmq req/rep import multiprocessing import logging from dataclasses import dataclass , asdict import msgpack import zmq FMT = \" %(asctime)s - %(lineno)s - %(levelname)s - %(message)s \" logging . basicConfig ( format = FMT , level = logging . INFO ) log = logging . getLogger ( __name__ ) TOPIC = b \"topic\" SERVICE_PORT = 5555 @dataclass class Data_Request : f_int : int f_float : float f_string : str @dataclass class Data_Response : success : bool def server (): context = zmq . Context () socket = context . socket ( zmq . REP ) socket . bind ( f \"tcp://*: { SERVICE_PORT } \" ) topic , data = socket . recv_multipart () msg = msgpack . unpackb ( data ) log . info ( f \"server get request: { msg } \" ) response = Data_Response ( success = True ) data = msgpack . packb ( asdict ( response )) socket . send ( data ) def client (): context = zmq . Context () socket = context . socket ( zmq . REQ ) socket . connect ( f \"tcp://127.0.0.1: { SERVICE_PORT } \" ) # Create request msg msg = Data_Request ( 1 , 2.0 , \"string\" ) raw = asdict ( msg ) data = msgpack . packb ( raw ) socket . send_multipart ([ TOPIC , data ]) # Recv response from server data = socket . recv () # unpack socket data raw = msgpack . unpackb ( data ) # Convert to msg msg = Data_Response ( ** raw ) log . info ( f \"server response: { msg . success } \" ) if __name__ == \"__main__\" : p_server = multiprocessing . Process ( target = server ) p_client = multiprocessing . Process ( target = client ) p_client . start () p_server . start () p_server . join () p_client . join ()","title":"Req/Rep zmq pattern with msgpack"},{"location":"blog/ROS2/","text":"CPP # Read news Python # Read news Launch # Ignition # Gazebo # books # A Concise Introduction to Robot Programming with ROS2 good sites # articulatedrobotics packages to check # YASMIN State machine gym-ignition workshop to do # ROS 2 Executor: How to make it efficient, real-time and deterministic?","title":"Index"},{"location":"blog/ROS2/#cpp","text":"Read news","title":" CPP"},{"location":"blog/ROS2/#python","text":"Read news","title":" Python"},{"location":"blog/ROS2/#launch","text":"","title":" Launch"},{"location":"blog/ROS2/#ignition","text":"","title":" Ignition"},{"location":"blog/ROS2/#gazebo","text":"","title":" Gazebo"},{"location":"blog/ROS2/#books","text":"A Concise Introduction to Robot Programming with ROS2","title":"books"},{"location":"blog/ROS2/#good-sites","text":"articulatedrobotics","title":"good sites"},{"location":"blog/ROS2/#packages-to-check","text":"YASMIN State machine gym-ignition","title":"packages to check"},{"location":"blog/ROS2/#workshop-to-do","text":"ROS 2 Executor: How to make it efficient, real-time and deterministic?","title":"workshop to do"},{"location":"blog/ROS2/cli/action/","tags":["action","cli"],"text":"Demo # ros2 run turtlesim turtlesim_node Check for actions # cli ros2 action list /turtle1/rotate_absolute # -t show action type ros2 action list -t /turtle1/rotate_absolute [ turtlesim/action/RotateAbsolute ] Show interface # ros2 interface show turtlesim/action/RotateAbsolute # Request: The desired heading in radians float32 theta --- # Result: The angular displacement in radians to the starting position float32 delta --- # Feedback: The remaining rotation in radians float32 remaining send goal # # ros2 action send_goal action_name action_type value # -f show feedback ros2 action send_goal -f /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: 1.575} Waiting for an action server to become available... Sending goal: theta: 1.575 Feedback: remaining: 1.5750000476837158 Goal accepted with ID: 8340924a5f1c4e75b36ae3d95f399429 Feedback: remaining: 1.559000015258789 ... Feedback: remaining: 0.007000088691711426 Result: delta: -1.5679999589920044 Goal finished with status: SUCCEEDED","title":"ROS2 action cli"},{"location":"blog/ROS2/cli/action/#demo","text":"ros2 run turtlesim turtlesim_node","title":"Demo"},{"location":"blog/ROS2/cli/action/#check-for-actions","text":"cli ros2 action list /turtle1/rotate_absolute # -t show action type ros2 action list -t /turtle1/rotate_absolute [ turtlesim/action/RotateAbsolute ]","title":"Check for actions"},{"location":"blog/ROS2/cli/action/#show-interface","text":"ros2 interface show turtlesim/action/RotateAbsolute # Request: The desired heading in radians float32 theta --- # Result: The angular displacement in radians to the starting position float32 delta --- # Feedback: The remaining rotation in radians float32 remaining","title":"Show interface"},{"location":"blog/ROS2/cli/action/#send-goal","text":"# ros2 action send_goal action_name action_type value # -f show feedback ros2 action send_goal -f /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: 1.575} Waiting for an action server to become available... Sending goal: theta: 1.575 Feedback: remaining: 1.5750000476837158 Goal accepted with ID: 8340924a5f1c4e75b36ae3d95f399429 Feedback: remaining: 1.559000015258789 ... Feedback: remaining: 0.007000088691711426 Result: delta: -1.5679999589920044 Goal finished with status: SUCCEEDED","title":"send goal"},{"location":"blog/ROS2/control2/","tags":["ros2","control2"],"text":"sudo apt install ros-humble-ros2-control sudo apt install ros-humble-ros2-controllers sudo apt install ros-humble-gazebo-ros2-control Demo usage # ros2 control list_hardware_interfaces ros2 run controller_manager spawner diff_cont ros2 run controller_manager spawner joint_broad bash terminal=\"teleop\" ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args -r /cmd_vel:=/diff_cont/cmd_vel_unstamped Resource # #12 - ros2_control Concept & Simulation Solving the problem EVERY robot has (with ros2_control)","title":"ROS2 Control_2"},{"location":"blog/ROS2/control2/#demo-usage","text":"ros2 control list_hardware_interfaces ros2 run controller_manager spawner diff_cont ros2 run controller_manager spawner joint_broad bash terminal=\"teleop\" ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args -r /cmd_vel:=/diff_cont/cmd_vel_unstamped","title":"Demo usage"},{"location":"blog/ROS2/control2/#resource","text":"#12 - ros2_control Concept & Simulation Solving the problem EVERY robot has (with ros2_control)","title":"Resource"},{"location":"blog/ROS2/cpp/","tags":["ros2","cpp"],"text":"tutorials debug ros2 node post to read # How to create a ROS2 library","title":"ROS2 CPP,"},{"location":"blog/ROS2/cpp/#post-to-read","text":"How to create a ROS2 library","title":"post to read"},{"location":"blog/ROS2/cpp/debug_with_gdb/","tags":["gdb","debug"],"text":"Debug ROS2 cpp node with gdb and gdbserver and vscode build # # set debug flag in CMake file set ( CMAKE_BUILD_TYPE Debug ) # set ( CMAKE_BUILD_TYPE RelWithDebInfo ) # or from cli colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = RelWithDebInfo Run # ros2 run --prefix 'gdb --args' package_name executable_name # example ros2 run --prefix 'gdb --args' cpp_demo_pkg oop_node_simple gdb command # layout next l b main VSCode # set VSCode and gdb as debug server ros2 run --prefix 'gdbserver localhost:3000' package_name executable_name # example ros2 run --prefix 'gdbserver localhost:3000' cpp_demo_pkg oop_node_simple vscode config # launch.json { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"C++ Debugger\" , \"request\" : \"launch\" , \"type\" : \"cppdbg\" , \"miDebuggerServerAddress\" : \"localhost:3000\" , \"cwd\" : \"/\" , \"program\" : \"[build-path-executable]\" } ] } Reference # How can I run ROS2 nodes in a debugger","title":"Debug ROS2 Node with GDB"},{"location":"blog/ROS2/cpp/debug_with_gdb/#build","text":"# set debug flag in CMake file set ( CMAKE_BUILD_TYPE Debug ) # set ( CMAKE_BUILD_TYPE RelWithDebInfo ) # or from cli colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = RelWithDebInfo","title":"build"},{"location":"blog/ROS2/cpp/debug_with_gdb/#run","text":"ros2 run --prefix 'gdb --args' package_name executable_name # example ros2 run --prefix 'gdb --args' cpp_demo_pkg oop_node_simple","title":"Run"},{"location":"blog/ROS2/cpp/debug_with_gdb/#gdb-command","text":"layout next l b main","title":"gdb command"},{"location":"blog/ROS2/cpp/debug_with_gdb/#vscode","text":"set VSCode and gdb as debug server ros2 run --prefix 'gdbserver localhost:3000' package_name executable_name # example ros2 run --prefix 'gdbserver localhost:3000' cpp_demo_pkg oop_node_simple","title":"VSCode"},{"location":"blog/ROS2/cpp/debug_with_gdb/#vscode-config","text":"launch.json { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"C++ Debugger\" , \"request\" : \"launch\" , \"type\" : \"cppdbg\" , \"miDebuggerServerAddress\" : \"localhost:3000\" , \"cwd\" : \"/\" , \"program\" : \"[build-path-executable]\" } ] }","title":"vscode config"},{"location":"blog/ROS2/cpp/debug_with_gdb/#reference","text":"How can I run ROS2 nodes in a debugger","title":"Reference"},{"location":"blog/ROS2/cpp/qos/","tags":["qos"],"text":"ROS 2 offers a rich variety of Quality of Service (QoS) policies that allow you to tune communication between nodes. A set of QoS \u201c policies \u201d combine to form a QoS \u201c profile \u201d. profile can be choose for given scenario (Sensor data for example)","title":"ROS2 QoS"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/","tags":["gtest","ros2"],"text":"LAB # Create GTest for ROS2 package Create ROS2 package as Library Project # my_cpp_library/ \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 my_cpp_library \u2502 \u2514\u2500\u2500 library_header.h \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main.cpp \u2502 \u2514\u2500\u2500 my_cpp_library.cpp \u2514\u2500\u2500 test \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 demo_test.cpp \u2514\u2500\u2500 main.cpp Library # include folder # my_cpp_library/include/my_cpp_library/library_header.h #pragma once namespace demo { int add ( int a , int b ); } src folder # my_cpp_library/src/my_cpp_library.cpp #include \"library_header.h\" namespace demo { int add ( int a , int b ){ return a + b ; } } my_cpp_library/src/main.cpp #include <iostream> #include \"library_header.h\" int main () { std :: cout << demo :: add ( 1 , 2 ) << std :: endl ; return 0 ; } test folder # my_cpp_library/test/main.cpp #include \"gtest/gtest.h\" int main ( int argc , char ** argv ) { :: testing :: InitGoogleTest ( & argc , argv ); return RUN_ALL_TESTS (); } demo_test.cpp #include \"gtest/gtest.h\" #include \"library_header.h\" TEST ( MyFirstTestSuite , DemoTest ) { EXPECT_TRUE ( true ); } TEST ( MyFirstTestSuite , AddTest ) { auto result = demo :: add ( 1 , 2 ); EXPECT_TRUE ( result == 3 ); } test/CMakeLists.txt if ( BUILD_TESTING ) find_package ( ament_cmake_gtest REQUIRED ) set ( TESTFILES main . cpp demo_test . cpp ) # Add gtest executables ament_add_gtest ( $ { PROJECT_NAME } _test $ { TESTFILES }) target_link_libraries ( $ { PROJECT_NAME } _test my_lib ) install ( TARGETS $ { PROJECT_NAME } _test DESTINATION lib / $ { PROJECT_NAME }) endif () package # CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( my_cpp_library ) set ( CMAKE_CXX_STANDARD 17 ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) include_directories ( include / my_cpp_library ) # Create library add_library ( my_lib src / my_cpp_library . cpp ) # main add_executable ( main src / main . cpp ) target_link_libraries ( main my_lib ) install ( TARGETS main DESTINATION lib / $ { PROJECT_NAME } / ) install ( TARGETS my_lib EXPORT my_lib LIBRARY DESTINATION lib ARCHIVE DESTINATION lib RUNTIME DESTINATION bin INCLUDES DESTINATION include ) add_subdirectory ( test ) ament_package () usage # build test test-result build # colcon build --package-select my_cpp_library test # # Run test colcon test --packages-select my_cpp_library # Run test with verbose output colcon test --packages-select my_cpp_library --event-handler = console_direct+ test-result # Show only result summery colcon test-result --test-result-base build/my_cpp_library","title":"ROS2 basic gtest"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#lab","text":"Create GTest for ROS2 package Create ROS2 package as Library","title":"LAB"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#project","text":"my_cpp_library/ \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 my_cpp_library \u2502 \u2514\u2500\u2500 library_header.h \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 main.cpp \u2502 \u2514\u2500\u2500 my_cpp_library.cpp \u2514\u2500\u2500 test \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 demo_test.cpp \u2514\u2500\u2500 main.cpp","title":"Project"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#library","text":"","title":"Library"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#include-folder","text":"my_cpp_library/include/my_cpp_library/library_header.h #pragma once namespace demo { int add ( int a , int b ); }","title":"include folder"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#src-folder","text":"my_cpp_library/src/my_cpp_library.cpp #include \"library_header.h\" namespace demo { int add ( int a , int b ){ return a + b ; } } my_cpp_library/src/main.cpp #include <iostream> #include \"library_header.h\" int main () { std :: cout << demo :: add ( 1 , 2 ) << std :: endl ; return 0 ; }","title":"src folder"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#test-folder","text":"my_cpp_library/test/main.cpp #include \"gtest/gtest.h\" int main ( int argc , char ** argv ) { :: testing :: InitGoogleTest ( & argc , argv ); return RUN_ALL_TESTS (); } demo_test.cpp #include \"gtest/gtest.h\" #include \"library_header.h\" TEST ( MyFirstTestSuite , DemoTest ) { EXPECT_TRUE ( true ); } TEST ( MyFirstTestSuite , AddTest ) { auto result = demo :: add ( 1 , 2 ); EXPECT_TRUE ( result == 3 ); } test/CMakeLists.txt if ( BUILD_TESTING ) find_package ( ament_cmake_gtest REQUIRED ) set ( TESTFILES main . cpp demo_test . cpp ) # Add gtest executables ament_add_gtest ( $ { PROJECT_NAME } _test $ { TESTFILES }) target_link_libraries ( $ { PROJECT_NAME } _test my_lib ) install ( TARGETS $ { PROJECT_NAME } _test DESTINATION lib / $ { PROJECT_NAME }) endif ()","title":"test folder"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#package","text":"CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( my_cpp_library ) set ( CMAKE_CXX_STANDARD 17 ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) include_directories ( include / my_cpp_library ) # Create library add_library ( my_lib src / my_cpp_library . cpp ) # main add_executable ( main src / main . cpp ) target_link_libraries ( main my_lib ) install ( TARGETS main DESTINATION lib / $ { PROJECT_NAME } / ) install ( TARGETS my_lib EXPORT my_lib LIBRARY DESTINATION lib ARCHIVE DESTINATION lib RUNTIME DESTINATION bin INCLUDES DESTINATION include ) add_subdirectory ( test ) ament_package ()","title":"package"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#usage","text":"build test test-result","title":"usage"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#build","text":"colcon build --package-select my_cpp_library","title":"build"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#test","text":"# Run test colcon test --packages-select my_cpp_library # Run test with verbose output colcon test --packages-select my_cpp_library --event-handler = console_direct+","title":"test"},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#test-result","text":"Show only result summery colcon test-result --test-result-base build/my_cpp_library","title":"test-result"},{"location":"blog/ROS2/cpp/intra-process/","tags":["tag"],"text":"Reference # Setting up efficient intra-process communication intra process demos source code","title":"intra-process"},{"location":"blog/ROS2/cpp/intra-process/#reference","text":"Setting up efficient intra-process communication intra process demos source code","title":"Reference"},{"location":"blog/ROS2/cpp/plugins/","tags":["ros2","plugins","cpp"],"text":"Reference # - Creating and using plugins (C++) - Package Summary","title":"plugins"},{"location":"blog/ROS2/cpp/plugins/#reference","text":"- Creating and using plugins (C++) - Package Summary","title":"Reference"},{"location":"blog/ROS2/cpp/tutorial/","tags":["ros2","cpp"],"text":"Tutorials # minimal: basic node","title":"ROS2 CPP Tutorial"},{"location":"blog/ROS2/cpp/tutorial/#tutorials","text":"minimal: basic node","title":"Tutorials"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/","tags":["msg"],"text":"LAB # Create and use custom msg Custom msg package # create pkg ros2 pkg create custom_interfaces --build-type ament_cmake \\ --dependencies rclcpp msg folder # create msg folder mkdir msg msg file # create txt file name Age.msg # more types float32 age cmake # Add rosidl_default_generators package add rosidl_generate_interfaces macro find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( $ { PROJECT_NAME } \"msg/Age.msg\" ) package.xml # Add the following lines to the package.xml file. <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> usage # Create publisher to pub the new msg cmake # find_package ( custom_interfaces REQUIRED ) # This is the package that contains the custom interface add_executable ( age_publisher_node src / publish_age . cpp ) ament_target_dependencies ( age_publisher_node rclcpp custom_interfaces ) install ( TARGETS age_publisher_node DESTINATION lib / $ { PROJECT_NAME } ) package.xml # Add depend for our new package <depend> custom_interfaces </depend> Reference # About ROS 2 interfaces","title":"ROS2 custom message"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#lab","text":"Create and use custom msg","title":"LAB"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#custom-msg-package","text":"create pkg ros2 pkg create custom_interfaces --build-type ament_cmake \\ --dependencies rclcpp msg folder # create msg folder mkdir msg msg file # create txt file name Age.msg # more types float32 age","title":"Custom msg package"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#cmake","text":"Add rosidl_default_generators package add rosidl_generate_interfaces macro find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( $ { PROJECT_NAME } \"msg/Age.msg\" )","title":"cmake"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#packagexml","text":"Add the following lines to the package.xml file. <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group>","title":"package.xml"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#usage","text":"Create publisher to pub the new msg","title":"usage"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#cmake_1","text":"find_package ( custom_interfaces REQUIRED ) # This is the package that contains the custom interface add_executable ( age_publisher_node src / publish_age . cpp ) ament_target_dependencies ( age_publisher_node rclcpp custom_interfaces ) install ( TARGETS age_publisher_node DESTINATION lib / $ { PROJECT_NAME } )","title":"cmake"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#packagexml_1","text":"Add depend for our new package <depend> custom_interfaces </depend>","title":"package.xml"},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#reference","text":"About ROS 2 interfaces","title":"Reference"},{"location":"blog/ROS2/cpp/tutorial/minimal/","tags":["cpp","node"],"text":"Create package # ros2 pkg create <package_name> --build-type ament_cmake --dependencies <package_dependencies> Minimal Node # minimal.cpp #include \"rclcpp/rclcpp.hpp\" class Minimal : rclcpp :: Node { public : Minimal () : Node ( \"Minimal\" ) { RCLCPP_INFO ( this -> get_logger (), \"hello minimal node\" ); } }; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto node = std :: make_shared < Minimal > (); rclcpp :: shutdown (); return 0 ; } CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( cpp_tutorial ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( fmt REQUIRED ) add_executable ( minimal src / minimal . cpp ) ament_target_dependencies ( minimal rclcpp fmt : fmt ) install ( TARGETS minimal DESTINATION lib / $ { PROJECT_NAME }) ament_package () copy/install binaries install(TARGETS <binary name/target> DESTINATION lib/${PROJECT_NAME} ) copy/install folders install(DIRECTORY launch DESTINATION share/${PROJECT_NAME} ) build # # from WS root folder colcon build --package-select <package name> usage # source install/setup.bash ros2 run cpp_tutorial minimal logging # Write log to file Write log file to file ROS2 Demo mkdir /tmp/ros_log export ROS_LOG_DIR = /tmp/ros_log ros2 run cpp_tutorial minimal","title":"Minimal ROS2 Node"},{"location":"blog/ROS2/cpp/tutorial/minimal/#create-package","text":"ros2 pkg create <package_name> --build-type ament_cmake --dependencies <package_dependencies>","title":"Create package"},{"location":"blog/ROS2/cpp/tutorial/minimal/#minimal-node","text":"minimal.cpp #include \"rclcpp/rclcpp.hpp\" class Minimal : rclcpp :: Node { public : Minimal () : Node ( \"Minimal\" ) { RCLCPP_INFO ( this -> get_logger (), \"hello minimal node\" ); } }; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto node = std :: make_shared < Minimal > (); rclcpp :: shutdown (); return 0 ; } CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( cpp_tutorial ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( fmt REQUIRED ) add_executable ( minimal src / minimal . cpp ) ament_target_dependencies ( minimal rclcpp fmt : fmt ) install ( TARGETS minimal DESTINATION lib / $ { PROJECT_NAME }) ament_package () copy/install binaries install(TARGETS <binary name/target> DESTINATION lib/${PROJECT_NAME} ) copy/install folders install(DIRECTORY launch DESTINATION share/${PROJECT_NAME} )","title":"Minimal Node"},{"location":"blog/ROS2/cpp/tutorial/minimal/#build","text":"# from WS root folder colcon build --package-select <package name>","title":"build"},{"location":"blog/ROS2/cpp/tutorial/minimal/#usage","text":"source install/setup.bash ros2 run cpp_tutorial minimal","title":"usage"},{"location":"blog/ROS2/cpp/tutorial/minimal/#logging","text":"Write log to file Write log file to file ROS2 Demo mkdir /tmp/ros_log export ROS_LOG_DIR = /tmp/ros_log ros2 run cpp_tutorial minimal","title":"logging"},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/","tags":["zero-copy","shm","fastdds"],"text":"ros2_shm_demo/ \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 msg \u2502 \u2514\u2500\u2500 ShmTopic.msg \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 src \u251c\u2500\u2500 listener.cpp \u2514\u2500\u2500 talker.cpp msg # ShmTopic.msg # A generic char array allows passing arbitrary data. # char [ 256 ] data uint8 size uint64 counter uint8 MAX_SIZE = 255 src # talker # talker.cpp #include <chrono> #include <cstring> #include <memory> #include <string> #include <utility> #include \"rclcpp/rclcpp.hpp\" #include \"ros2_shm_demo/msg/shm_topic.hpp\" using namespace std :: chrono_literals ; class Talker : public rclcpp :: Node { private : using Topic = ros2_shm_demo :: msg :: ShmTopic ; public : explicit Talker ( const rclcpp :: NodeOptions & options ) : Node ( \"shm_demo_talker\" , options ) { auto publishMessage = [ this ]() -> void { auto loanedMsg = m_publisher -> borrow_loaned_message (); populateLoanedMessage ( loanedMsg ); m_publisher -> publish ( std :: move ( loanedMsg )); m_count ++ ; }; rclcpp :: QoS qos ( rclcpp :: KeepLast ( 10 )); m_publisher = this -> create_publisher < Topic > ( \"chatter\" , qos ); m_timer = this -> create_wall_timer ( 1 s , publishMessage ); } private : uint64_t m_count = 1 ; rclcpp :: Publisher < Topic >:: SharedPtr m_publisher ; rclcpp :: TimerBase :: SharedPtr m_timer ; void populateLoanedMessage ( rclcpp :: LoanedMessage < Topic > & loanedMsg ) { Topic & msg = loanedMsg . get (); // Create the data. // In general this will not be constant. // Ideally we would create it in place but the ROS API does not allow // that. Therefore we need to copy it to the loaned message. std :: string payload { \"Hello World\" }; // We can track a quasi dynamic (bounded) size like this to avoid // copying more data than needed. msg . size = ( uint8_t ) std :: min ( payload . size (), ( size_t ) Topic :: MAX_SIZE ); msg . counter = m_count ; // Note that msg.data is a std::array generated by the IDL compiler std :: memcpy ( msg . data . data (), payload . data (), msg . size ); RCLCPP_INFO ( this -> get_logger (), \"Publishing %s %lu\" , payload . c_str (), msg . counter ); } }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: NodeOptions options ; rclcpp :: spin ( std :: make_shared < Talker > ( options )); rclcpp :: shutdown (); return 0 ; } listener # listener.cpp #include <cstring> #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"ros2_shm_demo/msg/shm_topic.hpp\" class Listener : public rclcpp :: Node { private : using Topic = ros2_shm_demo :: msg :: ShmTopic ; public : explicit Listener ( const rclcpp :: NodeOptions & options ) : Node ( \"shm_demo_listener\" , options ) { // subscription callback to process arriving data auto callback = [ this ]( const Topic :: SharedPtr msg ) -> void { // Read the message and perform operations accordingly. // Here we copy the data and display it. std :: memcpy ( m_lastData , msg -> data . data (), msg -> size ); m_lastData [ Topic :: MAX_SIZE ] = '\\0' ; // in case there was no zero termination RCLCPP_INFO ( this -> get_logger (), \"Received %s %lu\" , m_lastData , msg -> counter ); }; rclcpp :: QoS qos ( rclcpp :: KeepLast ( 10 )); m_subscription = create_subscription < Topic > ( \"chatter\" , qos , callback ); } private : rclcpp :: Subscription < Topic >:: SharedPtr m_subscription ; char m_lastData [ 256 ]; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: NodeOptions options ; rclcpp :: spin ( std :: make_shared < Listener > ( options )); rclcpp :: shutdown (); return 0 ; } CMakeLists # cmake_minimum_required ( VERSION 3.8 ) project ( ros2_shm_demo ) # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) find_package ( rclcpp REQUIRED ) include_directories ( include ) #msg set ( msg_files \"msg/ShmTopic.msg\" ) rosidl_generate_interfaces ( $ { PROJECT_NAME } $ { msg_files } ) ament_export_dependencies ( rosidl_default_runtime ) # talker add_executable ( talker src / talker . cpp ) ament_target_dependencies ( talker \"rclcpp\" ) rosidl_get_typesupport_target ( cpp_typesupport_target \"${PROJECT_NAME}\" \"rosidl_typesupport_cpp\" ) target_link_libraries ( talker $ { cpp_typesupport_target } ) install ( TARGETS talker DESTINATION lib / $ { PROJECT_NAME }) # listener add_executable ( listener src / listener . cpp ) ament_target_dependencies ( listener \"rclcpp\" ) rosidl_get_typesupport_target ( cpp_typesupport_target \"${PROJECT_NAME}\" \"rosidl_typesupport_cpp\" ) target_link_libraries ( listener $ { cpp_typesupport_target } ) install ( TARGETS listener DESTINATION lib / $ { PROJECT_NAME }) endif () ament_package ()","title":"zero copy shm fastdds"},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#msg","text":"ShmTopic.msg # A generic char array allows passing arbitrary data. # char [ 256 ] data uint8 size uint64 counter uint8 MAX_SIZE = 255","title":"msg"},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#src","text":"","title":"src"},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#talker","text":"talker.cpp #include <chrono> #include <cstring> #include <memory> #include <string> #include <utility> #include \"rclcpp/rclcpp.hpp\" #include \"ros2_shm_demo/msg/shm_topic.hpp\" using namespace std :: chrono_literals ; class Talker : public rclcpp :: Node { private : using Topic = ros2_shm_demo :: msg :: ShmTopic ; public : explicit Talker ( const rclcpp :: NodeOptions & options ) : Node ( \"shm_demo_talker\" , options ) { auto publishMessage = [ this ]() -> void { auto loanedMsg = m_publisher -> borrow_loaned_message (); populateLoanedMessage ( loanedMsg ); m_publisher -> publish ( std :: move ( loanedMsg )); m_count ++ ; }; rclcpp :: QoS qos ( rclcpp :: KeepLast ( 10 )); m_publisher = this -> create_publisher < Topic > ( \"chatter\" , qos ); m_timer = this -> create_wall_timer ( 1 s , publishMessage ); } private : uint64_t m_count = 1 ; rclcpp :: Publisher < Topic >:: SharedPtr m_publisher ; rclcpp :: TimerBase :: SharedPtr m_timer ; void populateLoanedMessage ( rclcpp :: LoanedMessage < Topic > & loanedMsg ) { Topic & msg = loanedMsg . get (); // Create the data. // In general this will not be constant. // Ideally we would create it in place but the ROS API does not allow // that. Therefore we need to copy it to the loaned message. std :: string payload { \"Hello World\" }; // We can track a quasi dynamic (bounded) size like this to avoid // copying more data than needed. msg . size = ( uint8_t ) std :: min ( payload . size (), ( size_t ) Topic :: MAX_SIZE ); msg . counter = m_count ; // Note that msg.data is a std::array generated by the IDL compiler std :: memcpy ( msg . data . data (), payload . data (), msg . size ); RCLCPP_INFO ( this -> get_logger (), \"Publishing %s %lu\" , payload . c_str (), msg . counter ); } }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: NodeOptions options ; rclcpp :: spin ( std :: make_shared < Talker > ( options )); rclcpp :: shutdown (); return 0 ; }","title":"talker"},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#listener","text":"listener.cpp #include <cstring> #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"ros2_shm_demo/msg/shm_topic.hpp\" class Listener : public rclcpp :: Node { private : using Topic = ros2_shm_demo :: msg :: ShmTopic ; public : explicit Listener ( const rclcpp :: NodeOptions & options ) : Node ( \"shm_demo_listener\" , options ) { // subscription callback to process arriving data auto callback = [ this ]( const Topic :: SharedPtr msg ) -> void { // Read the message and perform operations accordingly. // Here we copy the data and display it. std :: memcpy ( m_lastData , msg -> data . data (), msg -> size ); m_lastData [ Topic :: MAX_SIZE ] = '\\0' ; // in case there was no zero termination RCLCPP_INFO ( this -> get_logger (), \"Received %s %lu\" , m_lastData , msg -> counter ); }; rclcpp :: QoS qos ( rclcpp :: KeepLast ( 10 )); m_subscription = create_subscription < Topic > ( \"chatter\" , qos , callback ); } private : rclcpp :: Subscription < Topic >:: SharedPtr m_subscription ; char m_lastData [ 256 ]; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: NodeOptions options ; rclcpp :: spin ( std :: make_shared < Listener > ( options )); rclcpp :: shutdown (); return 0 ; }","title":"listener"},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#cmakelists","text":"cmake_minimum_required ( VERSION 3.8 ) project ( ros2_shm_demo ) # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) find_package ( rclcpp REQUIRED ) include_directories ( include ) #msg set ( msg_files \"msg/ShmTopic.msg\" ) rosidl_generate_interfaces ( $ { PROJECT_NAME } $ { msg_files } ) ament_export_dependencies ( rosidl_default_runtime ) # talker add_executable ( talker src / talker . cpp ) ament_target_dependencies ( talker \"rclcpp\" ) rosidl_get_typesupport_target ( cpp_typesupport_target \"${PROJECT_NAME}\" \"rosidl_typesupport_cpp\" ) target_link_libraries ( talker $ { cpp_typesupport_target } ) install ( TARGETS talker DESTINATION lib / $ { PROJECT_NAME }) # listener add_executable ( listener src / listener . cpp ) ament_target_dependencies ( listener \"rclcpp\" ) rosidl_get_typesupport_target ( cpp_typesupport_target \"${PROJECT_NAME}\" \"rosidl_typesupport_cpp\" ) target_link_libraries ( listener $ { cpp_typesupport_target } ) install ( TARGETS listener DESTINATION lib / $ { PROJECT_NAME }) endif () ament_package ()","title":"CMakeLists"},{"location":"blog/ROS2/demos/","tags":["ros2"],"text":"Demos # Mix Cpp and Python in same pkg","title":"ROS2 demos and tips"},{"location":"blog/ROS2/demos/#demos","text":"Mix Cpp and Python in same pkg","title":"Demos"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/","tags":["ros2"],"text":"Objective # Create pkg with python and cpp code Project # Create new pkg cmake_ament Add python src folder name like the package name Add __init__.py file to mark this folder as a python package mix_pkg \u2502 \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 mix_pkg \u251c\u2500\u2500 mix_pkg \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 simple_sub.py \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 src \u2514\u2500\u2500 simple_pub.cpp CMake # The pkg is a standard cmake pkg with python support Add ament_cmake_python package to use Use ament_python_install_package macro from this pkg to install the python files Copy the python scripts to pkg `install<project_name>lib folder cmake_minimum_required ( VERSION 3.8 ) project ( mix_pkg ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () find_package ( ament_cmake REQUIRED ) find_package ( ament_cmake_python REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( rclpy REQUIRED ) find_package ( std_msgs REQUIRED ) add_executable ( simple_pub src / simple_pub . cpp ) ament_target_dependencies ( simple_pub rclcpp std_msgs ) # Install Cpp executables install ( TARGETS simple_pub DESTINATION lib / $ { PROJECT_NAME } ) # Install Python modules ament_python_install_package ( $ { PROJECT_NAME }) # Install Python executables install ( PROGRAMS mix_pkg / simple_sub . py DESTINATION lib / $ { PROJECT_NAME } ) ament_package () package.xml # Add build and other dependencies <buildtool_depend> ament_cmake </buildtool_depend> <buildtool_depend> ament_cmake_python </buildtool_depend> <depend> rclcpp </depend> <depend> rclpy </depend> code # mix_pkg/simple_sub.py #!/usr/bin/env python3 import rclpy from rclpy.node import Node from std_msgs.msg import String class SimpleSub ( Node ): def __init__ ( self ): super () . __init__ ( \"simple_sub_py\" ) self . subscription = self . create_subscription ( String , \"topic\" , self . listener_callback , 10 ) self . subscription def listener_callback ( self , msg ): self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) def main ( args = None ): rclpy . init ( args = args ) node = SimpleSub () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () src/simple_pub.cpp #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; class SimplePublisher : public rclcpp :: Node { public : SimplePublisher () : Node ( \"simple_cpp_pub\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & SimplePublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } private : rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < SimplePublisher > ()); rclcpp :: shutdown (); return 0 ; } Build and usage # Warning cmake_python_ament set the Python permission script under install/lib/ If we build the package with --symlink-install no permission has set usage # terminal 1 ros2 run mix_pkg simple_pub terminal 2 ros2 run mix_pkg simple_sub.py Note Run the python node with the py extension Reference # ament_cmake_python","title":"ROS2 pkg with python and cpp"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#objective","text":"Create pkg with python and cpp code","title":"Objective"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#project","text":"Create new pkg cmake_ament Add python src folder name like the package name Add __init__.py file to mark this folder as a python package mix_pkg \u2502 \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 include \u2502 \u2514\u2500\u2500 mix_pkg \u251c\u2500\u2500 mix_pkg \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 simple_sub.py \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 src \u2514\u2500\u2500 simple_pub.cpp","title":"Project"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#cmake","text":"The pkg is a standard cmake pkg with python support Add ament_cmake_python package to use Use ament_python_install_package macro from this pkg to install the python files Copy the python scripts to pkg `install<project_name>lib folder cmake_minimum_required ( VERSION 3.8 ) project ( mix_pkg ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () find_package ( ament_cmake REQUIRED ) find_package ( ament_cmake_python REQUIRED ) find_package ( rclcpp REQUIRED ) find_package ( rclpy REQUIRED ) find_package ( std_msgs REQUIRED ) add_executable ( simple_pub src / simple_pub . cpp ) ament_target_dependencies ( simple_pub rclcpp std_msgs ) # Install Cpp executables install ( TARGETS simple_pub DESTINATION lib / $ { PROJECT_NAME } ) # Install Python modules ament_python_install_package ( $ { PROJECT_NAME }) # Install Python executables install ( PROGRAMS mix_pkg / simple_sub . py DESTINATION lib / $ { PROJECT_NAME } ) ament_package ()","title":"CMake"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#packagexml","text":"Add build and other dependencies <buildtool_depend> ament_cmake </buildtool_depend> <buildtool_depend> ament_cmake_python </buildtool_depend> <depend> rclcpp </depend> <depend> rclpy </depend>","title":"package.xml"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#code","text":"mix_pkg/simple_sub.py #!/usr/bin/env python3 import rclpy from rclpy.node import Node from std_msgs.msg import String class SimpleSub ( Node ): def __init__ ( self ): super () . __init__ ( \"simple_sub_py\" ) self . subscription = self . create_subscription ( String , \"topic\" , self . listener_callback , 10 ) self . subscription def listener_callback ( self , msg ): self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) def main ( args = None ): rclpy . init ( args = args ) node = SimpleSub () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () src/simple_pub.cpp #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; class SimplePublisher : public rclcpp :: Node { public : SimplePublisher () : Node ( \"simple_cpp_pub\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & SimplePublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } private : rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < SimplePublisher > ()); rclcpp :: shutdown (); return 0 ; }","title":"code"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#build-and-usage","text":"Warning cmake_python_ament set the Python permission script under install/lib/ If we build the package with --symlink-install no permission has set","title":"Build and usage"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#usage","text":"terminal 1 ros2 run mix_pkg simple_pub terminal 2 ros2 run mix_pkg simple_sub.py Note Run the python node with the py extension","title":"usage"},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#reference","text":"ament_cmake_python","title":"Reference"},{"location":"blog/ROS2/demos/bug0/","tags":["ros2","algorithm"],"text":"The Bug0 Algorithm is an autonomous navigation algorithm that uses only the sensor\u2019s data without any map. The algorithm has basically two different behaviors: Behavior 1 : Head to goal Behavior 2 : Follow the obstacle Behavior 1 # Reference # BUG Algorithm Application","title":"BUG0 Algorithm"},{"location":"blog/ROS2/demos/bug0/#behavior-1","text":"","title":"Behavior 1"},{"location":"blog/ROS2/demos/bug0/#reference","text":"BUG Algorithm Application","title":"Reference"},{"location":"blog/ROS2/demos/camera_calibration/","tags":["calibration"],"text":"Dependencies # sudo apt install ros-humble-usb-cam camera_calibration pkg from image-pipeline repository Checkerboard # 9*6 Checkerboard Count 9 (brown) Count 6 (blue) calibrate # Run video source Run calibration Node usb camera ros2 run usb_cam usb_cam_node_exe --ros-args \\ -p video_device: = /dev/video4 \\ -p image_width: = 800 \\ -p image_height: = 600 bash title=\"calibration node\" run camera_calibration cameracalibrator \\ --size 8x6 \\ --square 0.03 \\ --ros-args -r image:=image_raw save data to /tmp/calibrationdata.tar.gz Resource # checkerboard-collection calibration tutorial","title":"ROS2 camera calibration"},{"location":"blog/ROS2/demos/camera_calibration/#dependencies","text":"sudo apt install ros-humble-usb-cam camera_calibration pkg from image-pipeline repository","title":"Dependencies"},{"location":"blog/ROS2/demos/camera_calibration/#checkerboard","text":"9*6 Checkerboard Count 9 (brown) Count 6 (blue)","title":"Checkerboard"},{"location":"blog/ROS2/demos/camera_calibration/#calibrate","text":"Run video source Run calibration Node usb camera ros2 run usb_cam usb_cam_node_exe --ros-args \\ -p video_device: = /dev/video4 \\ -p image_width: = 800 \\ -p image_height: = 600 bash title=\"calibration node\" run camera_calibration cameracalibrator \\ --size 8x6 \\ --square 0.03 \\ --ros-args -r image:=image_raw save data to /tmp/calibrationdata.tar.gz","title":"calibrate"},{"location":"blog/ROS2/demos/camera_calibration/#resource","text":"checkerboard-collection calibration tutorial","title":"Resource"},{"location":"blog/ROS2/demos/diff_drive/","tags":["diff"],"text":"Reference # Igt One move from here c++ and python pkg dolly ardupilot","title":"diff drive ignition and ros2"},{"location":"blog/ROS2/demos/diff_drive/#reference","text":"Igt One move from here c++ and python pkg dolly ardupilot","title":"Reference"},{"location":"blog/ROS2/demos/pid/","tags":["ros2","pid"],"text":"Reference # rocketbot","title":"PID Implementation"},{"location":"blog/ROS2/demos/pid/#reference","text":"rocketbot","title":"Reference"},{"location":"blog/ROS2/dev_environment/","tags":["ros2","dev"],"text":"linters VSCode # - # Reference # Autoware.Auto guides Code style and language versions","title":"ROS2 developer environment settings"},{"location":"blog/ROS2/dev_environment/#vscode","text":"","title":"VSCode"},{"location":"blog/ROS2/dev_environment/#-","text":"","title":"-"},{"location":"blog/ROS2/dev_environment/#reference","text":"Autoware.Auto guides Code style and language versions","title":"Reference"},{"location":"blog/ROS2/dev_environment/colcon/","tags":["ros2","colcon"],"text":"Colcon # colcon is a command line tool to improve the workflow of building, testing and using multiple software packages. It automates the process, handles the ordering and sets up the environment to use the packages. Build tools # Build tools are programs that automate the creation of executable applications from source code - Compiling - Linking - Packaging Build system # Repeatable: ensure that that the project is built exactly the same way every time it builds Reproducible: easily recreate (reproduce) the steps that are required to perform a build Standard ensure that all of your projects follow the same steps and implement best practices Note Make Ninja Generator # CMake: create build system for specific O.S or system Meta build # Install # sudo apt install python3-colcon-common-extensions Usage # In the root of the workspace run colcon build References # ROS2 foxy Using colcon to build packages\uf0c1","title":"Colcon build system"},{"location":"blog/ROS2/dev_environment/colcon/#colcon","text":"colcon is a command line tool to improve the workflow of building, testing and using multiple software packages. It automates the process, handles the ordering and sets up the environment to use the packages.","title":"Colcon"},{"location":"blog/ROS2/dev_environment/colcon/#build-tools","text":"Build tools are programs that automate the creation of executable applications from source code - Compiling - Linking - Packaging","title":"Build tools"},{"location":"blog/ROS2/dev_environment/colcon/#build-system","text":"Repeatable: ensure that that the project is built exactly the same way every time it builds Reproducible: easily recreate (reproduce) the steps that are required to perform a build Standard ensure that all of your projects follow the same steps and implement best practices Note Make Ninja","title":"Build system"},{"location":"blog/ROS2/dev_environment/colcon/#generator","text":"CMake: create build system for specific O.S or system","title":"Generator"},{"location":"blog/ROS2/dev_environment/colcon/#meta-build","text":"","title":"Meta build"},{"location":"blog/ROS2/dev_environment/colcon/#install","text":"sudo apt install python3-colcon-common-extensions","title":"Install"},{"location":"blog/ROS2/dev_environment/colcon/#usage","text":"In the root of the workspace run colcon build","title":"Usage"},{"location":"blog/ROS2/dev_environment/colcon/#references","text":"ROS2 foxy Using colcon to build packages\uf0c1","title":"References"},{"location":"blog/ROS2/dev_environment/colcon/colcon_cd/","tags":["ros2","colcon_cd"],"text":"A shell function for colcon-core to change the current working directory Note colcon_cd search pkg from current directory tree install and setup # apt sudo apt install python3-colcon-common-extensions setup Add ` colcon_cd ` to ` .bashrc ` # debian install echo 'source /usr/share/colcon_cd/function/colcon_cd.sh' >> ~/.bashrc","title":"Colcon_cd"},{"location":"blog/ROS2/dev_environment/colcon/colcon_cd/#install-and-setup","text":"apt sudo apt install python3-colcon-common-extensions setup Add ` colcon_cd ` to ` .bashrc ` # debian install echo 'source /usr/share/colcon_cd/function/colcon_cd.sh' >> ~/.bashrc","title":"install and setup"},{"location":"blog/ROS2/dev_environment/linters/","tags":["ros2","linter"],"text":"Lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs cpp # ament_cmake_clang_format python # ament_mypy","title":"linters"},{"location":"blog/ROS2/dev_environment/linters/#cpp","text":"ament_cmake_clang_format","title":"cpp"},{"location":"blog/ROS2/dev_environment/linters/#python","text":"ament_mypy","title":"python"},{"location":"blog/ROS2/dev_environment/linters/cpp/ament_cmake_clang_format/","tags":["ros2","linter"],"text":"ament_cmake_clang_format # Checks the code style of C / C++ source files using ClangFormat install # sudo apt install ros-humble-ament-cmake-clang-format usage # CMakeLists settings package.xml cli commands CMakeLists.txt if ( BUILD_TESTING ) find_package ( ament_lint_auto REQUIRED ) ament_lint_auto_find_test_dependencies () endif () ament_lint_auto_find_test_dependencies function search for linter\u2019s in package.xml package.xml <test_depend> ament_lint_auto </test_depend> <test_depend> ament_cmake_clang_format </test_depend> # build colcon build --packages-select cpp_tutrial_pkg # run test / linters colcon test --packages-select cpp_tutrial_pkg # show test results colcon test-result colcon test-result --verbose # run the linter directly ament_clang_format src/tutorials/cpp_tutrial_pkg/ # fix the problem's ament_clang_format src/tutorials/cpp_tutrial_pkg/ --reformat # run colcon test again, no errors colcon test --packages-select cpp_tutrial_pkg # show test results, no errors colcon test-result clear test result test_result colcon test-result --delete","title":"ament cmake clang format"},{"location":"blog/ROS2/dev_environment/linters/cpp/ament_cmake_clang_format/#ament_cmake_clang_format","text":"Checks the code style of C / C++ source files using ClangFormat","title":"ament_cmake_clang_format"},{"location":"blog/ROS2/dev_environment/linters/cpp/ament_cmake_clang_format/#install","text":"sudo apt install ros-humble-ament-cmake-clang-format","title":"install"},{"location":"blog/ROS2/dev_environment/linters/cpp/ament_cmake_clang_format/#usage","text":"CMakeLists settings package.xml cli commands CMakeLists.txt if ( BUILD_TESTING ) find_package ( ament_lint_auto REQUIRED ) ament_lint_auto_find_test_dependencies () endif () ament_lint_auto_find_test_dependencies function search for linter\u2019s in package.xml package.xml <test_depend> ament_lint_auto </test_depend> <test_depend> ament_cmake_clang_format </test_depend> # build colcon build --packages-select cpp_tutrial_pkg # run test / linters colcon test --packages-select cpp_tutrial_pkg # show test results colcon test-result colcon test-result --verbose # run the linter directly ament_clang_format src/tutorials/cpp_tutrial_pkg/ # fix the problem's ament_clang_format src/tutorials/cpp_tutrial_pkg/ --reformat # run colcon test again, no errors colcon test --packages-select cpp_tutrial_pkg # show test results, no errors colcon test-result clear test result test_result colcon test-result --delete","title":"usage"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/","tags":["linter","ros2"],"text":"install # sudo apt install ros-humble-ament-cmake-mypy usage # cmake if using cmake check Linting ROS 2 Packages with mypy in reference Add testcase to test folder config setup.py setup.py # Add / Edit line tests_require = [ 'pytest' ] TestCase # test_mypy.py from ament_mypy.main import main import pytest @pytest . mark . mypy @pytest . mark . linter def test_mypy (): rc = main () assert rc == 0 , 'Found code style errors / warnings' Run # colcon test --packages-select <YOUR_PACKAGE> --event-handlers console_direct+ # Reference # Linting ROS 2 Packages with mypy","title":"ament_mypy"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#install","text":"sudo apt install ros-humble-ament-cmake-mypy","title":"install"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#usage","text":"cmake if using cmake check Linting ROS 2 Packages with mypy in reference Add testcase to test folder config setup.py","title":"usage"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#setuppy","text":"Add / Edit line tests_require = [ 'pytest' ]","title":"setup.py"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#testcase","text":"test_mypy.py from ament_mypy.main import main import pytest @pytest . mark . mypy @pytest . mark . linter def test_mypy (): rc = main () assert rc == 0 , 'Found code style errors / warnings'","title":"TestCase"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#run","text":"","title":"Run"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#colcon-test---packages-select-your_package---event-handlers-console_direct","text":"","title":"colcon test --packages-select &lt;YOUR_PACKAGE&gt; --event-handlers console_direct+\n"},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#reference","text":"Linting ROS 2 Packages with mypy","title":"Reference"},{"location":"blog/ROS2/dev_environment/vscode/","tags":["ros2","vscode"],"text":"files.associations # \"files.associations\" : { \"*.xacro\" : \"xml\" , \"model.config\" : \"xml\" , \"*.world\" : \"xml\" , \"*.sdf\" : \"xml\" , \"*.gazebo\" : \"xml\" } keyboard settings # .config/Code/User/keybindings.json { \"key\" : \"ctrl+n\" , \"command\" : \"explorer.newFile\" , \"when\" : \"explorerViewletFocus\" }, { \"key\" : \"ctrl+shift+n\" , \"command\" : \"explorer.newFolder\" , \"when\" : \"explorerViewletFocus\" } Extensions # xml red hat ext install redhat.vscode-xml","title":"ROS2 VSCode settings, Extensions and tips"},{"location":"blog/ROS2/dev_environment/vscode/#filesassociations","text":"\"files.associations\" : { \"*.xacro\" : \"xml\" , \"model.config\" : \"xml\" , \"*.world\" : \"xml\" , \"*.sdf\" : \"xml\" , \"*.gazebo\" : \"xml\" }","title":"files.associations"},{"location":"blog/ROS2/dev_environment/vscode/#keyboard-settings","text":".config/Code/User/keybindings.json { \"key\" : \"ctrl+n\" , \"command\" : \"explorer.newFile\" , \"when\" : \"explorerViewletFocus\" }, { \"key\" : \"ctrl+shift+n\" , \"command\" : \"explorer.newFolder\" , \"when\" : \"explorerViewletFocus\" }","title":"keyboard settings"},{"location":"blog/ROS2/dev_environment/vscode/#extensions","text":"xml red hat ext install redhat.vscode-xml","title":"Extensions"},{"location":"blog/ROS2/dev_environment/vscode/tips/","tags":["ros2","vscode","tips"],"text":"python intellisense # Specifies extra search paths for import resolution. Accepts paths specified as strings and separated by commas \"python.analysis.extraPaths\" : []","title":"ROS2 VSCode tips"},{"location":"blog/ROS2/dev_environment/vscode/tips/#python-intellisense","text":"Specifies extra search paths for import resolution. Accepts paths specified as strings and separated by commas \"python.analysis.extraPaths\" : []","title":"python intellisense"},{"location":"blog/ROS2/eco/PlotJuggler/","tags":["ros2","plot","visualization","debugging"],"text":"install # sudo apt install ros-humble-plotjuggler-ros github # https://github.com/facontidavide/PlotJuggler","title":"PlotJuggler"},{"location":"blog/ROS2/eco/PlotJuggler/#install","text":"sudo apt install ros-humble-plotjuggler-ros","title":"install"},{"location":"blog/ROS2/eco/PlotJuggler/#github","text":"https://github.com/facontidavide/PlotJuggler","title":"github"},{"location":"blog/ROS2/eco/diagnostic/","tags":["diagnostic"],"text":"ROS diagnostics gives you the ability to monitor your system. There are two components in its architecture: - updater - aggregator The updater publishes diagnostic status messages on the /diagnostics topic, and the aggregator listens to these statuses, aggregates them, and publishes the results on the /diagnostics_agg topic. A system can have multiple updaters. They are meant to communicate with devices such as motors, sensors, computers, batteries, etc, in order to retrieve and publish relevant status data. The information being published on the /diagnostics topic is flat The aggregator collects, categorizes, and groups the statuses from all the system components. You can take a look at what is being published on the /diagnostics and /diagnostics_agg topics with the rqt_runtime_monitor and rqt_robot_monitor tools task # analyzers # install sudo apt install ros-humble-rqt-robot-monitor sudo apt install ros-humble-rqt-runtime-monitor Reference # REP-107 Diagnostic System for Robots Running ROS ros diagnostic wiki python example","title":"ROS2 diagnostic package"},{"location":"blog/ROS2/eco/diagnostic/#task","text":"","title":"task"},{"location":"blog/ROS2/eco/diagnostic/#analyzers","text":"install sudo apt install ros-humble-rqt-robot-monitor sudo apt install ros-humble-rqt-runtime-monitor","title":"analyzers"},{"location":"blog/ROS2/eco/diagnostic/#reference","text":"REP-107 Diagnostic System for Robots Running ROS ros diagnostic wiki python example","title":"Reference"},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/","tags":["ros2","diagnostics","tutorials"],"text":"LAB # Write simple node Add diagnostic task to monitor node state Add diagnostic updater and bind the task Add diagnostic aggregator Show/Monitor diagnostics data Node # gps_node import threading import rclpy from rclpy.node import Node from diagnostic_updater import ( Updater , DiagnosticTask ) from diagnostic_msgs.msg import DiagnosticStatus TIMER_INTERVAL = 2 class StateTask ( DiagnosticTask ): def __init__ ( self , name ): super () . __init__ ( name ) self . state = False def run ( self , stat ): if self . state : level = DiagnosticStatus . OK msg = \"RUNNING\" else : level = DiagnosticStatus . ERROR msg = \"BROKEN\" stat . summary ( level , msg ) return stat class GpsNode ( Node ): def __init__ ( self ): super () . __init__ ( \"GPS_NODE\" ) self . diag_updater = Updater ( self ) self . diag_updater . setHardwareID ( \"gps\" ) self . state_task = StateTask ( \"GPS_TASK\" ) self . diag_updater . add ( self . state_task ) self . create_timer ( TIMER_INTERVAL , self . timer_handler ) def timer_handler ( self ): self . state_task . state = not self . state_task . state def main ( args = None ): rclpy . init ( args = args ) node = GpsNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () Aggregator config # qrt_runtime_monitor config analyzers : ros__parameters : path : Sensors primary : type : 'diagnostic_aggregator/AnalyzerGroup' path : Demo_group analyzers : primary : type : 'diagnostic_aggregator/GenericAnalyzer' path : gps startswith : [ 'GPS' ] launch # launch import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node from launch.actions import ExecuteProcess def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'pkg_python_tutorial' ), 'config' , 'group_diag.yaml' ) gps_node = Node ( package = \"pkg_python_tutorial\" , executable = \"gps_node\" ) agg_node = ExecuteProcess ( cmd = [ \"ros2\" , \"run\" , \"diagnostic_aggregator\" , \"aggregator_node\" , \"--ros-args\" , \"--params-file\" , config ], name = 'aggregator_node' , emulate_tty = True , output = 'screen' ) robot_monitor = Node ( package = \"rqt_robot_monitor\" , executable = \"rqt_robot_monitor\" ) runtime_monitor = Node ( package = \"rqt_runtime_monitor\" , executable = \"rqt_runtime_monitor\" ) ld . add_action ( gps_node ) ld . add_action ( agg_node ) ld . add_action ( robot_monitor ) ld . add_action ( runtime_monitor ) return ld Show Diagnostics with - rqt_runtime_monitor (right) - rqt_robot_monitor (left)","title":"simple diagnostics demo"},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/#lab","text":"Write simple node Add diagnostic task to monitor node state Add diagnostic updater and bind the task Add diagnostic aggregator Show/Monitor diagnostics data","title":"LAB"},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/#node","text":"gps_node import threading import rclpy from rclpy.node import Node from diagnostic_updater import ( Updater , DiagnosticTask ) from diagnostic_msgs.msg import DiagnosticStatus TIMER_INTERVAL = 2 class StateTask ( DiagnosticTask ): def __init__ ( self , name ): super () . __init__ ( name ) self . state = False def run ( self , stat ): if self . state : level = DiagnosticStatus . OK msg = \"RUNNING\" else : level = DiagnosticStatus . ERROR msg = \"BROKEN\" stat . summary ( level , msg ) return stat class GpsNode ( Node ): def __init__ ( self ): super () . __init__ ( \"GPS_NODE\" ) self . diag_updater = Updater ( self ) self . diag_updater . setHardwareID ( \"gps\" ) self . state_task = StateTask ( \"GPS_TASK\" ) self . diag_updater . add ( self . state_task ) self . create_timer ( TIMER_INTERVAL , self . timer_handler ) def timer_handler ( self ): self . state_task . state = not self . state_task . state def main ( args = None ): rclpy . init ( args = args ) node = GpsNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"Node"},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/#aggregator-config","text":"qrt_runtime_monitor config analyzers : ros__parameters : path : Sensors primary : type : 'diagnostic_aggregator/AnalyzerGroup' path : Demo_group analyzers : primary : type : 'diagnostic_aggregator/GenericAnalyzer' path : gps startswith : [ 'GPS' ]","title":"Aggregator config"},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/#launch","text":"launch import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node from launch.actions import ExecuteProcess def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'pkg_python_tutorial' ), 'config' , 'group_diag.yaml' ) gps_node = Node ( package = \"pkg_python_tutorial\" , executable = \"gps_node\" ) agg_node = ExecuteProcess ( cmd = [ \"ros2\" , \"run\" , \"diagnostic_aggregator\" , \"aggregator_node\" , \"--ros-args\" , \"--params-file\" , config ], name = 'aggregator_node' , emulate_tty = True , output = 'screen' ) robot_monitor = Node ( package = \"rqt_robot_monitor\" , executable = \"rqt_robot_monitor\" ) runtime_monitor = Node ( package = \"rqt_runtime_monitor\" , executable = \"rqt_runtime_monitor\" ) ld . add_action ( gps_node ) ld . add_action ( agg_node ) ld . add_action ( robot_monitor ) ld . add_action ( runtime_monitor ) return ld Show Diagnostics with - rqt_runtime_monitor (right) - rqt_robot_monitor (left)","title":"launch"},{"location":"blog/ROS2/eco/foxglove/","tags":["ros2","visualization","debugging"],"text":"","title":"Foxglove hello"},{"location":"blog/ROS2/eco/images_and_video/gstreamer/","tags":["ros2","gst","gstreamer"],"text":"ROS2 package originally developed by the Brown Robotics Lab for broadcasting any GStreamer video stream via image transport install sudo apt install ros-humble-gscam","title":"ROS2 GStreamer"},{"location":"blog/ROS2/eco/linear_algebra/","tags":["math"],"text":"Utils # python # Transforms3d # This package is a collection of Python functions and classes to create and convert 3-dimensional transformations such as rotations, zooms, shears and reflections \u2026 pip install transforms3d Reference # transformations Rotation Conversion Tool","title":"Linear algebra refreshment and utils"},{"location":"blog/ROS2/eco/linear_algebra/#utils","text":"","title":"Utils"},{"location":"blog/ROS2/eco/linear_algebra/#python","text":"","title":"python"},{"location":"blog/ROS2/eco/linear_algebra/#transforms3d","text":"This package is a collection of Python functions and classes to create and convert 3-dimensional transformations such as rotations, zooms, shears and reflections \u2026 pip install transforms3d","title":"Transforms3d"},{"location":"blog/ROS2/eco/linear_algebra/#reference","text":"transformations Rotation Conversion Tool","title":"Reference"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/","tags":["apm","mavros","sitl"],"text":"Objective # Run copter SITL connect with mavros work with: call service , get info understand the code (arming for example) Usage # terminal1 # Run SITL with mavproxy # mavproxy connect to port tcp 5760 and output udp to port 14550 cd ardupilot cd ArduCopter ../Tools/autotest/sim_vehicle.py terminal2 # run mavros ros2 run mavros mavros_node --ros-args -p fcu_url: = udp://localhost:14550@ terminal3 ros2 topic echo /mavros/state # --- header: stamp: sec: 1665044282 nanosec: 30902710 frame_id: '' connected: true armed: false guided: true manual_input: true mode: GUIDED system_status: 3 --- arming # ## search for arming service ros2 service list | grep arm /mavros/cmd/arming ## get more info about the service ros2 service type /mavros/cmd/arming mavros_msgs/srv/CommandBool ## show message info ros2 interface show mavros_msgs/srv/CommandBool # Common type for switch commands bool value --- bool success uint8 result ## cal the service ros2 service call /mavros/cmd/arming mavros_msgs/srv/CommandBool \"{value: True}\" requester: making request: mavros_msgs.srv.CommandBool_Request ( value = True ) response: mavros_msgs.srv.CommandBool_Response ( success = True, result = 0 ) check the code # command.cpp arming_srv = node -> create_service < mavros_msgs :: srv :: CommandBool > ( \"~/arming\" , std :: bind ( & CommandPlugin :: arming_cb , this , _1 , _2 , _3 ), rmw_qos_profile_services_default , srv_cg ); ... void arming_cb ( const std :: shared_ptr < rmw_request_id_t > req_header [[ maybe_unused ]], const mavros_msgs :: srv :: CommandBool :: Request :: SharedPtr req , mavros_msgs :: srv :: CommandBool :: Response :: SharedPtr res ) { using mavlink :: common :: MAV_CMD ; send_command_long_and_wait ( false , enum_value ( MAV_CMD :: COMPONENT_ARM_DISARM ), 1 , ( req -> value ) ? 1.0 : 0.0 , 0 , 0 , 0 , 0 , 0 , 0 , res -> success , res -> result ); }","title":"mavros Arducopter SITL hello"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/#objective","text":"Run copter SITL connect with mavros work with: call service , get info understand the code (arming for example)","title":"Objective"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/#usage","text":"terminal1 # Run SITL with mavproxy # mavproxy connect to port tcp 5760 and output udp to port 14550 cd ardupilot cd ArduCopter ../Tools/autotest/sim_vehicle.py terminal2 # run mavros ros2 run mavros mavros_node --ros-args -p fcu_url: = udp://localhost:14550@ terminal3 ros2 topic echo /mavros/state # --- header: stamp: sec: 1665044282 nanosec: 30902710 frame_id: '' connected: true armed: false guided: true manual_input: true mode: GUIDED system_status: 3 ---","title":"Usage"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/#arming","text":"## search for arming service ros2 service list | grep arm /mavros/cmd/arming ## get more info about the service ros2 service type /mavros/cmd/arming mavros_msgs/srv/CommandBool ## show message info ros2 interface show mavros_msgs/srv/CommandBool # Common type for switch commands bool value --- bool success uint8 result ## cal the service ros2 service call /mavros/cmd/arming mavros_msgs/srv/CommandBool \"{value: True}\" requester: making request: mavros_msgs.srv.CommandBool_Request ( value = True ) response: mavros_msgs.srv.CommandBool_Response ( success = True, result = 0 )","title":"arming"},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/#check-the-code","text":"command.cpp arming_srv = node -> create_service < mavros_msgs :: srv :: CommandBool > ( \"~/arming\" , std :: bind ( & CommandPlugin :: arming_cb , this , _1 , _2 , _3 ), rmw_qos_profile_services_default , srv_cg ); ... void arming_cb ( const std :: shared_ptr < rmw_request_id_t > req_header [[ maybe_unused ]], const mavros_msgs :: srv :: CommandBool :: Request :: SharedPtr req , mavros_msgs :: srv :: CommandBool :: Response :: SharedPtr res ) { using mavlink :: common :: MAV_CMD ; send_command_long_and_wait ( false , enum_value ( MAV_CMD :: COMPONENT_ARM_DISARM ), 1 , ( req -> value ) ? 1.0 : 0.0 , 0 , 0 , 0 , 0 , 0 , 0 , res -> success , res -> result ); }","title":"check the code"},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/","tags":["mavros","diagnostic","rat_runtime_monitor"],"text":"see mavros_ardupilot_sitl_hello to run sitl and mavros node Run time monitor # apt install ros-humble-rqt-runtime-monitor usgae # check the code # void handle_heartbeat ( const mavlink :: mavlink_message_t * msg , mavlink :: minimal :: msg :: HEARTBEAT & hb , plugin :: filter :: SystemAndOk filter [[ maybe_unused ]]) { using mavlink :: minimal :: MAV_MODE_FLAG ; // XXX(vooon): i assume that UAS not interested in HBs from non-target system. // Store generic info of all heartbeats seen auto it = find_or_create_vehicle_info ( msg -> sysid , msg -> compid ); auto vehicle_mode = uas -> str_mode_v10 ( hb . base_mode , hb . custom_mode ); auto stamp = node -> now (); // update context && setup connection timeout uas -> update_heartbeat ( hb . type , hb . autopilot , hb . base_mode ); uas -> update_connection_status ( true ); timeout_timer -> reset (); // build state message after updating uas auto state_msg = mavros_msgs :: msg :: State (); state_msg . header . stamp = stamp ; state_msg . connected = true ; state_msg . armed = !! ( hb . base_mode & enum_value ( MAV_MODE_FLAG :: SAFETY_ARMED )); state_msg . guided = !! ( hb . base_mode & enum_value ( MAV_MODE_FLAG :: GUIDED_ENABLED )); state_msg . manual_input = !! ( hb . base_mode & enum_value ( MAV_MODE_FLAG :: MANUAL_INPUT_ENABLED )); state_msg . mode = vehicle_mode ; state_msg . system_status = hb . system_status ; state_pub -> publish ( state_msg ); hb_diag . tick ( hb . type , hb . autopilot , state_msg . mode , hb . system_status ); } state message # # find state topic ros2 topic list | grep state # /mavros/extended_state /mavros/state # get more info on the topic ros2 topic info /mavros/state # Type: mavros_msgs/msg/State Publisher count: 1 Subscription count: 0 ros2 interface show mavros_msgs/msg/State # std_msgs/Header header builtin_interfaces/Time stamp int32 sec uint32 nanosec string frame_id bool connected bool armed bool guided bool manual_input string mode uint8 system_status","title":"mavros diagnostic"},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/#run-time-monitor","text":"apt install ros-humble-rqt-runtime-monitor","title":"Run time monitor"},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/#usgae","text":"","title":"usgae"},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/#check-the-code","text":"void handle_heartbeat ( const mavlink :: mavlink_message_t * msg , mavlink :: minimal :: msg :: HEARTBEAT & hb , plugin :: filter :: SystemAndOk filter [[ maybe_unused ]]) { using mavlink :: minimal :: MAV_MODE_FLAG ; // XXX(vooon): i assume that UAS not interested in HBs from non-target system. // Store generic info of all heartbeats seen auto it = find_or_create_vehicle_info ( msg -> sysid , msg -> compid ); auto vehicle_mode = uas -> str_mode_v10 ( hb . base_mode , hb . custom_mode ); auto stamp = node -> now (); // update context && setup connection timeout uas -> update_heartbeat ( hb . type , hb . autopilot , hb . base_mode ); uas -> update_connection_status ( true ); timeout_timer -> reset (); // build state message after updating uas auto state_msg = mavros_msgs :: msg :: State (); state_msg . header . stamp = stamp ; state_msg . connected = true ; state_msg . armed = !! ( hb . base_mode & enum_value ( MAV_MODE_FLAG :: SAFETY_ARMED )); state_msg . guided = !! ( hb . base_mode & enum_value ( MAV_MODE_FLAG :: GUIDED_ENABLED )); state_msg . manual_input = !! ( hb . base_mode & enum_value ( MAV_MODE_FLAG :: MANUAL_INPUT_ENABLED )); state_msg . mode = vehicle_mode ; state_msg . system_status = hb . system_status ; state_pub -> publish ( state_msg ); hb_diag . tick ( hb . type , hb . autopilot , state_msg . mode , hb . system_status ); }","title":"check the code"},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/#state-message","text":"# find state topic ros2 topic list | grep state # /mavros/extended_state /mavros/state # get more info on the topic ros2 topic info /mavros/state # Type: mavros_msgs/msg/State Publisher count: 1 Subscription count: 0 ros2 interface show mavros_msgs/msg/State # std_msgs/Header header builtin_interfaces/Time stamp int32 sec uint32 nanosec string frame_id bool connected bool armed bool guided bool manual_input string mode uint8 system_status","title":"state message"},{"location":"blog/ROS2/eco/web_interface/hello/","tags":["ros2","web","rosbridge"],"text":"Rosbridge # Rosbridge provides a JSON API to ROS functionality for non-ROS programs rosbridge_suite install sudo apt-get install ros-foxy-rosbridge-suite Run # Open websocket on port 9090 as default run bridge ros2 launch rosbridge_server rosbridge_websocket_launch.xml roslibjs # roslibjs is the core JavaScript library for interacting with ROS from the browser. It uses WebSockets to connect with rosbridge and provides publishing, subscribing, service calls, actionlib, TF, URDF parsing, and other essential ROS functionality Run # Demo web page using roslibjs library basic connection < html > < head > < meta charset = \"utf-8\" /> < script type = \"text/javascript\" src = \"http://static.robotwebtools.org/roslibjs/current/roslib.min.js\" >< /script> < script type = \"text/javascript\" type = \"text/javascript\" > var ros = new ROSLIB . Ros ({ url : 'ws://localhost:9090' }); ros . on ( 'connection' , function () { document . getElementById ( \"status\" ). innerHTML = \"Connected\" ; }); ros . on ( 'error' , function ( error ) { document . getElementById ( \"status\" ). innerHTML = \"Error\" ; }); ros . on ( 'close' , function () { document . getElementById ( \"status\" ). innerHTML = \"Closed\" ; }); < /script> < /head> < body > < h1 > Simple ROS User Interface < /h1> < p > Connection status : < span id = \"status\" >< /span></p> < /body> < /html> Reference # roslibjs Robot Web Tools rosbridge_suite ROS web tutorial part 1 - rosbridge server and roslibjs","title":"Part1 - Web interfcae"},{"location":"blog/ROS2/eco/web_interface/hello/#rosbridge","text":"Rosbridge provides a JSON API to ROS functionality for non-ROS programs rosbridge_suite install sudo apt-get install ros-foxy-rosbridge-suite","title":"Rosbridge"},{"location":"blog/ROS2/eco/web_interface/hello/#run","text":"Open websocket on port 9090 as default run bridge ros2 launch rosbridge_server rosbridge_websocket_launch.xml","title":"Run"},{"location":"blog/ROS2/eco/web_interface/hello/#roslibjs","text":"roslibjs is the core JavaScript library for interacting with ROS from the browser. It uses WebSockets to connect with rosbridge and provides publishing, subscribing, service calls, actionlib, TF, URDF parsing, and other essential ROS functionality","title":"roslibjs"},{"location":"blog/ROS2/eco/web_interface/hello/#run_1","text":"Demo web page using roslibjs library basic connection < html > < head > < meta charset = \"utf-8\" /> < script type = \"text/javascript\" src = \"http://static.robotwebtools.org/roslibjs/current/roslib.min.js\" >< /script> < script type = \"text/javascript\" type = \"text/javascript\" > var ros = new ROSLIB . Ros ({ url : 'ws://localhost:9090' }); ros . on ( 'connection' , function () { document . getElementById ( \"status\" ). innerHTML = \"Connected\" ; }); ros . on ( 'error' , function ( error ) { document . getElementById ( \"status\" ). innerHTML = \"Error\" ; }); ros . on ( 'close' , function () { document . getElementById ( \"status\" ). innerHTML = \"Closed\" ; }); < /script> < /head> < body > < h1 > Simple ROS User Interface < /h1> < p > Connection status : < span id = \"status\" >< /span></p> < /body> < /html>","title":"Run"},{"location":"blog/ROS2/eco/web_interface/hello/#reference","text":"roslibjs Robot Web Tools rosbridge_suite ROS web tutorial part 1 - rosbridge server and roslibjs","title":"Reference"},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/","tags":["vue","web","101"],"text":"Vue.js is an open-source MVVM framework Note Install HTML Preview and change it\u2019s security permission to view vue html pages hello # < script type = \"importmap\" > { \"imports\" : { \"vue\" : \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\" } } </ script > < div id = \"app\" > {{ message }} </ div > < script type = \"module\" > import { createApp } from 'vue' createApp ({ data () { return { message : 'Hello Vue3!' } } }). mount ( '#app' ) </ script > Data # The variables in Vue.js are JavaScript style variables and support all the standard types that are available in vanilla JavaScript. These types include: String - Stores strings Number - Stores integers, floating point, and exponential notations Boolean - Stores \u2018true\u2019 or \u2018false\u2019 Null - Represents null value Object - Stores a dictionary Array - Stores a list of variables data < script type = \"importmap\" > { \"imports\" : { \"vue\" : \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\" } } </ script > < div id = \"app\" > < div > string: {{ name }} </ div > < div > number: {{ count }} </ div > < div > bool: {{ visible }} </ div > < div > array: {{ todos[1] }} </ div > < div > null: {{ error }} </ div > < div > object: {{ object.foo }} </ div > </ div > < script type = \"module\" > import { createApp } from 'vue' createApp ({ data () { return { name : 'Bob' , //string count : 0 , //number visible : false , //boolean todos : [ 'task1' , 'task2' ], //array error : null , //null object : { //object foo : 'bar' } } } }). mount ( '#app' ) </ script > Method # The methods property in the Vue instance contains the definitions of all the functions that the Vue instance can perform. Function cat called by specific event or where needed method < script type = \"importmap\" > { \"imports\" : { \"vue\" : \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\" } } </ script > < div id = \"app\" > {{get_name()}} </ div > < script type = \"module\" > import { createApp } from 'vue' createApp ({ data () { return { greeting : 'Hello world' } }, methods : { get_name : function (){ return this . greeting ; } } }). mount ( '#app' ) </ script > Note using this to refer data variables References # vue3","title":"Part2 - hello vue"},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/#hello","text":"< script type = \"importmap\" > { \"imports\" : { \"vue\" : \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\" } } </ script > < div id = \"app\" > {{ message }} </ div > < script type = \"module\" > import { createApp } from 'vue' createApp ({ data () { return { message : 'Hello Vue3!' } } }). mount ( '#app' ) </ script >","title":"hello"},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/#data","text":"The variables in Vue.js are JavaScript style variables and support all the standard types that are available in vanilla JavaScript. These types include: String - Stores strings Number - Stores integers, floating point, and exponential notations Boolean - Stores \u2018true\u2019 or \u2018false\u2019 Null - Represents null value Object - Stores a dictionary Array - Stores a list of variables data < script type = \"importmap\" > { \"imports\" : { \"vue\" : \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\" } } </ script > < div id = \"app\" > < div > string: {{ name }} </ div > < div > number: {{ count }} </ div > < div > bool: {{ visible }} </ div > < div > array: {{ todos[1] }} </ div > < div > null: {{ error }} </ div > < div > object: {{ object.foo }} </ div > </ div > < script type = \"module\" > import { createApp } from 'vue' createApp ({ data () { return { name : 'Bob' , //string count : 0 , //number visible : false , //boolean todos : [ 'task1' , 'task2' ], //array error : null , //null object : { //object foo : 'bar' } } } }). mount ( '#app' ) </ script >","title":"Data"},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/#method","text":"The methods property in the Vue instance contains the definitions of all the functions that the Vue instance can perform. Function cat called by specific event or where needed method < script type = \"importmap\" > { \"imports\" : { \"vue\" : \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\" } } </ script > < div id = \"app\" > {{get_name()}} </ div > < script type = \"module\" > import { createApp } from 'vue' createApp ({ data () { return { greeting : 'Hello world' } }, methods : { get_name : function (){ return this . greeting ; } } }). mount ( '#app' ) </ script > Note using this to refer data variables","title":"Method"},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/#references","text":"vue3","title":"References"},{"location":"blog/ROS2/eco/web_interface/part3_vue_handling/","tags":["vue","binding","101"],"text":"live server vetur material icon theme Basic struct # index.html: contain vue root element app.js: create app and mount to the root element index.html < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > vue </ title > < script src = \"https://unpkg.com/vue@3.0.2\" ></ script > </ head > < body > <!--template--> < div id = \"app\" > < p > {{ title }} </ p > </ div > < script src = \"app.js\" ></ script > </ body > </ html > app.js const app = Vue . createApp ({ data () { return { title : \"hello vue\" } } }) app . mount ( '#app' ) Bind and event # vue div < div id = \"app\" > < p > {{ title }} {{counter}} </ p > < button v-on:click = \"counter++\" > inc </ button > < button @ click = \"counter--\" > dec </ button > < div @ click = \"counter=0\" > reset </ div > </ div > Note @ is a shorthand for v-on v-on:click is @click methods property # Add methods property to vue app < div id = \"app\" > < p > {{ title }} {{counter}} </ p > < button @ click = \"reset\" > reset </ button > < button @ click = \"preset(10)\" > preset </ button > </ div > const app = Vue . createApp ({ data () { return { title : \"hello vue\" , counter : 0 } }, methods : { reset (){ this . counter = 0 }, preset ( value ){ this . counter = value } } })","title":"Part3 - vue user handling"},{"location":"blog/ROS2/eco/web_interface/part3_vue_handling/#basic-struct","text":"index.html: contain vue root element app.js: create app and mount to the root element index.html < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > vue </ title > < script src = \"https://unpkg.com/vue@3.0.2\" ></ script > </ head > < body > <!--template--> < div id = \"app\" > < p > {{ title }} </ p > </ div > < script src = \"app.js\" ></ script > </ body > </ html > app.js const app = Vue . createApp ({ data () { return { title : \"hello vue\" } } }) app . mount ( '#app' )","title":"Basic struct"},{"location":"blog/ROS2/eco/web_interface/part3_vue_handling/#bind-and-event","text":"vue div < div id = \"app\" > < p > {{ title }} {{counter}} </ p > < button v-on:click = \"counter++\" > inc </ button > < button @ click = \"counter--\" > dec </ button > < div @ click = \"counter=0\" > reset </ div > </ div > Note @ is a shorthand for v-on v-on:click is @click","title":"Bind and event"},{"location":"blog/ROS2/eco/web_interface/part3_vue_handling/#methods-property","text":"Add methods property to vue app < div id = \"app\" > < p > {{ title }} {{counter}} </ p > < button @ click = \"reset\" > reset </ button > < button @ click = \"preset(10)\" > preset </ button > </ div > const app = Vue . createApp ({ data () { return { title : \"hello vue\" , counter : 0 } }, methods : { reset (){ this . counter = 0 }, preset ( value ){ this . counter = value } } })","title":"methods property"},{"location":"blog/ROS2/eco/web_interface/part5_roslib_vue/","tags":["ros2","vue","rosbridge"],"text":"Bridge # run node ros2 launch rosbridge_server rosbridge_websocket_launch.xml Web # index.html: load libraries and HTML template app.js: Create vue app and init roslib connection index.html < html > < head > < meta charset = \"utf-8\" /> < script src = \"http://static.robotwebtools.org/roslibjs/current/roslib.min.js\" ></ script > < script src = \"https://unpkg.com/vue@3.0.2\" ></ script > </ head > < body > < h1 > Simple ROS User Interface </ h1 > < div id = \"app\" > < p > ros status: {{status}} </ p > </ div > < script src = \"app.js\" ></ script > </ body > </ html > app.js const app = Vue . createApp ({ data () { return { status : \"---\" , param : 0 } }, mounted () { this . ros = new ROSLIB . Ros ({ url : 'ws://localhost:9090' }); }, }) vm = app . mount ( '#app' ) vm . ros . on ( 'connection' , () => { vm . status = \"--connected--\" ; }); Parameter # declared var my_param = new ROSLIB . Param ({ ros : vm . ros , name : '/node:param_name' }); get / set //Get my_param . get ( function ( value ) { if ( value != null ) { console . log ( value ); } }); //Set my_param . set ( 5 )","title":"Part5 - ROS Web interface with vue"},{"location":"blog/ROS2/eco/web_interface/part5_roslib_vue/#bridge","text":"run node ros2 launch rosbridge_server rosbridge_websocket_launch.xml","title":"Bridge"},{"location":"blog/ROS2/eco/web_interface/part5_roslib_vue/#web","text":"index.html: load libraries and HTML template app.js: Create vue app and init roslib connection index.html < html > < head > < meta charset = \"utf-8\" /> < script src = \"http://static.robotwebtools.org/roslibjs/current/roslib.min.js\" ></ script > < script src = \"https://unpkg.com/vue@3.0.2\" ></ script > </ head > < body > < h1 > Simple ROS User Interface </ h1 > < div id = \"app\" > < p > ros status: {{status}} </ p > </ div > < script src = \"app.js\" ></ script > </ body > </ html > app.js const app = Vue . createApp ({ data () { return { status : \"---\" , param : 0 } }, mounted () { this . ros = new ROSLIB . Ros ({ url : 'ws://localhost:9090' }); }, }) vm = app . mount ( '#app' ) vm . ros . on ( 'connection' , () => { vm . status = \"--connected--\" ; });","title":"Web"},{"location":"blog/ROS2/eco/web_interface/part5_roslib_vue/#parameter","text":"declared var my_param = new ROSLIB . Param ({ ros : vm . ros , name : '/node:param_name' }); get / set //Get my_param . get ( function ( value ) { if ( value != null ) { console . log ( value ); } }); //Set my_param . set ( 5 )","title":"Parameter"},{"location":"blog/ROS2/fastdds/xml_profile/","tags":["profile","qos","ros2"],"text":"import rclpy from rclpy.node import Node from std_msgs.msg import String from rclpy import qos class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_publisher\" ) topic_name = \"/minimal\" self . publisher_ = self . create_publisher ( String , topic_name , qos_profile = qos . qos_profile_system_default ) timer_period = 1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): self . i += 1 msg = String () msg . data = f \"Hello ROS2 { self . i } \" self . publisher_ . publish ( msg ) self . get_logger () . info ( f \"send: { msg . data } \" ) def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () # Spin the node so the callback function is called. rclpy . spin ( minimal_publisher ) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () profiles.xml <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <!-- export RMW_FASTRTPS_USE_QOS_FROM_XML=1 export FASTRTPS_DEFAULT_PROFILES_FILE=/home/user/dev_ws/src/basic/profiles.xml --> <profiles xmlns= \"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\" > <!-- default publisher profile --> <publisher profile_name= \"default_publisher\" is_default_profile= \"true\" > <historyMemoryPolicy> DYNAMIC </historyMemoryPolicy> <qos> <reliability> <kind> RELIABLE </kind> </reliability> </qos> </publisher> <!-- publisher profile for minimal topic--> <publisher profile_name= \"/minimal\" > <historyMemoryPolicy> DYNAMIC </historyMemoryPolicy> <qos> <publishMode> <kind> ASYNCHRONOUS </kind> </publishMode> <reliability> <kind> BEST_EFFORT </kind> </reliability> </qos> </publisher> </profiles> # environment export RMW_FASTRTPS_USE_QOS_FROM_XML = 1 export FASTRTPS_DEFAULT_PROFILES_FILE = /home/user/dev_ws/src/basic/profiles.xml # run node ros2 run basic simple_pub # result 2022 -09-21 05 :50:26.183 [ RTPS_READER_HISTORY Error ] Change payload size of '72' bytes is larger than the history payload size of '35' bytes and cannot be resized. -> Function can_change_be_added_nts 2022 -09-21 05 :50:26.184 [ RTPS_READER_HISTORY Error ] Change payload size of '96' bytes is larger than the history payload size of '35' bytes and cannot be resized. -> Function can_change_be_added_nts 2022 -09-21 05 :50:26.203 [ RTPS_READER_HISTORY Error ] Change payload size of '120' bytes is larger than the history payload size of '35' bytes and cannot be resized. -> Function can_change_be_added_nts 2022 -09-21 05 :50:26.204 [ RTPS_READER_HISTORY Error ] Change payload size of '168' bytes is larger than the history payload size of '35' bytes and cannot be resized. -> Function can_change_be_added_nts 2022 -09-21 05 :50:26.204 [ RTPS_READER_HISTORY Error ] Change payload size of '216' bytes is larger than the history payload size of '35' bytes and cannot be resized. -> Function can_change_be_added_nts 2022 -09-21 05 :50:26.204 [ RTPS_READER_HISTORY Error ] Change payload size of '264' bytes is larger than the history payload size of '35' bytes and cannot be resized. -> Function can_change_be_added_nts 2022 -09-21 05 :50:26.204 [ RTPS_READER_HISTORY Error ] Change payload size of '312' bytes is larger than the history payload size of '35' bytes and cannot be resized. -> Function can_change_be_added_nts 2022 -09-21 05 :50:26.204 [ RTPS_READER_HISTORY Error ] Change payload size of '360' bytes is larger than the history payload size of '35' bytes and cannot be resized. -> Function can_change_be_added_nts 2022 -09-21 05 :50:26.205 [ RTPS_READER_HISTORY Error ] Change payload size of '408' bytes is larger than the history payload size of '35' bytes and cannot be resized. -> Function can_change_be_added_nts 2022 -09-21 05 :50:26.205 [ RTPS_READER_HISTORY Error ] Change payload size of '432' bytes is larger than the history payload size of '35' bytes and cannot be resized. -> Function can_change_be_added_nts 2022 -09-21 05 :50:26.335 [ RTPS_READER_HISTORY Error ] Change payload size of '152' bytes is larger than the history payload size of '35' bytes and cannot be resized. -> Function can_change_be_added_nts [ INFO ] [ 1663728627 .215986803 ] [ minimal_publisher ] : send: Hello ROS2 1 [ INFO ] [ 1663728628 .207130730 ] [ minimal_publisher ] : send: Hello ROS2 2 [ INFO ] [ 1663728629 .207069968 ] [ minimal_publisher ] : send: Hello ROS2 3 [ INFO ] [ 1663728630 .207108352 ] [ minimal_publisher ] : send: Hello ROS2 4 References # Unlocking the potential of Fast DDS middleware Unable to create publishers/subscribers with different profiles #554","title":"ROS2 fastdds xml profile"},{"location":"blog/ROS2/fastdds/xml_profile/#references","text":"Unlocking the potential of Fast DDS middleware Unable to create publishers/subscribers with different profiles #554","title":"References"},{"location":"blog/ROS2/gazebo/","tags":["ros2","gazebo-classic"],"text":"sudo apt install ros-humble-gazebo-ros-pkgs test integration # gazebo --verbose /opt/ros/humble/share/gazebo_plugins/worlds/gazebo_ros_diff_drive_demo.world ros2 topic pub /demo/cmd_demo geometry_msgs/Twist '{linear: {x: 1.0}}' -1 # Reference # ROS2 Gazebo migration guide Installing gazebo_ros_pkgs (ROS 2)","title":"ros2 gazebo integration"},{"location":"blog/ROS2/gazebo/#test-integration","text":"gazebo --verbose /opt/ros/humble/share/gazebo_plugins/worlds/gazebo_ros_diff_drive_demo.world ros2 topic pub /demo/cmd_demo geometry_msgs/Twist '{linear: {x: 1.0}}' -1","title":"test integration"},{"location":"blog/ROS2/gazebo/#_1","text":"","title":""},{"location":"blog/ROS2/gazebo/#reference","text":"ROS2 Gazebo migration guide Installing gazebo_ros_pkgs (ROS 2)","title":"Reference"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/","tags":["gazebo","launch","101"],"text":"gazebo_ros # Provides ROS plugins that offer message and service publishers for interfacing with Gazebo through ROS. sudo apt install ros-foxy-gazebo-ros # project # my ros2_gazebo_tutorial \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 basic_gazebo.launch.py \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 empty.world world # empty.world <?xml version='1.0'?> <sdf version= \"1.6\" > <world name= \"room\" > <include> <uri> model://sun </uri> </include> <include> <uri> model://ground_plane </uri> </include> </world> </sdf> launch # basic_gazebo.launch.py from launch import LaunchDescription import os from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource PACKAGE = \"ros2_gazebo_tutorial\" WORLD = \"empty.world\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) models = [ os . path . join ( pkg , \"models\" )] models_env = AppendEnvironmentVariable ( name = \"GAZEBO_MODEL_PATH\" , value = \":\" . join ( models ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) ld . add_action ( models_env ) ld . add_action ( resource_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( gazebo ) return ld cmake # Copy launch and world folders CMakeLists.txt # Add this line to CMakeLists.txt install ( DIRECTORY launch worlds DESTINATION share/ ${ PROJECT_NAME } / )","title":"Part1 - launch gazebo"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#gazebo_ros","text":"Provides ROS plugins that offer message and service publishers for interfacing with Gazebo through ROS.","title":"gazebo_ros"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#sudo-apt-install-ros-foxy-gazebo-ros","text":"","title":"sudo apt install ros-foxy-gazebo-ros\n"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#project","text":"my ros2_gazebo_tutorial \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 basic_gazebo.launch.py \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 empty.world","title":"project"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#world","text":"empty.world <?xml version='1.0'?> <sdf version= \"1.6\" > <world name= \"room\" > <include> <uri> model://sun </uri> </include> <include> <uri> model://ground_plane </uri> </include> </world> </sdf>","title":"world"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#launch","text":"basic_gazebo.launch.py from launch import LaunchDescription import os from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource PACKAGE = \"ros2_gazebo_tutorial\" WORLD = \"empty.world\" def generate_launch_description (): ld = LaunchDescription () pkg = get_package_share_directory ( PACKAGE ) gazebo_pkg = get_package_share_directory ( 'gazebo_ros' ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) models = [ os . path . join ( pkg , \"models\" )] models_env = AppendEnvironmentVariable ( name = \"GAZEBO_MODEL_PATH\" , value = \":\" . join ( models ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) ld . add_action ( models_env ) ld . add_action ( resource_env ) ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( gazebo ) return ld","title":"launch"},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#cmake","text":"Copy launch and world folders CMakeLists.txt # Add this line to CMakeLists.txt install ( DIRECTORY launch worlds DESTINATION share/ ${ PROJECT_NAME } / )","title":"cmake"},{"location":"blog/ROS2/gazebo/02-spawn/","tags":["gazebo-classic","tutorial","spawn"],"text":"project # my ros2_gazebo_tutorial \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 spawn.launch.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 empty.world \u2514\u2500\u2500 models \u2514\u2500\u2500 simple \u251c\u2500\u2500 model.config \u2514\u2500\u2500 model.sdf.xacro launch # basic_gazebo.launch.py import os from ament_index_python import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription , AppendEnvironmentVariable , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro PACKAGE = \"ros2_gazebo_tutorial\" WORLD = \"empty.world\" MODEL = \"simple\" SDF = \"model.sdf.xacro\" def generate_launch_description (): gazebo_pkg = get_package_share_directory ( \"gazebo_ros\" ) pkg = get_package_share_directory ( PACKAGE ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) models = [ os . path . join ( pkg , \"models\" )] models_env = AppendEnvironmentVariable ( name = \"GAZEBO_MODEL_PATH\" , value = \":\" . join ( models ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) robot_description_path = os . path . join ( pkg , \"models\" , MODEL , SDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , parameters = [ { 'use_sim_time' : sim_time , 'robot_description' : doc . toxml () } ] ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-topic\" , \"robot_description\" ], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( arg_sim_time ) ld . add_action ( resource_env ) ld . add_action ( models_env ) ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity ) return ld","title":"Part2 - spawn"},{"location":"blog/ROS2/gazebo/02-spawn/#project","text":"my ros2_gazebo_tutorial \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 spawn.launch.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 empty.world \u2514\u2500\u2500 models \u2514\u2500\u2500 simple \u251c\u2500\u2500 model.config \u2514\u2500\u2500 model.sdf.xacro","title":"project"},{"location":"blog/ROS2/gazebo/02-spawn/#launch","text":"basic_gazebo.launch.py import os from ament_index_python import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription , AppendEnvironmentVariable , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro PACKAGE = \"ros2_gazebo_tutorial\" WORLD = \"empty.world\" MODEL = \"simple\" SDF = \"model.sdf.xacro\" def generate_launch_description (): gazebo_pkg = get_package_share_directory ( \"gazebo_ros\" ) pkg = get_package_share_directory ( PACKAGE ) verbose = LaunchConfiguration ( \"verbose\" ) arg_gazebo_verbose = DeclareLaunchArgument ( \"verbose\" , default_value = \"true\" ) world = LaunchConfiguration ( \"world\" ) arg_gazebo_world = DeclareLaunchArgument ( \"world\" , default_value = WORLD ) sim_time = LaunchConfiguration ( \"sim_time\" ) arg_sim_time = DeclareLaunchArgument ( \"sim_time\" , default_value = \"true\" ) resources = [ os . path . join ( pkg , \"worlds\" )] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) models = [ os . path . join ( pkg , \"models\" )] models_env = AppendEnvironmentVariable ( name = \"GAZEBO_MODEL_PATH\" , value = \":\" . join ( models ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( gazebo_pkg , 'launch' , 'gazebo.launch.py' )]), launch_arguments = { 'verbose' : verbose , \"world\" : world } . items () ) robot_description_path = os . path . join ( pkg , \"models\" , MODEL , SDF ) doc = xacro . parse ( open ( robot_description_path )) xacro . process_doc ( doc ) robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , parameters = [ { 'use_sim_time' : sim_time , 'robot_description' : doc . toxml () } ] ) spawn_entity = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-entity\" , \"demo\" , \"-topic\" , \"robot_description\" ], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( arg_gazebo_verbose ) ld . add_action ( arg_gazebo_world ) ld . add_action ( arg_sim_time ) ld . add_action ( resource_env ) ld . add_action ( models_env ) ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity ) return ld","title":"launch"},{"location":"blog/ROS2/gazebo/moving_object/","tags":["gazebo","ros2"],"text":"LAB # Move Gazebo entities from using ROS2 service world # <sdf version= \"1.6\" > <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <!-- models--> <model name= \"cube\" > <static> true </static> <link name= \"link\" > <pose> 0 0 2.5 0 0 0 </pose> <visual name= \"visual\" > <geometry> <box> <size> 2 1 1 </size> </box> </geometry> </visual> </link> </model> <!-- plugins --> <plugin name= \"gazebo_ros_state\" filename= \"libgazebo_ros_state.so\" > <ros> <namespace> /demo </namespace> <argument> model_states:=model_states_demo </argument> </ros> <update_rate> 1.0 </update_rate> </plugin> </world> </sdf> get # ros2 service call /demo/get_entity_state gazebo_msgs/srv/GetEntityState \"{name: cube::link,reference_frame: world}\" set # ros2 service call /demo/set_entity_state gazebo_msgs/srv/SetEntityState \"state: {name: cube::link, pose: {position:{x: 2.0, y: 2.0, z: 5.0}}, reference_frame: world}\" ros2 service call /demo/set_entity_state gazebo_msgs/srv/SetEntityState \\ \"state: {name: cube::link, pose: \\ {position:{x: 0.0, y: 0.0, z: 2.5}, orientation:{x: 0.7071, y: 0.0, z: 0.7071, w: 0.0}}, \\ reference_frame: world}\" Reference # ROS 2 Migration: Entity states","title":"Moving an object in Gazebo using ROS2 service"},{"location":"blog/ROS2/gazebo/moving_object/#lab","text":"Move Gazebo entities from using ROS2 service","title":"LAB"},{"location":"blog/ROS2/gazebo/moving_object/#world","text":"<sdf version= \"1.6\" > <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <include> <uri> model://sun </uri> </include> <!-- models--> <model name= \"cube\" > <static> true </static> <link name= \"link\" > <pose> 0 0 2.5 0 0 0 </pose> <visual name= \"visual\" > <geometry> <box> <size> 2 1 1 </size> </box> </geometry> </visual> </link> </model> <!-- plugins --> <plugin name= \"gazebo_ros_state\" filename= \"libgazebo_ros_state.so\" > <ros> <namespace> /demo </namespace> <argument> model_states:=model_states_demo </argument> </ros> <update_rate> 1.0 </update_rate> </plugin> </world> </sdf>","title":"world"},{"location":"blog/ROS2/gazebo/moving_object/#get","text":"ros2 service call /demo/get_entity_state gazebo_msgs/srv/GetEntityState \"{name: cube::link,reference_frame: world}\"","title":"get"},{"location":"blog/ROS2/gazebo/moving_object/#set","text":"ros2 service call /demo/set_entity_state gazebo_msgs/srv/SetEntityState \"state: {name: cube::link, pose: {position:{x: 2.0, y: 2.0, z: 5.0}}, reference_frame: world}\" ros2 service call /demo/set_entity_state gazebo_msgs/srv/SetEntityState \\ \"state: {name: cube::link, pose: \\ {position:{x: 0.0, y: 0.0, z: 2.5}, orientation:{x: 0.7071, y: 0.0, z: 0.7071, w: 0.0}}, \\ reference_frame: world}\"","title":"set"},{"location":"blog/ROS2/gazebo/moving_object/#reference","text":"ROS 2 Migration: Entity states","title":"Reference"},{"location":"blog/ROS2/gazebo/sensors/","tags":["gazebo","ros2","cook"],"text":"Project # gazebo \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 gazebo.world \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 simple \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 gazebo.launch.py","title":"Gazebo (classic) sensors tutorials"},{"location":"blog/ROS2/gazebo/sensors/#project","text":"gazebo \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 gazebo.world \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 simple \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 gazebo.launch.py","title":"Project"},{"location":"blog/ROS2/gazebo/sensors/camera/","text":"","title":"Camera"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/","tags":["gazebo","ros2","sensors","cook"],"text":"sdf # model <?xml version=\"1.0\"?> <sdf version= \"1.5\" > <model name= \"depth_camera\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"camera_depth_frame\" > <pose> 0 0 0 -1.5708 0 -1.5708 </pose> </link> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor type= \"depth\" name= \"depth_camera\" > <always_on> 0 </always_on> <update_rate> 10 </update_rate> <camera name= \"camera_name\" > </camera> <plugin name= \"plugin_name\" filename= \"libgazebo_ros_camera.so\" > <ros> <namespace> custom_ns </namespace> <remapping> custom_camera/image_raw:=custom_camera/custom_image </remapping> <remapping> custom_camera/image_depth:=custom_camera/custom_image_depth </remapping> <remapping> custom_camera/camera_info:=custom_camera/custom_info_raw </remapping> <remapping> custom_camera/camera_info_depth:=custom_camera/custom_info_depth </remapping> <remapping> custom_camera/points:=custom_camera/custom_points </remapping> </ros> <camera_name> custom_camera </camera_name> <frame_name> camera_depth_frame </frame_name> </plugin> </sensor> </link> </model> </sdf> # launch # launch import os from launch import LaunchDescription from launch.actions import AppendEnvironmentVariable , IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node PACKAGE_NAME = \"sam_bot_description\" WORLD = \"gazebo.world\" MODEL = \"depth_camera\" def generate_launch_description (): pkg_share = get_package_share_directory ( PACKAGE_NAME ) pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) model_sdf_full_path = os . path . join ( pkg_share , \"models\" , MODEL , \"model.sdf\" ) resources = [ os . path . join ( pkg_share , \"worlds\" ) ] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources )) start_gazebo_server_cmd = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gzserver.launch.py' )), launch_arguments = { \"verbose\" : \"true\" , 'world' : WORLD } . items ()) start_gazebo_client_cmd = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gzclient.launch.py' ))) spawn_entity_cmd = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ '-entity' , \"robot_name_in_model\" , '-file' , model_sdf_full_path , '-x' , \"0\" , '-y' , \"0\" , '-z' , \"0.5\" ], output = 'screen' ) ld = LaunchDescription () rviz = Node ( package = \"rviz2\" , executable = \"rviz2\" , arguments = [ \"-d\" , os . path . join ( pkg_share , \"config\" , MODEL + \".rviz\" )], ) link_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"link2world\" , arguments = [ \"0\" , \"0\" , \"0.5\" , \"-1.5708\" , \"0\" , \"-1.5708\" , \"link\" , \"camera_depth_frame\" ] ) ld = LaunchDescription () ld . add_action ( resource_env ) ld . add_action ( start_gazebo_server_cmd ) ld . add_action ( start_gazebo_client_cmd ) ld . add_action ( spawn_entity_cmd ) ld . add_action ( rviz ) ld . add_action ( link_tf ) return ld # Run # Reference # ROS2 migration","title":"ROS2 gazebo (classic) depth camera sensor"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#sdf","text":"","title":"sdf"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#modelxml-version10sdf-version15----model-namedepth_camera--------pose0-0-05-0-0-0pose--------statictruestatic--------link-namecamera_depth_frame------------pose0-0-0--15708-0--15708pose----------link--------link-namelink------------collision-namecollision----------------geometry--------------------box------------------------size01-01-01size--------------------box----------------geometry------------collision------------visual-namevisual----------------geometry--------------------box------------------------size01-01-01size--------------------box----------------geometry------------visual------------sensor-typedepth-namedepth_camera----------------always_on0always_on----------------update_rate10update_rate----------------camera-namecamera_name----------------camera----------------plugin-nameplugin_name-filenamelibgazebo_ros_cameraso--------------------ros------------------------namespacecustom_nsnamespace------------------------remappingcustom_cameraimage_rawcustom_cameracustom_imageremapping------------------------remappingcustom_cameraimage_depthcustom_cameracustom_image_depthremapping------------------------remappingcustom_cameracamera_infocustom_cameracustom_info_rawremapping------------------------remappingcustom_cameracamera_info_depthcustom_cameracustom_info_depthremapping------------------------remappingcustom_camerapointscustom_cameracustom_pointsremapping--------------------ros--------------------camera_namecustom_cameracamera_name--------------------frame_namecamera_depth_frameframe_name----------------plugin------------sensor--------link----modelsdf","text":"","title":"model&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;sdf version=&quot;1.5&quot;&gt;\n    &lt;model name=&quot;depth_camera&quot;&gt;\n        &lt;pose&gt;0 0 0.5 0 0 0&lt;/pose&gt;\n        &lt;static&gt;true&lt;/static&gt;\n        &lt;link name=&quot;camera_depth_frame&quot;&gt;\n            &lt;pose&gt;0 0 0 -1.5708 0 -1.5708&lt;/pose&gt;\n          &lt;/link&gt;\n        &lt;link name=&quot;link&quot;&gt;\n            &lt;collision name=&quot;collision&quot;&gt;\n                &lt;geometry&gt;\n                    &lt;box&gt;\n                        &lt;size&gt;0.1 0.1 0.1&lt;/size&gt;\n                    &lt;/box&gt;\n                &lt;/geometry&gt;\n            &lt;/collision&gt;\n            &lt;visual name=&quot;visual&quot;&gt;\n                &lt;geometry&gt;\n                    &lt;box&gt;\n                        &lt;size&gt;0.1 0.1 0.1&lt;/size&gt;\n                    &lt;/box&gt;\n                &lt;/geometry&gt;\n            &lt;/visual&gt;\n            &lt;sensor type=&quot;depth&quot; name=&quot;depth_camera&quot;&gt;\n                &lt;always_on&gt;0&lt;/always_on&gt;\n                &lt;update_rate&gt;10&lt;/update_rate&gt;\n                &lt;camera name=&quot;camera_name&quot;&gt;\n                &lt;/camera&gt;\n                &lt;plugin name=&quot;plugin_name&quot; filename=&quot;libgazebo_ros_camera.so&quot;&gt;\n                    &lt;ros&gt;\n                        &lt;namespace&gt;custom_ns&lt;/namespace&gt;\n                        &lt;remapping&gt;custom_camera/image_raw:=custom_camera/custom_image&lt;/remapping&gt;\n                        &lt;remapping&gt;custom_camera/image_depth:=custom_camera/custom_image_depth&lt;/remapping&gt;\n                        &lt;remapping&gt;custom_camera/camera_info:=custom_camera/custom_info_raw&lt;/remapping&gt;\n                        &lt;remapping&gt;custom_camera/camera_info_depth:=custom_camera/custom_info_depth&lt;/remapping&gt;\n                        &lt;remapping&gt;custom_camera/points:=custom_camera/custom_points&lt;/remapping&gt;\n                    &lt;/ros&gt;\n                    &lt;camera_name&gt;custom_camera&lt;/camera_name&gt;\n                    &lt;frame_name&gt;camera_depth_frame&lt;/frame_name&gt;\n                &lt;/plugin&gt;\n            &lt;/sensor&gt;\n        &lt;/link&gt;\n    &lt;/model&gt;\n&lt;/sdf&gt;\n"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#launch","text":"","title":"launch"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#launchimport-osfrom-launch-import-launchdescriptionfrom-launchactions-import-appendenvironmentvariable-includelaunchdescriptionfrom-launchlaunch_description_sources-import-pythonlaunchdescriptionsourcefrom-ament_index_pythonpackages-import-get_package_share_directoryfrom-launch_rosactions-import-nodepackage_name--sam_bot_descriptionworld--gazeboworldmodel--depth_cameradef-generate_launch_description----pkg_share--get_package_share_directorypackage_name----pkg_gazebo_ros--get_package_share_directorygazebo_ros----model_sdf_full_path--ospathjoinpkg_share-models-model-modelsdf----resources----------ospathjoinpkg_share-worlds------------resource_env--appendenvironmentvariablenamegazebo_resource_path-valuejoinresources----start_gazebo_server_cmd--includelaunchdescription--------pythonlaunchdescriptionsourceospathjoinpkg_gazebo_ros-launch-gzserverlaunchpy--------launch_arguments------------verbose-true-------------world-worlditems----start_gazebo_client_cmd--includelaunchdescription--------pythonlaunchdescriptionsourceospathjoinpkg_gazebo_ros-launch-gzclientlaunchpy----spawn_entity_cmd--node--------packagegazebo_ros---------executablespawn_entitypy--------arguments-entity-robot_name_in_model----------file-model_sdf_full_path---------x-0---------y-0---------z-05--------outputscreen----ld--launchdescription----rviz--node--------packagerviz2--------executablerviz2--------arguments-d-ospathjoinpkg_share-config-model--rviz--------link_tf--node--------packagetf2_ros--------executablestatic_transform_publisher--------namelink2world--------arguments--0-0-05--15708-0--15708-link-camera_depth_frame--------ld--launchdescription----ldadd_actionresource_env----ldadd_actionstart_gazebo_server_cmd----ldadd_actionstart_gazebo_client_cmd----ldadd_actionspawn_entity_cmd----ldadd_actionrviz----ldadd_actionlink_tf----return-ld","text":"","title":"launchimport os\nfrom launch import LaunchDescription\nfrom launch.actions import AppendEnvironmentVariable, IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch_ros.actions import Node\n\nPACKAGE_NAME = &quot;sam_bot_description&quot;\nWORLD = &quot;gazebo.world&quot;\nMODEL = &quot;depth_camera&quot;\n\ndef generate_launch_description():\n    pkg_share = get_package_share_directory(PACKAGE_NAME)\n    pkg_gazebo_ros = get_package_share_directory(&#39;gazebo_ros&#39;)\n    model_sdf_full_path = os.path.join(pkg_share, &quot;models&quot;, MODEL, &quot;model.sdf&quot;)\n\n\n    resources = [\n        os.path.join(pkg_share, &quot;worlds&quot;)    \n    ]\n\n    resource_env = AppendEnvironmentVariable(name=&quot;GAZEBO_RESOURCE_PATH&quot;, value=&quot;:&quot;.join(resources))\n\n    start_gazebo_server_cmd = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(os.path.join(pkg_gazebo_ros, &#39;launch&#39;, &#39;gzserver.launch.py&#39;)),\n        launch_arguments={\n            &quot;verbose&quot;: &quot;true&quot;, \n            &#39;world&#39;: WORLD}.items())\n\n    start_gazebo_client_cmd = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(os.path.join(pkg_gazebo_ros, &#39;launch&#39;, &#39;gzclient.launch.py&#39;)))\n\n    spawn_entity_cmd = Node(\n        package=&quot;gazebo_ros&quot;, \n        executable=&quot;spawn_entity.py&quot;,\n        arguments=[&#39;-entity&#39;, &quot;robot_name_in_model&quot;, \n        &#39;-file&#39;, model_sdf_full_path,\n        &#39;-x&#39;, &quot;0&quot;,\n        &#39;-y&#39;, &quot;0&quot;,\n        &#39;-z&#39;, &quot;0.5&quot;],\n        output=&#39;screen&#39;)\n\n    ld = LaunchDescription()\n    rviz = Node(\n        package=&quot;rviz2&quot;,\n        executable=&quot;rviz2&quot;,\n        arguments=[&quot;-d&quot;, os.path.join(pkg_share, &quot;config&quot;, MODEL + &quot;.rviz&quot;)],\n    )\n\n    link_tf = Node(\n        package=&#39;tf2_ros&#39;,\n        executable=&#39;static_transform_publisher&#39;,\n        name=&quot;link2world&quot;,\n        arguments = [&quot;0&quot;, &quot;0&quot;, &quot;0.5&quot;, &quot;-1.5708&quot;, &quot;0&quot;, &quot;-1.5708&quot;, &quot;link&quot;, &quot;camera_depth_frame&quot;]\n    )\n\n    ld = LaunchDescription()\n    ld.add_action(resource_env)\n    ld.add_action(start_gazebo_server_cmd)\n    ld.add_action(start_gazebo_client_cmd)\n    ld.add_action(spawn_entity_cmd)\n    ld.add_action(rviz)\n    ld.add_action(link_tf)\n    return ld\n"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#run","text":"","title":"Run"},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#reference","text":"ROS2 migration","title":"Reference"},{"location":"blog/ROS2/gazebo/sensors/lidar/","tags":["gazebo","ros2","sensors","cook"],"text":"SDF # mode <?xml version=\"1.0\"?> <sdf version= \"1.5\" > <model name= \"lidar_demo\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"lidar\" type= \"ray\" > <always_on> true </always_on> <visualize> true </visualize> <update_rate> 5 </update_rate> <ray> <scan> <horizontal> <samples> 180 </samples> <resolution> 1.00000 </resolution> <min_angle> -1.57 </min_angle> <max_angle> 1.57 </max_angle> </horizontal> </scan> <range> <min> 0.5 </min> <max> 3.5 </max> <resolution> 0.1 </resolution> </range> </ray> <plugin name= \"scan\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> <frame_name> link </frame_name> </plugin> </sensor> </link> </model> </sdf> Run #","title":"ROS2 gazebo (classic) LIDAR sensor"},{"location":"blog/ROS2/gazebo/sensors/lidar/#sdf","text":"mode <?xml version=\"1.0\"?> <sdf version= \"1.5\" > <model name= \"lidar_demo\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"lidar\" type= \"ray\" > <always_on> true </always_on> <visualize> true </visualize> <update_rate> 5 </update_rate> <ray> <scan> <horizontal> <samples> 180 </samples> <resolution> 1.00000 </resolution> <min_angle> -1.57 </min_angle> <max_angle> 1.57 </max_angle> </horizontal> </scan> <range> <min> 0.5 </min> <max> 3.5 </max> <resolution> 0.1 </resolution> </range> </ray> <plugin name= \"scan\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> <frame_name> link </frame_name> </plugin> </sensor> </link> </model> </sdf>","title":"SDF"},{"location":"blog/ROS2/gazebo/sensors/lidar/#run","text":"","title":"Run"},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/","tags":["gazebo","ros2","sensors","cook"],"text":"Create simple model with ultrasonic sensor Spawn the model into gazebo world View sensor output in RVIZ sdf / sensor # model.sdf <?xml version=\"1.0\"?> <sdf version= \"1.5\" > <model name= \"ultrasonic\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"link\" > <!-- <inertial> <mass>1.0</mass> <inertia> <ixx>0.083</ixx> <ixy>0.0</ixy> <ixz>0.0</ixz> <iyy>0.083</iyy> <iyz>0.0</iyz> <izz>0.083</izz> </inertia> </inertial> --> <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"ultrasonic_1\" type= \"ray\" > <always_on> true </always_on> <visualize> false </visualize> <update_rate> 5 </update_rate> <ray> <scan> <horizontal> <samples> 5 </samples> <resolution> 1.000000 </resolution> <min_angle> -0.12 </min_angle> <max_angle> 0.12 </max_angle> </horizontal> <vertical> <samples> 5 </samples> <resolution> 1.000000 </resolution> <min_angle> -0.01 </min_angle> <max_angle> 0.01 </max_angle> </vertical> </scan> <range> <min> 0.2 </min> <max> 4 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"ultrasonic_sensor\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <remapping> ~/out:=ultrasonic_sensor_1 </remapping> </ros> <output_type> sensor_msgs/Range </output_type> <radiation_type> ultrasound </radiation_type> <frame_name> link </frame_name> </plugin> </sensor> </link> </model> </sdf> launch # sensor.launch.py import os from launch import LaunchDescription from launch.actions import AppendEnvironmentVariable , IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node PACKAGE_NAME = \"sam_bot_description\" WORLD = \"gazebo.world\" MODEL = \"ultrasonic\" def generate_launch_description (): pkg_share = get_package_share_directory ( PACKAGE_NAME ) pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) model_sdf_full_path = os . path . join ( pkg_share , \"models\" , MODEL , \"model.sdf\" ) resources = [ os . path . join ( pkg_share , \"worlds\" ) ] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources )) start_gazebo_server_cmd = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gzserver.launch.py' )), launch_arguments = { \"verbose\" : \"true\" , 'world' : WORLD } . items ()) start_gazebo_client_cmd = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gzclient.launch.py' ))) spawn_entity_cmd = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ '-entity' , \"robot_name_in_model\" , '-file' , model_sdf_full_path , '-x' , \"0\" , '-y' , \"0\" , '-z' , \"0.5\" ], output = 'screen' ) ld = LaunchDescription () rviz = Node ( package = \"rviz2\" , executable = \"rviz2\" , arguments = [ \"-d\" , os . path . join ( pkg_share , \"config\" , \"ultrasonic.rviz\" )], ) link_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"link2world\" , arguments = [ \"0\" , \"0\" , \"0.5\" , \"0\" , \"0\" , \"0\" , \"world\" , \"link\" ] ) ld = LaunchDescription () ld . add_action ( resource_env ) ld . add_action ( start_gazebo_server_cmd ) ld . add_action ( start_gazebo_client_cmd ) ld . add_action ( spawn_entity_cmd ) ld . add_action ( rviz ) ld . add_action ( link_tf ) return ld tf # Add static tf between world to link (model) link_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"link2world\" , arguments = [ \"0\" , \"0\" , \"0.5\" , \"0\" , \"0\" , \"0\" , \"world\" , \"link\" ] ) run #","title":"ROS2 gazebo (classic) ultrasonic sensor"},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#sdf--sensor","text":"model.sdf <?xml version=\"1.0\"?> <sdf version= \"1.5\" > <model name= \"ultrasonic\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"link\" > <!-- <inertial> <mass>1.0</mass> <inertia> <ixx>0.083</ixx> <ixy>0.0</ixy> <ixz>0.0</ixz> <iyy>0.083</iyy> <iyz>0.0</iyz> <izz>0.083</izz> </inertia> </inertial> --> <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"ultrasonic_1\" type= \"ray\" > <always_on> true </always_on> <visualize> false </visualize> <update_rate> 5 </update_rate> <ray> <scan> <horizontal> <samples> 5 </samples> <resolution> 1.000000 </resolution> <min_angle> -0.12 </min_angle> <max_angle> 0.12 </max_angle> </horizontal> <vertical> <samples> 5 </samples> <resolution> 1.000000 </resolution> <min_angle> -0.01 </min_angle> <max_angle> 0.01 </max_angle> </vertical> </scan> <range> <min> 0.2 </min> <max> 4 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"ultrasonic_sensor\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <remapping> ~/out:=ultrasonic_sensor_1 </remapping> </ros> <output_type> sensor_msgs/Range </output_type> <radiation_type> ultrasound </radiation_type> <frame_name> link </frame_name> </plugin> </sensor> </link> </model> </sdf>","title":"sdf / sensor"},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#launch","text":"sensor.launch.py import os from launch import LaunchDescription from launch.actions import AppendEnvironmentVariable , IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from ament_index_python.packages import get_package_share_directory from launch_ros.actions import Node PACKAGE_NAME = \"sam_bot_description\" WORLD = \"gazebo.world\" MODEL = \"ultrasonic\" def generate_launch_description (): pkg_share = get_package_share_directory ( PACKAGE_NAME ) pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) model_sdf_full_path = os . path . join ( pkg_share , \"models\" , MODEL , \"model.sdf\" ) resources = [ os . path . join ( pkg_share , \"worlds\" ) ] resource_env = AppendEnvironmentVariable ( name = \"GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources )) start_gazebo_server_cmd = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gzserver.launch.py' )), launch_arguments = { \"verbose\" : \"true\" , 'world' : WORLD } . items ()) start_gazebo_client_cmd = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gzclient.launch.py' ))) spawn_entity_cmd = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ '-entity' , \"robot_name_in_model\" , '-file' , model_sdf_full_path , '-x' , \"0\" , '-y' , \"0\" , '-z' , \"0.5\" ], output = 'screen' ) ld = LaunchDescription () rviz = Node ( package = \"rviz2\" , executable = \"rviz2\" , arguments = [ \"-d\" , os . path . join ( pkg_share , \"config\" , \"ultrasonic.rviz\" )], ) link_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"link2world\" , arguments = [ \"0\" , \"0\" , \"0.5\" , \"0\" , \"0\" , \"0\" , \"world\" , \"link\" ] ) ld = LaunchDescription () ld . add_action ( resource_env ) ld . add_action ( start_gazebo_server_cmd ) ld . add_action ( start_gazebo_client_cmd ) ld . add_action ( spawn_entity_cmd ) ld . add_action ( rviz ) ld . add_action ( link_tf ) return ld","title":"launch"},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#tf","text":"Add static tf between world to link (model) link_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"link2world\" , arguments = [ \"0\" , \"0\" , \"0.5\" , \"0\" , \"0\" , \"0\" , \"world\" , \"link\" ] )","title":"tf"},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#run","text":"","title":"run"},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/","tags":["gazebo","tutorial"],"text":"Link Wrench # model plugin: libgazebo_ros_force.so system plugin: libgazebo_ros_force_system.so LAB : # libgazebo_ros_force # world gazebo_ros_force_demo.world model force <plugin name= \"gazebo_ros_force\" filename= \"libgazebo_ros_force.so\" > <ros> <namespace> /demo/world </namespace> <remapping> gazebo_ros_force:=force_demo </remapping> </ros> <link_name> link </link_name> <force_frame> world </force_frame> </plugin> # Apply force relative to force_frame ros2 topic pub -1 /demo/world/force_demo geometry_msgs/Wrench \"force: {x: 10.0}\" libgazebo_ros_force_system.so # Run gazebo with system pligin gazebo --verbose -s libgazebo_ros_force_system.so force_demo.world ros2 service list # /apply_joint_effort /apply_link_wrench /clear_joint_efforts /clear_link_wrenches ros2 service call /apply_link_wrench gazebo_msgs/srv/ApplyLinkWrench '{link_name: \"force_on_world_frame::link\", reference_frame: \"\", reference_point: { x: 0, y: 0, z: 0 }, wrench: { force: { x: 10, y: 0, z: 0 }, torque: { x: 0, y: 0, z: 0 } }, start_time: {sec: 0, nanosec: 0}, duration: {sec: -1, nanosec: 0} }' ros2 service call /apply_link_wrench gazebo_msgs/srv/ApplyLinkWrench '{link_name: \"force_on_world_frame::link\", reference_frame: \"force_on_world_frame::link\", reference_point: { x: 0, y: 0, z: 0 }, wrench: { force: { x: 10, y: 0, z: 0 }, torque: { x: 0, y: 0, z: 0 } }, start_time: {sec: 0, nanosec: 0}, duration: {sec: -1, nanosec: 0} }' ros2 service call /clear_link_wrenches gazebo_msgs/srv/LinkRequest '{link_name: \"force_on_world_frame::link\"}' TODO: - usage of this service - reference name ? - reference point - force units - why the box move only when we apply 10 and above - what is the different between the system and the model plugin Reference # gazebo plugin worlds","title":"Body wrench and Joint Effort"},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#link-wrench","text":"model plugin: libgazebo_ros_force.so system plugin: libgazebo_ros_force_system.so","title":"Link Wrench"},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#lab-","text":"","title":"LAB :"},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#libgazebo_ros_force","text":"world gazebo_ros_force_demo.world model force <plugin name= \"gazebo_ros_force\" filename= \"libgazebo_ros_force.so\" > <ros> <namespace> /demo/world </namespace> <remapping> gazebo_ros_force:=force_demo </remapping> </ros> <link_name> link </link_name> <force_frame> world </force_frame> </plugin> # Apply force relative to force_frame ros2 topic pub -1 /demo/world/force_demo geometry_msgs/Wrench \"force: {x: 10.0}\"","title":"libgazebo_ros_force"},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#libgazebo_ros_force_systemso","text":"Run gazebo with system pligin gazebo --verbose -s libgazebo_ros_force_system.so force_demo.world ros2 service list # /apply_joint_effort /apply_link_wrench /clear_joint_efforts /clear_link_wrenches ros2 service call /apply_link_wrench gazebo_msgs/srv/ApplyLinkWrench '{link_name: \"force_on_world_frame::link\", reference_frame: \"\", reference_point: { x: 0, y: 0, z: 0 }, wrench: { force: { x: 10, y: 0, z: 0 }, torque: { x: 0, y: 0, z: 0 } }, start_time: {sec: 0, nanosec: 0}, duration: {sec: -1, nanosec: 0} }' ros2 service call /apply_link_wrench gazebo_msgs/srv/ApplyLinkWrench '{link_name: \"force_on_world_frame::link\", reference_frame: \"force_on_world_frame::link\", reference_point: { x: 0, y: 0, z: 0 }, wrench: { force: { x: 10, y: 0, z: 0 }, torque: { x: 0, y: 0, z: 0 } }, start_time: {sec: 0, nanosec: 0}, duration: {sec: -1, nanosec: 0} }' ros2 service call /clear_link_wrenches gazebo_msgs/srv/LinkRequest '{link_name: \"force_on_world_frame::link\"}' TODO: - usage of this service - reference name ? - reference point - force units - why the box move only when we apply 10 and above - what is the different between the system and the model plugin","title":"libgazebo_ros_force_system.so"},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#reference","text":"gazebo plugin worlds","title":"Reference"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/","tags":["ros2","gazebo","101"],"text":"The robot base on Josh Newans series Making a Mobile Robot with ROS - Full list of tutorials Basic code from josh template github My code locate in github Project and basic launch Odom and baselink Add Lidar","title":"Basic two diff robot 101"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/add_lidar/","text":"","title":"Add lidar"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/localization/","text":"sudo apt install ros-humble-robot-localization Reference # Sensor Fusion Using the Robot Localization Package \u2013 ROS 2","title":"Localization"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/localization/#reference","text":"Sensor Fusion Using the Robot Localization Package \u2013 ROS 2","title":"Reference"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/odom_frame/","tags":["gazebo classic","tutorial","odom"],"text":"diff drive # using odom tf from diff drive plugin change publish_odom_tf from false to true <publish_odom_tf> true </publish_odom_tf>","title":"Odom frame"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/odom_frame/#diff-drive","text":"using odom tf from diff drive plugin change publish_odom_tf from false to true <publish_odom_tf> true </publish_odom_tf>","title":"diff drive"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/slam_toolbox/","text":"slam_toolbox # sudo apt install ros-humble-slam-toolbox mapping # ros2 launch slam_toolbox online_async_launch.py save map # ros2 run nav2_map_server map_saver_cli -f my_map","title":"slam_toolbox"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/slam_toolbox/#slam_toolbox","text":"sudo apt install ros-humble-slam-toolbox","title":"slam_toolbox"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/slam_toolbox/#mapping","text":"ros2 launch slam_toolbox online_async_launch.py","title":"mapping"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/slam_toolbox/#save-map","text":"ros2 run nav2_map_server map_saver_cli -f my_map","title":"save map"},{"location":"blog/ROS2/ignition/","tags":["ign","gz","ros2"],"text":"gz environment variables # IGN_GAZEBO_RESOURCE_PATH IGN_GAZEBO_SYSTEM_PLUGIN_PATH ROS2 # ROS2 copy folder to install folder # install ( DIRECTORY launch models world DESTINATION share / $ { PROJECT_NAME } ) minimum launch # import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription , SetEnvironmentVariable from launch.launch_description_sources import PythonLaunchDescriptionSource def generate_launch_description (): ld = LaunchDescription () pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) pkg = get_package_share_directory ( 'ign_tutorial' ) resources = [ os . path . join ( pkg , \"worlds\" ), os . path . join ( pkg , \"models\" ) ] resource_env = SetEnvironmentVariable ( name = \"IGN_GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources )) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' )), launch_arguments = { 'gz_args' : '-r -v 2 empty.sdf' } . items (), ) ld . add_action ( resource_env ) ld . add_action ( gazebo ) return ld","title":"ROS2 Gazebo"},{"location":"blog/ROS2/ignition/#gz-environment-variables","text":"IGN_GAZEBO_RESOURCE_PATH IGN_GAZEBO_SYSTEM_PLUGIN_PATH","title":"gz environment variables"},{"location":"blog/ROS2/ignition/#ros2","text":"","title":"ROS2"},{"location":"blog/ROS2/ignition/#ros2-copy-folder-to-install-folder","text":"install ( DIRECTORY launch models world DESTINATION share / $ { PROJECT_NAME } )","title":"ROS2 copy folder to install folder"},{"location":"blog/ROS2/ignition/#minimum-launch","text":"import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription , SetEnvironmentVariable from launch.launch_description_sources import PythonLaunchDescriptionSource def generate_launch_description (): ld = LaunchDescription () pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) pkg = get_package_share_directory ( 'ign_tutorial' ) resources = [ os . path . join ( pkg , \"worlds\" ), os . path . join ( pkg , \"models\" ) ] resource_env = SetEnvironmentVariable ( name = \"IGN_GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources )) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' )), launch_arguments = { 'gz_args' : '-r -v 2 empty.sdf' } . items (), ) ld . add_action ( resource_env ) ld . add_action ( gazebo ) return ld","title":"minimum launch"},{"location":"blog/ROS2/ignition/jointstate/","tags":["ignition","ros2","bridge","None"],"text":"Robot_State_Publisher # robot_state_publisher uses the URDF specified by the parameter robot_description and the joint positions from the topic joint_states to calculate the forward kinematics of the robot and publish the results via tf. Joint_State_Publisher # The JointStatePub system publishes state information for a model. The published message type is ignition::msgs::Model, and the publication topic is /world/<world_name>/model/<model_name>/joint_state . <plugin filename= \"ignition-gazebo-joint-state-publisher-system\" name= \"ignition::gazebo::systems::JointStatePublisher\" > </plugin> Demo # Create 2 wheel robot urdf(xacro) Run ignition spawn the robot Bridge ign and ROS2 msgs Run rviz2 project # \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 mobile.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 basic_mobile_robot \u2502 \u251c\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 robot_base.stl \u2502 \u2514\u2500\u2500 mobile_bot.xacro \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 empty.sdf launch # mobile.launch.py import os import xacro from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource PACKAGE_NAME = \"ign_tutorial\" def generate_launch_description (): pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) pkg_demo = get_package_share_directory ( PACKAGE_NAME ) # Parse robot description from xacro robot_description_file = os . path . join ( pkg_demo , 'models' , \"basic_mobile_robot\" , 'mobile_bot.xacro' ) robot_description_config = xacro . process_file ( robot_description_file ) robot_description = robot_description_config . toxml () params = { 'use_sim_time' : True , 'robot_description' : robot_description } # Robot state publisher robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'both' , parameters = [ params ], ) # Gazebo Sim gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' ) ), launch_arguments = { 'gz_args' : '-r empty.sdf' } . items (), ) # Spawn spawn = Node ( package = 'ros_gz_sim' , executable = 'create' , arguments = [ '-name' , 'basic' , '-topic' , 'robot_description' , ], output = 'screen' , ) # Bridge bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock' , # Joint states (IGN -> ROS2) '/world/empty/model/basic/joint_state@sensor_msgs/msg/JointState[gz.msgs.Model' , ], remappings = [ ( '/world/empty/model/basic/joint_state' , 'joint_states' ), ], output = 'screen' ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( pkg_demo , 'config' , 'rviz.rviz' )] ) return LaunchDescription ( [ gazebo , spawn , bridge , robot_state_publisher , rviz_node ] ) ign topic --list /clock /gazebo/resource_paths /gui/camera/pose /stats /world/empty/clock /world/empty/dynamic_pose/info /world/empty/model/basic/joint_state /world/empty/pose/info /world/empty/scene/deletion /world/empty/scene/info /world/empty/state /world/empty/stats # info ign topic --info -t /world/empty/model/basic/joint_state Publishers [ Address, Message Type ] : tcp://172.18.0.1:46571, ignition.msgs.Model urdf # basic_mobile_robot.urdf.xacro <?xml version=\"1.0\" ?> <robot name= \"basic_mobile_bot\" xmlns:xacro= \"http://ros.org/wiki/xacro\" > <!-- ****************** ROBOT CONSTANTS ******************************* --> <!-- Define the size of the robot's main chassis in meters --> <xacro:property name= \"base_width\" value= \"0.39\" /> <xacro:property name= \"base_length\" value= \"0.70\" /> <xacro:property name= \"base_height\" value= \"0.20\" /> <!-- Define the shape of the robot's two back wheels in meters --> <xacro:property name= \"wheel_radius\" value= \"0.14\" /> <xacro:property name= \"wheel_width\" value= \"0.06\" /> <!-- x-axis points forward, y-axis points to left, z-axis points upwards --> <!-- Define the gap between the wheel and chassis along y-axis in meters --> <xacro:property name= \"wheel_ygap\" value= \"0.035\" /> <!-- Position the wheels along the z-axis --> <xacro:property name= \"wheel_zoff\" value= \"0.05\" /> <!-- Position the wheels along the x-axis --> <xacro:property name= \"wheel_xoff\" value= \"0.221\" /> <!-- Position the caster wheel along the x-axis --> <xacro:property name= \"caster_xoff\" value= \"0.217\" /> <!-- Define intertial property macros --> <xacro:macro name= \"box_inertia\" params= \"m w h d\" > <inertial> <origin xyz= \"0 0 0\" rpy= \"${pi/2} 0 ${pi/2}\" /> <mass value= \"${m}\" /> <inertia ixx= \"${(m/12) * (h*h + d*d)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${(m/12) * (w*w + d*d)}\" iyz= \"0.0\" izz= \"${(m/12) * (w*w + h*h)}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertia\" params= \"m r h\" > <inertial> <origin xyz= \"0 0 0\" rpy= \"${pi/2} 0 0\" /> <mass value= \"${m}\" /> <inertia ixx= \"${(m/12) * (3*r*r + h*h)}\" ixy = \"0\" ixz = \"0\" iyy= \"${(m/12) * (3*r*r + h*h)}\" iyz = \"0\" izz= \"${(m/2) * (r*r)}\" /> </inertial> </xacro:macro> <xacro:macro name= \"sphere_inertia\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${(2/5) * m * (r*r)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${(2/5) * m * (r*r)}\" iyz= \"0.0\" izz= \"${(2/5) * m * (r*r)}\" /> </inertial> </xacro:macro> <!-- ****************** ROBOT BASE FOOTPRINT *************************** --> <!-- Define the center of the main robot chassis projected on the ground --> <link name= \"world\" /> <!-- The base footprint of the robot is located underneath the chassis --> <joint name= \"base_joint\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"base_link\" /> <origin xyz= \"0.0 0.0 ${(wheel_radius+wheel_zoff)}\" rpy= \"0 0 0\" /> </joint> <!-- ********************** ROBOT BASE ********************************* --> <link name= \"base_link\" > <visual> <origin xyz= \"0 0 -0.05\" rpy= \"1.5707963267949 0 3.141592654\" /> <geometry> <mesh filename= \"file:///home/user/wasp_ws/src/tutorials/ign_tutorial/models/basic_mobile_robot/meshes/robot_base.stl\" /> </geometry> <material name= \"Red\" > <color rgba= \"${255/255} ${0/255} ${0/255} 1.0\" /> </material> </visual> <collision> <geometry> <box size= \"${base_length} ${base_width} ${base_height}\" /> </geometry> </collision> <xacro:box_inertia m= \"40.0\" w= \"${base_width}\" d= \"${base_length}\" h= \"${base_height}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Red </material> </gazebo> <!-- *********************** DRIVE WHEELS ****************************** --> <xacro:macro name= \"wheel\" params= \"prefix x_reflect y_reflect\" > <link name= \"${prefix}_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707963267949 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length= \"${wheel_width}\" /> </geometry> <material name= \"White\" > <color rgba= \"${255/255} ${255/255} ${255/255} 1.0\" /> </material> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${pi/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length= \"${wheel_width}\" /> </geometry> </collision> <xacro:cylinder_inertia m= \"110.5\" r= \"${wheel_radius}\" h= \"${wheel_width}\" /> </link> <!-- Connect the wheels to the base_link at the appropriate location, and define a continuous joint to allow the wheels to freely rotate about an axis --> <joint name= \"${prefix}_joint\" type= \"revolute\" > <parent link= \"base_link\" /> <child link= \"${prefix}_link\" /> <origin xyz= \"${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}\" rpy= \"0 0 0\" /> <limit upper= \"3.1415\" lower= \"-3.1415\" effort= \"30\" velocity= \"5.0\" /> <axis xyz= \"0 1 0\" /> </joint> </xacro:macro> <!-- Instantiate two wheels using the macro we just made through the xacro:wheel tags. We also define the parameters to have one wheel on both sides at the back of our robot (i.e. x_reflect=-1). --> <xacro:wheel prefix= \"drivewhl_l\" x_reflect= \"-1\" y_reflect= \"1\" /> <xacro:wheel prefix= \"drivewhl_r\" x_reflect= \"-1\" y_reflect= \"-1\" /> <!-- *********************** CASTER WHEEL ****************************** --> <!-- We add a caster wheel. It will be modeled as sphere. We define the wheel\u2019s geometry, material and the joint to connect it to base_link at the appropriate location. --> <link name= \"front_caster\" > <visual> <geometry> <sphere radius= \"${(wheel_radius+wheel_zoff-(base_height/2))}\" /> </geometry> <material name= \"White\" > <color rgba= \"${255/255} ${255/255} ${255/255} 1.0\" /> </material> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${(wheel_radius+wheel_zoff-(base_height/2))}\" /> </geometry> </collision> <xacro:sphere_inertia m= \"10.05\" r= \"${(wheel_radius+wheel_zoff-(base_height/2))}\" /> </link> <gazebo reference= \"front_caster\" > <mu1> 0.01 </mu1> <mu2> 0.01 </mu2> <material> Gazebo/White </material> </gazebo> <joint name= \"caster_joint\" type= \"fixed\" > <parent link= \"base_link\" /> <child link= \"front_caster\" /> <origin xyz= \"${caster_xoff} 0.0 ${-(base_height/2)}\" rpy= \"0 0 0\" /> </joint> <!-- *********************** IMU SETUP ********************************* --> <!-- Each sensor must be attached to a link. --> <joint name= \"imu_joint\" type= \"fixed\" > <parent link= \"base_link\" /> <child link= \"imu_link\" /> <origin xyz= \"-0.10 0 0.05\" rpy= \"0 0 0\" /> </joint> <link name= \"imu_link\" /> <!-- *********************** GPS SETUP ********************************** --> <joint name= \"gps_joint\" type= \"fixed\" > <parent link= \"base_link\" /> <child link= \"gps_link\" /> <origin xyz= \"0.10 0 0.05\" rpy= \"0 0 0\" /> </joint> <link name= \"gps_link\" /> <gazebo> <plugin filename= \"libignition-gazebo-joint-state-publisher-system.so\" name= \"ignition::gazebo::systems::JointStatePublisher\" > </plugin> </gazebo> </robot> world # <sdf version= \"1.6\" > <world name= \"my-empty\" > <physics name= \"1ms\" type= \"ignored\" > <max_step_size> 0.001 </max_step_size> <real_time_factor> 1.0 </real_time_factor> </physics> <plugin filename= \"ignition-gazebo-physics-system\" name= \"ignition::gazebo::systems::Physics\" > </plugin> <plugin filename= \"ignition-gazebo-scene-broadcaster-system\" name= \"ignition::gazebo::systems::SceneBroadcaster\" > </plugin> <light type= \"directional\" name= \"sun\" > <cast_shadows> true </cast_shadows> <pose> 0 0 10 0 0 0 </pose> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.2 0.2 0.2 1 </specular> <attenuation> <range> 1000 </range> <constant> 0.9 </constant> <linear> 0.01 </linear> <quadratic> 0.001 </quadratic> </attenuation> <direction> -0.5 0.1 -0.9 </direction> </light> <model name= \"ground_plane\" > <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> </collision> <visual name= \"visual\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> <material> <ambient> 0.8 0.8 0.8 1 </ambient> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.8 0.8 0.8 1 </specular> </material> </visual> </link> </model> </world> </sdf> Reference # double_pendulum_model launch demo ros_gz_sim_demos JointStatePublisher Class Reference joint state publisher and robot state publisher RVIZ2 Tutorials Episode1: Learn TF","title":"JointStatePublisher"},{"location":"blog/ROS2/ignition/jointstate/#robot_state_publisher","text":"robot_state_publisher uses the URDF specified by the parameter robot_description and the joint positions from the topic joint_states to calculate the forward kinematics of the robot and publish the results via tf.","title":"Robot_State_Publisher"},{"location":"blog/ROS2/ignition/jointstate/#joint_state_publisher","text":"The JointStatePub system publishes state information for a model. The published message type is ignition::msgs::Model, and the publication topic is /world/<world_name>/model/<model_name>/joint_state . <plugin filename= \"ignition-gazebo-joint-state-publisher-system\" name= \"ignition::gazebo::systems::JointStatePublisher\" > </plugin>","title":"Joint_State_Publisher"},{"location":"blog/ROS2/ignition/jointstate/#demo","text":"Create 2 wheel robot urdf(xacro) Run ignition spawn the robot Bridge ign and ROS2 msgs Run rviz2","title":"Demo"},{"location":"blog/ROS2/ignition/jointstate/#project","text":"\u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 mobile.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 basic_mobile_robot \u2502 \u251c\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 robot_base.stl \u2502 \u2514\u2500\u2500 mobile_bot.xacro \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 empty.sdf","title":"project"},{"location":"blog/ROS2/ignition/jointstate/#launch","text":"mobile.launch.py import os import xacro from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource PACKAGE_NAME = \"ign_tutorial\" def generate_launch_description (): pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) pkg_demo = get_package_share_directory ( PACKAGE_NAME ) # Parse robot description from xacro robot_description_file = os . path . join ( pkg_demo , 'models' , \"basic_mobile_robot\" , 'mobile_bot.xacro' ) robot_description_config = xacro . process_file ( robot_description_file ) robot_description = robot_description_config . toxml () params = { 'use_sim_time' : True , 'robot_description' : robot_description } # Robot state publisher robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'both' , parameters = [ params ], ) # Gazebo Sim gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' ) ), launch_arguments = { 'gz_args' : '-r empty.sdf' } . items (), ) # Spawn spawn = Node ( package = 'ros_gz_sim' , executable = 'create' , arguments = [ '-name' , 'basic' , '-topic' , 'robot_description' , ], output = 'screen' , ) # Bridge bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock' , # Joint states (IGN -> ROS2) '/world/empty/model/basic/joint_state@sensor_msgs/msg/JointState[gz.msgs.Model' , ], remappings = [ ( '/world/empty/model/basic/joint_state' , 'joint_states' ), ], output = 'screen' ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( pkg_demo , 'config' , 'rviz.rviz' )] ) return LaunchDescription ( [ gazebo , spawn , bridge , robot_state_publisher , rviz_node ] ) ign topic --list /clock /gazebo/resource_paths /gui/camera/pose /stats /world/empty/clock /world/empty/dynamic_pose/info /world/empty/model/basic/joint_state /world/empty/pose/info /world/empty/scene/deletion /world/empty/scene/info /world/empty/state /world/empty/stats # info ign topic --info -t /world/empty/model/basic/joint_state Publishers [ Address, Message Type ] : tcp://172.18.0.1:46571, ignition.msgs.Model","title":"launch"},{"location":"blog/ROS2/ignition/jointstate/#urdf","text":"basic_mobile_robot.urdf.xacro <?xml version=\"1.0\" ?> <robot name= \"basic_mobile_bot\" xmlns:xacro= \"http://ros.org/wiki/xacro\" > <!-- ****************** ROBOT CONSTANTS ******************************* --> <!-- Define the size of the robot's main chassis in meters --> <xacro:property name= \"base_width\" value= \"0.39\" /> <xacro:property name= \"base_length\" value= \"0.70\" /> <xacro:property name= \"base_height\" value= \"0.20\" /> <!-- Define the shape of the robot's two back wheels in meters --> <xacro:property name= \"wheel_radius\" value= \"0.14\" /> <xacro:property name= \"wheel_width\" value= \"0.06\" /> <!-- x-axis points forward, y-axis points to left, z-axis points upwards --> <!-- Define the gap between the wheel and chassis along y-axis in meters --> <xacro:property name= \"wheel_ygap\" value= \"0.035\" /> <!-- Position the wheels along the z-axis --> <xacro:property name= \"wheel_zoff\" value= \"0.05\" /> <!-- Position the wheels along the x-axis --> <xacro:property name= \"wheel_xoff\" value= \"0.221\" /> <!-- Position the caster wheel along the x-axis --> <xacro:property name= \"caster_xoff\" value= \"0.217\" /> <!-- Define intertial property macros --> <xacro:macro name= \"box_inertia\" params= \"m w h d\" > <inertial> <origin xyz= \"0 0 0\" rpy= \"${pi/2} 0 ${pi/2}\" /> <mass value= \"${m}\" /> <inertia ixx= \"${(m/12) * (h*h + d*d)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${(m/12) * (w*w + d*d)}\" iyz= \"0.0\" izz= \"${(m/12) * (w*w + h*h)}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertia\" params= \"m r h\" > <inertial> <origin xyz= \"0 0 0\" rpy= \"${pi/2} 0 0\" /> <mass value= \"${m}\" /> <inertia ixx= \"${(m/12) * (3*r*r + h*h)}\" ixy = \"0\" ixz = \"0\" iyy= \"${(m/12) * (3*r*r + h*h)}\" iyz = \"0\" izz= \"${(m/2) * (r*r)}\" /> </inertial> </xacro:macro> <xacro:macro name= \"sphere_inertia\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${(2/5) * m * (r*r)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${(2/5) * m * (r*r)}\" iyz= \"0.0\" izz= \"${(2/5) * m * (r*r)}\" /> </inertial> </xacro:macro> <!-- ****************** ROBOT BASE FOOTPRINT *************************** --> <!-- Define the center of the main robot chassis projected on the ground --> <link name= \"world\" /> <!-- The base footprint of the robot is located underneath the chassis --> <joint name= \"base_joint\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"base_link\" /> <origin xyz= \"0.0 0.0 ${(wheel_radius+wheel_zoff)}\" rpy= \"0 0 0\" /> </joint> <!-- ********************** ROBOT BASE ********************************* --> <link name= \"base_link\" > <visual> <origin xyz= \"0 0 -0.05\" rpy= \"1.5707963267949 0 3.141592654\" /> <geometry> <mesh filename= \"file:///home/user/wasp_ws/src/tutorials/ign_tutorial/models/basic_mobile_robot/meshes/robot_base.stl\" /> </geometry> <material name= \"Red\" > <color rgba= \"${255/255} ${0/255} ${0/255} 1.0\" /> </material> </visual> <collision> <geometry> <box size= \"${base_length} ${base_width} ${base_height}\" /> </geometry> </collision> <xacro:box_inertia m= \"40.0\" w= \"${base_width}\" d= \"${base_length}\" h= \"${base_height}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Red </material> </gazebo> <!-- *********************** DRIVE WHEELS ****************************** --> <xacro:macro name= \"wheel\" params= \"prefix x_reflect y_reflect\" > <link name= \"${prefix}_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707963267949 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length= \"${wheel_width}\" /> </geometry> <material name= \"White\" > <color rgba= \"${255/255} ${255/255} ${255/255} 1.0\" /> </material> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${pi/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length= \"${wheel_width}\" /> </geometry> </collision> <xacro:cylinder_inertia m= \"110.5\" r= \"${wheel_radius}\" h= \"${wheel_width}\" /> </link> <!-- Connect the wheels to the base_link at the appropriate location, and define a continuous joint to allow the wheels to freely rotate about an axis --> <joint name= \"${prefix}_joint\" type= \"revolute\" > <parent link= \"base_link\" /> <child link= \"${prefix}_link\" /> <origin xyz= \"${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}\" rpy= \"0 0 0\" /> <limit upper= \"3.1415\" lower= \"-3.1415\" effort= \"30\" velocity= \"5.0\" /> <axis xyz= \"0 1 0\" /> </joint> </xacro:macro> <!-- Instantiate two wheels using the macro we just made through the xacro:wheel tags. We also define the parameters to have one wheel on both sides at the back of our robot (i.e. x_reflect=-1). --> <xacro:wheel prefix= \"drivewhl_l\" x_reflect= \"-1\" y_reflect= \"1\" /> <xacro:wheel prefix= \"drivewhl_r\" x_reflect= \"-1\" y_reflect= \"-1\" /> <!-- *********************** CASTER WHEEL ****************************** --> <!-- We add a caster wheel. It will be modeled as sphere. We define the wheel\u2019s geometry, material and the joint to connect it to base_link at the appropriate location. --> <link name= \"front_caster\" > <visual> <geometry> <sphere radius= \"${(wheel_radius+wheel_zoff-(base_height/2))}\" /> </geometry> <material name= \"White\" > <color rgba= \"${255/255} ${255/255} ${255/255} 1.0\" /> </material> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${(wheel_radius+wheel_zoff-(base_height/2))}\" /> </geometry> </collision> <xacro:sphere_inertia m= \"10.05\" r= \"${(wheel_radius+wheel_zoff-(base_height/2))}\" /> </link> <gazebo reference= \"front_caster\" > <mu1> 0.01 </mu1> <mu2> 0.01 </mu2> <material> Gazebo/White </material> </gazebo> <joint name= \"caster_joint\" type= \"fixed\" > <parent link= \"base_link\" /> <child link= \"front_caster\" /> <origin xyz= \"${caster_xoff} 0.0 ${-(base_height/2)}\" rpy= \"0 0 0\" /> </joint> <!-- *********************** IMU SETUP ********************************* --> <!-- Each sensor must be attached to a link. --> <joint name= \"imu_joint\" type= \"fixed\" > <parent link= \"base_link\" /> <child link= \"imu_link\" /> <origin xyz= \"-0.10 0 0.05\" rpy= \"0 0 0\" /> </joint> <link name= \"imu_link\" /> <!-- *********************** GPS SETUP ********************************** --> <joint name= \"gps_joint\" type= \"fixed\" > <parent link= \"base_link\" /> <child link= \"gps_link\" /> <origin xyz= \"0.10 0 0.05\" rpy= \"0 0 0\" /> </joint> <link name= \"gps_link\" /> <gazebo> <plugin filename= \"libignition-gazebo-joint-state-publisher-system.so\" name= \"ignition::gazebo::systems::JointStatePublisher\" > </plugin> </gazebo> </robot>","title":"urdf"},{"location":"blog/ROS2/ignition/jointstate/#world","text":"<sdf version= \"1.6\" > <world name= \"my-empty\" > <physics name= \"1ms\" type= \"ignored\" > <max_step_size> 0.001 </max_step_size> <real_time_factor> 1.0 </real_time_factor> </physics> <plugin filename= \"ignition-gazebo-physics-system\" name= \"ignition::gazebo::systems::Physics\" > </plugin> <plugin filename= \"ignition-gazebo-scene-broadcaster-system\" name= \"ignition::gazebo::systems::SceneBroadcaster\" > </plugin> <light type= \"directional\" name= \"sun\" > <cast_shadows> true </cast_shadows> <pose> 0 0 10 0 0 0 </pose> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.2 0.2 0.2 1 </specular> <attenuation> <range> 1000 </range> <constant> 0.9 </constant> <linear> 0.01 </linear> <quadratic> 0.001 </quadratic> </attenuation> <direction> -0.5 0.1 -0.9 </direction> </light> <model name= \"ground_plane\" > <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> </collision> <visual name= \"visual\" > <geometry> <plane> <normal> 0 0 1 </normal> <size> 100 100 </size> </plane> </geometry> <material> <ambient> 0.8 0.8 0.8 1 </ambient> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.8 0.8 0.8 1 </specular> </material> </visual> </link> </model> </world> </sdf>","title":"world"},{"location":"blog/ROS2/ignition/jointstate/#reference","text":"double_pendulum_model launch demo ros_gz_sim_demos JointStatePublisher Class Reference joint state publisher and robot state publisher RVIZ2 Tutorials Episode1: Learn TF","title":"Reference"},{"location":"blog/ROS2/ignition/spawn_xacro/","tags":["ign","xacro"],"text":"LAB # Spawn xacro model into ign gazebo world View in rviz project # \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 xacro_demo.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 basic.xacro \u2514\u2500\u2500 package.xml CMakeLists # Copy launch, models and config file to workspace install folder CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( ign_tutorial ) find_package ( ament_cmake REQUIRED ) install ( DIRECTORY launch models config DESTINATION share / $ { PROJECT_NAME } ) ament_package () launch file # Use gz_sim.launch.py launch from ros_gz_sim package to launch ignition with empty.world Use xacro node from xacro package to parse the urdf.xacro file Use create node from ros_gz_sim package to spawn the urdf xacro_demo.launch.py import os import xacro from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource PACKAGE_NAME = \"ign_tutorial\" def generate_launch_description (): pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) pkg_demo = get_package_share_directory ( PACKAGE_NAME ) # Parse robot description from xacro robot_description_file = os . path . join ( pkg_demo , 'models' , 'basic.xacro' ) robot_description_config = xacro . process_file ( robot_description_file ) robot_description = robot_description_config . toxml () params = { 'use_sim_time' : True , 'robot_description' : robot_description } # Robot state publisher robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'both' , parameters = [ params ], ) # Gazebo Sim gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' ) ), launch_arguments = { 'gz_args' : '-r empty.sdf' } . items (), ) # Spawn spawn = Node ( package = 'ros_gz_sim' , executable = 'create' , arguments = [ '-name' , 'basic' , '-topic' , 'robot_description' , ], output = 'screen' , ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( get_package_share_directory ( PACKAGE_NAME ), 'config' , 'rviz.rviz' )] ) return LaunchDescription ( [ gazebo , spawn , robot_state_publisher , rviz_node ] ) urdf # Declare world link and fixed join for tf basic.xacro <?xml version=\"1.0\"?> <robot name= \"basic_xacro\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"height1\" value= \"2\" /> <xacro:property name= \"mass\" value= \"1\" /> <xacro:property name= \"width\" value= \"0.1\" /> <material name= \"orange\" > <color rgba= \"${255/255} ${108/255} ${10/255} 1.0\" /> </material> <link name= \"world\" /> <joint name= \"fixed\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"link1\" /> </joint> <!-- Base Link --> <link name= \"link1\" > <collision> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> <material name= \"orange\" /> </visual> <inertial> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <mass value= \"${mass}\" /> <inertia ixx= \"${mass / 12.0 * (width*width + height1*height1)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${mass / 12.0 * (height1*height1 + width*width)}\" iyz= \"0.0\" izz= \"${mass / 12.0 * (width*width + width*width)}\" /> </inertial> </link> </robot> Dependencies # rviz2 ros_gz_sim xacro robot_state_publisher package.xml # Add the following dependencies <exec_depend> xacro </exec_depend> <exec_depend> robot_state_publisher </exec_depend> <exec_depend> ros_gz_sim </exec_depend> <exec_depend> rviz2 </exec_depend> rosdep # # from package root rosdep install --from-paths . --ignore-src --rosdistro = humble apt # sudo apt install ros-humble-ros-gz-sim sudo apt install ros-humble-xacro sudo apt install ros-humble-robot-state-publisher sudo apt install ros-humble-rviz2","title":"Spawn xacro model"},{"location":"blog/ROS2/ignition/spawn_xacro/#lab","text":"Spawn xacro model into ign gazebo world View in rviz","title":"LAB"},{"location":"blog/ROS2/ignition/spawn_xacro/#project","text":"\u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 xacro_demo.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 basic.xacro \u2514\u2500\u2500 package.xml","title":"project"},{"location":"blog/ROS2/ignition/spawn_xacro/#cmakelists","text":"Copy launch, models and config file to workspace install folder CMakeLists.txt cmake_minimum_required ( VERSION 3.8 ) project ( ign_tutorial ) find_package ( ament_cmake REQUIRED ) install ( DIRECTORY launch models config DESTINATION share / $ { PROJECT_NAME } ) ament_package ()","title":"CMakeLists"},{"location":"blog/ROS2/ignition/spawn_xacro/#launch-file","text":"Use gz_sim.launch.py launch from ros_gz_sim package to launch ignition with empty.world Use xacro node from xacro package to parse the urdf.xacro file Use create node from ros_gz_sim package to spawn the urdf xacro_demo.launch.py import os import xacro from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource PACKAGE_NAME = \"ign_tutorial\" def generate_launch_description (): pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) pkg_demo = get_package_share_directory ( PACKAGE_NAME ) # Parse robot description from xacro robot_description_file = os . path . join ( pkg_demo , 'models' , 'basic.xacro' ) robot_description_config = xacro . process_file ( robot_description_file ) robot_description = robot_description_config . toxml () params = { 'use_sim_time' : True , 'robot_description' : robot_description } # Robot state publisher robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'both' , parameters = [ params ], ) # Gazebo Sim gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' ) ), launch_arguments = { 'gz_args' : '-r empty.sdf' } . items (), ) # Spawn spawn = Node ( package = 'ros_gz_sim' , executable = 'create' , arguments = [ '-name' , 'basic' , '-topic' , 'robot_description' , ], output = 'screen' , ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( get_package_share_directory ( PACKAGE_NAME ), 'config' , 'rviz.rviz' )] ) return LaunchDescription ( [ gazebo , spawn , robot_state_publisher , rviz_node ] )","title":"launch file"},{"location":"blog/ROS2/ignition/spawn_xacro/#urdf","text":"Declare world link and fixed join for tf basic.xacro <?xml version=\"1.0\"?> <robot name= \"basic_xacro\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"height1\" value= \"2\" /> <xacro:property name= \"mass\" value= \"1\" /> <xacro:property name= \"width\" value= \"0.1\" /> <material name= \"orange\" > <color rgba= \"${255/255} ${108/255} ${10/255} 1.0\" /> </material> <link name= \"world\" /> <joint name= \"fixed\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"link1\" /> </joint> <!-- Base Link --> <link name= \"link1\" > <collision> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> <material name= \"orange\" /> </visual> <inertial> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <mass value= \"${mass}\" /> <inertia ixx= \"${mass / 12.0 * (width*width + height1*height1)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${mass / 12.0 * (height1*height1 + width*width)}\" iyz= \"0.0\" izz= \"${mass / 12.0 * (width*width + width*width)}\" /> </inertial> </link> </robot>","title":"urdf"},{"location":"blog/ROS2/ignition/spawn_xacro/#dependencies","text":"rviz2 ros_gz_sim xacro robot_state_publisher","title":"Dependencies"},{"location":"blog/ROS2/ignition/spawn_xacro/#packagexml","text":"Add the following dependencies <exec_depend> xacro </exec_depend> <exec_depend> robot_state_publisher </exec_depend> <exec_depend> ros_gz_sim </exec_depend> <exec_depend> rviz2 </exec_depend>","title":"package.xml"},{"location":"blog/ROS2/ignition/spawn_xacro/#rosdep","text":"# from package root rosdep install --from-paths . --ignore-src --rosdistro = humble","title":"rosdep"},{"location":"blog/ROS2/ignition/spawn_xacro/#apt","text":"sudo apt install ros-humble-ros-gz-sim sudo apt install ros-humble-xacro sudo apt install ros-humble-robot-state-publisher sudo apt install ros-humble-rviz2","title":"apt"},{"location":"blog/ROS2/ignition/tips/","tags":["gazebo","tips"],"text":"dashboard # gazebo dashboard include same model multiple times # <include> <uri> model://coke_can </uri> <name> coke1 </name> <pose> 0 2 0 0 0 0 </pose> </include> <include> <uri> model://coke_can </uri> <name> coke2 </name> <pose> 0 -5 1 0 0 0 </pose> </include> include from fuel # <include> <name> j1 </name> <pose frame= '' > 0 0 0 0 0 0 </pose> <uri> https://fuel.gazebosim.org/1.0/OpenRobotics/models/Jersey Barrier </uri> </include>","title":"Ignition gazebo tips"},{"location":"blog/ROS2/ignition/tips/#dashboard","text":"gazebo dashboard","title":"dashboard"},{"location":"blog/ROS2/ignition/tips/#include-same-model-multiple-times","text":"<include> <uri> model://coke_can </uri> <name> coke1 </name> <pose> 0 2 0 0 0 0 </pose> </include> <include> <uri> model://coke_can </uri> <name> coke2 </name> <pose> 0 -5 1 0 0 0 </pose> </include>","title":"include same model multiple times"},{"location":"blog/ROS2/ignition/tips/#include-from-fuel","text":"<include> <name> j1 </name> <pose frame= '' > 0 0 0 0 0 0 </pose> <uri> https://fuel.gazebosim.org/1.0/OpenRobotics/models/Jersey Barrier </uri> </include>","title":"include from fuel"},{"location":"blog/ROS2/ignition/bridge/","tags":["ros_ign"],"text":"ros ign bridge # ros_ign contains packages that provide integration between ROS2 and Ignition: ros_ign: Metapackage that provides all other software packages; ros_ign_image: Use image_transport to transfer the image from Ignition to the one-way transmission bridge of ROS; ros_ign_bridge: Two-way transmission bridge between Ignition and ROS; ros_ign_gazebo: It is convenient to use the startup files and executable files of Ignition Gazebo and ROS; ros_ign_gazebo_demos: Demos using ROS-Ignition integration; ros_ign_point_cloud: A plug-in used to simulate publishing point clouds to ROS from Ignition Gazebo install # sudo apt install ros-humble-ros-gz usage # launch file that run node for each mapping The launch file included by parent launch file that run ignition and spawn the robot project \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 ekf.yaml \u2502 \u2514\u2500\u2500 nav2_params.yaml \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 display.launch.py \u2502 \u2514\u2500\u2500 sam_bridge.launch.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 rviz \u2502 \u2514\u2500\u2500 urdf_config.rviz \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 description \u2502 \u2514\u2500\u2500 sam_bot_description.urdf \u2514\u2500\u2500 world \u251c\u2500\u2500 ign_world.sdf \u2514\u2500\u2500 my_world.sdf gazebo, spawn, bridge # Gazebo Sim gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' ) ), launch_arguments = { 'gz_args' : f '-r { world_path } ' } . items (), ) #spawn spawn_entity = Node ( package = 'ros_gz_sim' , executable = 'create' , arguments = [ '-name' , 'sam_bot' , '-topic' , 'robot_description' , '-z' , '0.5' ], output = 'screen' , ) #bridge ign_bridge = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_share , 'launch' , BRIDGE_FILE_NAME ), ), launch_arguments = { 'use_sim_time' : \"True\" } . items () ) Reference # ROS + Gazebo Sim demos","title":"Ignition ROS2"},{"location":"blog/ROS2/ignition/bridge/#ros-ign-bridge","text":"ros_ign contains packages that provide integration between ROS2 and Ignition: ros_ign: Metapackage that provides all other software packages; ros_ign_image: Use image_transport to transfer the image from Ignition to the one-way transmission bridge of ROS; ros_ign_bridge: Two-way transmission bridge between Ignition and ROS; ros_ign_gazebo: It is convenient to use the startup files and executable files of Ignition Gazebo and ROS; ros_ign_gazebo_demos: Demos using ROS-Ignition integration; ros_ign_point_cloud: A plug-in used to simulate publishing point clouds to ROS from Ignition Gazebo","title":"ros ign bridge"},{"location":"blog/ROS2/ignition/bridge/#install","text":"sudo apt install ros-humble-ros-gz","title":"install"},{"location":"blog/ROS2/ignition/bridge/#usage","text":"launch file that run node for each mapping The launch file included by parent launch file that run ignition and spawn the robot project \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 ekf.yaml \u2502 \u2514\u2500\u2500 nav2_params.yaml \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 display.launch.py \u2502 \u2514\u2500\u2500 sam_bridge.launch.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 rviz \u2502 \u2514\u2500\u2500 urdf_config.rviz \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 description \u2502 \u2514\u2500\u2500 sam_bot_description.urdf \u2514\u2500\u2500 world \u251c\u2500\u2500 ign_world.sdf \u2514\u2500\u2500 my_world.sdf gazebo, spawn, bridge # Gazebo Sim gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' ) ), launch_arguments = { 'gz_args' : f '-r { world_path } ' } . items (), ) #spawn spawn_entity = Node ( package = 'ros_gz_sim' , executable = 'create' , arguments = [ '-name' , 'sam_bot' , '-topic' , 'robot_description' , '-z' , '0.5' ], output = 'screen' , ) #bridge ign_bridge = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_share , 'launch' , BRIDGE_FILE_NAME ), ), launch_arguments = { 'use_sim_time' : \"True\" } . items () )","title":"usage"},{"location":"blog/ROS2/ignition/bridge/#reference","text":"ROS + Gazebo Sim demos","title":"Reference"},{"location":"blog/ROS2/ignition/bridge/camera/","tags":["ignition","ros2","camera","bridge"],"text":"IGNITION: fortress ROS2: humble Objective # Create simulation with camera Publish camera using ros_ign bridge Write launch file View camera image in RVIZ model with camera # Based on vehicle model from this post Add this lines to exists model don\u2019t forget World sdf must contain sensors plugin <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre </render_engine> </plugin> camera link and sensor # <frame name= \"camera_frame\" attached_to= 'chassis' > <pose> -0.8 0 1.5 0 0 0 </pose> </frame> <link name= \"camera_link\" > <pose relative_to= 'camera_frame' > 0 0 0 0 0 0 </pose> <inertial> <mass> 0.1 </mass> <inertia> <ixx> 0.000166667 </ixx> <iyy> 0.000166667 </iyy> <izz> 0.000166667 </izz> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"camera\" type= \"camera\" > <camera> <horizontal_fov> 1.047 </horizontal_fov> <image> <width> 320 </width> <height> 240 </height> </image> <clip> <near> 0.1 </near> <far> 100 </far> </clip> </camera> <always_on> 1 </always_on> <update_rate> 30 </update_rate> <visualize> true </visualize> <topic> camera </topic> </sensor> </link> <joint name= 'camera_joint' type= 'fixed' > <parent> chassis </parent> <child> camera_link </child> </joint> Cli # terminal2 ros2 run ros_gz_bridge parameter_bridge /gimbal/camera@sensor_msgs/msg/Image@ignition.msgs.Image terminal3 ros2 run rqt_image_view rqt_image_view launch # import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import SetEnvironmentVariable from launch_ros.actions import Node PACKAGE_NAME = \"ign_tutorial\" def generate_launch_description (): pkg = get_package_share_directory ( PACKAGE_NAME ) pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) paths = [ os . path . join ( pkg , \"worlds\" ), \"/home/user/wasp_ws/src/tutorials/ign_tutorial/models\" ] env = SetEnvironmentVariable ( name = 'IGN_GAZEBO_RESOURCE_PATH' , value = [ \":\" . join ( paths )]) sdf_file = os . path . join ( pkg , 'models' , 'vehicle' , 'model.sdf' ) with open ( sdf_file , 'r' ) as infp : robot_desc = infp . read () gz_sim = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' )), launch_arguments = { 'gz_args' : '-r -v 4 my_cart.sdf' } . items (), ) robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'both' , parameters = [ { 'use_sim_time' : True }, { 'robot_description' : robot_desc }, ] ) bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock' , '/world/Moving_robot/model/vehicle/model/vehicle_blue/joint_state@sensor_msgs/msg/JointState[gz.msgs.Model' , '/camera@sensor_msgs/msg/Image@gz.msgs.Image' , '/camera_info@sensor_msgs/msg/CameraInfo@gz.msgs.CameraInfo' ], remappings = [ ( '/world/Moving_robot/model/vehicle/model/vehicle_blue/joint_state' , 'joint_states' ), ], output = 'screen' ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( pkg , 'config' , 'rviz.rviz' )] ) world_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"world2chassis\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"world\" , \"chassis\" ] ) return LaunchDescription ([ env , gz_sim , bridge , world_tf , robot_state_publisher , rviz_node ]) Rviz # Rviz types type Desc Camera use CameraInfo to create window in show the image Image display image without CameraInfo data ign #","title":"Ignition ROS2 camera bridge"},{"location":"blog/ROS2/ignition/bridge/camera/#objective","text":"Create simulation with camera Publish camera using ros_ign bridge Write launch file View camera image in RVIZ","title":"Objective"},{"location":"blog/ROS2/ignition/bridge/camera/#model-with-camera","text":"Based on vehicle model from this post Add this lines to exists model don\u2019t forget World sdf must contain sensors plugin <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre </render_engine> </plugin>","title":"model with camera"},{"location":"blog/ROS2/ignition/bridge/camera/#camera-link-and-sensor","text":"<frame name= \"camera_frame\" attached_to= 'chassis' > <pose> -0.8 0 1.5 0 0 0 </pose> </frame> <link name= \"camera_link\" > <pose relative_to= 'camera_frame' > 0 0 0 0 0 0 </pose> <inertial> <mass> 0.1 </mass> <inertia> <ixx> 0.000166667 </ixx> <iyy> 0.000166667 </iyy> <izz> 0.000166667 </izz> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 0.1 0.1 0.1 </size> </box> </geometry> </visual> <sensor name= \"camera\" type= \"camera\" > <camera> <horizontal_fov> 1.047 </horizontal_fov> <image> <width> 320 </width> <height> 240 </height> </image> <clip> <near> 0.1 </near> <far> 100 </far> </clip> </camera> <always_on> 1 </always_on> <update_rate> 30 </update_rate> <visualize> true </visualize> <topic> camera </topic> </sensor> </link> <joint name= 'camera_joint' type= 'fixed' > <parent> chassis </parent> <child> camera_link </child> </joint>","title":"camera link and sensor"},{"location":"blog/ROS2/ignition/bridge/camera/#cli","text":"terminal2 ros2 run ros_gz_bridge parameter_bridge /gimbal/camera@sensor_msgs/msg/Image@ignition.msgs.Image terminal3 ros2 run rqt_image_view rqt_image_view","title":"Cli"},{"location":"blog/ROS2/ignition/bridge/camera/#launch","text":"import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import SetEnvironmentVariable from launch_ros.actions import Node PACKAGE_NAME = \"ign_tutorial\" def generate_launch_description (): pkg = get_package_share_directory ( PACKAGE_NAME ) pkg_ros_gz_sim = get_package_share_directory ( 'ros_gz_sim' ) paths = [ os . path . join ( pkg , \"worlds\" ), \"/home/user/wasp_ws/src/tutorials/ign_tutorial/models\" ] env = SetEnvironmentVariable ( name = 'IGN_GAZEBO_RESOURCE_PATH' , value = [ \":\" . join ( paths )]) sdf_file = os . path . join ( pkg , 'models' , 'vehicle' , 'model.sdf' ) with open ( sdf_file , 'r' ) as infp : robot_desc = infp . read () gz_sim = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , 'launch' , 'gz_sim.launch.py' )), launch_arguments = { 'gz_args' : '-r -v 4 my_cart.sdf' } . items (), ) robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , name = 'robot_state_publisher' , output = 'both' , parameters = [ { 'use_sim_time' : True }, { 'robot_description' : robot_desc }, ] ) bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock' , '/world/Moving_robot/model/vehicle/model/vehicle_blue/joint_state@sensor_msgs/msg/JointState[gz.msgs.Model' , '/camera@sensor_msgs/msg/Image@gz.msgs.Image' , '/camera_info@sensor_msgs/msg/CameraInfo@gz.msgs.CameraInfo' ], remappings = [ ( '/world/Moving_robot/model/vehicle/model/vehicle_blue/joint_state' , 'joint_states' ), ], output = 'screen' ) rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( pkg , 'config' , 'rviz.rviz' )] ) world_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"world2chassis\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"world\" , \"chassis\" ] ) return LaunchDescription ([ env , gz_sim , bridge , world_tf , robot_state_publisher , rviz_node ])","title":"launch"},{"location":"blog/ROS2/ignition/bridge/camera/#rviz","text":"Rviz types type Desc Camera use CameraInfo to create window in show the image Image display image without CameraInfo data","title":"Rviz"},{"location":"blog/ROS2/ignition/bridge/camera/#ign","text":"","title":"ign"},{"location":"blog/ROS2/ignition/spawn/","tags":["ignition","gazebo","spawn"],"text":"LAB # Spawn sdf/xacro model into simulation using launch files Manual spawn Minimal spawn file topic param Spawn model with rviz joint_state Spawn with xacro Project # sam_bot_description \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 minimal.launch.py \u2502 \u251c\u2500\u2500 from_topic.launch.py \u2502 \u251c\u2500\u2500 from_param.launch.py \u2502 \u251c\u2500\u2500 spawn_with_rviz_and_bridge.launch.py \u2502 \u251c\u2500\u2500 xacro.launch.py (todo) \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 sam \u2502 \u251c\u2500\u2500 model.config \u2502 \u251c\u2500\u2500 model.sdf \u2502 \u2514\u2500\u2500 model.sdf.xacro \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 demo.sdf Manual spawn # Minimal # Spawn sdf model using -file argument world # worlds/demo.sdf <?xml version=\"1.0\" ?> <sdf version= \"1.6\" > <world name= \"demo\" > <physics name= \"1ms\" type= \"ignored\" > <max_step_size> 0.001 </max_step_size> <real_time_factor> 1.0 </real_time_factor> </physics> <plugin filename= \"libignition-gazebo-physics-system.so\" name= \"ignition::gazebo::systems::Physics\" > </plugin> <plugin filename= \"libignition-gazebo-sensors-system.so\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> <plugin filename= \"libignition-gazebo-scene-broadcaster-system.so\" name= \"ignition::gazebo::systems::SceneBroadcaster\" > </plugin> <plugin filename= \"ignition-gazebo-user-commands-system\" name= \"ignition::gazebo::systems::UserCommands\" > </plugin> <gui fullscreen= \"0\" > <!-- 3D scene --> <plugin filename= \"MinimalScene\" name= \"3D View\" > <ignition-gui> <title> 3D View </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> <engine> ogre2 </engine> <scene> scene </scene> <ambient_light> 0.4 0.4 0.4 </ambient_light> <background_color> 0.8 0.8 0.8 </background_color> <camera_pose> -6 0 6 0 0.5 0 </camera_pose> </plugin> <!-- Plugins that add functionality to the scene --> <plugin filename= \"EntityContextMenuPlugin\" name= \"Entity context menu\" > <ignition-gui> <property key= \"state\" type= \"string\" > floating </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <plugin filename= \"GzSceneManager\" name= \"Scene Manager\" > <ignition-gui> <property key= \"resizable\" type= \"bool\" > false </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"state\" type= \"string\" > floating </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <plugin filename= \"InteractiveViewControl\" name= \"Interactive view control\" > <ignition-gui> <property key= \"resizable\" type= \"bool\" > false </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"state\" type= \"string\" > floating </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <plugin filename= \"CameraTracking\" name= \"Camera Tracking\" > <ignition-gui> <property key= \"resizable\" type= \"bool\" > false </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"state\" type= \"string\" > floating </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <!-- World control --> <plugin filename= \"WorldControl\" name= \"World control\" > <ignition-gui> <title> World control </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"bool\" key= \"resizable\" > false </property> <property type= \"double\" key= \"height\" > 72 </property> <property type= \"double\" key= \"width\" > 121 </property> <property type= \"double\" key= \"z\" > 1 </property> <property type= \"string\" key= \"state\" > floating </property> <anchors target= \"3D View\" > <line own= \"left\" target= \"left\" /> <line own= \"bottom\" target= \"bottom\" /> </anchors> </ignition-gui> <play_pause> true </play_pause> <step> true </step> <start_paused> true </start_paused> <use_event> true </use_event> </plugin> <!-- World statistics --> <plugin filename= \"WorldStats\" name= \"World stats\" > <ignition-gui> <title> World stats </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"bool\" key= \"resizable\" > false </property> <property type= \"double\" key= \"height\" > 110 </property> <property type= \"double\" key= \"width\" > 290 </property> <property type= \"double\" key= \"z\" > 1 </property> <property type= \"string\" key= \"state\" > floating </property> <anchors target= \"3D View\" > <line own= \"right\" target= \"right\" /> <line own= \"bottom\" target= \"bottom\" /> </anchors> </ignition-gui> <sim_time> true </sim_time> <real_time> true </real_time> <real_time_factor> true </real_time_factor> <iterations> true </iterations> </plugin> <plugin filename= \"VisualizeLidar\" name= \"Visualize Lidar\" > </plugin> <!-- Inspector --> <plugin filename= \"ComponentInspector\" name= \"Component inspector\" > <ignition-gui> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> </plugin> <!-- Entity tree --> <plugin filename= \"EntityTree\" name= \"Entity tree\" > <ignition-gui> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> </plugin> </gui> <light type= \"directional\" name= \"sun\" > <cast_shadows> true </cast_shadows> <pose> 0 0 10 0 0 0 </pose> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.2 0.2 0.2 1 </specular> <attenuation> <range> 1000 </range> <constant> 0.9 </constant> <linear> 0.01 </linear> <quadratic> 0.001 </quadratic> </attenuation> <direction> -0.5 0.1 -0.9 </direction> </light> <model name= \"ground_plane\" > <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 20 20 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 20 20 0.1 </size> </box> </geometry> <material> <ambient> 0.8 0.8 0.8 1 </ambient> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.8 0.8 0.8 1 </specular> </material> </visual> </link> </model> <include> <uri> https://fuel.gazebosim.org/1.0/chapulina/models/Test box </uri> <name> b1 </name> <pose> 2 2 0.5 0 0 0 </pose> </include> <include> <uri> https://fuel.gazebosim.org/1.0/chapulina/models/Test box </uri> <name> b2 </name> <pose> 2 0 0.5 0 0 0 </pose> </include> <include> <uri> https://fuel.gazebosim.org/1.0/chapulina/models/Test box </uri> <name> b3 </name> <pose> 2 -2 0.5 0 0 0 </pose> </include> </world> </sdf> launch # launch/minimal.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = \"sam/model.sdf\" world_file_path = \"demo.sdf\" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) # Launch the robot spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , \"default\" , \"-file\" , sdf_models_path , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( gazebo ) ld . add_action ( spawn_entity_cmd ) return ld","title":"Spawn model into ignition simulation"},{"location":"blog/ROS2/ignition/spawn/#lab","text":"Spawn sdf/xacro model into simulation using launch files Manual spawn Minimal spawn file topic param Spawn model with rviz joint_state Spawn with xacro","title":"LAB"},{"location":"blog/ROS2/ignition/spawn/#project","text":"sam_bot_description \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 minimal.launch.py \u2502 \u251c\u2500\u2500 from_topic.launch.py \u2502 \u251c\u2500\u2500 from_param.launch.py \u2502 \u251c\u2500\u2500 spawn_with_rviz_and_bridge.launch.py \u2502 \u251c\u2500\u2500 xacro.launch.py (todo) \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 sam \u2502 \u251c\u2500\u2500 model.config \u2502 \u251c\u2500\u2500 model.sdf \u2502 \u2514\u2500\u2500 model.sdf.xacro \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 demo.sdf","title":"Project"},{"location":"blog/ROS2/ignition/spawn/#manual-spawn","text":"","title":"Manual spawn"},{"location":"blog/ROS2/ignition/spawn/#minimal","text":"Spawn sdf model using -file argument","title":"Minimal"},{"location":"blog/ROS2/ignition/spawn/#world","text":"worlds/demo.sdf <?xml version=\"1.0\" ?> <sdf version= \"1.6\" > <world name= \"demo\" > <physics name= \"1ms\" type= \"ignored\" > <max_step_size> 0.001 </max_step_size> <real_time_factor> 1.0 </real_time_factor> </physics> <plugin filename= \"libignition-gazebo-physics-system.so\" name= \"ignition::gazebo::systems::Physics\" > </plugin> <plugin filename= \"libignition-gazebo-sensors-system.so\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> <plugin filename= \"libignition-gazebo-scene-broadcaster-system.so\" name= \"ignition::gazebo::systems::SceneBroadcaster\" > </plugin> <plugin filename= \"ignition-gazebo-user-commands-system\" name= \"ignition::gazebo::systems::UserCommands\" > </plugin> <gui fullscreen= \"0\" > <!-- 3D scene --> <plugin filename= \"MinimalScene\" name= \"3D View\" > <ignition-gui> <title> 3D View </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> <engine> ogre2 </engine> <scene> scene </scene> <ambient_light> 0.4 0.4 0.4 </ambient_light> <background_color> 0.8 0.8 0.8 </background_color> <camera_pose> -6 0 6 0 0.5 0 </camera_pose> </plugin> <!-- Plugins that add functionality to the scene --> <plugin filename= \"EntityContextMenuPlugin\" name= \"Entity context menu\" > <ignition-gui> <property key= \"state\" type= \"string\" > floating </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <plugin filename= \"GzSceneManager\" name= \"Scene Manager\" > <ignition-gui> <property key= \"resizable\" type= \"bool\" > false </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"state\" type= \"string\" > floating </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <plugin filename= \"InteractiveViewControl\" name= \"Interactive view control\" > <ignition-gui> <property key= \"resizable\" type= \"bool\" > false </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"state\" type= \"string\" > floating </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <plugin filename= \"CameraTracking\" name= \"Camera Tracking\" > <ignition-gui> <property key= \"resizable\" type= \"bool\" > false </property> <property key= \"width\" type= \"double\" > 5 </property> <property key= \"height\" type= \"double\" > 5 </property> <property key= \"state\" type= \"string\" > floating </property> <property key= \"showTitleBar\" type= \"bool\" > false </property> </ignition-gui> </plugin> <!-- World control --> <plugin filename= \"WorldControl\" name= \"World control\" > <ignition-gui> <title> World control </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"bool\" key= \"resizable\" > false </property> <property type= \"double\" key= \"height\" > 72 </property> <property type= \"double\" key= \"width\" > 121 </property> <property type= \"double\" key= \"z\" > 1 </property> <property type= \"string\" key= \"state\" > floating </property> <anchors target= \"3D View\" > <line own= \"left\" target= \"left\" /> <line own= \"bottom\" target= \"bottom\" /> </anchors> </ignition-gui> <play_pause> true </play_pause> <step> true </step> <start_paused> true </start_paused> <use_event> true </use_event> </plugin> <!-- World statistics --> <plugin filename= \"WorldStats\" name= \"World stats\" > <ignition-gui> <title> World stats </title> <property type= \"bool\" key= \"showTitleBar\" > false </property> <property type= \"bool\" key= \"resizable\" > false </property> <property type= \"double\" key= \"height\" > 110 </property> <property type= \"double\" key= \"width\" > 290 </property> <property type= \"double\" key= \"z\" > 1 </property> <property type= \"string\" key= \"state\" > floating </property> <anchors target= \"3D View\" > <line own= \"right\" target= \"right\" /> <line own= \"bottom\" target= \"bottom\" /> </anchors> </ignition-gui> <sim_time> true </sim_time> <real_time> true </real_time> <real_time_factor> true </real_time_factor> <iterations> true </iterations> </plugin> <plugin filename= \"VisualizeLidar\" name= \"Visualize Lidar\" > </plugin> <!-- Inspector --> <plugin filename= \"ComponentInspector\" name= \"Component inspector\" > <ignition-gui> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> </plugin> <!-- Entity tree --> <plugin filename= \"EntityTree\" name= \"Entity tree\" > <ignition-gui> <property type= \"string\" key= \"state\" > docked </property> </ignition-gui> </plugin> </gui> <light type= \"directional\" name= \"sun\" > <cast_shadows> true </cast_shadows> <pose> 0 0 10 0 0 0 </pose> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.2 0.2 0.2 1 </specular> <attenuation> <range> 1000 </range> <constant> 0.9 </constant> <linear> 0.01 </linear> <quadratic> 0.001 </quadratic> </attenuation> <direction> -0.5 0.1 -0.9 </direction> </light> <model name= \"ground_plane\" > <static> true </static> <link name= \"link\" > <collision name= \"collision\" > <geometry> <box> <size> 20 20 0.1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 20 20 0.1 </size> </box> </geometry> <material> <ambient> 0.8 0.8 0.8 1 </ambient> <diffuse> 0.8 0.8 0.8 1 </diffuse> <specular> 0.8 0.8 0.8 1 </specular> </material> </visual> </link> </model> <include> <uri> https://fuel.gazebosim.org/1.0/chapulina/models/Test box </uri> <name> b1 </name> <pose> 2 2 0.5 0 0 0 </pose> </include> <include> <uri> https://fuel.gazebosim.org/1.0/chapulina/models/Test box </uri> <name> b2 </name> <pose> 2 0 0.5 0 0 0 </pose> </include> <include> <uri> https://fuel.gazebosim.org/1.0/chapulina/models/Test box </uri> <name> b3 </name> <pose> 2 -2 0.5 0 0 0 </pose> </include> </world> </sdf>","title":"world"},{"location":"blog/ROS2/ignition/spawn/#launch","text":"launch/minimal.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = \"sam/model.sdf\" world_file_path = \"demo.sdf\" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) # Launch the robot spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , \"default\" , \"-file\" , sdf_models_path , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( gazebo ) ld . add_action ( spawn_entity_cmd ) return ld","title":"launch"},{"location":"blog/ROS2/ignition/spawn/spawn_fom_param/","tags":["gazebo","ign","spawn"],"text":"LAB # Spawn sdf/xacro model into simulation using param argument launch/from_param.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node WORLD_NAME = \"demo\" MODEL_NAME = \"sam\" def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = MODEL_NAME + \"/model.sdf\" world_file_path = WORLD_NAME + \".sdf\" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) robot_description = open ( sdf_models_path ) . read () gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) # Launch the robot spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , WORLD_NAME , \"-param\" , \"robot_description\" , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], parameters = [ { \"robot_description\" : robot_description }, ], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( gazebo ) ld . add_action ( spawn_entity_cmd ) return ld","title":"Spawn model from param"},{"location":"blog/ROS2/ignition/spawn/spawn_fom_param/#lab","text":"Spawn sdf/xacro model into simulation using param argument launch/from_param.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node WORLD_NAME = \"demo\" MODEL_NAME = \"sam\" def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = MODEL_NAME + \"/model.sdf\" world_file_path = WORLD_NAME + \".sdf\" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) robot_description = open ( sdf_models_path ) . read () gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) # Launch the robot spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , WORLD_NAME , \"-param\" , \"robot_description\" , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], parameters = [ { \"robot_description\" : robot_description }, ], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( gazebo ) ld . add_action ( spawn_entity_cmd ) return ld","title":"LAB"},{"location":"blog/ROS2/ignition/spawn/spawn_from_topic/","tags":["gazebo","ign","spawn"],"text":"LAB # Spawn sdf/xacro model into simulation using topic argument using robot_description_publisher launch/minimal_topic.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription , TimerAction , LogInfo from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node WORLD_NAME = \"demo\" MODEL_NAME = \"sam\" def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = MODEL_NAME + \"/model.sdf\" world_file_path = WORLD_NAME + \".sdf\" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , output = \"screen\" , parameters = [ { \"use_sim_time\" : True }, { \"robot_description\" : open ( sdf_models_path ) . read ()}, ], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , WORLD_NAME , \"-topic\" , \"robot_description\" , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], output = \"screen\" , ) timer = TimerAction ( period = 1.0 , actions = [ spawn_entity_cmd , LogInfo ( msg = \"------- Spawn ------------\" ) ]) ld = LaunchDescription () ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( timer ) return ld LogInfo Log to from launch.actions import LogInfo LogInfo(msg=\"------- message ------------\") TimerAction Start Node after period from launch.actions import TimerAction timer = TimerAction(period=1.0, actions=[ Node LogInfo(msg=\"------- Spawn ------------\") ])","title":"Spawn model from robot_description topic"},{"location":"blog/ROS2/ignition/spawn/spawn_from_topic/#lab","text":"Spawn sdf/xacro model into simulation using topic argument using robot_description_publisher launch/minimal_topic.launch.py import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription , TimerAction , LogInfo from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node WORLD_NAME = \"demo\" MODEL_NAME = \"sam\" def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = MODEL_NAME + \"/model.sdf\" world_file_path = WORLD_NAME + \".sdf\" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , output = \"screen\" , parameters = [ { \"use_sim_time\" : True }, { \"robot_description\" : open ( sdf_models_path ) . read ()}, ], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , WORLD_NAME , \"-topic\" , \"robot_description\" , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], output = \"screen\" , ) timer = TimerAction ( period = 1.0 , actions = [ spawn_entity_cmd , LogInfo ( msg = \"------- Spawn ------------\" ) ]) ld = LaunchDescription () ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( timer ) return ld LogInfo Log to from launch.actions import LogInfo LogInfo(msg=\"------- message ------------\") TimerAction Start Node after period from launch.actions import TimerAction timer = TimerAction(period=1.0, actions=[ Node LogInfo(msg=\"------- Spawn ------------\") ])","title":"LAB"},{"location":"blog/ROS2/ignition/spawn/spawn_with_rviz_and_bridge/","tags":["ignition","gazebo","spawn"],"text":"LAB # Spawn sdf/xacro model Run Bridge (bridge clock, joint_states) Run Rviz import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro WORLD_NAME = \"demo\" MODEL_NAME = \"sam\" def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = MODEL_NAME + \"/model.sdf\" world_file_path = WORLD_NAME + \".sdf\" prefix = f \"/world/ { WORLD_NAME } /model/ { MODEL_NAME } \" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) sdf_file_content = xacro . process_file ( sdf_models_path ) robot_description = sdf_file_content . toxml () robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , output = \"screen\" , parameters = [ { \"use_sim_time\" : True }, { \"robot_description\" : robot_description }, ], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) # Launch the robot spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , WORLD_NAME , \"-param\" , \"robot_description\" , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], parameters = [ { \"robot_description\" : robot_description }, ], output = \"screen\" , ) rviz = Node ( package = \"rviz2\" , executable = \"rviz2\" , arguments = [ \"-d\" , os . path . join ( pkg_share , \"config\" , \"rviz.rviz\" )], parameters = [{ \"robot_description\" : robot_description }], ) # Ign Bridge bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , arguments = [ prefix + \"/joint_state@sensor_msgs/msg/JointState@ignition.msgs.Model\" , \"/clock@rosgraph_msgs/msg/Clock@ignition.msgs.Clock\" , ], remappings = [( prefix + \"/joint_state\" , \"joint_states\" )], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity_cmd ) ld . add_action ( rviz ) ld . add_action ( bridge ) return ld remapping map ignition model joint state to joint_states ros2 topic bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , arguments = [ prefix + \"/joint_state@sensor_msgs/msg/JointState@ignition.msgs.Model\" , \"/clock@rosgraph_msgs/msg/Clock@ignition.msgs.Clock\" , ], remappings = [( prefix + \"/joint_state\" , \"joint_states\" )], output = \"screen\" , )","title":"Spawn gazebo with rviz and bridge"},{"location":"blog/ROS2/ignition/spawn/spawn_with_rviz_and_bridge/#lab","text":"Spawn sdf/xacro model Run Bridge (bridge clock, joint_states) Run Rviz import os from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node import xacro WORLD_NAME = \"demo\" MODEL_NAME = \"sam\" def generate_launch_description (): package_name = \"sam_bot_description\" sdf_model_path = MODEL_NAME + \"/model.sdf\" world_file_path = WORLD_NAME + \".sdf\" prefix = f \"/world/ { WORLD_NAME } /model/ { MODEL_NAME } \" # Pose where we want to spawn the robot spawn_x_val = \"-2.0\" spawn_y_val = \"0.0\" spawn_z_val = \"0.5\" spawn_yaw_val = \"0.0\" pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg_share = get_package_share_directory ( package_name ) world_path = os . path . join ( pkg_share , \"worlds\" , world_file_path ) sdf_models_path = os . path . join ( pkg_share , \"models\" , sdf_model_path ) sdf_file_content = xacro . process_file ( sdf_models_path ) robot_description = sdf_file_content . toxml () robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , output = \"screen\" , parameters = [ { \"use_sim_time\" : True }, { \"robot_description\" : robot_description }, ], ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r { world_path } \" } . items (), ) # Launch the robot spawn_entity_cmd = Node ( package = \"ros_gz_sim\" , executable = \"create\" , arguments = [ \"-world\" , WORLD_NAME , \"-param\" , \"robot_description\" , \"-x\" , spawn_x_val , \"-y\" , spawn_y_val , \"-z\" , spawn_z_val , \"-Y\" , spawn_yaw_val , ], parameters = [ { \"robot_description\" : robot_description }, ], output = \"screen\" , ) rviz = Node ( package = \"rviz2\" , executable = \"rviz2\" , arguments = [ \"-d\" , os . path . join ( pkg_share , \"config\" , \"rviz.rviz\" )], parameters = [{ \"robot_description\" : robot_description }], ) # Ign Bridge bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , arguments = [ prefix + \"/joint_state@sensor_msgs/msg/JointState@ignition.msgs.Model\" , \"/clock@rosgraph_msgs/msg/Clock@ignition.msgs.Clock\" , ], remappings = [( prefix + \"/joint_state\" , \"joint_states\" )], output = \"screen\" , ) ld = LaunchDescription () ld . add_action ( robot_state_publisher ) ld . add_action ( gazebo ) ld . add_action ( spawn_entity_cmd ) ld . add_action ( rviz ) ld . add_action ( bridge ) return ld remapping map ignition model joint state to joint_states ros2 topic bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , arguments = [ prefix + \"/joint_state@sensor_msgs/msg/JointState@ignition.msgs.Model\" , \"/clock@rosgraph_msgs/msg/Clock@ignition.msgs.Clock\" , ], remappings = [( prefix + \"/joint_state\" , \"joint_states\" )], output = \"screen\" , )","title":"LAB"},{"location":"blog/ROS2/ignition/tutorial/","tags":["ros2","ignition","gz"],"text":"joint state diff drive and basic odometry imu lidar","title":"Ignition ROS2 tutorials"},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/","tags":["diff_drive","odom","odometry","ros2","ignition"],"text":"LAB # Add diff drive plugin publish odometry , odometry tf and cmd_vel from ignition to ros2 using bridge Note check joint state post for project structure and files Note Install rqt_robotic_steering for GUI cmd_vel control sudo apt install ros-humble-rqt-robot-steering bridge # ign topic --list # /clock /gazebo/resource_paths /gui/camera/pose /model/basic_mobile_bot/cmd_vel /model/basic_mobile_bot/odometry /model/basic_mobile_bot/tf /stats /world/demo/clock /world/demo/dynamic_pose/info /world/demo/model/basic_mobile_bot/joint_state /world/demo/pose/info /world/demo/scene/deletion /world/demo/scene/info /world/demo/state /world/demo/stats - bridge cmd_vel (/model/basic_mobile_bot/cmd_vel) - bridge odometry (/model/basic_mobile_bot/odometry) - bridge tf (/model/basic_mobile_bot/tf) # cmd_vel bridge cmd_vel_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'cmd_vel_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ ign_model_prefix + '/cmd_vel' + '@geometry_msgs/msg/Twist' + ']ignition.msgs.Twist' ], remappings = [ ( ign_model_prefix + '/cmd_vel' , '/cmd_vel' ) ]) # odometry bridge odometry_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'odometry_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ ign_model_prefix + '/odometry' + '@nav_msgs/msg/Odometry' + '[ignition.msgs.Odometry' ], remappings = [ ( ign_model_prefix + '/odometry' , '/odom' ) ]) # odom to base_link transform bridge odom_base_tf_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'odom_base_tf_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ ign_model_prefix + '/tf' + '@tf2_msgs/msg/TFMessage' + '[ignition.msgs.Pose_V' ], remappings = [ ( ign_model_prefix + '/tf' , '/tf' ) ]) get bridge source # tf #","title":"Diff drive and odometry"},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/#lab","text":"Add diff drive plugin publish odometry , odometry tf and cmd_vel from ignition to ros2 using bridge Note check joint state post for project structure and files Note Install rqt_robotic_steering for GUI cmd_vel control sudo apt install ros-humble-rqt-robot-steering","title":"LAB"},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/#bridge","text":"ign topic --list # /clock /gazebo/resource_paths /gui/camera/pose /model/basic_mobile_bot/cmd_vel /model/basic_mobile_bot/odometry /model/basic_mobile_bot/tf /stats /world/demo/clock /world/demo/dynamic_pose/info /world/demo/model/basic_mobile_bot/joint_state /world/demo/pose/info /world/demo/scene/deletion /world/demo/scene/info /world/demo/state /world/demo/stats - bridge cmd_vel (/model/basic_mobile_bot/cmd_vel) - bridge odometry (/model/basic_mobile_bot/odometry) - bridge tf (/model/basic_mobile_bot/tf) # cmd_vel bridge cmd_vel_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'cmd_vel_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ ign_model_prefix + '/cmd_vel' + '@geometry_msgs/msg/Twist' + ']ignition.msgs.Twist' ], remappings = [ ( ign_model_prefix + '/cmd_vel' , '/cmd_vel' ) ]) # odometry bridge odometry_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'odometry_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ ign_model_prefix + '/odometry' + '@nav_msgs/msg/Odometry' + '[ignition.msgs.Odometry' ], remappings = [ ( ign_model_prefix + '/odometry' , '/odom' ) ]) # odom to base_link transform bridge odom_base_tf_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'odom_base_tf_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ ign_model_prefix + '/tf' + '@tf2_msgs/msg/TFMessage' + '[ignition.msgs.Pose_V' ], remappings = [ ( ign_model_prefix + '/tf' , '/tf' ) ])","title":"bridge"},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/#get-bridge-source","text":"","title":"get bridge source"},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/#tf","text":"","title":"tf"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/","tags":["imu","ros2","ignition"],"text":"LAB # Add IMU sensor to sdf Bridge to ROS2 Show in RVIZ sdf # Add sensor sdf under link Add imu plugin Add plugin tag under world tag <plugin filename= \"libignition-gazebo-imu-system.so\" name= \"ignition::gazebo::systems::Imu\" > </plugin> Add sensor to imu_link tag <sensor name= \"imu_sensor\" type= \"imu\" > <always_on> 1 </always_on> <update_rate> 1 </update_rate> <visualize> true </visualize> <topic> imu </topic> </sensor> Check this link for more info # tf # Add static tf between sensor frame to link frame static tf Sensor has fix frame_id, set from it\u2019s location We need to set static tf form link frame to sensor frame_id imu_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"imu2imu_link\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"imu_link\" , \"basic_mobile_bot/imu_link/imu\" ] ) bridge # bridge source code Add imu msg bridge Set QoS to best_effort Add tf static transform from imu_link to sensor frame_id basic_mobile_bot/imu_link/imu bridge imu_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/imu@sensor_msgs/msg/Imu@gz.msgs.IMU' ], output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time , 'qos_overrides./imu.publisher.reliability' : 'best_effort' }] ) before qos convert ros2 topic info /imu --verbose Type: sensor_msgs/msg/Imu Publisher count: 1 Node name: ros_gz_bridge Node namespace: / Topic type: sensor_msgs/msg/Imu Endpoint type: PUBLISHER GID: 01 .0f.64.c6.90.63.0b.31.01.00.00.00.00.00.14.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RELIABLE History ( Depth ) : UNKNOWN Durability: VOLATILE Lifespan: Infinite Deadline: Infinite Liveliness: AUTOMATIC Liveliness lease duration: Infinite imu message after qos convert ros2 topic info /imu --verbose # Type: sensor_msgs/msg/Imu Publisher count: 1 Node name: ros_gz_bridge Node namespace: / Topic type: sensor_msgs/msg/Imu Endpoint type: PUBLISHER GID: 01 .0f.64.c6.fb.16.9f.99.01.00.00.00.00.00.14.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: BEST_EFFORT History ( Depth ) : UNKNOWN Durability: VOLATILE Lifespan: Infinite Deadline: Infinite Liveliness: AUTOMATIC Liveliness lease duration: Infinite usage # terminal1 ros2 launch ign_tutorial ign.launch.py with_bridge: = true terminal2 ros2 run rqt_robot_steering rqt_robot_steering terminal3 rviz Reference # ros_gz_sim_demos IMU tools for ROS ignition sensors rviz imu marker","title":"IMU"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#lab","text":"Add IMU sensor to sdf Bridge to ROS2 Show in RVIZ","title":"LAB"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#sdf","text":"Add sensor sdf under link Add imu plugin Add plugin tag under world tag <plugin filename= \"libignition-gazebo-imu-system.so\" name= \"ignition::gazebo::systems::Imu\" > </plugin> Add sensor to imu_link tag <sensor name= \"imu_sensor\" type= \"imu\" > <always_on> 1 </always_on> <update_rate> 1 </update_rate> <visualize> true </visualize> <topic> imu </topic> </sensor>","title":"sdf"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#check-this-link-for-more-info","text":"","title":"Check this link for more info"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#tf","text":"Add static tf between sensor frame to link frame static tf Sensor has fix frame_id, set from it\u2019s location We need to set static tf form link frame to sensor frame_id imu_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"imu2imu_link\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"imu_link\" , \"basic_mobile_bot/imu_link/imu\" ] )","title":"tf"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#bridge","text":"bridge source code Add imu msg bridge Set QoS to best_effort Add tf static transform from imu_link to sensor frame_id basic_mobile_bot/imu_link/imu bridge imu_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/imu@sensor_msgs/msg/Imu@gz.msgs.IMU' ], output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time , 'qos_overrides./imu.publisher.reliability' : 'best_effort' }] ) before qos convert ros2 topic info /imu --verbose Type: sensor_msgs/msg/Imu Publisher count: 1 Node name: ros_gz_bridge Node namespace: / Topic type: sensor_msgs/msg/Imu Endpoint type: PUBLISHER GID: 01 .0f.64.c6.90.63.0b.31.01.00.00.00.00.00.14.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RELIABLE History ( Depth ) : UNKNOWN Durability: VOLATILE Lifespan: Infinite Deadline: Infinite Liveliness: AUTOMATIC Liveliness lease duration: Infinite imu message after qos convert ros2 topic info /imu --verbose # Type: sensor_msgs/msg/Imu Publisher count: 1 Node name: ros_gz_bridge Node namespace: / Topic type: sensor_msgs/msg/Imu Endpoint type: PUBLISHER GID: 01 .0f.64.c6.fb.16.9f.99.01.00.00.00.00.00.14.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: BEST_EFFORT History ( Depth ) : UNKNOWN Durability: VOLATILE Lifespan: Infinite Deadline: Infinite Liveliness: AUTOMATIC Liveliness lease duration: Infinite","title":"bridge"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#usage","text":"terminal1 ros2 launch ign_tutorial ign.launch.py with_bridge: = true terminal2 ros2 run rqt_robot_steering rqt_robot_steering terminal3 rviz","title":"usage"},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#reference","text":"ros_gz_sim_demos IMU tools for ROS ignition sensors rviz imu marker","title":"Reference"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/","tags":["joint_state"],"text":"LAB # load model SDF into ignition and rviz publish JointState from ignition to ros2 using bridge \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 ign.launch.launch.py \u2502 \u2514\u2500\u2500 ign_bridge.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 vehicle_2 \u2502 \u2502 \u2514\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 robot_base.stl \u2502 \u2514\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 vehicle.sdf \u2514\u2500\u2500 package.xml launch # ign # import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import IncludeLaunchDescription , SetEnvironmentVariable from launch.conditions import IfCondition from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node PACKAGE_NAME = \"ign_tutorial\" SDF_MODEL_NAME = \"vehicle_2\" WORLD_NAME = \"vehicle.sdf\" def generate_launch_description (): sim_time_arg = DeclareLaunchArgument ( \"use_sim_time\" , default_value = [ \"true\" ], description = \"Enable sim time from /clock\" , ) with_bridge_arg = DeclareLaunchArgument ( \"with_bridge\" , default_value = [ \"false\" ], description = \"Launch simulation with ros ign bridge\" , ) pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg = get_package_share_directory ( PACKAGE_NAME ) sdf_path = f \" { pkg } /models/ { SDF_MODEL_NAME } /model.sdf\" use_sim_time = LaunchConfiguration ( \"use_sim_time\" ) resources = [ os . path . join ( pkg , \"worlds\" ), os . path . join ( pkg , \"models\" )] resource_env = SetEnvironmentVariable ( name = \"IGN_GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r -v 2 { WORLD_NAME } \" } . items (), ) # launch ign_bridge if with_bridge is true ign_bridge = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg , \"launch\" , \"ign_bridge.launch.py\" ), ), launch_arguments = { \"use_sim_time\" : use_sim_time } . items (), condition = IfCondition ( LaunchConfiguration ( \"with_bridge\" )) ) # robot state publisher node robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , output = \"screen\" , parameters = [ { \"use_sim_time\" : use_sim_time }, { \"robot_description\" : open ( sdf_path ) . read ()}, ], ) ld = LaunchDescription () ld . add_action ( sim_time_arg ) ld . add_action ( with_bridge_arg ) ld . add_action ( resource_env ) ld . add_action ( gazebo ) ld . add_action ( ign_bridge ) ld . add_action ( robot_state_publisher ) return ld bridge # from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.conditions import IfCondition from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node ROBOT_NAME = \"basic_mobile_bot\" def generate_launch_description (): use_sim_time_arg = DeclareLaunchArgument ( \"use_sim_time\" , default_value = [ \"false\" ], description = \"use sim time from /clock\" ) namespace = \"\" use_sim_time = LaunchConfiguration ( \"use_sim_time\" ) ign_model_prefix = \"/world/demo/model/\" + ROBOT_NAME # clock bridge clock_bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , namespace = namespace , name = \"clock_bridge\" , output = \"screen\" , arguments = [ \"/clock@rosgraph_msgs/msg/Clock[ignition.msgs.Clock\" ], condition = IfCondition ( use_sim_time ), ) # joint state bridge # /world/demo/model/v2/model/basic_mobile_bot/joint_state joint_state_bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , namespace = namespace , name = \"joint_state_bridge\" , output = \"screen\" , parameters = [{ \"use_sim_time\" : use_sim_time }], arguments = [ ign_model_prefix + \"/joint_state\" + \"@sensor_msgs/msg/JointState\" + \"[ignition.msgs.Model\" ], remappings = [( ign_model_prefix + \"/joint_state\" , \"/joint_states\" )], ) ld = LaunchDescription () ld . add_action ( use_sim_time_arg ) ld . add_action ( clock_bridge ) ld . add_action ( joint_state_bridge ) return ld tf tree # ros2 run rqt_tf_tree rqt_tf_tree sdf # model # model world # world <include> <pose> 0 0 1 0 0 0 </pose> <uri> model://vehicle_2 </uri> </include>","title":"joint state with sdf"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#lab","text":"load model SDF into ignition and rviz publish JointState from ignition to ros2 using bridge \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 ign.launch.launch.py \u2502 \u2514\u2500\u2500 ign_bridge.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 vehicle_2 \u2502 \u2502 \u2514\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 robot_base.stl \u2502 \u2514\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf \u251c\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 vehicle.sdf \u2514\u2500\u2500 package.xml","title":"LAB"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#launch","text":"","title":"launch"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#ign","text":"import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import IncludeLaunchDescription , SetEnvironmentVariable from launch.conditions import IfCondition from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node PACKAGE_NAME = \"ign_tutorial\" SDF_MODEL_NAME = \"vehicle_2\" WORLD_NAME = \"vehicle.sdf\" def generate_launch_description (): sim_time_arg = DeclareLaunchArgument ( \"use_sim_time\" , default_value = [ \"true\" ], description = \"Enable sim time from /clock\" , ) with_bridge_arg = DeclareLaunchArgument ( \"with_bridge\" , default_value = [ \"false\" ], description = \"Launch simulation with ros ign bridge\" , ) pkg_ros_gz_sim = get_package_share_directory ( \"ros_gz_sim\" ) pkg = get_package_share_directory ( PACKAGE_NAME ) sdf_path = f \" { pkg } /models/ { SDF_MODEL_NAME } /model.sdf\" use_sim_time = LaunchConfiguration ( \"use_sim_time\" ) resources = [ os . path . join ( pkg , \"worlds\" ), os . path . join ( pkg , \"models\" )] resource_env = SetEnvironmentVariable ( name = \"IGN_GAZEBO_RESOURCE_PATH\" , value = \":\" . join ( resources ) ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_ros_gz_sim , \"launch\" , \"gz_sim.launch.py\" ) ), launch_arguments = { \"gz_args\" : f \"-r -v 2 { WORLD_NAME } \" } . items (), ) # launch ign_bridge if with_bridge is true ign_bridge = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg , \"launch\" , \"ign_bridge.launch.py\" ), ), launch_arguments = { \"use_sim_time\" : use_sim_time } . items (), condition = IfCondition ( LaunchConfiguration ( \"with_bridge\" )) ) # robot state publisher node robot_state_publisher = Node ( package = \"robot_state_publisher\" , executable = \"robot_state_publisher\" , output = \"screen\" , parameters = [ { \"use_sim_time\" : use_sim_time }, { \"robot_description\" : open ( sdf_path ) . read ()}, ], ) ld = LaunchDescription () ld . add_action ( sim_time_arg ) ld . add_action ( with_bridge_arg ) ld . add_action ( resource_env ) ld . add_action ( gazebo ) ld . add_action ( ign_bridge ) ld . add_action ( robot_state_publisher ) return ld","title":"ign"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#bridge","text":"from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.conditions import IfCondition from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node ROBOT_NAME = \"basic_mobile_bot\" def generate_launch_description (): use_sim_time_arg = DeclareLaunchArgument ( \"use_sim_time\" , default_value = [ \"false\" ], description = \"use sim time from /clock\" ) namespace = \"\" use_sim_time = LaunchConfiguration ( \"use_sim_time\" ) ign_model_prefix = \"/world/demo/model/\" + ROBOT_NAME # clock bridge clock_bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , namespace = namespace , name = \"clock_bridge\" , output = \"screen\" , arguments = [ \"/clock@rosgraph_msgs/msg/Clock[ignition.msgs.Clock\" ], condition = IfCondition ( use_sim_time ), ) # joint state bridge # /world/demo/model/v2/model/basic_mobile_bot/joint_state joint_state_bridge = Node ( package = \"ros_gz_bridge\" , executable = \"parameter_bridge\" , namespace = namespace , name = \"joint_state_bridge\" , output = \"screen\" , parameters = [{ \"use_sim_time\" : use_sim_time }], arguments = [ ign_model_prefix + \"/joint_state\" + \"@sensor_msgs/msg/JointState\" + \"[ignition.msgs.Model\" ], remappings = [( ign_model_prefix + \"/joint_state\" , \"/joint_states\" )], ) ld = LaunchDescription () ld . add_action ( use_sim_time_arg ) ld . add_action ( clock_bridge ) ld . add_action ( joint_state_bridge ) return ld","title":"bridge"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#tf-tree","text":"ros2 run rqt_tf_tree rqt_tf_tree","title":"tf tree"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#sdf","text":"","title":"sdf"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#model","text":"model","title":"model"},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#world","text":"world <include> <pose> 0 0 1 0 0 0 </pose> <uri> model://vehicle_2 </uri> </include>","title":"world"},{"location":"blog/ROS2/ignition/tutorial/lidar/","tags":["ignition","lidar","ros2"],"text":"LAB # Add lidar sensor Bridge to ROS2 Show in RVIZ sdf # World Add sensor plugin under word tag model Add lidar link Add sensor <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> lidar sensor <sensor name= 'gpu_lidar' type= 'gpu_lidar' > <topic> lidar </topic> <update_rate> 10 </update_rate> <lidar> <scan> <horizontal> <samples> 640 </samples> <resolution> 1 </resolution> <min_angle> -1.396263 </min_angle> <max_angle> 1.396263 </max_angle> </horizontal> <vertical> <samples> 16 </samples> <resolution> 1 </resolution> <min_angle> -0.261799 </min_angle> <max_angle> 0.261799 </max_angle> </vertical> </scan> <range> <min> 0.08 </min> <max> 10.0 </max> <resolution> 0.01 </resolution> </range> </lidar> <alwaysOn> 1 </alwaysOn> <visualize> true </visualize> </sensor> model source code tf # bridge # lidar_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'lidar_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ '/lidar@sensor_msgs/msg/LaserScan' + '[ignition.msgs.LaserScan' , '/lidar/points' + '@sensor_msgs/msg/PointCloud2' + '[ignition.msgs.PointCloudPacked' ], remappings = [ ( '/lidar/points' , '/scan/points' ), ( '/lidar' , '/scan' ) ]) lidar_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"imu2imu_link\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"lidar_link\" , \"basic_mobile_bot/lidar_link/gpu_lidar\" ] ) Usage # Point cloud # laser scan #","title":"Add LIDAR sensor"},{"location":"blog/ROS2/ignition/tutorial/lidar/#lab","text":"Add lidar sensor Bridge to ROS2 Show in RVIZ","title":"LAB"},{"location":"blog/ROS2/ignition/tutorial/lidar/#sdf","text":"World Add sensor plugin under word tag model Add lidar link Add sensor <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> lidar sensor <sensor name= 'gpu_lidar' type= 'gpu_lidar' > <topic> lidar </topic> <update_rate> 10 </update_rate> <lidar> <scan> <horizontal> <samples> 640 </samples> <resolution> 1 </resolution> <min_angle> -1.396263 </min_angle> <max_angle> 1.396263 </max_angle> </horizontal> <vertical> <samples> 16 </samples> <resolution> 1 </resolution> <min_angle> -0.261799 </min_angle> <max_angle> 0.261799 </max_angle> </vertical> </scan> <range> <min> 0.08 </min> <max> 10.0 </max> <resolution> 0.01 </resolution> </range> </lidar> <alwaysOn> 1 </alwaysOn> <visualize> true </visualize> </sensor> model source code","title":"sdf"},{"location":"blog/ROS2/ignition/tutorial/lidar/#tf","text":"","title":"tf"},{"location":"blog/ROS2/ignition/tutorial/lidar/#bridge","text":"lidar_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'lidar_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ '/lidar@sensor_msgs/msg/LaserScan' + '[ignition.msgs.LaserScan' , '/lidar/points' + '@sensor_msgs/msg/PointCloud2' + '[ignition.msgs.PointCloudPacked' ], remappings = [ ( '/lidar/points' , '/scan/points' ), ( '/lidar' , '/scan' ) ]) lidar_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"imu2imu_link\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"lidar_link\" , \"basic_mobile_bot/lidar_link/gpu_lidar\" ] )","title":"bridge"},{"location":"blog/ROS2/ignition/tutorial/lidar/#usage","text":"","title":"Usage"},{"location":"blog/ROS2/ignition/tutorial/lidar/#point-cloud","text":"","title":"Point cloud"},{"location":"blog/ROS2/ignition/tutorial/lidar/#laser-scan","text":"","title":"laser scan"},{"location":"blog/ROS2/launch/","tags":["ros2","launch"],"text":"My Tutorials # Setup tutorial pkg Run launch file that include other launch files Resources # ROS2 launch files \u2013 All you need to know Architecture of launch launch source github Creating a launch file tutorial Tips # Minimal launch file # from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import LogInfo def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ) log_launch = LogInfo ( msg = \"---- log launch file ------\" ) ld . add_action ( log_launch ) ld . add_action ( sim_node ) return ld copy launch folder # cmake # install ( DIRECTORY launch DESTINATION share / $ { PROJECT_NAME } ) python # import os from glob import glob from setuptools import setup package_name = 'py_launch_example' setup ( # Other parameters ... data_files = [ # ... Other data files # Include all launch files. ( os . path . join ( 'share' , package_name , 'launch' ), glob ( 'launch/*launch.[pxy][yma]*' )) ] )","title":"ROS2 launch system"},{"location":"blog/ROS2/launch/#my-tutorials","text":"Setup tutorial pkg Run launch file that include other launch files","title":"My Tutorials"},{"location":"blog/ROS2/launch/#resources","text":"ROS2 launch files \u2013 All you need to know Architecture of launch launch source github Creating a launch file tutorial","title":"Resources"},{"location":"blog/ROS2/launch/#tips","text":"","title":"Tips"},{"location":"blog/ROS2/launch/#minimal-launch-file","text":"from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import LogInfo def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ) log_launch = LogInfo ( msg = \"---- log launch file ------\" ) ld . add_action ( log_launch ) ld . add_action ( sim_node ) return ld","title":"Minimal launch file"},{"location":"blog/ROS2/launch/#copy-launch-folder","text":"","title":"copy launch folder"},{"location":"blog/ROS2/launch/#cmake","text":"install ( DIRECTORY launch DESTINATION share / $ { PROJECT_NAME } )","title":"cmake"},{"location":"blog/ROS2/launch/#python","text":"import os from glob import glob from setuptools import setup package_name = 'py_launch_example' setup ( # Other parameters ... data_files = [ # ... Other data files # Include all launch files. ( os . path . join ( 'share' , package_name , 'launch' ), glob ( 'launch/*launch.[pxy][yma]*' )) ] )","title":"python"},{"location":"blog/ROS2/launch/launch_node_respawn/","tags":["ros2","launch"],"text":"LAB # Ros restart process and file or exit Demo # from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' , respawn = True , respawn_delay = 4 ) ld . add_action ( sim_node ) return ld You can run launch file without the package relation ros2 launch <launch file> usage # ros2 launch launch_node_respawn.launch.py Close the window After 4 sec ROS2 launch the node To Stop: exit from terminal","title":"Launch respawn node"},{"location":"blog/ROS2/launch/launch_node_respawn/#lab","text":"Ros restart process and file or exit","title":"LAB"},{"location":"blog/ROS2/launch/launch_node_respawn/#demo","text":"from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' , respawn = True , respawn_delay = 4 ) ld . add_action ( sim_node ) return ld You can run launch file without the package relation ros2 launch <launch file>","title":"Demo"},{"location":"blog/ROS2/launch/launch_node_respawn/#usage","text":"ros2 launch launch_node_respawn.launch.py Close the window After 4 sec ROS2 launch the node To Stop: exit from terminal","title":"usage"},{"location":"blog/ROS2/launch/launch_node_respawn_event/","tags":["ros2","launch"],"text":"LAB # Launch file events OnProcessStart OnProcessExit Demo # launch_node_event.launch.py from launch import LaunchDescription from launch.substitutions import EnvironmentVariable , FindExecutable from launch_ros.actions import Node from launch.actions import ExecuteProcess , RegisterEventHandler , LogInfo from launch.event_handlers import OnProcessStart , OnProcessExit def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' , respawn = True , respawn_delay = 4 ) # ros2 service call /turtlesim1/spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2}\" spawn_turtle = ExecuteProcess ( cmd = [[ FindExecutable ( name = 'ros2' ), ' service call ' , \"/turtlesim1\" , '/spawn ' , 'turtlesim/srv/Spawn ' , '\"{x: 2, y: 2, theta: 0.2}\"' ]], shell = True ) event_end_action = RegisterEventHandler ( OnProcessExit ( target_action = sim_node , on_exit = [ LogInfo ( msg = ( \"event --------\" , EnvironmentVariable ( name = 'USER' ), ' closed the turtlesim window' )) ] ) ) event_start_action = RegisterEventHandler ( OnProcessStart ( target_action = sim_node , on_start = [ LogInfo ( msg = 'event ------- Turtlesim started, spawning turtle -------' ), spawn_turtle ] ) ) ld . add_action ( sim_node ) ld . add_action ( event_end_action ) ld . add_action ( event_start_action ) return ld Tip You can run launch file without the package relation ros2 launch <launch file> Reference # Using event handlers","title":"Launch events"},{"location":"blog/ROS2/launch/launch_node_respawn_event/#lab","text":"Launch file events OnProcessStart OnProcessExit","title":"LAB"},{"location":"blog/ROS2/launch/launch_node_respawn_event/#demo","text":"launch_node_event.launch.py from launch import LaunchDescription from launch.substitutions import EnvironmentVariable , FindExecutable from launch_ros.actions import Node from launch.actions import ExecuteProcess , RegisterEventHandler , LogInfo from launch.event_handlers import OnProcessStart , OnProcessExit def generate_launch_description (): ld = LaunchDescription () sim_node = Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' , respawn = True , respawn_delay = 4 ) # ros2 service call /turtlesim1/spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2}\" spawn_turtle = ExecuteProcess ( cmd = [[ FindExecutable ( name = 'ros2' ), ' service call ' , \"/turtlesim1\" , '/spawn ' , 'turtlesim/srv/Spawn ' , '\"{x: 2, y: 2, theta: 0.2}\"' ]], shell = True ) event_end_action = RegisterEventHandler ( OnProcessExit ( target_action = sim_node , on_exit = [ LogInfo ( msg = ( \"event --------\" , EnvironmentVariable ( name = 'USER' ), ' closed the turtlesim window' )) ] ) ) event_start_action = RegisterEventHandler ( OnProcessStart ( target_action = sim_node , on_start = [ LogInfo ( msg = 'event ------- Turtlesim started, spawning turtle -------' ), spawn_turtle ] ) ) ld . add_action ( sim_node ) ld . add_action ( event_end_action ) ld . add_action ( event_start_action ) return ld Tip You can run launch file without the package relation ros2 launch <launch file>","title":"Demo"},{"location":"blog/ROS2/launch/launch_node_respawn_event/#reference","text":"Using event handlers","title":"Reference"},{"location":"blog/ROS2/launch/launch_node_with_arguments/","tags":["ros2","launch"],"text":"param_hello.hpp #ifndef PARAM_HELLO_HPP #define PARAM_HELLO_HPP #include \"rclcpp/rclcpp.hpp\" class ParamHelloNode final : public rclcpp :: Node { public : ParamHelloNode (); private : std :: string param_str_ ; }; #endif // PARAM_HELLO_HPP param_hello.cpp #include \"param_hello.hpp\" #include \"rclcpp/rclcpp.hpp\" ParamHelloNode :: ParamHelloNode () : Node ( \"hello_param\" ) { RCLCPP_INFO ( this -> get_logger (), \"hello param\" ); this -> declare_parameter ( \"param_name\" , \"hello_default\" ); this -> param_str_ = this -> get_parameter ( \"param_name\" ). as_string (); RCLCPP_INFO ( this -> get_logger (), \"%s\" , this -> param_str_ . c_str ()); }; launch node with arguments from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () node = Node ( name = \"simple_param\" , package = 'cpp_tutrial_pkg' , executable = 'param_hello' , parameters = [ { \"param_name\" : \"param value from launch\" } ] ) ld . add_action ( node ) return ld launch with arguments from cli from launch import LaunchDescription from launch_ros.actions import Node from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration def generate_launch_description (): ld = LaunchDescription () param_name = LaunchConfiguration ( 'param_name' ) arg_cmd = DeclareLaunchArgument ( \"param_name\" , default_value = \"hello world\" , description = \"msg simple description\" ) node = Node ( name = \"simple_param\" , package = 'cpp_tutrial_pkg' , executable = 'param_hello' , parameters = [ { \"param_name\" : param_name } ] ) ld . add_action ( arg_cmd ) ld . add_action ( node ) return ld","title":"launch with node arguments"},{"location":"blog/ROS2/launch/launch_with_arguments/","tags":["launch","argument","ros2"],"text":"from launch import LaunchDescription from launch.actions import LogInfo , DeclareLaunchArgument from launch.substitutions import LaunchConfiguration def generate_launch_description (): ld = LaunchDescription () arg_cmd = DeclareLaunchArgument ( \"msg\" , default_value = \"hello world\" , description = \"msg simple description\" ) ld . add_action ( arg_cmd ) ld . add_action ( LogInfo ( msg = LaunchConfiguration ( \"msg\" ))) return ld usage # show arguments # -s, --show-args, --show-arguments Show arguments that may be given to the launch file. ros2 launch launch_tutorials args.launch.py -s Arguments ( pass arguments as '<name>:=<value>' ) : 'msg' : msg simple description ( default: 'hello world' ) default argument ros2 launch cpp_tutrial_pkg basic_launch.launch.py [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-10-12-07-20-56-408482-lap2-3896306 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ launch.user ] : hello world with argument ros2 launch cpp_tutrial_pkg basic_launch.launch.py msg: = \"hello launch\" ... [ INFO ] [ launch.user ] : hello launch","title":"launch with arguments"},{"location":"blog/ROS2/launch/launch_with_arguments/#usage","text":"show arguments # -s, --show-args, --show-arguments Show arguments that may be given to the launch file. ros2 launch launch_tutorials args.launch.py -s Arguments ( pass arguments as '<name>:=<value>' ) : 'msg' : msg simple description ( default: 'hello world' ) default argument ros2 launch cpp_tutrial_pkg basic_launch.launch.py [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-10-12-07-20-56-408482-lap2-3896306 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ launch.user ] : hello world with argument ros2 launch cpp_tutrial_pkg basic_launch.launch.py msg: = \"hello launch\" ... [ INFO ] [ launch.user ] : hello launch","title":"usage"},{"location":"blog/ROS2/launch/launch_with_include/","tags":["ros2","launch"],"text":"LAB # Run/Include sub launch file Pass argument and substitute Child launch file # Run turtlesim node Change background color (red channel) Run child with argument from cli ros2 launch launch_tutorial child.launch.py new_background_r: = 0 Parent launch file # Include childe launch Pass arguments Parent # from launch_ros.substitutions import FindPackageShare from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.substitutions import PathJoinSubstitution , TextSubstitution def generate_launch_description (): colors = { 'background_r' : '0' } ld = LaunchDescription () include = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ PathJoinSubstitution ([ FindPackageShare ( 'launch_tutorial' ), 'child.launch.py' ]) ]), launch_arguments = { 'new_background_r' : TextSubstitution ( text = str ( colors [ 'background_r' ])) } . items () ) ld . add_action ( include ) return ld Child # child.launch.py from launch_ros.actions import Node from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , ExecuteProcess , TimerAction from launch.substitutions import LaunchConfiguration def generate_launch_description (): new_background_r = LaunchConfiguration ( 'new_background_r' ) new_background_r_launch_arg = DeclareLaunchArgument ( 'new_background_r' , default_value = '255' ) turtlesim_node = Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ) change_background_r = ExecuteProcess ( cmd = [[ 'ros2 param set ' '/sim background_r ' , new_background_r ]], shell = True ) return LaunchDescription ([ new_background_r_launch_arg , turtlesim_node , change_background_r ])","title":"Multiple launch files"},{"location":"blog/ROS2/launch/launch_with_include/#lab","text":"Run/Include sub launch file Pass argument and substitute","title":"LAB"},{"location":"blog/ROS2/launch/launch_with_include/#child-launch-file","text":"Run turtlesim node Change background color (red channel) Run child with argument from cli ros2 launch launch_tutorial child.launch.py new_background_r: = 0","title":"Child launch file"},{"location":"blog/ROS2/launch/launch_with_include/#parent-launch-file","text":"Include childe launch Pass arguments","title":"Parent launch file"},{"location":"blog/ROS2/launch/launch_with_include/#parent","text":"from launch_ros.substitutions import FindPackageShare from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.substitutions import PathJoinSubstitution , TextSubstitution def generate_launch_description (): colors = { 'background_r' : '0' } ld = LaunchDescription () include = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ PathJoinSubstitution ([ FindPackageShare ( 'launch_tutorial' ), 'child.launch.py' ]) ]), launch_arguments = { 'new_background_r' : TextSubstitution ( text = str ( colors [ 'background_r' ])) } . items () ) ld . add_action ( include ) return ld","title":"Parent"},{"location":"blog/ROS2/launch/launch_with_include/#child","text":"child.launch.py from launch_ros.actions import Node from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , ExecuteProcess , TimerAction from launch.substitutions import LaunchConfiguration def generate_launch_description (): new_background_r = LaunchConfiguration ( 'new_background_r' ) new_background_r_launch_arg = DeclareLaunchArgument ( 'new_background_r' , default_value = '255' ) turtlesim_node = Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ) change_background_r = ExecuteProcess ( cmd = [[ 'ros2 param set ' '/sim background_r ' , new_background_r ]], shell = True ) return LaunchDescription ([ new_background_r_launch_arg , turtlesim_node , change_background_r ])","title":"Child"},{"location":"blog/ROS2/launch/setup/","tags":["ros2","launch","101"],"text":"Setup launch tutorial pkg and write minimal launch file ros2 pkg create pkg_launch_tutorial --build_type ament_cmake Remove include and src Create launch sub folder CMakeLists.txt // Add to CMakeLists.txt install ( DIRECTORY launch DESTINATION share / $ { PROJECT_NAME } ) Check my git","title":"launch files tutorial package setup"},{"location":"blog/ROS2/launch/catmux/","tags":["tmux","launch"],"text":"A python package that wraps launching applications with a tmux script install # pip3 install --user catmux usage # config_demo.yaml --- parameters : enabled_mavproxy : true windows : - name : sitl layout : tiled splits : - commands : - echo \"1\" - commands : - echo \"2\" - name : mavproxy if : enabled_mavproxy layout : tiled splits : - commands : - echo \"1\" run catmux_create_session config_demo.yaml","title":"catmux"},{"location":"blog/ROS2/launch/catmux/#install","text":"pip3 install --user catmux","title":"install"},{"location":"blog/ROS2/launch/catmux/#usage","text":"config_demo.yaml --- parameters : enabled_mavproxy : true windows : - name : sitl layout : tiled splits : - commands : - echo \"1\" - commands : - echo \"2\" - name : mavproxy if : enabled_mavproxy layout : tiled splits : - commands : - echo \"1\" run catmux_create_session config_demo.yaml","title":"usage"},{"location":"blog/ROS2/nav2/","tags":["nav"],"text":"install # sudo apt install ros-humble-slam-toolbox sudo apt install ros-humble-navigation2 sudo apt install ros-humble-nav2-bringup Reference # NAV2 navigation2_tutorials source ROS Transformations and frames F1TENTH Autonomous Racing Community","title":"NAV2"},{"location":"blog/ROS2/nav2/#install","text":"sudo apt install ros-humble-slam-toolbox sudo apt install ros-humble-navigation2 sudo apt install ros-humble-nav2-bringup","title":"install"},{"location":"blog/ROS2/nav2/#reference","text":"NAV2 navigation2_tutorials source ROS Transformations and frames F1TENTH Autonomous Racing Community","title":"Reference"},{"location":"blog/ROS2/nav2/odometry/","tags":["ros2"],"text":"odometry using data from sensors to estimate the change in a robot\u2019s position, orientation, and velocity over time relative to some point (e.g. x=0, y=0, z=0). Odometry usually used sensors like - Wheel Encoder - IMU - LIDAR ROS used odom frame to mark the point in the world where the robot first start to moving. Reference # Odometry in ROS 2 Sensor Fusion Using the Robot Localization Package","title":"Odometry"},{"location":"blog/ROS2/nav2/odometry/#reference","text":"Odometry in ROS 2 Sensor Fusion Using the Robot Localization Package","title":"Reference"},{"location":"blog/ROS2/nav2/robot_localization_package/","tags":["nav2","ros2"],"text":"LAB # Use robot_localization to fuse odometry and imu reading using ekf_node install # sudo apt install ros-humble-robot-localization usage # robot_localization_file_path = os . path . join ( pkg , 'config/ekf.yaml' ) # Start robot localization using an Extended Kalman filter start_robot_localization_cmd = Node ( package = 'robot_localization' , executable = 'ekf_node' , name = 'ekf_filter_node' , output = 'screen' , parameters = [ robot_localization_file_path , { 'use_sim_time' : use_sim_time }]) # Reference # robot_localization wiki\u00b6","title":"Robot Localization Package"},{"location":"blog/ROS2/nav2/robot_localization_package/#lab","text":"Use robot_localization to fuse odometry and imu reading using ekf_node","title":"LAB"},{"location":"blog/ROS2/nav2/robot_localization_package/#install","text":"sudo apt install ros-humble-robot-localization","title":"install"},{"location":"blog/ROS2/nav2/robot_localization_package/#usage","text":"","title":"usage"},{"location":"blog/ROS2/nav2/robot_localization_package/#robot_localization_file_path--ospathjoinpkg-configekfyaml--start-robot-localization-using-an-extended-kalman-filter--start_robot_localization_cmd--node----packagerobot_localization----executableekf_node----nameekf_filter_node----outputscreen----parametersrobot_localization_file_path-----use_sim_time-use_sim_time","text":"","title":"robot_localization_file_path = os.path.join(pkg, &#39;config/ekf.yaml&#39;) \n\n# Start robot localization using an Extended Kalman filter\n  start_robot_localization_cmd = Node(\n    package=&#39;robot_localization&#39;,\n    executable=&#39;ekf_node&#39;,\n    name=&#39;ekf_filter_node&#39;,\n    output=&#39;screen&#39;,\n    parameters=[robot_localization_file_path, \n    {&#39;use_sim_time&#39;: use_sim_time}])\n"},{"location":"blog/ROS2/nav2/robot_localization_package/#reference","text":"robot_localization wiki\u00b6","title":"Reference"},{"location":"blog/ROS2/nav2/navigation_tutorial/","tags":["ros","nav2","tutorial"],"text":"sam_bot_description # Objective # Convert simulation from gazebo to ignition fortress Reference # Nav2 navigation2-tutorials github","title":"NAV2 tutorial"},{"location":"blog/ROS2/nav2/navigation_tutorial/#sam_bot_description","text":"","title":"sam_bot_description"},{"location":"blog/ROS2/nav2/navigation_tutorial/#objective","text":"Convert simulation from gazebo to ignition fortress","title":"Objective"},{"location":"blog/ROS2/nav2/navigation_tutorial/#reference","text":"Nav2 navigation2-tutorials github","title":"Reference"},{"location":"blog/ROS2/nav2/navigation_tutorial/sam_bot_description/launch/","tags":["nav2"],"text":"","title":"Launch urdf and ros bridge"},{"location":"blog/ROS2/nav2/navigation_tutorial/sam_bot_description/urdf/","tags":["urdf"],"text":"Sensors # imu lidar camera depth_camera Plugins # JointStatePublisher joint_state # Add joint_state plugin to model JointStatePublisher <gazebo> <plugin filename= \"gz-sim-joint-state-publisher-system\" name= \"gz::sim::systems::JointStatePublisher\" > </plugin> </gazebo> imu # world <plugin filename= \"ignition-gazebo-imu-system\" name= \"ignition::gazebo::systems::Imu\" > </plugin> urdf <gazebo reference= \"imu_link\" > <sensor name= \"imu\" type= \"imu\" > <always_on> 1 </always_on> <update_rate> 100 </update_rate> <visualize> true </visualize> <topic> imu </topic> <enable_metrics> true </enable_metrics> </sensor> </gazebo> bridge bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/imu@sensor_msgs/msg/Imu@gz.msgs.IMU' ], output = 'screen' ) rviz # [rviz2-8] [INFO] [1670058613.098965097] [rviz2]: Message Filter dropping message: frame 'sam_bot/base_link/imu' at time 201.360 for reason 'discarding message because the queue is full' add static tf # run form cli ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 imu_link sam_bot/base_link/imu launch static tf imu_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"imu2imu_link\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"imu_link\" , \"sam_bot/base_link/imu\" ] TODO Why need to add static tf between sensor and link LIDAR # Plugin (world.sdf) Sensor Bridge tf world <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> urdf <gazebo reference= \"lidar_link\" > <sensor name= 'gpu_lidar' type= 'gpu_lidar' > <topic> lidar </topic> <update_rate> 10 </update_rate> <lidar> <scan> <horizontal> <samples> 640 </samples> <resolution> 1 </resolution> <min_angle> -1.396263 </min_angle> <max_angle> 1.396263 </max_angle> </horizontal> <vertical> <samples> 16 </samples> <resolution> 1 </resolution> <min_angle> -0.261799 </min_angle> <max_angle> 0.261799 </max_angle> </vertical> </scan> <range> <min> 0.08 </min> <max> 10.0 </max> <resolution> 0.01 </resolution> </range> </lidar> <alwaysOn> 1 </alwaysOn> <visualize> true </visualize> </sensor> </gazebo> bridge lidar_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'lidar_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ '/lidar@sensor_msgs/msg/LaserScan' + '[ignition.msgs.LaserScan' , '/lidar/points' + '@sensor_msgs/msg/PointCloud2' + '[ignition.msgs.PointCloudPacked' ], remappings = [ ( '/lidar/points' , '/scan/points' ), ( '/lidar' , '/scan' ) ]) rviz # tf # ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 lidar_link sam_bot_description/lidar_link/lidar","title":"Convert urdf to support ignition"},{"location":"blog/ROS2/nav2/navigation_tutorial/sam_bot_description/urdf/#sensors","text":"imu lidar camera depth_camera","title":"Sensors"},{"location":"blog/ROS2/nav2/navigation_tutorial/sam_bot_description/urdf/#plugins","text":"JointStatePublisher","title":"Plugins"},{"location":"blog/ROS2/nav2/navigation_tutorial/sam_bot_description/urdf/#joint_state","text":"Add joint_state plugin to model JointStatePublisher <gazebo> <plugin filename= \"gz-sim-joint-state-publisher-system\" name= \"gz::sim::systems::JointStatePublisher\" > </plugin> </gazebo>","title":"joint_state"},{"location":"blog/ROS2/nav2/navigation_tutorial/sam_bot_description/urdf/#imu","text":"world <plugin filename= \"ignition-gazebo-imu-system\" name= \"ignition::gazebo::systems::Imu\" > </plugin> urdf <gazebo reference= \"imu_link\" > <sensor name= \"imu\" type= \"imu\" > <always_on> 1 </always_on> <update_rate> 100 </update_rate> <visualize> true </visualize> <topic> imu </topic> <enable_metrics> true </enable_metrics> </sensor> </gazebo> bridge bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , arguments = [ '/imu@sensor_msgs/msg/Imu@gz.msgs.IMU' ], output = 'screen' )","title":"imu"},{"location":"blog/ROS2/nav2/navigation_tutorial/sam_bot_description/urdf/#rviz","text":"[rviz2-8] [INFO] [1670058613.098965097] [rviz2]: Message Filter dropping message: frame 'sam_bot/base_link/imu' at time 201.360 for reason 'discarding message because the queue is full'","title":"rviz"},{"location":"blog/ROS2/nav2/navigation_tutorial/sam_bot_description/urdf/#add-static-tf","text":"run form cli ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 imu_link sam_bot/base_link/imu launch static tf imu_tf = Node ( package = 'tf2_ros' , executable = 'static_transform_publisher' , name = \"imu2imu_link\" , arguments = [ \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"0\" , \"imu_link\" , \"sam_bot/base_link/imu\" ] TODO Why need to add static tf between sensor and link","title":"add static tf"},{"location":"blog/ROS2/nav2/navigation_tutorial/sam_bot_description/urdf/#lidar","text":"Plugin (world.sdf) Sensor Bridge tf world <plugin filename= \"ignition-gazebo-sensors-system\" name= \"ignition::gazebo::systems::Sensors\" > <render_engine> ogre2 </render_engine> </plugin> urdf <gazebo reference= \"lidar_link\" > <sensor name= 'gpu_lidar' type= 'gpu_lidar' > <topic> lidar </topic> <update_rate> 10 </update_rate> <lidar> <scan> <horizontal> <samples> 640 </samples> <resolution> 1 </resolution> <min_angle> -1.396263 </min_angle> <max_angle> 1.396263 </max_angle> </horizontal> <vertical> <samples> 16 </samples> <resolution> 1 </resolution> <min_angle> -0.261799 </min_angle> <max_angle> 0.261799 </max_angle> </vertical> </scan> <range> <min> 0.08 </min> <max> 10.0 </max> <resolution> 0.01 </resolution> </range> </lidar> <alwaysOn> 1 </alwaysOn> <visualize> true </visualize> </sensor> </gazebo> bridge lidar_bridge = Node ( package = 'ros_gz_bridge' , executable = 'parameter_bridge' , namespace = namespace , name = 'lidar_bridge' , output = 'screen' , parameters = [{ 'use_sim_time' : use_sim_time }], arguments = [ '/lidar@sensor_msgs/msg/LaserScan' + '[ignition.msgs.LaserScan' , '/lidar/points' + '@sensor_msgs/msg/PointCloud2' + '[ignition.msgs.PointCloudPacked' ], remappings = [ ( '/lidar/points' , '/scan/points' ), ( '/lidar' , '/scan' ) ])","title":"LIDAR"},{"location":"blog/ROS2/nav2/navigation_tutorial/sam_bot_description/urdf/#rviz_1","text":"","title":"rviz"},{"location":"blog/ROS2/nav2/navigation_tutorial/sam_bot_description/urdf/#tf","text":"ros2 run tf2_ros static_transform_publisher 0 0 0 0 0 0 lidar_link sam_bot_description/lidar_link/lidar","title":"tf"},{"location":"blog/ROS2/nav2/navigation_tutorial/sam_bot_description/world/","text":"","title":"World"},{"location":"blog/ROS2/python/","tags":["ros2","python"],"text":"Template # import rclpy from rclpy.node import Node class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal\" super () . __init__ ( node_name ) self . get_logger () . info ( \"Hello ROS2\" ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () setup.py # copy launch files to install folder data_files = [ ( os . path . join ( 'share' , package_name , \"launch\" ), glob ( 'launch/*.launch.py' )), ] # entry points entry_points = { 'console_scripts' : [ \"minimal_node=py_tutorial_pkg.minimal_node:main\" , ] # Tutorial # pub sub namespace and remapping Test with pytest and colcon","title":"ROS2 Python"},{"location":"blog/ROS2/python/#template","text":"import rclpy from rclpy.node import Node class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal\" super () . __init__ ( node_name ) self . get_logger () . info ( \"Hello ROS2\" ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Template"},{"location":"blog/ROS2/python/#setuppy-copy-launch-files-to-install-folderdata_files--------ospathjoinshare-package_name-launch-globlaunchlaunchpy-entry-pointsentry_points--------console_scripts-------------minimal_nodepy_tutorial_pkgminimal_nodemain--------","text":"","title":"setup.py# copy launch files to install folder\ndata_files=[\n        (os.path.join(&#39;share&#39;, package_name, &quot;launch&quot;), glob(&#39;launch/*.launch.py&#39;)),\n]\n\n# entry points\nentry_points={\n        &#39;console_scripts&#39;: [\n            &quot;minimal_node=py_tutorial_pkg.minimal_node:main&quot;,\n        ]\n"},{"location":"blog/ROS2/python/#tutorial","text":"pub sub namespace and remapping Test with pytest and colcon","title":"Tutorial"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/","tags":["python","ros2"],"text":"LAB # Create minimal Pub/Sub with different topic remapping topic from command line remapping from launch add namespace change node name Minimal nodes # minimal_pub.py import rclpy from rclpy.node import Node from std_msgs.msg import String TOPIC = \"simple\" PERIOD = 1 class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal_pub\" super () . __init__ ( node_name ) self . __pub = self . create_publisher ( String , TOPIC , 10 ) self . __timer = self . create_timer ( PERIOD , self . __timer_handler ) self . __timer self . __counter = 0 self . get_logger () . info ( \"run simple pub\" ) def __timer_handler ( self ): self . __counter += 1 msg = String ( data = \"pub counter: {} \" . format ( self . __counter )) self . __pub . publish ( msg ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () minimal_sub.py import rclpy from rclpy.node import Node from std_msgs.msg import String TOPIC = \"simple1\" class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal_sub\" super () . __init__ ( node_name ) self . __sub = self . create_subscription ( String , TOPIC , self . __sub_handler , 10 ) self . __sub self . get_logger () . info ( \"start minimal sub\" ) def __sub_handler ( self , msg : String ): self . get_logger () . info ( msg . data ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () setup.py # Add entry points entry_points = { 'console_scripts' : [ \"minimal_pub=py_tutorial_pkg.minimal_pub:main\" , \"minimal_sub=py_tutorial_pkg.minimal_sub:main\" ], } first run # terminal1 ros2 run py_tutorial_pkg minimal_pub terminal2 ros2 run py_tutorial_pkg minimal_sub terminal3 # nodes ros2 node list /minimal_pub /minimal_sub # topics ros2 topic list /parameter_events /rosout /simple /simple1 # info topic /simple ros2 topic info /simple Type: std_msgs/msg/String Publisher count: 1 Subscription count: 0 # info topic /simple1 ros2 topic info /simple1 Type: std_msgs/msg/String Publisher count: 0 Subscription count: 1 usage remapping sub topic # terminal2 ros2 run py_tutorial_pkg minimal_sub --ros-args -r simple1: = simple terminal3 ros2 topic list /parameter_events /rosout /simple launch with remapping # run_minimal_1.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () pub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_pub' ) sub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_sub' , remappings = [ ( '/simple1' , '/simple' ), ] ) ld . add_action ( pub_node ) ld . add_action ( sub_node ) return ld terminal1 ros2 launch py_tutorial_pkg run_minimal1.launch.py terminal2 # nodes ros2 node list /minimal_pub /minimal_sub # topics ros2 topic list /parameter_events /rosout /simple Add namespace # terminal1 ros2 run py_tutorial_pkg minimal_pub --ros-args -r __ns: = /demo terminal2 ros2 run py_tutorial_pkg minimal_sub --ros-args -r __ns: = /other_demo terminal3 # nodes ros2 node list /demo/minimal_pub /other_demo/minimal_sub # topics ros2 topic list /demo/simple /other_demo/simple1 remap pub this time # terminal1 ros2 run py_tutorial_pkg minimal_pub --ros-args -r __ns: = /demo -r /demo/simple: = /other_demo/simple1 terminal3 # nodes ros2 topic list /demo/other_demo/simple1 /other_demo/simple1 # topics ros2 topic list /other_demo/simple1 with launch file # Add namespace Remap topic with full namespace run_minimal_2.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () pub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_pub' , namespace = \"/demo\" , remappings = [ ( '/demo/simple' , '/other_demo/simple1' ), ] ) sub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_sub' , namespace = \"/other_demo\" ) ld . add_action ( pub_node ) ld . add_action ( sub_node ) return ld","title":"Minimal Pub/Sub with namespace and remapping topics"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#lab","text":"Create minimal Pub/Sub with different topic remapping topic from command line remapping from launch add namespace change node name","title":"LAB"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#minimal-nodes","text":"minimal_pub.py import rclpy from rclpy.node import Node from std_msgs.msg import String TOPIC = \"simple\" PERIOD = 1 class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal_pub\" super () . __init__ ( node_name ) self . __pub = self . create_publisher ( String , TOPIC , 10 ) self . __timer = self . create_timer ( PERIOD , self . __timer_handler ) self . __timer self . __counter = 0 self . get_logger () . info ( \"run simple pub\" ) def __timer_handler ( self ): self . __counter += 1 msg = String ( data = \"pub counter: {} \" . format ( self . __counter )) self . __pub . publish ( msg ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () minimal_sub.py import rclpy from rclpy.node import Node from std_msgs.msg import String TOPIC = \"simple1\" class MyNode ( Node ): def __init__ ( self ): node_name = \"minimal_sub\" super () . __init__ ( node_name ) self . __sub = self . create_subscription ( String , TOPIC , self . __sub_handler , 10 ) self . __sub self . get_logger () . info ( \"start minimal sub\" ) def __sub_handler ( self , msg : String ): self . get_logger () . info ( msg . data ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () setup.py # Add entry points entry_points = { 'console_scripts' : [ \"minimal_pub=py_tutorial_pkg.minimal_pub:main\" , \"minimal_sub=py_tutorial_pkg.minimal_sub:main\" ], }","title":"Minimal nodes"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#first-run","text":"terminal1 ros2 run py_tutorial_pkg minimal_pub terminal2 ros2 run py_tutorial_pkg minimal_sub terminal3 # nodes ros2 node list /minimal_pub /minimal_sub # topics ros2 topic list /parameter_events /rosout /simple /simple1 # info topic /simple ros2 topic info /simple Type: std_msgs/msg/String Publisher count: 1 Subscription count: 0 # info topic /simple1 ros2 topic info /simple1 Type: std_msgs/msg/String Publisher count: 0 Subscription count: 1","title":"first run"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#usage-remapping-sub-topic","text":"terminal2 ros2 run py_tutorial_pkg minimal_sub --ros-args -r simple1: = simple terminal3 ros2 topic list /parameter_events /rosout /simple","title":"usage remapping sub topic"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#launch-with-remapping","text":"run_minimal_1.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () pub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_pub' ) sub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_sub' , remappings = [ ( '/simple1' , '/simple' ), ] ) ld . add_action ( pub_node ) ld . add_action ( sub_node ) return ld terminal1 ros2 launch py_tutorial_pkg run_minimal1.launch.py terminal2 # nodes ros2 node list /minimal_pub /minimal_sub # topics ros2 topic list /parameter_events /rosout /simple","title":"launch with remapping"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#add-namespace","text":"terminal1 ros2 run py_tutorial_pkg minimal_pub --ros-args -r __ns: = /demo terminal2 ros2 run py_tutorial_pkg minimal_sub --ros-args -r __ns: = /other_demo terminal3 # nodes ros2 node list /demo/minimal_pub /other_demo/minimal_sub # topics ros2 topic list /demo/simple /other_demo/simple1","title":"Add namespace"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#remap-pub-this-time","text":"terminal1 ros2 run py_tutorial_pkg minimal_pub --ros-args -r __ns: = /demo -r /demo/simple: = /other_demo/simple1 terminal3 # nodes ros2 topic list /demo/other_demo/simple1 /other_demo/simple1 # topics ros2 topic list /other_demo/simple1","title":"remap pub this time"},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#with-launch-file","text":"Add namespace Remap topic with full namespace run_minimal_2.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () pub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_pub' , namespace = \"/demo\" , remappings = [ ( '/demo/simple' , '/other_demo/simple1' ), ] ) sub_node = Node ( package = 'py_tutorial_pkg' , executable = 'minimal_sub' , namespace = \"/other_demo\" ) ld . add_action ( pub_node ) ld . add_action ( sub_node ) return ld","title":"with launch file"},{"location":"blog/ROS2/python/test_demo/","tags":["pytest","test"],"text":"Minimal project structure # py_tutorial_pkg/ py_tutorial_pkg/ __init__.py demo.py package.xml setup.cfg setup.py tests/ test_demo.py setup.py # Add line to setup.py tests_require = [ 'pytest' ], ```python title=\u201dpy_tutorial_pkg/demo.py def func_under_test(a, b): return a+b ```python title=\"tests/test_demo.py\" from py_tutorial_pkg import demo def test_math(): result = demo.func_under_test(2, 2) assert result == 4 usage # # Run test in verbose mode colcon test --packages-select py_tutorial_pkg \\ --event-handler = console_direct+ Run specific test ```bash colcon test \u2013packages-select \u2013pytest-args -k name_of_the_test_function # colcon test \u2013packages-select py_tutorial_pkg \u2013pytest-args -k test_math \u2013event-handler=console_direct+ ```","title":"Add test to your package"},{"location":"blog/ROS2/python/test_demo/#minimal-project-structure","text":"py_tutorial_pkg/ py_tutorial_pkg/ __init__.py demo.py package.xml setup.cfg setup.py tests/ test_demo.py setup.py # Add line to setup.py tests_require = [ 'pytest' ], ```python title=\u201dpy_tutorial_pkg/demo.py def func_under_test(a, b): return a+b ```python title=\"tests/test_demo.py\" from py_tutorial_pkg import demo def test_math(): result = demo.func_under_test(2, 2) assert result == 4","title":"Minimal project structure"},{"location":"blog/ROS2/python/test_demo/#usage","text":"# Run test in verbose mode colcon test --packages-select py_tutorial_pkg \\ --event-handler = console_direct+ Run specific test ```bash","title":"usage"},{"location":"blog/ROS2/python/test_demo/#colcon-test---packages-select----pytest-args--k-name_of_the_test_function","text":"colcon test \u2013packages-select py_tutorial_pkg \u2013pytest-args -k test_math \u2013event-handler=console_direct+ ```","title":"colcon test --packages-select  --pytest-args -k name_of_the_test_function"},{"location":"blog/ROS2/python/action/action_client/","text":"import rclpy from rclpy.action import ActionClient from rclpy.node import Node import threading from action_tutorial_interfaces.action import MyAction TOPIC = \"my_action_demo\" class MyActionClient ( Node ): def __init__ ( self ): super () . __init__ ( 'action_client' ) self . _action_client = ActionClient ( self , MyAction , TOPIC ) def send_goal ( self , count ): goal_msg = MyAction . Goal () goal_msg . count = count self . _action_client . wait_for_server () self . _send_goal_future = self . _action_client . send_goal_async ( goal_msg , feedback_callback = self . feedback_callback ) self . _send_goal_future . add_done_callback ( self . goal_response_callback ) def feedback_callback ( self , feedback_msg ): self . get_logger () . info ( \"feedback thread {} \" . format ( threading . current_thread () . ident )) def goal_response_callback ( self , future ): self . get_logger () . info ( \"response thread {} \" . format ( threading . current_thread () . ident )) goal_handle = future . result () if not goal_handle . accepted : self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) self . _get_result_future = goal_handle . get_result_async () self . _get_result_future . add_done_callback ( self . get_result_callback ) def get_result_callback ( self , future ): self . get_logger () . info ( \"result thread {} \" . format ( threading . current_thread () . ident )) result = future . result () . result self . get_logger () . info ( 'Result: {0} ' . format ( result . total )) rclpy . shutdown () def main ( args = None ): rclpy . init ( args = args ) action_client = MyActionClient () action_client . send_goal ( 10 ) rclpy . spin ( action_client ) if __name__ == '__main__' : main ()","title":"Action client"},{"location":"blog/ROS2/python/action/action_server/","tags":["ros2","python","action"],"text":"VSCode action intellisense Add path to search to python.analysis.extraPaths list in settings.json { \"python.analysis.extraPaths\" : [ \"/home/user/ros2_ws/install/action_tutorial_interfaces/local/lib/python3.10/dist-packages\" ] } demo # action_tutorial/my_server.py import rclpy from rclpy.action import ActionServer from rclpy.node import Node from rclpy.action.server import ServerGoalHandle from action_tutorial_interfaces.action import MyAction TOPIC = \"my_action_demo\" class MyActionServer ( Node ): def __init__ ( self ): super () . __init__ ( 'my_action_server' ) self . _action_server = ActionServer ( self , MyAction , TOPIC , self . execute_callback ) self . get_logger () . info ( 'Start my_action_server version' ) def execute_callback ( self , goal_handle : ServerGoalHandle ): feedback_msg = MyAction . Feedback () for i in range ( goal_handle . request . count ): self . get_logger () . info ( 'current: {} ' . format ( i )) feedback_msg . current = i goal_handle . publish_feedback ( feedback_msg ) self . get_logger () . info ( 'Action ended' ) goal_handle . succeed () result = MyAction . Result () result . total = i return result def main ( args = None ): rclpy . init ( args = args ) action_server = MyActionServer () rclpy . spin ( action_server ) if __name__ == '__main__' : main () Test # send_goal ros2 action send_goal -f /my_action_demo action_tutorial_interfaces/action/MyAction \"{count: 5}\" Waiting for an action server to become available... Sending goal: count: 5 Goal accepted with ID: c1129edf0f894012921b849b7948703a Feedback: current: 0 Feedback: current: 1 Feedback: current: 2 Feedback: current: 3 Feedback: current: 4 Result: total: 4 Goal finished with status: SUCCEEDED","title":"Create Action server"},{"location":"blog/ROS2/python/action/action_server/#demo","text":"action_tutorial/my_server.py import rclpy from rclpy.action import ActionServer from rclpy.node import Node from rclpy.action.server import ServerGoalHandle from action_tutorial_interfaces.action import MyAction TOPIC = \"my_action_demo\" class MyActionServer ( Node ): def __init__ ( self ): super () . __init__ ( 'my_action_server' ) self . _action_server = ActionServer ( self , MyAction , TOPIC , self . execute_callback ) self . get_logger () . info ( 'Start my_action_server version' ) def execute_callback ( self , goal_handle : ServerGoalHandle ): feedback_msg = MyAction . Feedback () for i in range ( goal_handle . request . count ): self . get_logger () . info ( 'current: {} ' . format ( i )) feedback_msg . current = i goal_handle . publish_feedback ( feedback_msg ) self . get_logger () . info ( 'Action ended' ) goal_handle . succeed () result = MyAction . Result () result . total = i return result def main ( args = None ): rclpy . init ( args = args ) action_server = MyActionServer () rclpy . spin ( action_server ) if __name__ == '__main__' : main ()","title":"demo"},{"location":"blog/ROS2/python/action/action_server/#test","text":"send_goal ros2 action send_goal -f /my_action_demo action_tutorial_interfaces/action/MyAction \"{count: 5}\" Waiting for an action server to become available... Sending goal: count: 5 Goal accepted with ID: c1129edf0f894012921b849b7948703a Feedback: current: 0 Feedback: current: 1 Feedback: current: 2 Feedback: current: 3 Feedback: current: 4 Result: total: 4 Goal finished with status: SUCCEEDED","title":"Test"},{"location":"blog/ROS2/python/action/action_server_multiple_executer/","tags":["ros2","python","action"],"text":"Demo # action server with multithread import rclpy import threading import time from rclpy.executors import MultiThreadedExecutor from rclpy.action import ActionServer from rclpy.node import Node from rclpy.action.server import ServerGoalHandle from action_tutorial_interfaces.action import MyAction TOPIC = \"my_action_demo\" PERIOD = 1 class MyActionServer ( Node ): def __init__ ( self ): super () . __init__ ( 'my_action_server' ) self . _action_server = ActionServer ( self , MyAction , TOPIC , self . execute_callback ) self . __timer = self . create_timer ( PERIOD , self . __timer_handler ) self . __timer self . get_logger () . info ( 'Start my_action_server version' ) def __timer_handler ( self ): self . get_logger () . info ( \"timer thread ->: {} \" . format ( threading . current_thread () . ident )) def execute_callback ( self , goal_handle : ServerGoalHandle ): self . get_logger () . info ( \"action thread ->: {} \" . format ( threading . current_thread () . ident )) feedback_msg = MyAction . Feedback () for i in range ( goal_handle . request . count ): time . sleep ( 1 ) self . get_logger () . info ( 'current: {} ' . format ( i )) feedback_msg . current = i goal_handle . publish_feedback ( feedback_msg ) self . get_logger () . info ( 'Action ended' ) goal_handle . succeed () result = MyAction . Result () result . total = i return result def main ( args = None ): rclpy . init ( args = args ) action_server = MyActionServer () exec = MultiThreadedExecutor () exec . add_node ( action_server ) exec . spin () rclpy . spin ( action_server ) if __name__ == '__main__' : main () Run # run action ros2 action send_goal -f /my_action_demo action_tutorial_interfaces/action/MyAction \"{count: 3}\" server output [ INFO ] [ 1670248402 .659192149 ] [ my_action_server ] : timer thread ->: 140488007521856 [ INFO ] [ 1670248403 .657669396 ] [ my_action_server ] : timer thread ->: 140487998469696 [ INFO ] [ 1670248404 .005261426 ] [ my_action_server ] : action thread ->: 140487998469696 [ INFO ] [ 1670248404 .658963720 ] [ my_action_server ] : timer thread ->: 140488007521856 [ INFO ] [ 1670248405 .006998918 ] [ my_action_server ] : current: 0 [ INFO ] [ 1670248405 .658867664 ] [ my_action_server ] : timer thread ->: 140487990076992 [ INFO ] [ 1670248406 .009163793 ] [ my_action_server ] : current: 1 [ INFO ] [ 1670248406 .658945210 ] [ my_action_server ] : timer thread ->: 140488015914560 [ INFO ] [ 1670248407 .011518224 ] [ my_action_server ] : current: 2 [ INFO ] [ 1670248407 .012507114 ] [ my_action_server ] : Action ended [ INFO ] [ 1670248407 .658774598 ] [ my_action_server ] : timer thread ->: 140488015914560","title":"Create Action server with multithread executer"},{"location":"blog/ROS2/python/action/action_server_multiple_executer/#demo","text":"action server with multithread import rclpy import threading import time from rclpy.executors import MultiThreadedExecutor from rclpy.action import ActionServer from rclpy.node import Node from rclpy.action.server import ServerGoalHandle from action_tutorial_interfaces.action import MyAction TOPIC = \"my_action_demo\" PERIOD = 1 class MyActionServer ( Node ): def __init__ ( self ): super () . __init__ ( 'my_action_server' ) self . _action_server = ActionServer ( self , MyAction , TOPIC , self . execute_callback ) self . __timer = self . create_timer ( PERIOD , self . __timer_handler ) self . __timer self . get_logger () . info ( 'Start my_action_server version' ) def __timer_handler ( self ): self . get_logger () . info ( \"timer thread ->: {} \" . format ( threading . current_thread () . ident )) def execute_callback ( self , goal_handle : ServerGoalHandle ): self . get_logger () . info ( \"action thread ->: {} \" . format ( threading . current_thread () . ident )) feedback_msg = MyAction . Feedback () for i in range ( goal_handle . request . count ): time . sleep ( 1 ) self . get_logger () . info ( 'current: {} ' . format ( i )) feedback_msg . current = i goal_handle . publish_feedback ( feedback_msg ) self . get_logger () . info ( 'Action ended' ) goal_handle . succeed () result = MyAction . Result () result . total = i return result def main ( args = None ): rclpy . init ( args = args ) action_server = MyActionServer () exec = MultiThreadedExecutor () exec . add_node ( action_server ) exec . spin () rclpy . spin ( action_server ) if __name__ == '__main__' : main ()","title":"Demo"},{"location":"blog/ROS2/python/action/action_server_multiple_executer/#run","text":"run action ros2 action send_goal -f /my_action_demo action_tutorial_interfaces/action/MyAction \"{count: 3}\" server output [ INFO ] [ 1670248402 .659192149 ] [ my_action_server ] : timer thread ->: 140488007521856 [ INFO ] [ 1670248403 .657669396 ] [ my_action_server ] : timer thread ->: 140487998469696 [ INFO ] [ 1670248404 .005261426 ] [ my_action_server ] : action thread ->: 140487998469696 [ INFO ] [ 1670248404 .658963720 ] [ my_action_server ] : timer thread ->: 140488007521856 [ INFO ] [ 1670248405 .006998918 ] [ my_action_server ] : current: 0 [ INFO ] [ 1670248405 .658867664 ] [ my_action_server ] : timer thread ->: 140487990076992 [ INFO ] [ 1670248406 .009163793 ] [ my_action_server ] : current: 1 [ INFO ] [ 1670248406 .658945210 ] [ my_action_server ] : timer thread ->: 140488015914560 [ INFO ] [ 1670248407 .011518224 ] [ my_action_server ] : current: 2 [ INFO ] [ 1670248407 .012507114 ] [ my_action_server ] : Action ended [ INFO ] [ 1670248407 .658774598 ] [ my_action_server ] : timer thread ->: 140488015914560","title":"Run"},{"location":"blog/ROS2/python/action/create_custom_action_msg/","tags":["ros2","python","action"],"text":"Actions are defined in .action locate in action sub folder Action files defined in this structure # Request --- # Result --- # Feedback Demo # Action Definition # action/MyAction.action int32 count --- int32 total --- int32 current CMakeLists # CMakeList.txt cmake_minimum_required ( VERSION 3.8 ) project ( action_tutorial_interfaces ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( $ { PROJECT_NAME } \"action/MyAction.action\" ) ament_package () CMakeLists Keep each action in new line Package.xml # Add to package.xml <buildtool_depend> rosidl_default_generators </buildtool_depend> <depend> action_msgs </depend> <member_of_group> rosidl_interface_packages </member_of_group> build and test # colcon build --packages-select action_tutorial_interfaces check ros2 interface show action_tutorial_interfaces/action/MyAction # int32 count --- int32 total --- int32 current # Resources # Creating an action","title":"Create custom action msg"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#demo","text":"","title":"Demo"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#action-definition","text":"action/MyAction.action int32 count --- int32 total --- int32 current","title":"Action Definition"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#cmakelists","text":"CMakeList.txt cmake_minimum_required ( VERSION 3.8 ) project ( action_tutorial_interfaces ) if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( $ { PROJECT_NAME } \"action/MyAction.action\" ) ament_package () CMakeLists Keep each action in new line","title":"CMakeLists"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#packagexml","text":"Add to package.xml <buildtool_depend> rosidl_default_generators </buildtool_depend> <depend> action_msgs </depend> <member_of_group> rosidl_interface_packages </member_of_group>","title":"Package.xml"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#build-and-test","text":"colcon build --packages-select action_tutorial_interfaces","title":"build and test"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#checkros2-interface-show-action_tutorial_interfacesactionmyaction-int32-count---int32-total---int32-current","text":"","title":"checkros2 interface show action_tutorial_interfaces/action/MyAction \n\n#\n\nint32 count\n---\nint32 total\n---\nint32 current\n"},{"location":"blog/ROS2/python/action/create_custom_action_msg/#resources","text":"Creating an action","title":"Resources"},{"location":"blog/ROS2/python/executor/","tags":["ros2","python","executor"],"text":"By default, rclpy offers two different executors for the user to choose from: SingleThreadedExecutor (default) MultiThreadedExecutor SingleThreadedExecutor : executes callbacks in a single thread, one at a time, and thus the previous callback must always finish before a new one can begin execution. MultiThreadedExecutor : executing several callbacks simultaneously. Callback groups # MutuallyExclusiveCallbackGroup ReentrantCallbackGroup MutuallyExclusiveCallbackGroup : allows the executor to execute only one of its callbacks simultaneously (TODO) ReentrantCallbackGroup : allows the executor to schedule and execute the group\u2019s callbacks in any way the executor sees fit, (TODO) callback examples - subscription callback - timer callback - service callback (request on server) - action server and client callback - Future done callback Reference # Deadlocks in rclpy and how to prevent them with use of callback groups Executors\uf0c1","title":"ROS2 rclpy executor"},{"location":"blog/ROS2/python/executor/#callback-groups","text":"MutuallyExclusiveCallbackGroup ReentrantCallbackGroup MutuallyExclusiveCallbackGroup : allows the executor to execute only one of its callbacks simultaneously (TODO) ReentrantCallbackGroup : allows the executor to schedule and execute the group\u2019s callbacks in any way the executor sees fit, (TODO) callback examples - subscription callback - timer callback - service callback (request on server) - action server and client callback - Future done callback","title":"Callback groups"},{"location":"blog/ROS2/python/executor/#reference","text":"Deadlocks in rclpy and how to prevent them with use of callback groups Executors\uf0c1","title":"Reference"},{"location":"blog/ROS2/python/parameters/","tags":["param","ros2","rclpy"],"text":"my examples # ros2 python tutorial params cli # Using the ros2 param command-line tool","title":"ROS2 Parameters"},{"location":"blog/ROS2/python/parameters/#my-examples","text":"ros2 python tutorial params","title":"my examples"},{"location":"blog/ROS2/python/parameters/#cli","text":"Using the ros2 param command-line tool","title":"cli"},{"location":"blog/ROS2/python/services/","tags":["ros2","service"],"text":"Simple Server # simple_service.py import rclpy from rclpy.node import Node from std_srvs.srv import SetBool class MinimalService ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_service' ) self . srv = self . create_service ( SetBool , 'echo_service' , self . echo_callback ) def echo_callback ( self , request : SetBool . Request , response : SetBool . Response ): response . success = request . data response . message = \"success\" return response def main ( args = None ): rclpy . init ( args = args ) minimal_service = MinimalService () rclpy . spin ( minimal_service ) rclpy . shutdown () if __name__ == '__main__' : main () ros2 service call /echo_service std_srvs/srv/SetBool \"{data: True}\" requester: making request: std_srvs.srv.SetBool_Request ( data = True ) response: std_srvs.srv.SetBool_Response ( success = True, message = 'success' )","title":"ROS2 Services"},{"location":"blog/ROS2/python/services/#simple-server","text":"simple_service.py import rclpy from rclpy.node import Node from std_srvs.srv import SetBool class MinimalService ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_service' ) self . srv = self . create_service ( SetBool , 'echo_service' , self . echo_callback ) def echo_callback ( self , request : SetBool . Request , response : SetBool . Response ): response . success = request . data response . message = \"success\" return response def main ( args = None ): rclpy . init ( args = args ) minimal_service = MinimalService () rclpy . spin ( minimal_service ) rclpy . shutdown () if __name__ == '__main__' : main () ros2 service call /echo_service std_srvs/srv/SetBool \"{data: True}\" requester: making request: std_srvs.srv.SetBool_Request ( data = True ) response: std_srvs.srv.SetBool_Response ( success = True, message = 'success' )","title":"Simple Server"},{"location":"blog/ROS2/python/services/sync_client/","tags":["ros2","service","client"],"text":"Reference # Synchronous vs. asynchronous service clients","title":"ROS2 client sync"},{"location":"blog/ROS2/python/services/sync_client/#reference","text":"Synchronous vs. asynchronous service clients","title":"Reference"},{"location":"blog/ROS2/python/tutorials/","tags":["ros2"],"text":"minimal pub and sub node and cli demos Simple launch file to launch the pub sub node Add namespace with launch file Node params hello Node params handle","title":"ROS2 Python tutorials"},{"location":"blog/ROS2/python/tutorials/launch_hello/","tags":["ros2","launch","101"],"text":"launch source code # hello.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () talker_node = Node ( package = \"basic\" , executable = \"simple_pub\" , ) listener_node = Node ( package = \"basic\" , executable = \"simple_sub\" ) ld . add_action ( talker_node ) ld . add_action ( listener_node ) return ld Note Your launch file must contain this function: generate_launch_description(), and must return a LaunchDescription object. setup.py # Add entry to data_files copy the launch folder to package install folder setup.py data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( \"share\" , package_name ), glob ( \"launch/*.launch.py\" )) ], Note copy launch files using CMakeLists.txt ... install ( DIRECTORY launch DESTINATION share/ ${ PROJECT_NAME } ) usage # terminal1 ros2 launch basic hello.launch.py # Result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-08-52-59-435522-lap2-73549 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ simple_pub-1 ] : process started with pid [ 73551 ] [ INFO ] [ simple_sub-2 ] : process started with pid [ 73553 ] [ simple_pub-1 ] [ INFO ] [ 1649224380 .693329543 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ simple_sub-2 ] [ INFO ] [ 1649224380 .693398516 ] [ minimal_subscriber ] : I heard: pub simple: 0 [ simple_pub-1 ] [ INFO ] [ 1649224381 .683970139 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ simple_sub-2 ] [ INFO ] [ 1649224381 .684546630 ] [ minimal_subscriber ] : I heard: pub simple: 1 References # ROS2 Launch File Example \u2013 How to Start All Your Nodes at Once","title":"Part2 - Launch file"},{"location":"blog/ROS2/python/tutorials/launch_hello/#launch-source-code","text":"hello.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () talker_node = Node ( package = \"basic\" , executable = \"simple_pub\" , ) listener_node = Node ( package = \"basic\" , executable = \"simple_sub\" ) ld . add_action ( talker_node ) ld . add_action ( listener_node ) return ld Note Your launch file must contain this function: generate_launch_description(), and must return a LaunchDescription object.","title":"launch source code"},{"location":"blog/ROS2/python/tutorials/launch_hello/#setuppy","text":"Add entry to data_files copy the launch folder to package install folder setup.py data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( \"share\" , package_name ), glob ( \"launch/*.launch.py\" )) ], Note copy launch files using CMakeLists.txt ... install ( DIRECTORY launch DESTINATION share/ ${ PROJECT_NAME } )","title":"setup.py"},{"location":"blog/ROS2/python/tutorials/launch_hello/#usage","text":"terminal1 ros2 launch basic hello.launch.py # Result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-08-52-59-435522-lap2-73549 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ simple_pub-1 ] : process started with pid [ 73551 ] [ INFO ] [ simple_sub-2 ] : process started with pid [ 73553 ] [ simple_pub-1 ] [ INFO ] [ 1649224380 .693329543 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ simple_sub-2 ] [ INFO ] [ 1649224380 .693398516 ] [ minimal_subscriber ] : I heard: pub simple: 0 [ simple_pub-1 ] [ INFO ] [ 1649224381 .683970139 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ simple_sub-2 ] [ INFO ] [ 1649224381 .684546630 ] [ minimal_subscriber ] : I heard: pub simple: 1","title":"usage"},{"location":"blog/ROS2/python/tutorials/launch_hello/#references","text":"ROS2 Launch File Example \u2013 How to Start All Your Nodes at Once","title":"References"},{"location":"blog/ROS2/python/tutorials/package_xml_hello/","tags":["ros2","package.xml","101"],"text":"package.xml <exec_depend> rclpy </exec_depend> <exec_depend> std_msgs </exec_depend> <depend> example_interfaces </depend> <test_depend> ament_copyright </test_depend> ... rosdep # install sudo apt install python3-rosdep init sudo rosdep init rosdep update command # resolve # rosdep resolve example_interfaces #apt ros-foxy-example-interfaces install # install package dependencies # from w.s root run rosdep install --from-paths src/basic --ignore-src -r -y # Command result executing command [ sudo -H apt-get install -y ros-foxy-example-interfaces ] Resources # rep-149 Package Manifest Format Three Specification","title":"Package.xml hello"},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#rosdep","text":"install sudo apt install python3-rosdep init sudo rosdep init rosdep update","title":"rosdep"},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#command","text":"","title":"command"},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#resolve","text":"rosdep resolve example_interfaces #apt ros-foxy-example-interfaces","title":"resolve"},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#install","text":"install package dependencies # from w.s root run rosdep install --from-paths src/basic --ignore-src -r -y # Command result executing command [ sudo -H apt-get install -y ros-foxy-example-interfaces ]","title":"install"},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#resources","text":"rep-149 Package Manifest Format Three Specification","title":"Resources"},{"location":"blog/ROS2/python/tutorials/part10_managed_nodes/","tags":["ros2","node"],"text":"unconfigured inactive active finalized Warning In foxy work only in CPP , from rolling work with python","title":"ROS2 Managed Nodes"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/","tags":["ros2","launch"],"text":"launch source code # hello.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () talker_node = Node ( package = \"basic\" , namespace = \"my_ns\" , name = \"my_pub\" , executable = \"simple_pub\" , ) listener_node = Node ( package = \"basic\" , namespace = \"my_ns\" , name = \"my_sub\" , executable = \"simple_sub\" ) ld . add_action ( talker_node ) ld . add_action ( listener_node ) return ld Usage # launch node list topic list rqt_graph launch # log output note ns.node_name ros2 launch basic hello.launch.py ... [ simple_pub-1 ] [ INFO ] [ 1651090792 .927189288 ] [ my_ns.my_pub ] : Publishing: \"pub simple: 1\" [ simple_sub-2 ] [ INFO ] [ 1651090792 .927732100 ] [ my_ns.my_sub ] : I heard: pub simple: 1 node list # ros2 node list # Result /my_ns/my_pub /my_ns/my_sub topic list # ros2 topic list /my_ns/minimal /parameter_events /rosout rqt_graph #","title":"Part2a - Launch file part II"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#launch-source-code","text":"hello.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () talker_node = Node ( package = \"basic\" , namespace = \"my_ns\" , name = \"my_pub\" , executable = \"simple_pub\" , ) listener_node = Node ( package = \"basic\" , namespace = \"my_ns\" , name = \"my_sub\" , executable = \"simple_sub\" ) ld . add_action ( talker_node ) ld . add_action ( listener_node ) return ld","title":"launch source code"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#usage","text":"launch node list topic list rqt_graph","title":"Usage"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#launch","text":"log output note ns.node_name ros2 launch basic hello.launch.py ... [ simple_pub-1 ] [ INFO ] [ 1651090792 .927189288 ] [ my_ns.my_pub ] : Publishing: \"pub simple: 1\" [ simple_sub-2 ] [ INFO ] [ 1651090792 .927732100 ] [ my_ns.my_sub ] : I heard: pub simple: 1","title":"launch"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#node-list","text":"ros2 node list # Result /my_ns/my_pub /my_ns/my_sub","title":"node list"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#topic-list","text":"ros2 topic list /my_ns/minimal /parameter_events /rosout","title":"topic list"},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#rqt_graph","text":"","title":"rqt_graph"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/","tags":["ros2","param","parameter"],"text":"Objective # Declare parameter Manage params from cli Set node params with launch file Code example # import rclpy from rclpy.node import Node class TestParams ( Node ): def __init__ ( self ): super () . __init__ ( 'test_params_rclpy' ) self . declare_parameter ( 'my_str' ) self . declare_parameter ( 'my_int' , value = 10 ) self . declare_parameter ( 'my_double_array' ) timer_period = 2 self . timer = self . create_timer ( timer_period , self . timer_callback ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_str' ) . get_parameter_value () . string_value my_param_int = self . get_parameter ( \"my_int\" ) . get_parameter_value () . integer_value self . get_logger () . info ( f \"Hello { my_param } ! with int data: { my_param_int } \" ) def main ( args = None ): rclpy . init ( args = args ) node = TestParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () Manage params from cli # Run node with param # Note Run node with arguments from CLI --ros-args -p <param_name>:=<param_value> ros2 run basic simple_param --ros-args -p my_str: = world # Result [ INFO ] [ 1649226981 .611616597 ] [ test_params_rclpy ] : Hello world! with int data: 10 [ INFO ] [ 1649226983 .604038327 ] [ test_params_rclpy ] : Hello world! with int data: 10 Manage params from cli # # list params from all running nodes ros2 param list # Result /simple_params: my_double_array my_int my_str use_sim_time YAML file # simple.yaml simple_params : ros__parameters : my_str : \"world from yaml\" my_int : 100 my_double_array : [ 1.0 , 2.0 , 3.0 ] Warning ros__parameters with double underline Run with yaml # terminal1 ros2 run basic simple_param --ros-args --params-file /home/user/dev_ws/src/basic/config/simple.yaml [ INFO ] [ 1649227913 .033306747 ] [ simple_params ] : Hello world from yaml! with int data: 100 [ INFO ] [ 1649227915 .025466940 ] [ simple_params ] : Hello world from yaml! with int data: 100 Params yaml and launch file # place yaml file in config syb folder copy config folder to output folder using setup.py yaml copy data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( \"share\" , package_name ), glob ( \"launch/*.launch.py\" )), ( os . path . join ( \"share\" , package_name , \"config\" ), glob ( \"config/*\" )), ], simple_param_yaml.launch.py # with yaml file import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'basic' ), 'config' , 'simple.yaml' ) node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ config ] ) ld . add_action ( node ) return ld Warning The name argument in the launch Node object must be the same in the param yaml file simple_param.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ { \"my_str\" : \"hello from launch\" }, { \"my_int\" : 1000 }, { \"my_double_array\" : [ 1.0 , 10.0 ]} ] ) ld . add_action ( node ) return ld References # rclpy Params Tutorial \u2013 Get and Set ROS2 Params with Python ROS2 YAML For Parameters","title":"Part3 - Simple python Node with parameter"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#objective","text":"Declare parameter Manage params from cli Set node params with launch file","title":"Objective"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#code-example","text":"import rclpy from rclpy.node import Node class TestParams ( Node ): def __init__ ( self ): super () . __init__ ( 'test_params_rclpy' ) self . declare_parameter ( 'my_str' ) self . declare_parameter ( 'my_int' , value = 10 ) self . declare_parameter ( 'my_double_array' ) timer_period = 2 self . timer = self . create_timer ( timer_period , self . timer_callback ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_str' ) . get_parameter_value () . string_value my_param_int = self . get_parameter ( \"my_int\" ) . get_parameter_value () . integer_value self . get_logger () . info ( f \"Hello { my_param } ! with int data: { my_param_int } \" ) def main ( args = None ): rclpy . init ( args = args ) node = TestParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"Code example"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#manage-params-from-cli","text":"","title":"Manage params from cli"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#run-node-with-param","text":"Note Run node with arguments from CLI --ros-args -p <param_name>:=<param_value> ros2 run basic simple_param --ros-args -p my_str: = world # Result [ INFO ] [ 1649226981 .611616597 ] [ test_params_rclpy ] : Hello world! with int data: 10 [ INFO ] [ 1649226983 .604038327 ] [ test_params_rclpy ] : Hello world! with int data: 10","title":"Run node with param"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#manage-params-from-cli_1","text":"# list params from all running nodes ros2 param list # Result /simple_params: my_double_array my_int my_str use_sim_time","title":"Manage params from cli"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#yaml-file","text":"simple.yaml simple_params : ros__parameters : my_str : \"world from yaml\" my_int : 100 my_double_array : [ 1.0 , 2.0 , 3.0 ] Warning ros__parameters with double underline","title":"YAML file"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#run-with-yaml","text":"terminal1 ros2 run basic simple_param --ros-args --params-file /home/user/dev_ws/src/basic/config/simple.yaml [ INFO ] [ 1649227913 .033306747 ] [ simple_params ] : Hello world from yaml! with int data: 100 [ INFO ] [ 1649227915 .025466940 ] [ simple_params ] : Hello world from yaml! with int data: 100","title":"Run with yaml"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#params-yaml-and-launch-file","text":"place yaml file in config syb folder copy config folder to output folder using setup.py yaml copy data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( \"share\" , package_name ), glob ( \"launch/*.launch.py\" )), ( os . path . join ( \"share\" , package_name , \"config\" ), glob ( \"config/*\" )), ], simple_param_yaml.launch.py # with yaml file import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'basic' ), 'config' , 'simple.yaml' ) node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ config ] ) ld . add_action ( node ) return ld Warning The name argument in the launch Node object must be the same in the param yaml file simple_param.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ { \"my_str\" : \"hello from launch\" }, { \"my_int\" : 1000 }, { \"my_double_array\" : [ 1.0 , 10.0 ]} ] ) ld . add_action ( node ) return ld","title":"Params yaml and launch file"},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#references","text":"rclpy Params Tutorial \u2013 Get and Set ROS2 Params with Python ROS2 YAML For Parameters","title":"References"},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/","tags":["ros2","param","parameter","launch","101"],"text":"LaunchConfiguration is local to the launch file and scoped. DeclareLaunchArgument allows you to expose the argument outside of your launch file. Allowing them to be listed, set, or marked as required when a user launches it from the command line (using ros2 launch) or when including it from another launch file (using IncludeLaunchDescription). basic_demo_args.launch.py import launch def generate_launch_description (): return launch . LaunchDescription ([ launch . actions . DeclareLaunchArgument ( 'msg' , default_value = 'hello world' ), launch . actions . DeclareLaunchArgument ( 'other' ), launch . actions . LogInfo ( msg = launch . substitutions . LaunchConfiguration ( 'msg' )), launch . actions . LogInfo ( msg = launch . substitutions . LaunchConfiguration ( 'other' )), ]) ros2 launch basic demo_args.launch.py other: = \"other message\" # Result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-11-27-22-383934-lap2-90291 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ launch.user ] : hello world [ INFO ] [ launch.user ] : other message Warning other argument is mandatory because has no default value Run launch # ros2 launch -s basic demo_args.launch.py # Result Arguments ( pass arguments as '<name>:=<value>' ) : 'msg' : no description given ( default: 'hello world' ) 'other' : no description given Demo # launch with arguments simple_param_args.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , LogInfo from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () my_str_arg = DeclareLaunchArgument ( \"my_str\" , default_value = \"world\" ) my_str = LaunchConfiguration ( \"my_str\" ) node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ { \"my_str\" : my_str }, { \"my_int\" : 1000 }, { \"my_double_array\" : [ 1.0 , 10.0 ]} ] ) ld . add_action ( my_str_arg ) ld . add_action ( node ) return ld Run and output # Show launch file output ros2 launch basic simple_param_args.launch.py my_str: = worlddddddddddddd # result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-14-10-00-346206-lap2-93999 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ simple_param-1 ] : process started with pid [ 94001 ] [ simple_param-1 ] [ INFO ] [ 1649243402 .580006387 ] [ simple_params ] : Hello worlddddddddddddd! with int data: 1000 [ simple_param-1 ] [ INFO ] [ 1649243402 .580249948 ] [ simple_params ] : array ( 'd' , [ 1 .0, 10 .0 ]) References # what is different between DeclareLaunchArgument and LaunchConfiguration","title":"Part4 - Launch with arguments"},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/#run-launch","text":"ros2 launch -s basic demo_args.launch.py # Result Arguments ( pass arguments as '<name>:=<value>' ) : 'msg' : no description given ( default: 'hello world' ) 'other' : no description given","title":"Run launch"},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/#demo","text":"launch with arguments simple_param_args.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , LogInfo from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () my_str_arg = DeclareLaunchArgument ( \"my_str\" , default_value = \"world\" ) my_str = LaunchConfiguration ( \"my_str\" ) node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ { \"my_str\" : my_str }, { \"my_int\" : 1000 }, { \"my_double_array\" : [ 1.0 , 10.0 ]} ] ) ld . add_action ( my_str_arg ) ld . add_action ( node ) return ld","title":"Demo"},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/#run-and-output","text":"Show launch file output ros2 launch basic simple_param_args.launch.py my_str: = worlddddddddddddd # result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-14-10-00-346206-lap2-93999 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ simple_param-1 ] : process started with pid [ 94001 ] [ simple_param-1 ] [ INFO ] [ 1649243402 .580006387 ] [ simple_params ] : Hello worlddddddddddddd! with int data: 1000 [ simple_param-1 ] [ INFO ] [ 1649243402 .580249948 ] [ simple_params ] : array ( 'd' , [ 1 .0, 10 .0 ])","title":"Run and output"},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/#references","text":"what is different between DeclareLaunchArgument and LaunchConfiguration","title":"References"},{"location":"blog/ROS2/python/tutorials/part5_simple_service/","tags":["ros2","service","101"],"text":"Service # simple_service import rclpy from rclpy.node import Node from std_srvs.srv import SetBool from std_srvs.srv._set_bool import SetBool_Request , SetBool_Response class MinimalService ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_service' ) self . srv = self . create_service ( SetBool , 'echo_service' , self . echo_callback ) def echo_callback ( self , request : SetBool_Request , response : SetBool_Response ) -> SetBool_Response : self . get_logger () . info ( \"Service callback\" ) response . success = request . data response . message = \"success\" return response def main ( args = None ): rclpy . init ( args = args ) minimal_service = MinimalService () rclpy . spin ( minimal_service ) minimal_service . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () Usage # list ros2 service list # Result /echo_service /minimal_service/describe_parameters /minimal_service/get_parameter_types /minimal_service/get_parameters /minimal_service/list_parameters /minimal_service/set_parameters /minimal_service/set_parameters_atomically ros2 service type /echo_service # Result std_srvs/srv/SetBool show interface ros2 interface show std_srvs/srv/SetBool # Result bool data # e.g. for hardware enabling / disabling --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages call # service call ros2 service call /echo_service std_srvs/srv/SetBool \"{data: True}\" # Result requester: making request: std_srvs.srv.SetBool_Request ( data = True ) response: std_srvs.srv.SetBool_Response ( success = True, message = 'success' ) Warning Space are mandatory between data and the value Example: {data: True} from service call Reference # ros2 service Command Line Tool","title":"Part5 - Simple Service"},{"location":"blog/ROS2/python/tutorials/part5_simple_service/#service","text":"simple_service import rclpy from rclpy.node import Node from std_srvs.srv import SetBool from std_srvs.srv._set_bool import SetBool_Request , SetBool_Response class MinimalService ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_service' ) self . srv = self . create_service ( SetBool , 'echo_service' , self . echo_callback ) def echo_callback ( self , request : SetBool_Request , response : SetBool_Response ) -> SetBool_Response : self . get_logger () . info ( \"Service callback\" ) response . success = request . data response . message = \"success\" return response def main ( args = None ): rclpy . init ( args = args ) minimal_service = MinimalService () rclpy . spin ( minimal_service ) minimal_service . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Service"},{"location":"blog/ROS2/python/tutorials/part5_simple_service/#usage","text":"list ros2 service list # Result /echo_service /minimal_service/describe_parameters /minimal_service/get_parameter_types /minimal_service/get_parameters /minimal_service/list_parameters /minimal_service/set_parameters /minimal_service/set_parameters_atomically ros2 service type /echo_service # Result std_srvs/srv/SetBool show interface ros2 interface show std_srvs/srv/SetBool # Result bool data # e.g. for hardware enabling / disabling --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages","title":"Usage"},{"location":"blog/ROS2/python/tutorials/part5_simple_service/#call","text":"service call ros2 service call /echo_service std_srvs/srv/SetBool \"{data: True}\" # Result requester: making request: std_srvs.srv.SetBool_Request ( data = True ) response: std_srvs.srv.SetBool_Response ( success = True, message = 'success' ) Warning Space are mandatory between data and the value Example: {data: True} from service call","title":"call"},{"location":"blog/ROS2/python/tutorials/part5_simple_service/#reference","text":"ros2 service Command Line Tool","title":"Reference"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/","tags":["ros2","parameters"],"text":"Objective # Update node param from cli from code Code # import rclpy from rclpy.node import Node from rcl_interfaces.msg import SetParametersResult class TestParams ( Node ): def __init__ ( self ): super () . __init__ ( 'simple_params' ) self . declare_parameter ( 'my_str' ) self . declare_parameter ( 'my_int' , value = 10 ) self . declare_parameter ( 'my_double_array' ) self . add_on_set_parameters_callback ( self . parameter_callback ) timer_period = 2 self . timer = self . create_timer ( timer_period , self . timer_callback ) def parameter_callback ( self , params ): print ( type ( params )) for param in params : self . get_logger () . info ( param . name ) self . get_logger () . info ( str ( param . value )) self . get_logger () . info ( str ( param . type_ )) return SetParametersResult ( successful = True ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_str' ) . get_parameter_value () . string_value my_param_int = self . get_parameter ( \"my_int\" ) . get_parameter_value () . integer_value my_param_array = self . get_parameter ( \"my_double_array\" ) . get_parameter_value () . double_array_value self . get_logger () . info ( f \"Hello { my_param } ! with int data: { my_param_int } \" ) self . get_logger () . info ( str ( my_param_array )) def main ( args = None ): rclpy . init ( args = args ) node = TestParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () Run # List # ros2 param list /simple_params: my_double_array my_int my_str use_sim_time get / set # get # my_str ros2 param get /simple_params my_str Parameter not set. # my_int ros2 param get /simple_params my_int Integer value is: 10 set # my_int ros2 param set /simple_params my_int 20 # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649395615 .004278881 ] [ simple_params ] : my_int [ INFO ] [ 1649395615 .004490765 ] [ simple_params ] : 20 [ INFO ] [ 1649395615 .004679396 ] [ simple_params ] : Type.INTEGER # my_str ros2 param set /simple_params my_str \"world world\" # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649395751 .117007430 ] [ simple_params ] : my_str [ INFO ] [ 1649395751 .117735309 ] [ simple_params ] : world world [ INFO ] [ 1649395751 .118404909 ] [ simple_params ] : Type.STRING # my_double_array ros2 param set /simple_params my_double_array \"[1.0, 2.0, 3.0]\" # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649396032 .647319212 ] [ simple_params ] : my_double_array [ INFO ] [ 1649396032 .648079309 ] [ simple_params ] : array ( 'd' , [ 1 .0, 2 .0, 3 .0 ]) [ INFO ] [ 1649396032 .648748882 ] [ simple_params ] : Type.DOUBLE_ARRAY Dump / Load # dump #ros2 param dump /simple_params --output-dir /tmp # ros2 param dump /simple_params --print ros2 param dump /simple_params # Result Saving to: ./simple_params.yaml load ros2 param load /simple_params simple_params.yaml # Result Set parameter my_double_array successful Set parameter my_int successful Set parameter my_str successful Set parameter use_sim_time successful Note ros2 param load run the same param callback function like param set","title":"Part6 - Simple parameter handler"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#objective","text":"Update node param from cli from code","title":"Objective"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#code","text":"import rclpy from rclpy.node import Node from rcl_interfaces.msg import SetParametersResult class TestParams ( Node ): def __init__ ( self ): super () . __init__ ( 'simple_params' ) self . declare_parameter ( 'my_str' ) self . declare_parameter ( 'my_int' , value = 10 ) self . declare_parameter ( 'my_double_array' ) self . add_on_set_parameters_callback ( self . parameter_callback ) timer_period = 2 self . timer = self . create_timer ( timer_period , self . timer_callback ) def parameter_callback ( self , params ): print ( type ( params )) for param in params : self . get_logger () . info ( param . name ) self . get_logger () . info ( str ( param . value )) self . get_logger () . info ( str ( param . type_ )) return SetParametersResult ( successful = True ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_str' ) . get_parameter_value () . string_value my_param_int = self . get_parameter ( \"my_int\" ) . get_parameter_value () . integer_value my_param_array = self . get_parameter ( \"my_double_array\" ) . get_parameter_value () . double_array_value self . get_logger () . info ( f \"Hello { my_param } ! with int data: { my_param_int } \" ) self . get_logger () . info ( str ( my_param_array )) def main ( args = None ): rclpy . init ( args = args ) node = TestParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"Code"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#run","text":"","title":"Run"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#list","text":"ros2 param list /simple_params: my_double_array my_int my_str use_sim_time","title":"List"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#get--set","text":"get # my_str ros2 param get /simple_params my_str Parameter not set. # my_int ros2 param get /simple_params my_int Integer value is: 10 set # my_int ros2 param set /simple_params my_int 20 # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649395615 .004278881 ] [ simple_params ] : my_int [ INFO ] [ 1649395615 .004490765 ] [ simple_params ] : 20 [ INFO ] [ 1649395615 .004679396 ] [ simple_params ] : Type.INTEGER # my_str ros2 param set /simple_params my_str \"world world\" # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649395751 .117007430 ] [ simple_params ] : my_str [ INFO ] [ 1649395751 .117735309 ] [ simple_params ] : world world [ INFO ] [ 1649395751 .118404909 ] [ simple_params ] : Type.STRING # my_double_array ros2 param set /simple_params my_double_array \"[1.0, 2.0, 3.0]\" # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649396032 .647319212 ] [ simple_params ] : my_double_array [ INFO ] [ 1649396032 .648079309 ] [ simple_params ] : array ( 'd' , [ 1 .0, 2 .0, 3 .0 ]) [ INFO ] [ 1649396032 .648748882 ] [ simple_params ] : Type.DOUBLE_ARRAY","title":"get / set"},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#dump--load","text":"dump #ros2 param dump /simple_params --output-dir /tmp # ros2 param dump /simple_params --print ros2 param dump /simple_params # Result Saving to: ./simple_params.yaml load ros2 param load /simple_params simple_params.yaml # Result Set parameter my_double_array successful Set parameter my_int successful Set parameter my_str successful Set parameter use_sim_time successful Note ros2 param load run the same param callback function like param set","title":"Dump / Load"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/","tags":["ros2","custom","msgs","101"],"text":"Note End/Suffix package name with _interfaces or _msgs Create pkg # Create cpp package # Default build type ament cmake ros pkg create rosmav_msgs package.xml # Add lines <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> CMakeLists.txt # CMakeLists.txt cmake_minimum_required ( VERSION 3.5 ) project ( my_robot_interfaces ) # Default to C++14 if ( NOT CMAKE_CXX_STANDARD ) set ( CMAKE_CXX_STANDARD 14 ) endif () if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( -Wall -Wextra -Wpedantic ) endif () find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"your custom interfaces will be here\" msgs/Attitude.msg ) ament_package () VSCode tips # Add msgs path to python.analysis.extraPaths pylance \"python.analysis.extraPaths\" : [ \"/home/user/dev_ws/install/rosmav_msgs/lib/python3.8/site-packages\" ] interface cli # Show information about ROS interfaces list: List all interface types available package: Output a list of available interface types within one package show: Output the interface definition ros2 interface package rosmav_msgs # Result rosmav_msgs/msg/Attitude # Show # --- separate between request response ros2 interface show std_srvs/srv/Trigger --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages References # ROS2 Create Custom Message (Msg/Srv)","title":"Part7 - Custom msgs and srvs"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#create-pkg","text":"Create cpp package # Default build type ament cmake ros pkg create rosmav_msgs","title":"Create pkg"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#packagexml","text":"Add lines <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group>","title":"package.xml"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#cmakeliststxt","text":"CMakeLists.txt cmake_minimum_required ( VERSION 3.5 ) project ( my_robot_interfaces ) # Default to C++14 if ( NOT CMAKE_CXX_STANDARD ) set ( CMAKE_CXX_STANDARD 14 ) endif () if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( -Wall -Wextra -Wpedantic ) endif () find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"your custom interfaces will be here\" msgs/Attitude.msg ) ament_package ()","title":"CMakeLists.txt"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#vscode-tips","text":"Add msgs path to python.analysis.extraPaths pylance \"python.analysis.extraPaths\" : [ \"/home/user/dev_ws/install/rosmav_msgs/lib/python3.8/site-packages\" ]","title":"VSCode tips"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#interface-cli","text":"Show information about ROS interfaces list: List all interface types available package: Output a list of available interface types within one package show: Output the interface definition ros2 interface package rosmav_msgs # Result rosmav_msgs/msg/Attitude # Show # --- separate between request response ros2 interface show std_srvs/srv/Trigger --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages","title":"interface cli"},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#references","text":"ROS2 Create Custom Message (Msg/Srv)","title":"References"},{"location":"blog/ROS2/python/tutorials/part8_qos/","tags":["ros2","qos","101"],"text":"Topics in ROS2 have three dimensions: Name : string Type : msg type like std_msgs/String QoS : Define extra promises about the pub/sub behavior QoS # QoS Policy : QoS \u201ctype\u201d or \u201csetting\u201d QoS Profile : A complete group of all policies QoS Offer : QoS Request : Compatibility : check topic qos settings ros2 topic info --verbose </topic name> Policy # Policy Description History Keep last : only store up to N samples, configurable via the queue depth option. Keep all : store all samples, subject to the configured resource limits of the underlying middleware. Depth Depth of history queue when specifying Keep last Reliability Best effort : attempt to deliver samples, but may lose them if the network is not robust. Reliable : guarantee that samples are delivered, may retry multiple times. Durability Transient local : the publisher becomes responsible for persisting samples for \u201clate-joining\u201d subscribers. Volatile : no attempt is made to persist samples. Deadline Duration : the expected maximum amount of time between subsequent messages being published to a topic Lifespan how long the sent message can live Liveliness Liveliness sets the Lease Duration, and the publisher is considered offline after a certain time Automatic Manual by topic Profile # A QoS profile defines a set of policies that are expected to go well together for a particular use case. for example: service_default sensor_data parameters system_default more info check ROS2 document Sensor data # For sensor data, in most cases it\u2019s more important to receive readings in a timely fashion, rather than ensuring that all of them arrive. That is, developers want the latest samples as soon as they are captured, at the expense of maybe losing some. For that reason the sensor data profile uses best effort reliability and a smaller queue size. profile define rmw_qos_profile_t sensor_data static const rmw_qos_profile_t rmw_qos_profile_sensor_data = { RMW_QOS_POLICY_HISTORY_KEEP_LAST , 5 , RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT , RMW_QOS_POLICY_DURABILITY_VOLATILE , RMW_QOS_DEADLINE_DEFAULT , RMW_QOS_LIFESPAN_DEFAULT , RMW_QOS_POLICY_LIVELINESS_SYSTEM_DEFAULT , RMW_QOS_LIVELINESS_LEASE_DURATION_DEFAULT , false }; fields list history depth reliability durability deadline lifespan liveliness liveliness_lease_duration avoid_ros_namespace_conventions doc Demos # sub code pub cli # Subscriber Node defined with sensor data QoS Pub cli to publish message with compatibility QoS subscriber import rclpy from rclpy.node import Node from rclpy.qos import qos_profile_sensor_data from std_msgs.msg import String class MinimalSubQoS ( Node ): def __init__ ( self ) -> None : super () . __init__ ( \"minimal_sub_qos\" ) self . __sub = self . create_subscription ( String , \"topic\" , self . __cb , qos_profile_sensor_data ) self . __sub def __cb ( self , msg : String ): self . get_logger () . info ( msg . data ) def main ( args = None ): rclpy . init ( args = args ) sub_node = MinimalSubQoS () rclpy . spin ( sub_node ) sub_node . destroy_node () rclpy . shutdown () pub cli ros2 topic pub -1 --qos-profile sensor_data /topic std_msgs/msg/String \"data: hello\" pub code sub cli # publisher import rclpy from rclpy.node import Node from rclpy.qos import qos_profile_sensor_data from std_msgs.msg import String class MinimalPubQos ( Node ): def __init__ ( self ) -> None : super () . __init__ ( \"minimal_pub_qos\" ) self . __pub = self . create_publisher ( String , \"topic\" , qos_profile_sensor_data ) self . __timer = self . create_timer ( timer_period_sec = 0.5 , callback = self . __timer_cb ) self . __counter = 0 def __timer_cb ( self ): msg = String () msg . data = \"Hello QoS {} \" . format ( self . __counter ) self . __pub . publish ( msg ) self . __counter += 1 def main ( args = None ): rclpy . init ( args = args ) pub_node = MinimalPubQos () rclpy . spin ( pub_node ) pub_node . destroy_node () rclpy . shutdown () cli echo topic # work ros2 topic echo --qos-profile sensor_data /topic # work ros2 topic echo /topic # not work ros2 topic echo --qos-profile services_default /topic # work ros2 topic echo --qos-reliability best_effort /topic QoS compatibility # In order for Publisher and Subscriber to establish a connection, the QoS set by the two must be compatible. DDS adopts the Request-Offer model. In short, the communication level provided by Publisher must be greater than or equal to that required by Subscriber. For detailed compatibility table, please refer to ROS2 official document Reference # Profiling ROS2","title":"Part8 - QoS"},{"location":"blog/ROS2/python/tutorials/part8_qos/#qos","text":"QoS Policy : QoS \u201ctype\u201d or \u201csetting\u201d QoS Profile : A complete group of all policies QoS Offer : QoS Request : Compatibility : check topic qos settings ros2 topic info --verbose </topic name>","title":"QoS"},{"location":"blog/ROS2/python/tutorials/part8_qos/#policy","text":"Policy Description History Keep last : only store up to N samples, configurable via the queue depth option. Keep all : store all samples, subject to the configured resource limits of the underlying middleware. Depth Depth of history queue when specifying Keep last Reliability Best effort : attempt to deliver samples, but may lose them if the network is not robust. Reliable : guarantee that samples are delivered, may retry multiple times. Durability Transient local : the publisher becomes responsible for persisting samples for \u201clate-joining\u201d subscribers. Volatile : no attempt is made to persist samples. Deadline Duration : the expected maximum amount of time between subsequent messages being published to a topic Lifespan how long the sent message can live Liveliness Liveliness sets the Lease Duration, and the publisher is considered offline after a certain time Automatic Manual by topic","title":"Policy"},{"location":"blog/ROS2/python/tutorials/part8_qos/#profile","text":"A QoS profile defines a set of policies that are expected to go well together for a particular use case. for example: service_default sensor_data parameters system_default more info check ROS2 document","title":"Profile"},{"location":"blog/ROS2/python/tutorials/part8_qos/#sensor-data","text":"For sensor data, in most cases it\u2019s more important to receive readings in a timely fashion, rather than ensuring that all of them arrive. That is, developers want the latest samples as soon as they are captured, at the expense of maybe losing some. For that reason the sensor data profile uses best effort reliability and a smaller queue size. profile define rmw_qos_profile_t sensor_data static const rmw_qos_profile_t rmw_qos_profile_sensor_data = { RMW_QOS_POLICY_HISTORY_KEEP_LAST , 5 , RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT , RMW_QOS_POLICY_DURABILITY_VOLATILE , RMW_QOS_DEADLINE_DEFAULT , RMW_QOS_LIFESPAN_DEFAULT , RMW_QOS_POLICY_LIVELINESS_SYSTEM_DEFAULT , RMW_QOS_LIVELINESS_LEASE_DURATION_DEFAULT , false }; fields list history depth reliability durability deadline lifespan liveliness liveliness_lease_duration avoid_ros_namespace_conventions doc","title":"Sensor data"},{"location":"blog/ROS2/python/tutorials/part8_qos/#demos","text":"","title":"Demos"},{"location":"blog/ROS2/python/tutorials/part8_qos/#sub-code-pub-cli","text":"Subscriber Node defined with sensor data QoS Pub cli to publish message with compatibility QoS subscriber import rclpy from rclpy.node import Node from rclpy.qos import qos_profile_sensor_data from std_msgs.msg import String class MinimalSubQoS ( Node ): def __init__ ( self ) -> None : super () . __init__ ( \"minimal_sub_qos\" ) self . __sub = self . create_subscription ( String , \"topic\" , self . __cb , qos_profile_sensor_data ) self . __sub def __cb ( self , msg : String ): self . get_logger () . info ( msg . data ) def main ( args = None ): rclpy . init ( args = args ) sub_node = MinimalSubQoS () rclpy . spin ( sub_node ) sub_node . destroy_node () rclpy . shutdown () pub cli ros2 topic pub -1 --qos-profile sensor_data /topic std_msgs/msg/String \"data: hello\"","title":"sub code pub cli"},{"location":"blog/ROS2/python/tutorials/part8_qos/#pub-code-sub-cli","text":"publisher import rclpy from rclpy.node import Node from rclpy.qos import qos_profile_sensor_data from std_msgs.msg import String class MinimalPubQos ( Node ): def __init__ ( self ) -> None : super () . __init__ ( \"minimal_pub_qos\" ) self . __pub = self . create_publisher ( String , \"topic\" , qos_profile_sensor_data ) self . __timer = self . create_timer ( timer_period_sec = 0.5 , callback = self . __timer_cb ) self . __counter = 0 def __timer_cb ( self ): msg = String () msg . data = \"Hello QoS {} \" . format ( self . __counter ) self . __pub . publish ( msg ) self . __counter += 1 def main ( args = None ): rclpy . init ( args = args ) pub_node = MinimalPubQos () rclpy . spin ( pub_node ) pub_node . destroy_node () rclpy . shutdown () cli echo topic # work ros2 topic echo --qos-profile sensor_data /topic # work ros2 topic echo /topic # not work ros2 topic echo --qos-profile services_default /topic # work ros2 topic echo --qos-reliability best_effort /topic","title":"pub code sub cli"},{"location":"blog/ROS2/python/tutorials/part8_qos/#qos-compatibility","text":"In order for Publisher and Subscriber to establish a connection, the QoS set by the two must be compatible. DDS adopts the Request-Offer model. In short, the communication level provided by Publisher must be greater than or equal to that required by Subscriber. For detailed compatibility table, please refer to ROS2 official document","title":"QoS compatibility"},{"location":"blog/ROS2/python/tutorials/part8_qos/#reference","text":"Profiling ROS2","title":"Reference"},{"location":"blog/ROS2/python/tutorials/part9_executers/","tags":["python","executers"],"text":"minimal_timer import rclpy from rclpy.node import Node class MinimalTimer ( Node ): def __init__ ( self ): super () . __init__ ( \"simple_timer\" ) timer_period = 1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): self . get_logger () . info ( f 'timer tick: { self . i } ' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_timer = MinimalTimer () rclpy . spin ( minimal_timer ) minimal_timer . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () minimal_sta import rclpy from rclpy.node import Node from rclpy.executors import SingleThreadedExecutor class MinimalTimer ( Node ): def __init__ ( self ): super () . __init__ ( \"simple_timer\" ) timer_period = 1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): self . get_logger () . info ( f 'timer tick: { self . i } ' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_timer = MinimalTimer () ste = SingleThreadedExecutor () ste . add_node ( minimal_timer ) ste . spin () minimal_timer . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () Reference # test_executor Execution and Callbacks\u00b6","title":"Part9 - executers"},{"location":"blog/ROS2/python/tutorials/part9_executers/#reference","text":"test_executor Execution and Callbacks\u00b6","title":"Reference"},{"location":"blog/ROS2/python/tutorials/pub_sub/","tags":["ros2","pub","sub","101"],"text":"Publisher # node source code # Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_publisher\" ) self . publisher_ = self . create_publisher ( String , \"minimal\" , 10 ) timer_period = 1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = f \"pub simple: { self . i } \" self . publisher_ . publish ( msg ) self . get_logger () . info ( f 'Publishing: \" { msg . data } \"' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () # Spin the node so the callback function is called. rclpy . spin ( minimal_publisher ) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () setup.py # Add entry point <node name>.<module name>:<entry func> entry_points = { 'console_scripts' : [ \"simple_pub = basic.simple_pub:main\" ], } package.xml # Add this lines before <export> tag <exec_depend> rclpy </exec_depend> <exec_depend> std_msgs </exec_depend> Note exec_depend Declares a rosdep key or ROS package name that this package needs at execution-time build and run # Build colcon build --symlink-install --packages-select basic Source it source install/setup.bash Run ros2 run basic simple_pub output [ INFO ] [ 1649181441 .732282742 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ INFO ] [ 1649181442 .713229723 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ INFO ] [ 1649181443 .713351778 ] [ minimal_publisher ] : Publishing: \"pub simple: 2\" cli # ros2 topic # # list ros2 topic list #result /parameter_events /rosout /minimal # info ros2 topic info /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Subscription count: 0 # Echo ros2 topic echo /minimal # Result data: 'pub simple: 110' --- data: 'pub simple: 111' --- topic verbose info # verbose info ros2 topic info -v /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Node name: minimal_publisher Node namespace: / Topic type: std_msgs/msg/String Endpoint type: PUBLISHER GID: 01 .0f.d1.c7.10.ba.23.e1.01.00.00.00.00.00.11.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE Durability: RMW_QOS_POLICY_DURABILITY_VOLATILE Lifespan: 2147483651294967295 nanoseconds Deadline: 2147483651294967295 nanoseconds Liveliness: RMW_QOS_POLICY_LIVELINESS_AUTOMATIC Liveliness lease duration: 2147483651294967295 nanoseconds Subscription count: 0 Subscriber # node source code # MinimalSubscriber Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalSubscriber ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_subscriber\" ) # The node subscribes to messages of type std_msgs/String, # over a topic named: /minimal # The callback function is called as soon as a message is received. # The maximum number of queued messages is 10. self . subscription = self . create_subscription ( String , \"minimal\" , self . __sub_callback , 10 ) def __sub_callback ( self , msg ): self . get_logger () . info ( f \"I heard: { msg . data } \" ) def main ( args = None ): rclpy . init ( args = args ) minimal_subscriber = MinimalSubscriber () rclpy . spin ( minimal_subscriber ) minimal_subscriber . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () setup.py # Add entry point entry_points = { 'console_scripts' : [ \"simple_sub = basic.simple_sub:main\" ], } build and run # Build colcon build --symlink-install --packages-select basic cli # Run subscriber node Terminal1 ros2 run basic simple_sub # Result after pub from terminal 2 [ INFO ] [ 1649213924 .055190916 ] [ minimal_subscriber ] : I heard: hello [ INFO ] [ 1649213925 .036938799 ] [ minimal_subscriber ] : I heard: hello Terminal2 # pub message ros2 topic pub /minimal std_msgs/msg/String \"{data: 'hello'}\" # pub only one message ros2 topic pub -1 /minimal std_msgs/msg/String \"{data: 'hello'}\" References # package.xml specification ros2 topic Command Line Tool \u2013 Debug ROS2 Topics From the Terminal Create a Basic Publisher and Subscriber (Python) | ROS2 Foxy","title":"Part1 - Simple PUB / SUB"},{"location":"blog/ROS2/python/tutorials/pub_sub/#publisher","text":"","title":"Publisher"},{"location":"blog/ROS2/python/tutorials/pub_sub/#node-source-code","text":"Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_publisher\" ) self . publisher_ = self . create_publisher ( String , \"minimal\" , 10 ) timer_period = 1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = f \"pub simple: { self . i } \" self . publisher_ . publish ( msg ) self . get_logger () . info ( f 'Publishing: \" { msg . data } \"' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () # Spin the node so the callback function is called. rclpy . spin ( minimal_publisher ) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"node source code"},{"location":"blog/ROS2/python/tutorials/pub_sub/#setuppy","text":"Add entry point <node name>.<module name>:<entry func> entry_points = { 'console_scripts' : [ \"simple_pub = basic.simple_pub:main\" ], }","title":"setup.py"},{"location":"blog/ROS2/python/tutorials/pub_sub/#packagexml","text":"Add this lines before <export> tag <exec_depend> rclpy </exec_depend> <exec_depend> std_msgs </exec_depend> Note exec_depend Declares a rosdep key or ROS package name that this package needs at execution-time","title":"package.xml"},{"location":"blog/ROS2/python/tutorials/pub_sub/#build-and-run","text":"Build colcon build --symlink-install --packages-select basic Source it source install/setup.bash Run ros2 run basic simple_pub output [ INFO ] [ 1649181441 .732282742 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ INFO ] [ 1649181442 .713229723 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ INFO ] [ 1649181443 .713351778 ] [ minimal_publisher ] : Publishing: \"pub simple: 2\"","title":"build and run"},{"location":"blog/ROS2/python/tutorials/pub_sub/#cli","text":"","title":"cli"},{"location":"blog/ROS2/python/tutorials/pub_sub/#ros2-topic","text":"# list ros2 topic list #result /parameter_events /rosout /minimal # info ros2 topic info /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Subscription count: 0 # Echo ros2 topic echo /minimal # Result data: 'pub simple: 110' --- data: 'pub simple: 111' ---","title":"ros2 topic"},{"location":"blog/ROS2/python/tutorials/pub_sub/#topic-verbose-info","text":"verbose info ros2 topic info -v /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Node name: minimal_publisher Node namespace: / Topic type: std_msgs/msg/String Endpoint type: PUBLISHER GID: 01 .0f.d1.c7.10.ba.23.e1.01.00.00.00.00.00.11.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE Durability: RMW_QOS_POLICY_DURABILITY_VOLATILE Lifespan: 2147483651294967295 nanoseconds Deadline: 2147483651294967295 nanoseconds Liveliness: RMW_QOS_POLICY_LIVELINESS_AUTOMATIC Liveliness lease duration: 2147483651294967295 nanoseconds Subscription count: 0","title":"topic verbose info"},{"location":"blog/ROS2/python/tutorials/pub_sub/#subscriber","text":"","title":"Subscriber"},{"location":"blog/ROS2/python/tutorials/pub_sub/#node-source-code_1","text":"MinimalSubscriber Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalSubscriber ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_subscriber\" ) # The node subscribes to messages of type std_msgs/String, # over a topic named: /minimal # The callback function is called as soon as a message is received. # The maximum number of queued messages is 10. self . subscription = self . create_subscription ( String , \"minimal\" , self . __sub_callback , 10 ) def __sub_callback ( self , msg ): self . get_logger () . info ( f \"I heard: { msg . data } \" ) def main ( args = None ): rclpy . init ( args = args ) minimal_subscriber = MinimalSubscriber () rclpy . spin ( minimal_subscriber ) minimal_subscriber . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"node source code"},{"location":"blog/ROS2/python/tutorials/pub_sub/#setuppy_1","text":"Add entry point entry_points = { 'console_scripts' : [ \"simple_sub = basic.simple_sub:main\" ], }","title":"setup.py"},{"location":"blog/ROS2/python/tutorials/pub_sub/#build-and-run_1","text":"Build colcon build --symlink-install --packages-select basic","title":"build and run"},{"location":"blog/ROS2/python/tutorials/pub_sub/#cli_1","text":"Run subscriber node Terminal1 ros2 run basic simple_sub # Result after pub from terminal 2 [ INFO ] [ 1649213924 .055190916 ] [ minimal_subscriber ] : I heard: hello [ INFO ] [ 1649213925 .036938799 ] [ minimal_subscriber ] : I heard: hello Terminal2 # pub message ros2 topic pub /minimal std_msgs/msg/String \"{data: 'hello'}\" # pub only one message ros2 topic pub -1 /minimal std_msgs/msg/String \"{data: 'hello'}\"","title":"cli"},{"location":"blog/ROS2/python/tutorials/pub_sub/#references","text":"package.xml specification ros2 topic Command Line Tool \u2013 Debug ROS2 Topics From the Terminal Create a Basic Publisher and Subscriber (Python) | ROS2 Foxy","title":"References"},{"location":"blog/ROS2/rqt/custom_plugin/step1/","tags":["rqt","plugin"],"text":"ros2 pkg create rqt_mypkg --build-type ament_python --dependencies rclpy rqt_gui rqt_gui_py src/rqt_mypkg/ \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 plugin.xml \u251c\u2500\u2500 resource \u2502 \u251c\u2500\u2500 MyPlugin.ui \u2502 \u2514\u2500\u2500 rqt_mypkg \u251c\u2500\u2500 rqt_mypkg \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 my_module.py \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 setup.cfg \u2514\u2500\u2500 setup.py package.xml # Add line to export section package.xml <export> <build_type> ament_python </build_type> <rqt_gui plugin= \"${prefix}/plugin.xml\" /> </export> plugin.xml # Place file in package root folder package.xml <library path= \"src\" > <class name= \"My Plugin\" type= \"rqt_mypkg.my_module.MyPlugin\" base_class_type= \"rqt_gui_py::Plugin\" > <description> An example Python GUI plugin to create a great user interface. </description> <qtgui> <group> <label> Visualization </label> </group> <!--<group> <label>Subgroup</label> </group> --> <label> My first Python Plugin </label> <icon type= \"theme\" > system-help </icon> <statustip> Great user interface to provide real value. </statustip> </qtgui> </class> </library> simple plugin file # Resources # rqt_tf_tree rqt python plugin","title":"ROS2 custom RQT plugin"},{"location":"blog/ROS2/rqt/custom_plugin/step1/#packagexml","text":"Add line to export section package.xml <export> <build_type> ament_python </build_type> <rqt_gui plugin= \"${prefix}/plugin.xml\" /> </export>","title":"package.xml"},{"location":"blog/ROS2/rqt/custom_plugin/step1/#pluginxml","text":"Place file in package root folder package.xml <library path= \"src\" > <class name= \"My Plugin\" type= \"rqt_mypkg.my_module.MyPlugin\" base_class_type= \"rqt_gui_py::Plugin\" > <description> An example Python GUI plugin to create a great user interface. </description> <qtgui> <group> <label> Visualization </label> </group> <!--<group> <label>Subgroup</label> </group> --> <label> My first Python Plugin </label> <icon type= \"theme\" > system-help </icon> <statustip> Great user interface to provide real value. </statustip> </qtgui> </class> </library>","title":"plugin.xml"},{"location":"blog/ROS2/rqt/custom_plugin/step1/#simple-plugin-file","text":"","title":"simple plugin file"},{"location":"blog/ROS2/rqt/custom_plugin/step1/#resources","text":"rqt_tf_tree rqt python plugin","title":"Resources"},{"location":"blog/ROS2/rviz/","tags":["rviz","rviz2"],"text":"Tips # Launch rviz node with config # setup.py ( os . path . join ( 'share' , package_name , \"config\" ), glob ( 'config/*.rviz' )) launch.py from launch import LaunchDescription from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory import os PACKAGE_NAME = \"py_tutorial_pkg\" def generate_launch_description (): ld = LaunchDescription () rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( get_package_share_directory ( PACKAGE_NAME ), 'config' , 'rviz_turtlesim_tf.rviz' )] ) ld . add_action ( rviz_node ) return ld Reference # rviz marker rviz tutorials","title":"ROS2 RVIZ2"},{"location":"blog/ROS2/rviz/#tips","text":"","title":"Tips"},{"location":"blog/ROS2/rviz/#launch-rviz-node-with-config","text":"setup.py ( os . path . join ( 'share' , package_name , \"config\" ), glob ( 'config/*.rviz' )) launch.py from launch import LaunchDescription from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory import os PACKAGE_NAME = \"py_tutorial_pkg\" def generate_launch_description (): ld = LaunchDescription () rviz_node = Node ( package = 'rviz2' , namespace = '' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' + os . path . join ( get_package_share_directory ( PACKAGE_NAME ), 'config' , 'rviz_turtlesim_tf.rviz' )] ) ld . add_action ( rviz_node ) return ld","title":"Launch rviz node with config"},{"location":"blog/ROS2/rviz/#reference","text":"rviz marker rviz tutorials","title":"Reference"},{"location":"blog/ROS2/rviz/2d_goal_pose/","tags":["rviz","pose"],"text":"ros2 topic list # /goal_pose ros2 topic info /goal_pose # Type: geometry_msgs/msg/PoseStamped Publisher count: 1 ros2 interface show geometry_msgs/msg/PoseStamped # A Pose with reference coordinate frame and timestamp std_msgs/Header header builtin_interfaces/Time stamp int32 sec uint32 nanosec string frame_id Pose pose Point position float64 x float64 y float64 z Quaternion orientation float64 x 0 float64 y 0 float64 z 0 float64 w 1","title":"2D goal pose"},{"location":"blog/ROS2/rviz/marker_hello/","tags":["rviz","marker"],"text":"ROS Doc markers The Markers display allows programmatic addition of various primitive shapes to the RViz 3D view by sending a visualization_msgs/Marker or visualization_msgs/MarkerArray message basic_marker.py import rclpy from rclpy.node import Node from visualization_msgs.msg import Marker from geometry_msgs.msg import Quaternion , Pose , Point , Vector3 from std_msgs.msg import Header , ColorRGBA from builtin_interfaces.msg import Duration class MyNode ( Node ): def __init__ ( self ): node_name = \"basic_rviz_marker\" super () . __init__ ( node_name ) self . get_logger () . info ( \"Hello rviz marker\" ) self . __marker_publisher = self . create_publisher ( Marker , \"visualization_marker\" , 5 ) self . __timer = self . create_timer ( 2 , self . __timer_handler ) self . __timer self . __counter = 0 def __timer_handler ( self ): self . __counter += 1 self . __show_text_in_rviz ( \"Hello marker: {} \" . format ( self . __counter )) def __show_text_in_rviz ( self , text ): pose = Pose ( position = Point ( x = 0.5 , y = 0.5 , z = 1.45 ), orientation = Quaternion ( x = 0.0 , y = 0.0 , z = 0.0 , w = 1.0 )) marker = Marker ( type = Marker . TEXT_VIEW_FACING , id = 0 , lifetime = Duration ( sec = 1 ), pose = pose , scale = Vector3 ( x = 0.6 , y = 0.6 , z = 0.6 ), header = Header ( frame_id = 'world' ), color = ColorRGBA ( r = 0.0 , g = 1.0 , b = 0.0 , a = 0.8 ), text = text ) self . __marker_publisher . publish ( marker ) def main ( args = None ): rclpy . init ( args = args ) node = MyNode () rclpy . spin ( node ) rclpy . shutdown () if __name__ == '__main__' : main () Reference # markers","title":"Add Marker to RVIZ"},{"location":"blog/ROS2/rviz/marker_hello/#reference","text":"markers","title":"Reference"},{"location":"blog/ROS2/sdf/meshes/","tags":["sdf"],"text":"<visual name= 'base_link_visual' > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh> <scale> 1 1 1 </scale> <uri> model://model_name/meshes/textured.dae </uri> </mesh> </geometry> </visual> <visual name= 'base_link_visual' > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh> <scale> 1 1 1 </scale> <uri> file://path_to_dae/textured.dae </uri> </mesh> </geometry> </visual> Warning SDF uses file instead of package Warning RVIZ not support model uri","title":"Load meshes"},{"location":"blog/ROS2/sdf/tips/","tags":["sdf","tips"],"text":"validate / check sdf file # ign sdf -k <sdf.file>","title":"SDF specification and tools"},{"location":"blog/ROS2/sdf/tips/#validate--check-sdf-file","text":"ign sdf -k <sdf.file>","title":"validate / check sdf file"},{"location":"blog/ROS2/tf2/","tags":["ros2"],"text":"transformations # A transform specifies how data expressed in a frame can be transformed into a different frame tf # Any node can use the tf2 libraries to broadcast a transform from one frame to another each frame is defined by one (and only one) transform from another frame, but can have any number of frames dependent on it, this create a tree structure of frames the library can calculat any transformation between tow frames (nodes) tf2 library using topics /tf and /tf_static th handle communication, because the tf2 library pub/sub the messages we call it broadcasting and listening tf_echo : returns the transforms between any connected frames # install tf2 tools and helper libraries # sudo apt-get install \\ ros-humble-tf2-tools \\ ros-humble-tf-transformations \\ ros-humble-rqt-tf-tree tutorials # cpp broadcaster Reference # Getting Ready for ROS Part 6: The Transform System (TF) ROS Transformations and frames","title":"tf2"},{"location":"blog/ROS2/tf2/#transformations","text":"A transform specifies how data expressed in a frame can be transformed into a different frame","title":"transformations"},{"location":"blog/ROS2/tf2/#tf","text":"Any node can use the tf2 libraries to broadcast a transform from one frame to another each frame is defined by one (and only one) transform from another frame, but can have any number of frames dependent on it, this create a tree structure of frames the library can calculat any transformation between tow frames (nodes) tf2 library using topics /tf and /tf_static th handle communication, because the tf2 library pub/sub the messages we call it broadcasting and listening","title":"tf"},{"location":"blog/ROS2/tf2/#tf_echo--returns-the-transforms-between-any-connected-frames","text":"","title":"tf_echo:  returns the transforms between any connected frames"},{"location":"blog/ROS2/tf2/#install-tf2-tools-and-helper-libraries","text":"sudo apt-get install \\ ros-humble-tf2-tools \\ ros-humble-tf-transformations \\ ros-humble-rqt-tf-tree","title":"install tf2 tools and helper libraries"},{"location":"blog/ROS2/tf2/#tutorials","text":"cpp broadcaster","title":"tutorials"},{"location":"blog/ROS2/tf2/#reference","text":"Getting Ready for ROS Part 6: The Transform System (TF) ROS Transformations and frames","title":"Reference"},{"location":"blog/ROS2/tf2/static_tf/","tags":["tf2","ros2"],"text":"static tf broadcast # ros2 run tf2_ros static_transform_publisher \\ x y z \\ yaw pitch roll \\ parent_frame \\ child_frame Demo # Broadcast two robot tf frame relative to world frame # world robot1 ros2 run tf2_ros static_transform_publisher 2 1 0 0 0 0 world robot_1 # world robot2 ros2 run tf2_ros static_transform_publisher 4 -2 0 0 0 0 world robot_2 echo # check the matrix between two frames ros2 run tf2_ros tf2_echo robot_1 robot_2 At time 0.0 - Translation: [2.000, -3.000, 0.000] - Rotation: in Quaternion [0.000, 0.000, 0.000, 1.000] - Rotation: in RPY (radian) [0.000, -0.000, 0.000] - Rotation: in RPY (degree) [0.000, -0.000, 0.000] - Matrix: 1.000 0.000 0.000 2.000 0.000 1.000 0.000 -3.000 0.000 0.000 1.000 0.000 0.000 0.000 0.000 1.000 tf tree # ros2 run rqt_tf_tree rqt_tf_tree rviz # topic # ros2 topic list # /parameter_events /rosout /tf_static ros2 topic echo /tf_static # publish one message because it's static tf #ros2 topic info /tf_static #Type: tf2_msgs/msg/TFMessage transforms: - header: stamp: sec: 1665725225 nanosec: 204816367 frame_id: world child_frame_id: robot_1 transform: translation: x: 2 .0 y: 1 .0 z: 0 .0 rotation: x: 0 .0 y: 0 .0 z: 0 .0 w: 1 .0 --- transforms: - header: stamp: sec: 1665725576 nanosec: 941586267 frame_id: world child_frame_id: robot_2 transform: translation: x: 4 .0 y: -2.0 z: 0 .0 rotation: x: 0 .0 y: 0 .0 z: 0 .0 w: 1 .0 Reference # Getting Ready for ROS Part 6: The Transform System (TF)","title":"tf2 static tf"},{"location":"blog/ROS2/tf2/static_tf/#static-tf-broadcast","text":"ros2 run tf2_ros static_transform_publisher \\ x y z \\ yaw pitch roll \\ parent_frame \\ child_frame","title":"static tf broadcast"},{"location":"blog/ROS2/tf2/static_tf/#demo","text":"Broadcast two robot tf frame relative to world frame # world robot1 ros2 run tf2_ros static_transform_publisher 2 1 0 0 0 0 world robot_1 # world robot2 ros2 run tf2_ros static_transform_publisher 4 -2 0 0 0 0 world robot_2","title":"Demo"},{"location":"blog/ROS2/tf2/static_tf/#echo","text":"check the matrix between two frames ros2 run tf2_ros tf2_echo robot_1 robot_2 At time 0.0 - Translation: [2.000, -3.000, 0.000] - Rotation: in Quaternion [0.000, 0.000, 0.000, 1.000] - Rotation: in RPY (radian) [0.000, -0.000, 0.000] - Rotation: in RPY (degree) [0.000, -0.000, 0.000] - Matrix: 1.000 0.000 0.000 2.000 0.000 1.000 0.000 -3.000 0.000 0.000 1.000 0.000 0.000 0.000 0.000 1.000","title":"echo"},{"location":"blog/ROS2/tf2/static_tf/#tf-tree","text":"ros2 run rqt_tf_tree rqt_tf_tree","title":"tf tree"},{"location":"blog/ROS2/tf2/static_tf/#rviz","text":"","title":"rviz"},{"location":"blog/ROS2/tf2/static_tf/#topic","text":"ros2 topic list # /parameter_events /rosout /tf_static ros2 topic echo /tf_static # publish one message because it's static tf #ros2 topic info /tf_static #Type: tf2_msgs/msg/TFMessage transforms: - header: stamp: sec: 1665725225 nanosec: 204816367 frame_id: world child_frame_id: robot_1 transform: translation: x: 2 .0 y: 1 .0 z: 0 .0 rotation: x: 0 .0 y: 0 .0 z: 0 .0 w: 1 .0 --- transforms: - header: stamp: sec: 1665725576 nanosec: 941586267 frame_id: world child_frame_id: robot_2 transform: translation: x: 4 .0 y: -2.0 z: 0 .0 rotation: x: 0 .0 y: 0 .0 z: 0 .0 w: 1 .0","title":"topic"},{"location":"blog/ROS2/tf2/static_tf/#reference","text":"Getting Ready for ROS Part 6: The Transform System (TF)","title":"Reference"},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/","tags":["tf2","cpp"],"text":"code from : https://docs.ros.org/en/humble/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.html ```bash terminal1 turtlesim # ros2 run turtlesim turtlesim_node ```bash terminal2 # turtlesim teleop ros2 run turtlesim turtle_teleop_key ```bash terminal3 our node translate turtle pose to tf message # ros2 run learning_tf2 tf2_broadcaster ```bash terminal4 # tf echo tool ros2 run tf2_ros tf2_echo world turtle ```bash terminal5 tf tree using rqt # ros2 run rqt_tf_tree rqt_tf_tree \u2013force-discover ```bash terminal6 # rviz ros2 run rviz2 rviz2 Reference # Learn TF2 \u2013 ROS2 Concepts in Practice","title":"tf2 cpp broadcaster"},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/#turtlesim","text":"ros2 run turtlesim turtlesim_node ```bash terminal2 # turtlesim teleop ros2 run turtlesim turtle_teleop_key ```bash terminal3","title":"turtlesim"},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/#our-node-translate-turtle-pose-to-tf-message","text":"ros2 run learning_tf2 tf2_broadcaster ```bash terminal4 # tf echo tool ros2 run tf2_ros tf2_echo world turtle ```bash terminal5","title":"our node translate turtle pose to tf message"},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/#tf-tree-using-rqt","text":"ros2 run rqt_tf_tree rqt_tf_tree \u2013force-discover ```bash terminal6 # rviz ros2 run rviz2 rviz2","title":"tf tree using rqt"},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/#reference","text":"Learn TF2 \u2013 ROS2 Concepts in Practice","title":"Reference"},{"location":"blog/ROS2/tf2/tutorials/","tags":["tag"],"text":"turtlesim tf2 python demo","title":"tf tutorial"},{"location":"blog/ROS2/tf2/tutorials/turtlesim_tf2/","tags":["tf2","python"],"text":"sudo apt install ros-humble-turtle-tf2-py Reference # geometry_tutorials","title":"tf2 turtle sim python demo"},{"location":"blog/ROS2/tf2/tutorials/turtlesim_tf2/#reference","text":"geometry_tutorials","title":"Reference"},{"location":"blog/ROS2/tutorials/custom_debian_package/","tags":["ros2","deb"],"text":"Reference # Building a custom Debian package","title":"Building a custom debian package"},{"location":"blog/ROS2/tutorials/custom_debian_package/#reference","text":"Building a custom Debian package","title":"Reference"},{"location":"blog/ROS2/tutorials/package_xml/","tags":["ros2"],"text":"depend # A package\u2019s package.xml file contains a set of dependencies. The dependencies in this file are generally referred to as \u201crosdep keys\u201d. These are represented in the tags , , , , and . They specify in what situation each of the dependencies are required in. For dependencies only used in testing the code (e.g. gtest), use test_depend . For dependencies only used in building the code, use build_depend . For dependencies needed by headers the code exports, use build_export_depend . For dependencies only used when running the code, use exec_depend . For mixed purposes, use depend , which covers build , export , and execution time dependencies. These dependencies are manually populated in the package.xml file by the package\u2019s creators and should be an exhaustive list of any non-builtin libraries and packages it requires. Reference # Managing Dependencies with rosdep","title":"Package.xml"},{"location":"blog/ROS2/tutorials/package_xml/#depend","text":"A package\u2019s package.xml file contains a set of dependencies. The dependencies in this file are generally referred to as \u201crosdep keys\u201d. These are represented in the tags , , , , and . They specify in what situation each of the dependencies are required in. For dependencies only used in testing the code (e.g. gtest), use test_depend . For dependencies only used in building the code, use build_depend . For dependencies needed by headers the code exports, use build_export_depend . For dependencies only used when running the code, use exec_depend . For mixed purposes, use depend , which covers build , export , and execution time dependencies. These dependencies are manually populated in the package.xml file by the package\u2019s creators and should be an exhaustive list of any non-builtin libraries and packages it requires.","title":"depend"},{"location":"blog/ROS2/tutorials/package_xml/#reference","text":"Managing Dependencies with rosdep","title":"Reference"},{"location":"blog/ROS2/tutorials/rosdep_tutorial/","tags":["rosdep"],"text":"rosdep is ROS\u2019s dependency management utility that can work with ROS packages and external libraries. usage # rosdep will check for package.xml files in its path or for a specific package and find the rosdep keys stored within rosdep install --simulate --from-paths ~/workspaces/project/src --ignore-src - --form-path package.xml location # Reference # Managing Dependencies with rosdep","title":"rosdep tutorial"},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#usage","text":"rosdep will check for package.xml files in its path or for a specific package and find the rosdep keys stored within rosdep install --simulate --from-paths ~/workspaces/project/src --ignore-src","title":"usage"},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#----form-path-packagexml-location","text":"","title":"- --form-path package.xml location"},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#reference","text":"Managing Dependencies with rosdep","title":"Reference"},{"location":"blog/ROS2/tutorials/articubot_one/","tags":["tutorial"],"text":"Resource # articulatedrobotics","title":"articubot_one"},{"location":"blog/ROS2/tutorials/articubot_one/#resource","text":"articulatedrobotics","title":"Resource"},{"location":"blog/ROS2/tutorials/turtlebot3/cartographer/","tags":["turtlebot","tutorial","ros2","nav"],"text":"How to use Cartographer for mapping and localization sudo apt install ros-humble-cartographer sudo apt install ros-humble-cartographer-ros sudo apt install ros-humble-turtlebot3-cartographer export TURTLEBOT3_MODEL = burger export GAZEBO_MODEL_PATH = ` ros2 pkg \\ prefix turtlebot3_gazebo ` /share/turtlebot3_gazebo/models/ ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py Reference # Cartographer","title":"Turtlebot Cartographer"},{"location":"blog/ROS2/tutorials/turtlebot3/cartographer/#reference","text":"Cartographer","title":"Reference"},{"location":"blog/ROS2/tutorials/turtlebot3/navigation/","tags":["turtlebot","tutorial","ros2","nav"],"text":"sudo apt install ros-humble-turtlebot3-navigation2 Reference # ROS 2 Navigation","title":"Turtlebot Navigation"},{"location":"blog/ROS2/tutorials/turtlebot3/navigation/#reference","text":"ROS 2 Navigation","title":"Reference"},{"location":"blog/ROS2/tutorials/turtlebot3/turtlebot_hello/","tags":["turtlebot","tutorial","ros2"],"text":"sudo apt install ros-humble-turtlebot3-gazebo sudo apt install ros-humble-turtlebot3-teleop export TURTLEBOT3_MODEL=burger export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:`ros2 pkg \\ prefix turtlebot3_gazebo \\ `/share/turtlebot3_gazebo/models/ ros2 launch turtlebot3_gazebo empty_world.launch.py export TURTLEBOT3_MODEL=burger ros2 run turtlebot3_teleop teleop_keyboard Reference # TurtleBot in ROS 2","title":"Turtlebot3"},{"location":"blog/ROS2/tutorials/turtlebot3/turtlebot_hello/#reference","text":"TurtleBot in ROS 2","title":"Reference"},{"location":"blog/ROS2/xacro/","tags":["xacro"],"text":"Tools # xacro4sdf","title":"xacro"},{"location":"blog/ROS2/xacro/#tools","text":"xacro4sdf","title":"Tools"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/","tags":["xacro","tutorial","launch"],"text":"LAB # Control xacro from outside with args Bind xacro args to launch args xacro # Simple xacro file with arg and if <?xml version=\"1.0\"?> <robot name= \"\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:arg name= \"with_gripper\" default= \"true\" /> <xacro:if value= \"$(arg with_gripper)\" > <!--with gripper--> </xacro:if> </robot> launch # using command using OpaqueFunction function to get LaunchContext for substitute Command # command import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.substitutions import LaunchConfiguration , Command from launch.actions import DeclareLaunchArgument , LogInfo PACKAGE = \"basic_mobile_robot\" SDF = \"arg.sdf.xacro\" def generate_launch_description (): with_grip = LaunchConfiguration ( 'with_gripper' ) pkg = get_package_share_directory ( PACKAGE ) robot_description_path = os . path . join ( pkg , \"demos\" , \"xacros\" , SDF ) robot_description = Command ([ 'xacro ' , \\ robot_description_path , \" \" , \"with_gripper:=\" , with_grip ]) log = LogInfo ( msg = robot_description ) arg = DeclareLaunchArgument ( 'with_gripper' , default_value = 'true' , description = 'Use grip' ) return LaunchDescription ([ arg , log ]) OpaqueFunction # test_xacro.launch.py import os from ament_index_python import get_package_share_directory from launch import LaunchDescription , LaunchContext from launch.actions import DeclareLaunchArgument , OpaqueFunction from launch.substitutions import LaunchConfiguration import xacro PACKAGE = \"basic_mobile_robot\" SDF = \"arg.sdf.xacro\" def generate_launch_description (): pkg = get_package_share_directory ( PACKAGE ) robot_description_path = os . path . join ( pkg , \"demos\" , \"xacros\" ) robot_description_file = os . path . join ( robot_description_path , SDF ) robot_description_file_out = os . path . join ( robot_description_path , \"arg.sdf\" ) with_gripper_arg = DeclareLaunchArgument ( 'with_gripper' , default_value = \"true\" , description = \"use with_gripper\" ) def render_xacro ( context : LaunchContext , grip_arg ): grip_arg_str = context . perform_substitution ( grip_arg ) doc = xacro . parse ( open ( robot_description_file )) xacro . process_doc ( doc , mappings = { \"with_gripper\" : grip_arg_str }) out = xacro . open_output ( robot_description_file_out ) out . write ( doc . toprettyxml ( indent = ' ' )) func = OpaqueFunction ( function = render_xacro , args = [ LaunchConfiguration ( 'with_gripper' )]) ld = LaunchDescription () ld . add_action ( with_gripper_arg ) ld . add_action ( func ) return ld usage # ros2 launch basic_mobile_robot test_xacro.launch.py with_gripper: = \"true\"","title":"Pass launch argument to control XACRO logic"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#lab","text":"Control xacro from outside with args Bind xacro args to launch args","title":"LAB"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#xacro","text":"Simple xacro file with arg and if <?xml version=\"1.0\"?> <robot name= \"\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:arg name= \"with_gripper\" default= \"true\" /> <xacro:if value= \"$(arg with_gripper)\" > <!--with gripper--> </xacro:if> </robot>","title":"xacro"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#launch","text":"using command using OpaqueFunction function to get LaunchContext for substitute","title":"launch"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#command","text":"command import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.substitutions import LaunchConfiguration , Command from launch.actions import DeclareLaunchArgument , LogInfo PACKAGE = \"basic_mobile_robot\" SDF = \"arg.sdf.xacro\" def generate_launch_description (): with_grip = LaunchConfiguration ( 'with_gripper' ) pkg = get_package_share_directory ( PACKAGE ) robot_description_path = os . path . join ( pkg , \"demos\" , \"xacros\" , SDF ) robot_description = Command ([ 'xacro ' , \\ robot_description_path , \" \" , \"with_gripper:=\" , with_grip ]) log = LogInfo ( msg = robot_description ) arg = DeclareLaunchArgument ( 'with_gripper' , default_value = 'true' , description = 'Use grip' ) return LaunchDescription ([ arg , log ])","title":"Command"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#opaquefunction","text":"test_xacro.launch.py import os from ament_index_python import get_package_share_directory from launch import LaunchDescription , LaunchContext from launch.actions import DeclareLaunchArgument , OpaqueFunction from launch.substitutions import LaunchConfiguration import xacro PACKAGE = \"basic_mobile_robot\" SDF = \"arg.sdf.xacro\" def generate_launch_description (): pkg = get_package_share_directory ( PACKAGE ) robot_description_path = os . path . join ( pkg , \"demos\" , \"xacros\" ) robot_description_file = os . path . join ( robot_description_path , SDF ) robot_description_file_out = os . path . join ( robot_description_path , \"arg.sdf\" ) with_gripper_arg = DeclareLaunchArgument ( 'with_gripper' , default_value = \"true\" , description = \"use with_gripper\" ) def render_xacro ( context : LaunchContext , grip_arg ): grip_arg_str = context . perform_substitution ( grip_arg ) doc = xacro . parse ( open ( robot_description_file )) xacro . process_doc ( doc , mappings = { \"with_gripper\" : grip_arg_str }) out = xacro . open_output ( robot_description_file_out ) out . write ( doc . toprettyxml ( indent = ' ' )) func = OpaqueFunction ( function = render_xacro , args = [ LaunchConfiguration ( 'with_gripper' )]) ld = LaunchDescription () ld . add_action ( with_gripper_arg ) ld . add_action ( func ) return ld","title":"OpaqueFunction"},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#usage","text":"ros2 launch basic_mobile_robot test_xacro.launch.py with_gripper: = \"true\"","title":"usage"},{"location":"blog/embedded/cross-compiler/hello-cc/","tags":["cross-compiler"],"text":"A cross compiler is a compiler capable of creating executable code for a platform other than the one on which the compiler is running (wikipedia) install cross compiler # install crosscompiler tools sudo apt install crossbuild-essential-arm64 toolchain setting file # aarch64-linux-gnu-toolchain.cmake set ( CMAKE_SYSTEM_NAME Linux ) set ( CMAKE_SYSTEM_PROCESSOR \"aarch64\" ) set ( CMAKE_C_COMPILER aarch64-linux-gnu-gcc ) set ( CMAKE_CXX_COMPILER aarch64-linux-gnu-g++ ) set ( CMAKE_CUDA_COMPILER nvcc ) set ( CMAKE_CUDA_HOST_COMPILER aarch64-linux-gnu-gcc ) set ( CMAKE_FIND_ROOT_PATH \"/usr/aarch64-linux-gnu\" ) set ( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER ) set ( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY ) set ( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY ) set ( CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY ) demo # \u251c\u2500\u2500 aarch64-linux-gnu-toolchain.cmake \u251c\u2500\u2500 build \u251c\u2500\u2500 CMakeLists.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 hello.cpp code # #include <iostream> int main (){ std :: cout << \"hello cross compiler\" << std :: endl ; return 0 ; } cmake_minimum_required ( VERSION 3.15 ) # Toolchain settings set ( CMAKE_TOOLCHAIN_FILE aarch64-linux-gnu-toolchain.cmake ) project ( CrossCompiler_demo ) add_executable ( hello_cc src/hello.cpp ) Warning It is crucial to set the value of CMAKE_TOOLCHAIN_FILE before project() is invoked, because project() triggers toolchain detection and verification . cmake gui # using cmake gui set cross compiler settings from file make, check, run # make # Run make from build folder Check executable arch with file command Run with qemu or Copy to embedded device check # cd build # Result file hello_cc hello_cc: ELF 64 -bit LSB shared object, ARM aarch64, version 1 ( SYSV ) , dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID [ sha1 ]= 5425e3fd790ba1a6a07c4963f0606a58edf53aa7, for GNU/Linux 3 .7.0, not stripped run # Run ARM binary using qemu sudo apt-get install qemu-user-static # from build folder qemu-arm-static -L /usr/arm-linux-gnueabihf ./hello_cc Ref # How to cross-compile for embedded with CMake like a champ How to Cross Compile OpenCV and MXNET for NVIDIA Jetson","title":"cross compiler hello"},{"location":"blog/embedded/cross-compiler/hello-cc/#install-cross-compiler","text":"install crosscompiler tools sudo apt install crossbuild-essential-arm64","title":"install cross compiler"},{"location":"blog/embedded/cross-compiler/hello-cc/#toolchain-setting-file","text":"aarch64-linux-gnu-toolchain.cmake set ( CMAKE_SYSTEM_NAME Linux ) set ( CMAKE_SYSTEM_PROCESSOR \"aarch64\" ) set ( CMAKE_C_COMPILER aarch64-linux-gnu-gcc ) set ( CMAKE_CXX_COMPILER aarch64-linux-gnu-g++ ) set ( CMAKE_CUDA_COMPILER nvcc ) set ( CMAKE_CUDA_HOST_COMPILER aarch64-linux-gnu-gcc ) set ( CMAKE_FIND_ROOT_PATH \"/usr/aarch64-linux-gnu\" ) set ( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER ) set ( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY ) set ( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY ) set ( CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY )","title":"toolchain setting file"},{"location":"blog/embedded/cross-compiler/hello-cc/#demo","text":"\u251c\u2500\u2500 aarch64-linux-gnu-toolchain.cmake \u251c\u2500\u2500 build \u251c\u2500\u2500 CMakeLists.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 hello.cpp","title":"demo"},{"location":"blog/embedded/cross-compiler/hello-cc/#code","text":"#include <iostream> int main (){ std :: cout << \"hello cross compiler\" << std :: endl ; return 0 ; } cmake_minimum_required ( VERSION 3.15 ) # Toolchain settings set ( CMAKE_TOOLCHAIN_FILE aarch64-linux-gnu-toolchain.cmake ) project ( CrossCompiler_demo ) add_executable ( hello_cc src/hello.cpp ) Warning It is crucial to set the value of CMAKE_TOOLCHAIN_FILE before project() is invoked, because project() triggers toolchain detection and verification .","title":"code"},{"location":"blog/embedded/cross-compiler/hello-cc/#cmake-gui","text":"using cmake gui set cross compiler settings from file","title":"cmake gui"},{"location":"blog/embedded/cross-compiler/hello-cc/#make-check-run","text":"","title":"make, check, run"},{"location":"blog/embedded/cross-compiler/hello-cc/#make","text":"Run make from build folder Check executable arch with file command Run with qemu or Copy to embedded device","title":"make"},{"location":"blog/embedded/cross-compiler/hello-cc/#check","text":"cd build # Result file hello_cc hello_cc: ELF 64 -bit LSB shared object, ARM aarch64, version 1 ( SYSV ) , dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID [ sha1 ]= 5425e3fd790ba1a6a07c4963f0606a58edf53aa7, for GNU/Linux 3 .7.0, not stripped","title":"check"},{"location":"blog/embedded/cross-compiler/hello-cc/#run","text":"Run ARM binary using qemu sudo apt-get install qemu-user-static # from build folder qemu-arm-static -L /usr/arm-linux-gnueabihf ./hello_cc","title":"run"},{"location":"blog/embedded/cross-compiler/hello-cc/#ref","text":"How to cross-compile for embedded with CMake like a champ How to Cross Compile OpenCV and MXNET for NVIDIA Jetson","title":"Ref"},{"location":"blog/embedded/jetson/nano/","tags":["nvidia","nano"],"text":"/ansible/roles/jetson/defaults/main.yaml --- ubuntu_release : focal new_user : name : user shell : /bin/bash password : user Reference # Create your own image for jetson nano board","title":"Jetson Nano"},{"location":"blog/embedded/jetson/nano/#reference","text":"Create your own image for jetson nano board","title":"Reference"},{"location":"blog/gazebo/erb/","tags":["erb","gazebo"],"text":"ERB is used templating language to generate text file with Ruby code Generate SDF from ERB template # erb model.sdf.erb > model.sdf using cmake # project # \u251c\u2500\u2500 build \u251c\u2500\u2500 CMakeLists.txt \u2514\u2500\u2500 variable_and_math.sdf.erb \u2514\u2500\u2500 loops_and_func.sdf.erb demos # declare variable using Math module variable_and_math.sdf.erb <% x = 1 %> <%=x%> <% pi=Math::PI %> <%=pi%> loop example function and function call loops_and_func.sdf.erb <% for i in 1..3 %> hello no: <%=i%> <% end %> <% def box(dx, dy, dz) '<collision name=\"collision\"> <geometry> <box> <size> ' + dx.to_s + ' ' + dy.to_s + ' ' + dz.to_s + ' </size> </box> </geometry> </collision> <visual name=\"visual\"> <geometry> <box> <size> ' + dx.to_s + ' ' + dy.to_s + ' ' + dz.to_s + ' </size> </box> </geometry> </visual>' end %> <%= box(10,20,30) %> CMakeLists # CMakeLists.txt cmake_minimum_required ( VERSION 3.10 ) project ( HELLO_ERB ) find_program ( ERB_EXE_PATH erb ) if ( NOT ERB_EXE_PATH ) message ( FATAL_ERROR \"Could not find the `erb` tool. Try `sudo apt-get install ruby`\" ) endif () set ( erb_files variable_and_math.sdf.erb loops_and_func.sdf.erb ) foreach ( _erb ${ erb_files } ) string ( REGEX REPLACE \".sdf.erb\" \".sdf\" _model ${ _erb } ) set ( _model ${ CMAKE_CURRENT_SOURCE_DIR } / ${ _model } ) add_custom_command ( OUTPUT ${ _model } COMMAND ${ ERB_EXE_PATH } ${ _erb } > ${ _model } WORKING_DIRECTORY ${ CMAKE_CURRENT_SOURCE_DIR } ) list ( APPEND _files ${ _model } ) endforeach () add_custom_target ( erb_generation ALL DEPENDS ${ _files } )","title":"erb"},{"location":"blog/gazebo/erb/#generate-sdf-from-erb-template","text":"erb model.sdf.erb > model.sdf","title":"Generate SDF from ERB template"},{"location":"blog/gazebo/erb/#using-cmake","text":"","title":"using cmake"},{"location":"blog/gazebo/erb/#project","text":"\u251c\u2500\u2500 build \u251c\u2500\u2500 CMakeLists.txt \u2514\u2500\u2500 variable_and_math.sdf.erb \u2514\u2500\u2500 loops_and_func.sdf.erb","title":"project"},{"location":"blog/gazebo/erb/#demos","text":"declare variable using Math module variable_and_math.sdf.erb <% x = 1 %> <%=x%> <% pi=Math::PI %> <%=pi%> loop example function and function call loops_and_func.sdf.erb <% for i in 1..3 %> hello no: <%=i%> <% end %> <% def box(dx, dy, dz) '<collision name=\"collision\"> <geometry> <box> <size> ' + dx.to_s + ' ' + dy.to_s + ' ' + dz.to_s + ' </size> </box> </geometry> </collision> <visual name=\"visual\"> <geometry> <box> <size> ' + dx.to_s + ' ' + dy.to_s + ' ' + dz.to_s + ' </size> </box> </geometry> </visual>' end %> <%= box(10,20,30) %>","title":"demos"},{"location":"blog/gazebo/erb/#cmakelists","text":"CMakeLists.txt cmake_minimum_required ( VERSION 3.10 ) project ( HELLO_ERB ) find_program ( ERB_EXE_PATH erb ) if ( NOT ERB_EXE_PATH ) message ( FATAL_ERROR \"Could not find the `erb` tool. Try `sudo apt-get install ruby`\" ) endif () set ( erb_files variable_and_math.sdf.erb loops_and_func.sdf.erb ) foreach ( _erb ${ erb_files } ) string ( REGEX REPLACE \".sdf.erb\" \".sdf\" _model ${ _erb } ) set ( _model ${ CMAKE_CURRENT_SOURCE_DIR } / ${ _model } ) add_custom_command ( OUTPUT ${ _model } COMMAND ${ ERB_EXE_PATH } ${ _erb } > ${ _model } WORKING_DIRECTORY ${ CMAKE_CURRENT_SOURCE_DIR } ) list ( APPEND _files ${ _model } ) endforeach () add_custom_target ( erb_generation ALL DEPENDS ${ _files } )","title":"CMakeLists"},{"location":"blog/gazebo/color_and_texture/","tags":["gazebo","texture"],"text":"Demo # basic sdf # model folder struct # \u2514\u2500\u2500 simple_box \u251c\u2500\u2500 model.config \u2514\u2500\u2500 model.sdf files # model.config <?xml version=\"1.0\"?> <model> <name> simple_box </name> <version> 1.0 </version> <sdf version= \"1.5\" > model.sdf </sdf> <author> <name></name> <email></email> </author> <description> </description> </model> sdf <?xml version='1.0'?> <sdf version= \"1.4\" > <model name= \"simple_box\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"link\" > <inertial> <mass> 1.0 </mass> <inertia> <!-- inertias are tricky to compute --> <!-- http://gazebosim.org/tutorials?tut=inertia&cat=build_robot --> <ixx> 0.083 </ixx> <!-- for a box: ixx = 0.083 * mass * (y*y + z*z) --> <ixy> 0.0 </ixy> <!-- for a box: ixy = 0 --> <ixz> 0.0 </ixz> <!-- for a box: ixz = 0 --> <iyy> 0.083 </iyy> <!-- for a box: iyy = 0.083 * mass * (x*x + z*z) --> <iyz> 0.0 </iyz> <!-- for a box: iyz = 0 --> <izz> 0.083 </izz> <!-- for a box: izz = 0.083 * mass * (x*x + y*y) --> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> </model> </sdf> predefine color # using predefine script <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> <material> <script> <uri> file://media/materials/scripts/gazebo.material </uri> <name> Gazebo/Red </name> </script> </material> </visual> materials list list of materials define in gazebo file /usr/share/gazebo-11/media/materials/scripts/gazebo.material for example the RED definition material Gazebo/Red { technique { pass ambient { ambient 1 0 0 diffuse 1 0 0 specular 0.1 0.1 0.1 1 1 } } } Custom color # <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> <material> <!-- LED material --> <ambient> 0 0 0 1 </ambient> <diffuse> 0 0 0 1 </diffuse> <specular> 0 0 0 0 </specular> <emissive> 0 1 0 1 </emissive> </material> <!-- End LED material --> </visual> Texture # \u2514\u2500\u2500 simple_box \u251c\u2500\u2500 materials \u2502 \u251c\u2500\u2500 scripts \u2502 \u2502 \u2514\u2500\u2500 simple_box.material \u2502 \u2514\u2500\u2500 textures \u2502 \u2514\u2500\u2500 seamless_texture.png \u251c\u2500\u2500 model.config \u2514\u2500\u2500 model.sdf simple_box.material material wood / light { technique { pass { texture_unit { // Relative to the location of the material script texture .. / textures / seamless_texture . png // Repeat the texture over the surface (4 per face) scale 0.5 0.5 } } } } <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> <material> <script> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/scripts </uri> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/textures </uri> <name> wood/light </name> </script> </material> </visual> uri use model uri and set GAZEBO_MODEL_PATH or use file:// to set absolute path stl mesh # Warning STL : does not support colors and texturing Collada (.dae) : support color and texture stl color # <visual name= \"visual\" > <geometry> <mesh> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/meshes/cube_20k.stl </uri> <scale> 0.25 0.25 0.25 </scale> </mesh> </geometry> <material> <script> <uri> file://media/materials/scripts/gazebo.material </uri> <name> Gazebo/Red </name> </script> </material> </visual> stl with texture # <visual name= \"visual\" > <geometry> <mesh> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/meshes/cube_20k.stl </uri> <scale> 0.5 0.5 0.5 </scale> </mesh> </geometry> <material> <script> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/scripts </uri> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/textures </uri> <name> wood/light </name> </script> </material> </visual> Collada / dea # Example from gazebo_models library_images <library_images> <image id= \"start_pad_png\" name= \"start_pad_png\" > <init_from> end_pad.png </init_from> </image> </library_images> Reference # Color And Texture Models","title":"Gazebo color texture and meshes"},{"location":"blog/gazebo/color_and_texture/#demo","text":"","title":"Demo"},{"location":"blog/gazebo/color_and_texture/#basic-sdf","text":"","title":"basic sdf"},{"location":"blog/gazebo/color_and_texture/#model-folder-struct","text":"\u2514\u2500\u2500 simple_box \u251c\u2500\u2500 model.config \u2514\u2500\u2500 model.sdf","title":"model folder struct"},{"location":"blog/gazebo/color_and_texture/#files","text":"model.config <?xml version=\"1.0\"?> <model> <name> simple_box </name> <version> 1.0 </version> <sdf version= \"1.5\" > model.sdf </sdf> <author> <name></name> <email></email> </author> <description> </description> </model> sdf <?xml version='1.0'?> <sdf version= \"1.4\" > <model name= \"simple_box\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"link\" > <inertial> <mass> 1.0 </mass> <inertia> <!-- inertias are tricky to compute --> <!-- http://gazebosim.org/tutorials?tut=inertia&cat=build_robot --> <ixx> 0.083 </ixx> <!-- for a box: ixx = 0.083 * mass * (y*y + z*z) --> <ixy> 0.0 </ixy> <!-- for a box: ixy = 0 --> <ixz> 0.0 </ixz> <!-- for a box: ixz = 0 --> <iyy> 0.083 </iyy> <!-- for a box: iyy = 0.083 * mass * (x*x + z*z) --> <iyz> 0.0 </iyz> <!-- for a box: iyz = 0 --> <izz> 0.083 </izz> <!-- for a box: izz = 0.083 * mass * (x*x + y*y) --> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> </model> </sdf>","title":"files"},{"location":"blog/gazebo/color_and_texture/#predefine-color","text":"using predefine script <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> <material> <script> <uri> file://media/materials/scripts/gazebo.material </uri> <name> Gazebo/Red </name> </script> </material> </visual> materials list list of materials define in gazebo file /usr/share/gazebo-11/media/materials/scripts/gazebo.material for example the RED definition material Gazebo/Red { technique { pass ambient { ambient 1 0 0 diffuse 1 0 0 specular 0.1 0.1 0.1 1 1 } } }","title":"predefine color"},{"location":"blog/gazebo/color_and_texture/#custom-color","text":"<visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> <material> <!-- LED material --> <ambient> 0 0 0 1 </ambient> <diffuse> 0 0 0 1 </diffuse> <specular> 0 0 0 0 </specular> <emissive> 0 1 0 1 </emissive> </material> <!-- End LED material --> </visual>","title":"Custom color"},{"location":"blog/gazebo/color_and_texture/#texture","text":"\u2514\u2500\u2500 simple_box \u251c\u2500\u2500 materials \u2502 \u251c\u2500\u2500 scripts \u2502 \u2502 \u2514\u2500\u2500 simple_box.material \u2502 \u2514\u2500\u2500 textures \u2502 \u2514\u2500\u2500 seamless_texture.png \u251c\u2500\u2500 model.config \u2514\u2500\u2500 model.sdf simple_box.material material wood / light { technique { pass { texture_unit { // Relative to the location of the material script texture .. / textures / seamless_texture . png // Repeat the texture over the surface (4 per face) scale 0.5 0.5 } } } } <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> <material> <script> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/scripts </uri> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/textures </uri> <name> wood/light </name> </script> </material> </visual> uri use model uri and set GAZEBO_MODEL_PATH or use file:// to set absolute path","title":"Texture"},{"location":"blog/gazebo/color_and_texture/#stl-mesh","text":"Warning STL : does not support colors and texturing Collada (.dae) : support color and texture","title":"stl mesh"},{"location":"blog/gazebo/color_and_texture/#stl-color","text":"<visual name= \"visual\" > <geometry> <mesh> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/meshes/cube_20k.stl </uri> <scale> 0.25 0.25 0.25 </scale> </mesh> </geometry> <material> <script> <uri> file://media/materials/scripts/gazebo.material </uri> <name> Gazebo/Red </name> </script> </material> </visual>","title":"stl color"},{"location":"blog/gazebo/color_and_texture/#stl-with-texture","text":"<visual name= \"visual\" > <geometry> <mesh> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/meshes/cube_20k.stl </uri> <scale> 0.5 0.5 0.5 </scale> </mesh> </geometry> <material> <script> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/scripts </uri> <uri> file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/textures </uri> <name> wood/light </name> </script> </material> </visual>","title":"stl with texture"},{"location":"blog/gazebo/color_and_texture/#collada--dea","text":"Example from gazebo_models library_images <library_images> <image id= \"start_pad_png\" name= \"start_pad_png\" > <init_from> end_pad.png </init_from> </image> </library_images>","title":"Collada / dea"},{"location":"blog/gazebo/color_and_texture/#reference","text":"Color And Texture Models","title":"Reference"},{"location":"blog/gazebo/xacro/","tags":["xacro"],"text":"Install # sudo apt install ros-<version>-xacro usage # xacro hello.xacro > hello.xml include # include other xacro file <xacro:include filename= \"other_file.xacro\" /> <xacro:include filename= \"$(cwd)/other_file.xacro\" /> # args # decalre arg arg usage demo Note passing argument from cli := demo result # # run without argument xacro hello.xacro > hello.xml # run with argument xacro hello.xacro > hello.xml var: = 10 <?xml version=\"1.0\" ?> <!-- =================================================================================== --> <!-- | This document was autogenerated by xacro from /home/user/projects/blog/examples/gazebo/xacro/hello.xacro | --> <!-- | EDITING THIS FILE BY HAND IS NOT RECOMMENDED | --> <!-- =================================================================================== --> <robot name= \"\" > <data> 10 </data> </robot> property # property <?xml version=\"1.0\"?> <robot name= \"prop\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"prop1\" value= \"0.1\" /> <data> ${prop1} </data> </robot> output # <?xml version=\"1.0\" ?> <robot name= \"prop\" > <data> 0.1 </data> </robot> condition # macro <?xml version=\"1.0\"?> <robot name= \"condition\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"check\" value= \"2\" /> <xacro:if value= \"${check == 1}\" > code for create A </xacro:if> <!-- run if condition not true --> <xacro:unless value= \"${check == 1}\" > code for create B </xacro:unless> </robot> macros # macro <?xml version=\"1.0\"?> <robot name= \"macro\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:macro name= \"default_origin\" params= \"x y z\" > <origin xyz= \"${x} ${y} ${z}\" rpy= \"0 0 0\" /> </xacro:macro> <xacro:default_origin x= \"1\" y= \"2\" z= \"3\" /> </robot> output # <?xml version=\"1.0\" ?> <robot name= \"macro\" > <origin rpy= \"0 0 0\" xyz= \"1 2 3\" /> </robot> loops # loops <?xml version=\"1.0\"?> <robot name= \"loop\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"items\" value= \"${[1,2,3,4,5]}\" /> <xacro:macro name= \"loop\" params= \"items:=^\" > <xacro:if value= \"${items}\" > <!-- pop first item from list --> <xacro:property name= \"item\" value= \"${items.pop(0)}\" /> <item> ${item} </item> <!-- recursively call myself --> <xacro:loop/> </xacro:if> </xacro:macro> <xacro:loop items= \"${items}\" /> </robot> output # <?xml version=\"1.0\" ?> <robot name= \"loop\" > <item> 1 </item> <item> 2 </item> <item> 3 </item> <item> 4 </item> <item> 5 </item> </robot>","title":"xacro hello"},{"location":"blog/gazebo/xacro/#install","text":"sudo apt install ros-<version>-xacro","title":"Install"},{"location":"blog/gazebo/xacro/#usage","text":"xacro hello.xacro > hello.xml","title":"usage"},{"location":"blog/gazebo/xacro/#include","text":"include other xacro file","title":"include"},{"location":"blog/gazebo/xacro/#xacroinclude-filenameother_filexacro-xacroinclude-filenamecwdother_filexacro-","text":"","title":"&lt;xacro:include filename=&quot;other_file.xacro&quot; /&gt;\n&lt;xacro:include filename=&quot;$(cwd)/other_file.xacro&quot; /&gt;\n"},{"location":"blog/gazebo/xacro/#args","text":"decalre arg arg usage demo Note passing argument from cli :=","title":"args"},{"location":"blog/gazebo/xacro/#demo-result","text":"# run without argument xacro hello.xacro > hello.xml # run with argument xacro hello.xacro > hello.xml var: = 10 <?xml version=\"1.0\" ?> <!-- =================================================================================== --> <!-- | This document was autogenerated by xacro from /home/user/projects/blog/examples/gazebo/xacro/hello.xacro | --> <!-- | EDITING THIS FILE BY HAND IS NOT RECOMMENDED | --> <!-- =================================================================================== --> <robot name= \"\" > <data> 10 </data> </robot>","title":"demo result"},{"location":"blog/gazebo/xacro/#property","text":"property <?xml version=\"1.0\"?> <robot name= \"prop\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"prop1\" value= \"0.1\" /> <data> ${prop1} </data> </robot>","title":"property"},{"location":"blog/gazebo/xacro/#output","text":"<?xml version=\"1.0\" ?> <robot name= \"prop\" > <data> 0.1 </data> </robot>","title":"output"},{"location":"blog/gazebo/xacro/#condition","text":"macro <?xml version=\"1.0\"?> <robot name= \"condition\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"check\" value= \"2\" /> <xacro:if value= \"${check == 1}\" > code for create A </xacro:if> <!-- run if condition not true --> <xacro:unless value= \"${check == 1}\" > code for create B </xacro:unless> </robot>","title":"condition"},{"location":"blog/gazebo/xacro/#macros","text":"macro <?xml version=\"1.0\"?> <robot name= \"macro\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:macro name= \"default_origin\" params= \"x y z\" > <origin xyz= \"${x} ${y} ${z}\" rpy= \"0 0 0\" /> </xacro:macro> <xacro:default_origin x= \"1\" y= \"2\" z= \"3\" /> </robot>","title":"macros"},{"location":"blog/gazebo/xacro/#output_1","text":"<?xml version=\"1.0\" ?> <robot name= \"macro\" > <origin rpy= \"0 0 0\" xyz= \"1 2 3\" /> </robot>","title":"output"},{"location":"blog/gazebo/xacro/#loops","text":"loops <?xml version=\"1.0\"?> <robot name= \"loop\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:property name= \"items\" value= \"${[1,2,3,4,5]}\" /> <xacro:macro name= \"loop\" params= \"items:=^\" > <xacro:if value= \"${items}\" > <!-- pop first item from list --> <xacro:property name= \"item\" value= \"${items.pop(0)}\" /> <item> ${item} </item> <!-- recursively call myself --> <xacro:loop/> </xacro:if> </xacro:macro> <xacro:loop items= \"${items}\" /> </robot>","title":"loops"},{"location":"blog/gazebo/xacro/#output_2","text":"<?xml version=\"1.0\" ?> <robot name= \"loop\" > <item> 1 </item> <item> 2 </item> <item> 3 </item> <item> 4 </item> <item> 5 </item> </robot>","title":"output"},{"location":"blog/gazebo/xacro/build_check_view/","tags":["xacro"],"text":"cmake # cmake_minimum_required ( VERSION 3.11 ) project ( xacro ) find_package ( xacro REQUIRED ) file ( GLOB xacro_files ${ CMAKE_CURRENT_SOURCE_DIR } /*.xacro ) foreach ( it ${ xacro_files } ) string ( REGEX MATCH \"(.*)[.]xacro$\" unused ${ it } ) set ( output_filename ${ CMAKE_MATCH_1 } ) xacro_add_xacro_file ( ${ it } ${ output_filename } ) list ( APPEND xacro_files ${ output_filename } ) endforeach ( it ) # add an abstract target to actually trigger the builds add_custom_target ( media_files ALL DEPENDS ${ xacro_files } )","title":"xacro build check and view"},{"location":"blog/gazebo/xacro/build_check_view/#cmake","text":"cmake_minimum_required ( VERSION 3.11 ) project ( xacro ) find_package ( xacro REQUIRED ) file ( GLOB xacro_files ${ CMAKE_CURRENT_SOURCE_DIR } /*.xacro ) foreach ( it ${ xacro_files } ) string ( REGEX MATCH \"(.*)[.]xacro$\" unused ${ it } ) set ( output_filename ${ CMAKE_MATCH_1 } ) xacro_add_xacro_file ( ${ it } ${ output_filename } ) list ( APPEND xacro_files ${ output_filename } ) endforeach ( it ) # add an abstract target to actually trigger the builds add_custom_target ( media_files ALL DEPENDS ${ xacro_files } )","title":"cmake"},{"location":"blog/linux/hello_tmux/","tags":["tmux","tmuxp","101"],"text":"tmux # install # sudo apt install tmux config file # ~/.tmux.conf or /etc/tmux.conf ```bash title=\u201dremap prefix from \u2018C-b\u2019 to \u2018C-a\u2019 unbind C-b set-option -g prefix C-a bind-key C-a send-prefix ```bash title=\"close session\" bind C-c kill-session support mouse set -g mouse on like terminator # split windows to pane resize window navigate panes (need to resolve) terminator short cuts # do like terminator bind -n C-E split-window -h bind -n C-S-Left resize-pane -L 3 bind -n C-S-Right resize-pane -R 3 bind -n C-S-Up resize-pane -U 3 bind -n C-S-Down resize-pane -D 3 bind -n C-O split-window -v # switch panes using Alt-arrow without prefix (not working) bind -n M-Left select -pane -L bind -n M-Right select -pane -R bind -n M-Up select -pane -U bind -n M-Down select -pane -D tmuxp # A session manager for tmux install # install sudo apt install tmuxp #or pip install --user tmuxp config file # session_name list of windows list of panes for every window in windows config.yaml session_name : 2-pane-vertical windows : - window_name : my test window panes : - echo hello - echo hello usage # tmuxp load config.yaml tmux conf example # ~/.tmux.conf # unbind unbind C-b unbind '\"' unbind % # base1 numbering set -g base-index 1 setw -g pane-base-index 1 #bind ctrl-a as a prefix set-option -g prefix C-a bind-key C-a send-prefix # kill session bind C-c kill-session # mouse set -g mouse on # do like terminator bind -n C-E split-window -h bind -n C-S-Left resize-pane -L 3 bind -n C-S-Right resize-pane -R 3 bind -n C-S-Up resize-pane -U 3 bind -n C-S-Down resize-pane -D 3 bind -n C-O split-window -v # switch panes using Alt-arrow without prefix (not working) bind -n M-Left select -pane -L bind -n M-Right select -pane -R bind -n M-Up select -pane -U bind -n M-Down select -pane -D # Shift arrow to switch windows bind n next-window bind p previous-window bind c new-window -c \"#{pane_current_path}\" bind r source-file ~/.tmux.conf","title":"Tmux and tmuxp"},{"location":"blog/linux/hello_tmux/#tmux","text":"","title":"tmux"},{"location":"blog/linux/hello_tmux/#install","text":"sudo apt install tmux","title":"install"},{"location":"blog/linux/hello_tmux/#config-file","text":"~/.tmux.conf or /etc/tmux.conf ```bash title=\u201dremap prefix from \u2018C-b\u2019 to \u2018C-a\u2019 unbind C-b set-option -g prefix C-a bind-key C-a send-prefix ```bash title=\"close session\" bind C-c kill-session support mouse set -g mouse on","title":"config file"},{"location":"blog/linux/hello_tmux/#like-terminator","text":"split windows to pane resize window navigate panes (need to resolve) terminator short cuts # do like terminator bind -n C-E split-window -h bind -n C-S-Left resize-pane -L 3 bind -n C-S-Right resize-pane -R 3 bind -n C-S-Up resize-pane -U 3 bind -n C-S-Down resize-pane -D 3 bind -n C-O split-window -v # switch panes using Alt-arrow without prefix (not working) bind -n M-Left select -pane -L bind -n M-Right select -pane -R bind -n M-Up select -pane -U bind -n M-Down select -pane -D","title":"like terminator"},{"location":"blog/linux/hello_tmux/#tmuxp","text":"A session manager for tmux","title":"tmuxp"},{"location":"blog/linux/hello_tmux/#install_1","text":"install sudo apt install tmuxp #or pip install --user tmuxp","title":"install"},{"location":"blog/linux/hello_tmux/#config-file_1","text":"session_name list of windows list of panes for every window in windows config.yaml session_name : 2-pane-vertical windows : - window_name : my test window panes : - echo hello - echo hello","title":"config file"},{"location":"blog/linux/hello_tmux/#usage","text":"tmuxp load config.yaml","title":"usage"},{"location":"blog/linux/hello_tmux/#tmux-conf-example","text":"~/.tmux.conf # unbind unbind C-b unbind '\"' unbind % # base1 numbering set -g base-index 1 setw -g pane-base-index 1 #bind ctrl-a as a prefix set-option -g prefix C-a bind-key C-a send-prefix # kill session bind C-c kill-session # mouse set -g mouse on # do like terminator bind -n C-E split-window -h bind -n C-S-Left resize-pane -L 3 bind -n C-S-Right resize-pane -R 3 bind -n C-S-Up resize-pane -U 3 bind -n C-S-Down resize-pane -D 3 bind -n C-O split-window -v # switch panes using Alt-arrow without prefix (not working) bind -n M-Left select -pane -L bind -n M-Right select -pane -R bind -n M-Up select -pane -U bind -n M-Down select -pane -D # Shift arrow to switch windows bind n next-window bind p previous-window bind c new-window -c \"#{pane_current_path}\" bind r source-file ~/.tmux.conf","title":"tmux conf example"},{"location":"blog/linux/minimal_rootfs/","tags":["rootfs","embedded"],"text":"step 1 - minimal root # # debootstrap --arch $ARCH $RELEASE $DIR [$MIRROR] # debootstrap --arch=arm64 focal rootfs debootstrap --arch = arm64 --foreign --verbose focal rootfs ubuntu versions Version code name 22.04 Jammy Jellyfish 20.04 Focal Fossa 1804 Bionic Beaver \u2013foreign: Do the initial unpack phase of bootstrapping only, for example if the target architecture does not match the host architecture. The first stage downloads the needed .deb files and unpacks them into the directory you specify \u2013verbose Produce more info about downloading. second-stage # The second stage runs all of the package configuration scripts, which must be done using the target architecture (or by using qemu-user-static to emulate the target architecture). qemu install sudo apt install qemu-static-user binfmt-support copy into rootfs install -Dm755 $( which qemu-aarch64-static ) rootfs/usr/bin/qemu-aarch64-static mount # bind A bind mount takes an existing directory tree and replicates it under a different point. mount --bind /some/where /else/where Reference # nvidia minimal RootFS Jetson Linux Rolling your own minimal embedded Linux for the Raspberry Pi","title":"Create minimal rootfs for embedded device like jetson nano and rpi"},{"location":"blog/linux/minimal_rootfs/#step-1---minimal-root","text":"# debootstrap --arch $ARCH $RELEASE $DIR [$MIRROR] # debootstrap --arch=arm64 focal rootfs debootstrap --arch = arm64 --foreign --verbose focal rootfs ubuntu versions Version code name 22.04 Jammy Jellyfish 20.04 Focal Fossa 1804 Bionic Beaver \u2013foreign: Do the initial unpack phase of bootstrapping only, for example if the target architecture does not match the host architecture. The first stage downloads the needed .deb files and unpacks them into the directory you specify \u2013verbose Produce more info about downloading.","title":"step 1 - minimal root"},{"location":"blog/linux/minimal_rootfs/#second-stage","text":"The second stage runs all of the package configuration scripts, which must be done using the target architecture (or by using qemu-user-static to emulate the target architecture). qemu install sudo apt install qemu-static-user binfmt-support copy into rootfs install -Dm755 $( which qemu-aarch64-static ) rootfs/usr/bin/qemu-aarch64-static","title":"second-stage"},{"location":"blog/linux/minimal_rootfs/#mount","text":"bind A bind mount takes an existing directory tree and replicates it under a different point. mount --bind /some/where /else/where","title":"mount"},{"location":"blog/linux/minimal_rootfs/#reference","text":"nvidia minimal RootFS Jetson Linux Rolling your own minimal embedded Linux for the Raspberry Pi","title":"Reference"},{"location":"blog/linux/apt/tips/","tags":["apt","linux","tips"],"text":"force override # Force apt-get to overwrite file installed by another package sudo apt-get -o Dpkg::Options::=\"--force-overwrite\" install","title":"apt tips"},{"location":"blog/linux/apt/tips/#force-override","text":"Force apt-get to overwrite file installed by another package sudo apt-get -o Dpkg::Options::=\"--force-overwrite\" install","title":"force override"},{"location":"blog/linux/deb/build_binary_deb_file/","tags":["deb","ubuntu"],"text":"A deb is a standard Unix ar archive that contains your application and other utility files. Internally, a deb package contains a collection of folders that mimics a typical Linux file system, such as /usr , /usr/bin , /opt and so on. A file put in one of those directories will be copied to the same location in the actual file system during installation deb package files follow a specific naming convention <name>_<version>-<revision>_<architecture>.deb Tutorial # #include <iostream> int main ( int argc , char ** argv ){ std :: cout << \"hello debian package\" << std :: endl ; return 0 ; } ```bash tile=\u201dbuild\u201d g++ hello.cpp -o hello ### Create temporary working directory mkdir hello_1.0_1_amd64 mkdir -p hello_1.0_1_amd64/usr/local/bin cp hello hello_1.0_1_amd64/usr/local/bin/ ### control file mkdir hello_1.0_1_amd64/DEBIAN touch hello_1.0_1_amd64/DEBIAN/control ```title=\"DEBIAN/control\" Package: hello Version: 1.0 Architecture: amd64 Maintainer: Internal Pointers Description: A program that greets you. Build # # dpkg-deb --build --root-owner-group <package-dir> dpkg-deb --build --root-owner-group hello hello_1.0_1_amd64 # Test # sudo dpkg -i hello_1.0_1_amd64.deb dpkg -l | grep hello sudo dpkg -r hello scripts # Run scripts before or after package installation and removal script locate in DEBIAN sub folder permission Don\u2019t forget execute permission preinst: before install postinst: post install prerm: before remove postrm: after remove dependencies # Add dependencies to Depends section # from deb tmp folder # create empty debian/control file # use dpkg-shlibdeps to get binary dependencie # Add them to DEBIAN/control Depends section dpkg-shlibdeps -O path/to/binary/file # Reference # Building binary deb packages: a practical guide The Debian Archive","title":"Build binary deb package"},{"location":"blog/linux/deb/build_binary_deb_file/#tutorial","text":"#include <iostream> int main ( int argc , char ** argv ){ std :: cout << \"hello debian package\" << std :: endl ; return 0 ; } ```bash tile=\u201dbuild\u201d g++ hello.cpp -o hello ### Create temporary working directory mkdir hello_1.0_1_amd64 mkdir -p hello_1.0_1_amd64/usr/local/bin cp hello hello_1.0_1_amd64/usr/local/bin/ ### control file mkdir hello_1.0_1_amd64/DEBIAN touch hello_1.0_1_amd64/DEBIAN/control ```title=\"DEBIAN/control\" Package: hello Version: 1.0 Architecture: amd64 Maintainer: Internal Pointers Description: A program that greets you.","title":"Tutorial"},{"location":"blog/linux/deb/build_binary_deb_file/#build","text":"","title":"Build"},{"location":"blog/linux/deb/build_binary_deb_file/#-dpkg-deb---build---root-owner-group-package-dirdpkg-deb---build---root-owner-group-hello-hello_10_1_amd64","text":"","title":"# dpkg-deb --build --root-owner-group &lt;package-dir&gt;\ndpkg-deb --build --root-owner-group hello hello_1.0_1_amd64\n"},{"location":"blog/linux/deb/build_binary_deb_file/#test","text":"sudo dpkg -i hello_1.0_1_amd64.deb dpkg -l | grep hello sudo dpkg -r hello","title":"Test"},{"location":"blog/linux/deb/build_binary_deb_file/#scripts","text":"Run scripts before or after package installation and removal script locate in DEBIAN sub folder permission Don\u2019t forget execute permission preinst: before install postinst: post install prerm: before remove postrm: after remove","title":"scripts"},{"location":"blog/linux/deb/build_binary_deb_file/#dependencies","text":"Add dependencies to Depends section","title":"dependencies"},{"location":"blog/linux/deb/build_binary_deb_file/#-from-deb-tmp-folder-create-empty-debiancontrol-file-use-dpkg-shlibdeps-to-get-binary-dependencie-add-them-to-debiancontrol-depends-sectiondpkg-shlibdeps--o-pathtobinaryfile","text":"","title":"# from deb tmp folder\n# create empty debian/control file\n# use dpkg-shlibdeps to get binary dependencie\n# Add them to DEBIAN/control Depends section\n\ndpkg-shlibdeps -O path/to/binary/file\n"},{"location":"blog/linux/deb/build_binary_deb_file/#reference","text":"Building binary deb packages: a practical guide The Debian Archive","title":"Reference"},{"location":"blog/linux/network_utils/ip_tools/","tags":["ip","ss"],"text":"cheat sheet # ip --brief address show Reference # 12 ss Command Examples to Monitor Network Connections","title":"ip"},{"location":"blog/linux/network_utils/ip_tools/#cheat-sheet","text":"ip --brief address show","title":"cheat sheet"},{"location":"blog/linux/network_utils/ip_tools/#reference","text":"12 ss Command Examples to Monitor Network Connections","title":"Reference"},{"location":"blog/linux/network_utils/ss_vs_netstat_cheat/","tags":["network","ss","netstat"],"text":"Netstat is a command-line network utility used to display network connections for the TCP/UDP and more. ss is a utility used to investigate sockets in Linux and Unix systems. ss netstat List all listening tcp ports and process name ss -tlp netstat -ltp List all listening udp ports and process name ss -tun netstat -lup filter by port number ss -a dst :22 Note Run ss and netstat command with sudo to see process name for ports under 1024","title":"ss vs netstat command cheat sheet"},{"location":"blog/linux/ssh/ssh_config/","tags":["ssh"],"text":"Reference # Using the SSH Config File","title":"ssh config file"},{"location":"blog/linux/ssh/ssh_config/#reference","text":"Using the SSH Config File","title":"Reference"},{"location":"blog/linux/systemd/minimal_service/","tags":["systemd","service"],"text":"User Scope # How to run systemd service run by unprivileged user place the service script in ~/.config/systemd/user run systemctl command with --user argument demo # mkdir -p ~/.config/systemd/user [Unit] Description = My new Service [Service] Type = simple ExecStart = /bin/sh -c 'echo \"hello service\" >> /tmp/my_service.log 2>&1' [Install] WantedBy = default.target systemctl --user enable minimal.service systemctl --user daemon-reload systemctl --user start minimal.service system boot OS run the service at boot time only when we set the WantedBy to default.target systemctl with sudo oneliner # echo <pass> | sudo -S <systemctl command> # Reference # systemd user services and systemctl \u2013user Understanding systemd at startup on Linux","title":"Systemd minimal service"},{"location":"blog/linux/systemd/minimal_service/#user-scope","text":"How to run systemd service run by unprivileged user place the service script in ~/.config/systemd/user run systemctl command with --user argument","title":"User Scope"},{"location":"blog/linux/systemd/minimal_service/#demo","text":"mkdir -p ~/.config/systemd/user [Unit] Description = My new Service [Service] Type = simple ExecStart = /bin/sh -c 'echo \"hello service\" >> /tmp/my_service.log 2>&1' [Install] WantedBy = default.target systemctl --user enable minimal.service systemctl --user daemon-reload systemctl --user start minimal.service system boot OS run the service at boot time only when we set the WantedBy to default.target","title":"demo"},{"location":"blog/linux/systemd/minimal_service/#systemctl-with-sudo-oneliner","text":"","title":"systemctl with sudo oneliner"},{"location":"blog/linux/systemd/minimal_service/#echo-pass--sudo--s-systemctl-command","text":"","title":"echo &lt;pass&gt; | sudo -S &lt;systemctl command&gt;\n"},{"location":"blog/linux/systemd/minimal_service/#reference","text":"systemd user services and systemctl \u2013user Understanding systemd at startup on Linux","title":"Reference"},{"location":"blog/mkdocs/plugins/","tags":["mkdocs","plugins","extensions"],"text":"mkdocs-material # Speak for itself Getting started MkDocs Awesome Pages # The awesome-pages plugin allows you to customize how your pages show up the navigation of your MkDocs without having to configure the full structure in your mkdocs.yml For more info install pip install mkdocs-awesome-pages-plugin yml config plugins: - awesome-pages Usage # Create .pages file in subdirectory to order nav: - subdirectory - page1.md - page2.md Note More examples in project README mkdocs-jupyter # Use Jupyter Notebooks in mkdocs github install pip install mkdocs-jupyter Usage # mkdocs.yml plugins: - mkdocs-jupyter The first h1 header (#) in your notebook will be used as the title. Video # This plugin allows you to embed videos on the documentation pages using a simple Markdown syntax. github install pip install mkdocs-video config # mkdocs.yml plugins: - mkdocs-video usage # ![type:video](https://www.youtube.com/embed/LXb3EKWsInQ)","title":"mkdocs plugins"},{"location":"blog/mkdocs/plugins/#mkdocs-material","text":"Speak for itself Getting started","title":"mkdocs-material"},{"location":"blog/mkdocs/plugins/#mkdocs-awesome-pages","text":"The awesome-pages plugin allows you to customize how your pages show up the navigation of your MkDocs without having to configure the full structure in your mkdocs.yml For more info install pip install mkdocs-awesome-pages-plugin yml config plugins: - awesome-pages","title":"MkDocs Awesome Pages"},{"location":"blog/mkdocs/plugins/#usage","text":"Create .pages file in subdirectory to order nav: - subdirectory - page1.md - page2.md Note More examples in project README","title":"Usage"},{"location":"blog/mkdocs/plugins/#mkdocs-jupyter","text":"Use Jupyter Notebooks in mkdocs github install pip install mkdocs-jupyter","title":"mkdocs-jupyter"},{"location":"blog/mkdocs/plugins/#usage_1","text":"mkdocs.yml plugins: - mkdocs-jupyter The first h1 header (#) in your notebook will be used as the title.","title":"Usage"},{"location":"blog/mkdocs/plugins/#video","text":"This plugin allows you to embed videos on the documentation pages using a simple Markdown syntax. github install pip install mkdocs-video","title":"Video"},{"location":"blog/mkdocs/plugins/#config","text":"mkdocs.yml plugins: - mkdocs-video","title":"config"},{"location":"blog/mkdocs/plugins/#usage_2","text":"![type:video](https://www.youtube.com/embed/LXb3EKWsInQ)","title":"usage"},{"location":"blog/mkdocs/tips/","tags":["mkdocs","tips"],"text":"image size # ![](images/mkdocs.png){width=50} ![](images/mkdocs.png){width=150} image as url link # [![](images/mkdocs.png){width=50}](plugins.md) image align # Text on right side Text on right side Text on right side Text on right side ![](images/mkdocs.png){ align=left width=150} # Table cell with multiple line # using HTML tag <br> | Format | Tag example | | -------- | --------------------------- | | multiline | line1<br>==line2==<br>line3 | Format Tag example multiline line1 line2 line3","title":"mkdocs tips"},{"location":"blog/mkdocs/tips/#image-size","text":"![](images/mkdocs.png){width=50} ![](images/mkdocs.png){width=150}","title":"image size"},{"location":"blog/mkdocs/tips/#image-as-url-link","text":"[![](images/mkdocs.png){width=50}](plugins.md)","title":"image as url link"},{"location":"blog/mkdocs/tips/#image-align","text":"Text on right side Text on right side Text on right side Text on right side","title":"image align"},{"location":"blog/mkdocs/tips/#imagesmkdocspng-alignleft-width150","text":"","title":"![](images/mkdocs.png){ align=left width=150}\n"},{"location":"blog/mkdocs/tips/#table-cell-with-multiple-line","text":"using HTML tag <br> | Format | Tag example | | -------- | --------------------------- | | multiline | line1<br>==line2==<br>line3 | Format Tag example multiline line1 line2 line3","title":"Table cell with multiple line"},{"location":"blog/networking/socat/","tags":["socat","networking"],"text":"install # sudo apt install socat usage # socat [options] <address> <address> check this link for more info socat is a bidirectional stream protocol by default connect two data sources and stream data between them Unidirectional Stream # The -u flag means that the stream of data runs from the first argument to the second argument The -U flag reverse the stream socat -u arg1 arg2 is the same as socat -U arg2 arg1. Reference # socat Cindy Sridharan The socat Command in Linux","title":"SOCAT"},{"location":"blog/networking/socat/#install","text":"sudo apt install socat","title":"install"},{"location":"blog/networking/socat/#usage","text":"socat [options] <address> <address> check this link for more info socat is a bidirectional stream protocol by default connect two data sources and stream data between them","title":"usage"},{"location":"blog/networking/socat/#unidirectional-stream","text":"The -u flag means that the stream of data runs from the first argument to the second argument The -U flag reverse the stream socat -u arg1 arg2 is the same as socat -U arg2 arg1.","title":"Unidirectional Stream"},{"location":"blog/networking/socat/#reference","text":"socat Cindy Sridharan The socat Command in Linux","title":"Reference"},{"location":"blog/networking/socat/serial/","tags":["socat","serial"],"text":"demo # # server (udp-serial) socat -d -d -d udp-listen:1234 open:/dev/ttyUSB0,raw,nonblock,waitlock = /tmp/s0.lock,echo = 0 ,b115200,crnl # client socat - UDP:127.0.0.1:1234 socat -d -d -d UDP-RECVFROM:1234,fork open:/dev/ttyUSB0,raw,nonblock,waitlock = /tmp/s0.lock,echo = 0 ,b115200,crnl Note TTY ports are direct connections to the computer such as a keyboard/mouse or a serial connection to the device. PTS connections are SSH connections or telnet connections Difference between /dev/tty and /dev/pts (tty vs pts) in Linux serial echo server # server socat -d -d pty,raw,echo = 0 exec: '/bin/cat' ,pty,raw,echo = 0 # output N PTY is /dev/pts/6 socat [ 117907 ] N forking off child, using pty for reading and writing socat [ 117907 ] N forked off child process 117908 socat [ 117907 ] N forked off child process 117908 socat [ 117907 ] N starting data transfer loop with FDs [ 5 ,5 ] and [ 7 ,7 ] socat [ 117908 ] N execvp ' ing \"/bin/cat\" client socat - /dev/pts/6","title":"SOCAT serial"},{"location":"blog/networking/socat/serial/#demo","text":"# server (udp-serial) socat -d -d -d udp-listen:1234 open:/dev/ttyUSB0,raw,nonblock,waitlock = /tmp/s0.lock,echo = 0 ,b115200,crnl # client socat - UDP:127.0.0.1:1234 socat -d -d -d UDP-RECVFROM:1234,fork open:/dev/ttyUSB0,raw,nonblock,waitlock = /tmp/s0.lock,echo = 0 ,b115200,crnl Note TTY ports are direct connections to the computer such as a keyboard/mouse or a serial connection to the device. PTS connections are SSH connections or telnet connections Difference between /dev/tty and /dev/pts (tty vs pts) in Linux","title":"demo"},{"location":"blog/networking/socat/serial/#serial-echo-server","text":"server socat -d -d pty,raw,echo = 0 exec: '/bin/cat' ,pty,raw,echo = 0 # output N PTY is /dev/pts/6 socat [ 117907 ] N forking off child, using pty for reading and writing socat [ 117907 ] N forked off child process 117908 socat [ 117907 ] N forked off child process 117908 socat [ 117907 ] N starting data transfer loop with FDs [ 5 ,5 ] and [ 7 ,7 ] socat [ 117908 ] N execvp ' ing \"/bin/cat\" client socat - /dev/pts/6","title":"serial echo server"},{"location":"blog/networking/socat/udp/","tags":["socat","udp"],"text":"Connected vs unconnected # UDP sockets can be \u201cconnected\u201d (or \u201cestablished\u201d) or \u201cunconnected\u201d. - Connected sockets have a full 4-tuple associated {source ip, source port, destination ip, destination port} - Unconnected sockets have 2-tuple {bind ip, bind port}. unconnected # server socat UDP-RECV:1234 - client socat STDIO udp-sendto:127.0.0.1:1234 Connection established only when data send ss -panu sport = :1234 or dport = :1234 | cat State Recv-Q Send-Q Local Address:Port Peer Address:Port Process UNCONN 0 0 0.0.0.0:1234 0.0.0.0:* users:((\"socat\",pid=144971,fd=5)) Demo: Test connected server # server socat UDP-RECV:1234 - client 1 socat STDIO udp-sendto:127.0.0.1:1234 # send data client 2 socat STDIO udp-sendto:127.0.0.1:1234 # send data connected # server socat udp-l:1234 - client socat STDIO udp:127.0.0.1:1234 Connection established when call connect ss -panu sport = :1234 or dport = :1234 | cat State Recv-Q Send-Q Local Address:Port Peer Address:Port Process ESTAB 0 0 127.0.0.1:47917 127.0.0.1:1234 users:((\"socat\",pid=144636,fd=5)) UNCONN 0 0 0.0.0.0:1234 0.0.0.0:* users:((\"socat\",pid=144633,fd=5)) Demo: Test connected server # Establish server Client Connect Second client connect and try send data server socat udp-l:1234 - client 1 socat STDIO udp:127.0.0.1:1234 # send data client 2 socat STDIO udp:127.0.0.1:1234 # 2022 /06/28 21 :42:56 socat [ 145414 ] E read ( 5 , 0x556853768010, 8192 ) : Connection refused echo server # terminal1 - server # udp server socat -v udp-l:1234,fork exec: '/bin/cat' terminal1 - client nc -u 127 .0.0.1 1234 # or socat - udp:127.0.0.1:1234 Broadcasting / Multicasting / Unicasting # Broadcasting # server / listener socat udp-recv:1234 - client socat - UDP-DATAGRAM:192.168.1.255:1234,broadcast,sp = 11111 # tcpdump sudo tcpdump -n -i <eth_name> udp 192 .168.1.207.11111 > 192 .168.1.255.1234: UDP, length 3 summary # # connected # server socat STDIO UDP-LISTEN:11111 # client socat - UDP:localhost:11111 # unconnected # server socat UDP-RECV:11111 STDOUT # client socat STDIN UDP-SENDTO:127.0.0.1:11111 # Server socat UDP-RECVFROM:11111,fork STDOUT Reference # Everything you ever wanted to know about UDP sockets but were afraid to ask, part 1 socat udp So much UDP that it is all over you screen","title":"SOCAT udp"},{"location":"blog/networking/socat/udp/#connected-vs-unconnected","text":"UDP sockets can be \u201cconnected\u201d (or \u201cestablished\u201d) or \u201cunconnected\u201d. - Connected sockets have a full 4-tuple associated {source ip, source port, destination ip, destination port} - Unconnected sockets have 2-tuple {bind ip, bind port}.","title":"Connected vs unconnected"},{"location":"blog/networking/socat/udp/#unconnected","text":"server socat UDP-RECV:1234 - client socat STDIO udp-sendto:127.0.0.1:1234 Connection established only when data send ss -panu sport = :1234 or dport = :1234 | cat State Recv-Q Send-Q Local Address:Port Peer Address:Port Process UNCONN 0 0 0.0.0.0:1234 0.0.0.0:* users:((\"socat\",pid=144971,fd=5))","title":"unconnected"},{"location":"blog/networking/socat/udp/#demo-test-connected-server","text":"server socat UDP-RECV:1234 - client 1 socat STDIO udp-sendto:127.0.0.1:1234 # send data client 2 socat STDIO udp-sendto:127.0.0.1:1234 # send data","title":"Demo: Test connected server"},{"location":"blog/networking/socat/udp/#connected","text":"server socat udp-l:1234 - client socat STDIO udp:127.0.0.1:1234 Connection established when call connect ss -panu sport = :1234 or dport = :1234 | cat State Recv-Q Send-Q Local Address:Port Peer Address:Port Process ESTAB 0 0 127.0.0.1:47917 127.0.0.1:1234 users:((\"socat\",pid=144636,fd=5)) UNCONN 0 0 0.0.0.0:1234 0.0.0.0:* users:((\"socat\",pid=144633,fd=5))","title":"connected"},{"location":"blog/networking/socat/udp/#demo-test-connected-server_1","text":"Establish server Client Connect Second client connect and try send data server socat udp-l:1234 - client 1 socat STDIO udp:127.0.0.1:1234 # send data client 2 socat STDIO udp:127.0.0.1:1234 # 2022 /06/28 21 :42:56 socat [ 145414 ] E read ( 5 , 0x556853768010, 8192 ) : Connection refused","title":"Demo: Test connected server"},{"location":"blog/networking/socat/udp/#echo-server","text":"terminal1 - server # udp server socat -v udp-l:1234,fork exec: '/bin/cat' terminal1 - client nc -u 127 .0.0.1 1234 # or socat - udp:127.0.0.1:1234","title":"echo server"},{"location":"blog/networking/socat/udp/#broadcasting--multicasting---unicasting","text":"","title":"Broadcasting / Multicasting  / Unicasting"},{"location":"blog/networking/socat/udp/#broadcasting","text":"server / listener socat udp-recv:1234 - client socat - UDP-DATAGRAM:192.168.1.255:1234,broadcast,sp = 11111 # tcpdump sudo tcpdump -n -i <eth_name> udp 192 .168.1.207.11111 > 192 .168.1.255.1234: UDP, length 3","title":"Broadcasting"},{"location":"blog/networking/socat/udp/#summary","text":"# connected # server socat STDIO UDP-LISTEN:11111 # client socat - UDP:localhost:11111 # unconnected # server socat UDP-RECV:11111 STDOUT # client socat STDIN UDP-SENDTO:127.0.0.1:11111 # Server socat UDP-RECVFROM:11111,fork STDOUT","title":"summary"},{"location":"blog/networking/socat/udp/#reference","text":"Everything you ever wanted to know about UDP sockets but were afraid to ask, part 1 socat udp So much UDP that it is all over you screen","title":"Reference"},{"location":"blog/networking/tc/adding_latency_and_limiting_bandwidth/","tags":["tc","networking","linux"],"text":"HTB help you to control the use of the outbound bandwidth on a given link ping 8.8.8.8 PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data. 64 bytes from 8.8.8.8: icmp_seq=1 ttl=115 time=67.2 ms 64 bytes from 8.8.8.8: icmp_seq=2 ttl=115 time=67.6 ms INTERFACE = wlo1 IP = 8 .8.8.8/32 sudo tc qdisc add dev $INTERFACE root handle 1 :0 htb default 10 # class sudo tc class add dev $INTERFACE parent 1 :0 classid 1 :10 htb rate 1024mbit # latency sudo tc qdisc add dev $INTERFACE parent 1 :10 handle 10 :0 netem delay 200ms # filter sudo tc filter add dev $INTERFACE protocol ip parent 1 :0 prio 1 u32 match ip dst $IP flowid 1 :10 result # ping 8.8.8.8 ping 8 .8.8.8 PING 8 .8.8.8 ( 8 .8.8.8 ) 56 ( 84 ) bytes of data. 64 bytes from 8 .8.8.8: icmp_seq = 1 ttl = 115 time = 267 ms 64 bytes from 8 .8.8.8: icmp_seq = 2 ttl = 115 time = 267 ms 64 bytes from 8 .8.8.8: icmp_seq = 3 ttl = 115 time = 268 ms # ping google.com # resolve domain with dig `dig google.com` ping 142 .250.186.46 PING 142 .250.186.46 ( 142 .250.186.46 ) 56 ( 84 ) bytes of data. 64 bytes from 142 .250.186.46: icmp_seq = 1 ttl = 114 time = 84 .4 ms 64 bytes from 142 .250.186.46: icmp_seq = 2 ttl = 114 time = 80 .7 ms 64 bytes from 142 .250.186.46: icmp_seq = 3 ttl = 114 time = 82 .6 ms remove sudo tc qdisc del dev $INTERFACE root Reference # Adding Latency and Limiting Bandwidth","title":"Adding Latency and Limiting Bandwidth"},{"location":"blog/networking/tc/adding_latency_and_limiting_bandwidth/#reference","text":"Adding Latency and Limiting Bandwidth","title":"Reference"},{"location":"blog/networking/udp/big_packet_and_mtu/","tags":["udp","mtu"],"text":"Code demo # udp #!/usr/bin/env python3 import socket # Inlined constants, because Python 3.6 has dropped the IN module. class IN : IP_MTU = 14 IP_MTU_DISCOVER = 10 IP_PMTUDISC_DO = 2 def send_big_datagram ( host , port ): sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) # sock.setsockopt(socket.IPPROTO_IP, IN.IP_MTU_DISCOVER, IN.IP_PMTUDISC_DO) sock . connect (( host , port )) try : sock . send ( b '#' * 1500 ) except socket . error as e : print ( e ) print ( 'Alas, the datagram did not make it' ) max_mtu = sock . getsockopt ( socket . IPPROTO_IP , IN . IP_MTU ) print ( 'Actual MTU: {} ' . format ( max_mtu )) else : print ( 'The big datagram was sent!' ) if __name__ == '__main__' : send_big_datagram ( \"172.17.0.2\" , 1060 ) Test # Create ubuntu docker image with tcpdump and netcat FROM ubuntu:20.04 RUN apt-get update && apt-get install --no-install-recommends --yes \\ tcpdump \\ net-tools \\ netcat CMD [\"/bin/sh\"] Test 1: Test 123 # Run docker image Run tcpdump and sniff for icmp Send ping from host machine tcpdump -n -i eth0 icmp Test 2: send udp packet less then MTU # docker shell1 tcpdump -n -i eth0 udp and port 1060 or icmp docker shell2 nc -ul 1060 Test 3: send udp packet bigger then MTU # Run tcpdump and nc like in Test 2 send with sock.setsockopt(socket.IPPROTO_IP, IN.IP_MTU_DISCOVER, IN.IP_PMTUDISC_DO) comment the above line with IP_PMTUDISC_DO python examples/python/networking/udp/big_Sender.py # result [ Errno 90 ] Message too long Alas, the datagram did not make it Actual MTU: 1500 # packet not send at all without setsockopt python examples/python/networking/udp/big_Sender.py # Host Result The big datagram was sent! # shell 1: tcpdump 19 :11:06.400842 IP 172 .17.0.1.47327 > 172 .17.0.2.1060: UDP, bad length 1500 > 1472 # shell 2: nc show 1500 char of '#' 19:14:46.502573 IP 172.17.0.2.1060 > 172.17.0.1.48321: UDP, length 1 19:14:46.502686 IP 172.17.0.1 > 172.17.0.2: ICMP 172.17.0.1 udp port 48321 unreachable, length 37 19:14:51.960248 IP 172.17.0.1.58025 > 172.17.0.2.1060: UDP, bad length 1500 > 1472","title":"udp big packet and MTU"},{"location":"blog/networking/udp/big_packet_and_mtu/#code-demo","text":"udp #!/usr/bin/env python3 import socket # Inlined constants, because Python 3.6 has dropped the IN module. class IN : IP_MTU = 14 IP_MTU_DISCOVER = 10 IP_PMTUDISC_DO = 2 def send_big_datagram ( host , port ): sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) # sock.setsockopt(socket.IPPROTO_IP, IN.IP_MTU_DISCOVER, IN.IP_PMTUDISC_DO) sock . connect (( host , port )) try : sock . send ( b '#' * 1500 ) except socket . error as e : print ( e ) print ( 'Alas, the datagram did not make it' ) max_mtu = sock . getsockopt ( socket . IPPROTO_IP , IN . IP_MTU ) print ( 'Actual MTU: {} ' . format ( max_mtu )) else : print ( 'The big datagram was sent!' ) if __name__ == '__main__' : send_big_datagram ( \"172.17.0.2\" , 1060 )","title":"Code demo"},{"location":"blog/networking/udp/big_packet_and_mtu/#test","text":"Create ubuntu docker image with tcpdump and netcat FROM ubuntu:20.04 RUN apt-get update && apt-get install --no-install-recommends --yes \\ tcpdump \\ net-tools \\ netcat CMD [\"/bin/sh\"]","title":"Test"},{"location":"blog/networking/udp/big_packet_and_mtu/#test-1-test-123","text":"Run docker image Run tcpdump and sniff for icmp Send ping from host machine tcpdump -n -i eth0 icmp","title":"Test 1: Test 123"},{"location":"blog/networking/udp/big_packet_and_mtu/#test-2-send-udp-packet-less-then-mtu","text":"docker shell1 tcpdump -n -i eth0 udp and port 1060 or icmp docker shell2 nc -ul 1060","title":"Test 2: send udp packet less then MTU"},{"location":"blog/networking/udp/big_packet_and_mtu/#test-3-send-udp-packet-bigger-then-mtu","text":"Run tcpdump and nc like in Test 2 send with sock.setsockopt(socket.IPPROTO_IP, IN.IP_MTU_DISCOVER, IN.IP_PMTUDISC_DO) comment the above line with IP_PMTUDISC_DO python examples/python/networking/udp/big_Sender.py # result [ Errno 90 ] Message too long Alas, the datagram did not make it Actual MTU: 1500 # packet not send at all without setsockopt python examples/python/networking/udp/big_Sender.py # Host Result The big datagram was sent! # shell 1: tcpdump 19 :11:06.400842 IP 172 .17.0.1.47327 > 172 .17.0.2.1060: UDP, bad length 1500 > 1472 # shell 2: nc show 1500 char of '#' 19:14:46.502573 IP 172.17.0.2.1060 > 172.17.0.1.48321: UDP, length 1 19:14:46.502686 IP 172.17.0.1 > 172.17.0.2: ICMP 172.17.0.1 udp port 48321 unreachable, length 37 19:14:51.960248 IP 172.17.0.1.58025 > 172.17.0.2.1060: UDP, bad length 1500 > 1472","title":"Test 3: send udp packet bigger then MTU"},{"location":"blog/networking/udp/multi_port_udp_server/","tags":["udp","select"],"text":"multiport import socket import select sockets = [] for port in range ( 1234 , 1236 ): server_socket = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) server_socket . bind (( '0.0.0.0' , port )) sockets . append ( server_socket ) empty = [] while True : readable , writable , exceptional = select . select ( sockets , empty , empty ) for s in readable : ( client_data , client_address ) = s . recvfrom ( 1024 ) print ( client_address , client_data ) s . sendto ( client_data , client_address ) for s in sockets : s . close ()","title":"multi port udp server"},{"location":"blog/robotics/control/","tags":["robotics"],"text":"Reference # 41013 Robotics Fundamentals of Robotics","title":"Robotics"},{"location":"blog/robotics/control/#reference","text":"41013 Robotics Fundamentals of Robotics","title":"Reference"},{"location":"blog/robotics/control/kalman_filter/michel_van_biezen_course/","tags":["kalman","filter"],"text":"Michel van biezen Kalman filter course Kalman filter is an iterative math process that use a set of equations and consecutive data input to quickly ESTIMATE the True value of the object begin measured when the measure values contain random error / uncertainty / variation Single measured value #","title":"The Kalman Filter"},{"location":"blog/robotics/control/kalman_filter/michel_van_biezen_course/#single-measured-value","text":"","title":"Single measured value"},{"location":"blog/robotics/control/pid/hello_pid/","tags":["control","pid","101"],"text":"Reference # Intro to Control Theory","title":"Hello PID"},{"location":"blog/robotics/control/pid/hello_pid/#reference","text":"Intro to Control Theory","title":"Reference"},{"location":"blog/vscode/dev_container/","tags":["vscode","dev"],"text":"References # install vscode server","title":"VSCode dev-containers"},{"location":"blog/vscode/dev_container/#references","text":"install vscode server","title":"References"},{"location":"blog/vscode/extensions/","tags":["vscode","plugins","extensions"],"text":"DrawIO # This unofficial extension integrates Draw.io into VS Code. just create new file named my_image.drawio.png or my_image.drawio.svg VSCode marketplace Luna Paint # Luna Paint is a VS Code extension that lets you edit raster images from within the editor, just open an image from the explorer and start editing like any other file. VSCode marketplace PlantUML # PlantUML is an open-source tool allowing users to create diagrams from a plain text language PlantUML in a nutshell install java graphviz # sudo apt install graphviz vscode settings \"plantuml.diagramsRoot\" : \"docs/diagrams/src\" , \"plantuml.exportOutDir\" : \"docs/diagrams/out\" , \"plantuml.render\" : \"Local\" usage # Alt-D Preview current diagram Create diagrams/out and diagrams/src folder under docs subfolder Use Export current diagram command to convert diagram to png","title":"VSCode extensions"},{"location":"blog/vscode/extensions/#drawio","text":"This unofficial extension integrates Draw.io into VS Code. just create new file named my_image.drawio.png or my_image.drawio.svg VSCode marketplace","title":"DrawIO"},{"location":"blog/vscode/extensions/#luna-paint","text":"Luna Paint is a VS Code extension that lets you edit raster images from within the editor, just open an image from the explorer and start editing like any other file. VSCode marketplace","title":"Luna Paint"},{"location":"blog/vscode/extensions/#plantuml","text":"PlantUML is an open-source tool allowing users to create diagrams from a plain text language PlantUML in a nutshell install java graphviz # sudo apt install graphviz vscode settings \"plantuml.diagramsRoot\" : \"docs/diagrams/src\" , \"plantuml.exportOutDir\" : \"docs/diagrams/out\" , \"plantuml.render\" : \"Local\"","title":"PlantUML"},{"location":"blog/vscode/extensions/#usage","text":"Alt-D Preview current diagram Create diagrams/out and diagrams/src folder under docs subfolder Use Export current diagram command to convert diagram to png","title":"usage"},{"location":"blog/vscode/tips/","tags":["vscode","tips"],"text":"Wrap selection # using snippet use case # Add mkdocs text highlight on selection snippet \"mk_text_highlight\" : { \"prefix\" : \"mk_h\" , \"body\" : [ \"==${TM_SELECTED_TEXT}==\" ], \"description\" : \"highlight text\" } Add shortcut keyboard shortcut { \"key\" : \"ctrl+h\" , \"command\" : \"editor.action.insertSnippet\" , \"when\" : \"editorTextFocus\" , \"args\" : { \"name\" : \"mk_text_highlight\" , \"langId\" : \"markdown\" } } XML Region # <!-- #region --> ... <!-- #endregion -->","title":"VSCode tips"},{"location":"blog/vscode/tips/#wrap-selection","text":"using snippet","title":"Wrap selection"},{"location":"blog/vscode/tips/#use-case","text":"Add mkdocs text highlight on selection snippet \"mk_text_highlight\" : { \"prefix\" : \"mk_h\" , \"body\" : [ \"==${TM_SELECTED_TEXT}==\" ], \"description\" : \"highlight text\" } Add shortcut keyboard shortcut { \"key\" : \"ctrl+h\" , \"command\" : \"editor.action.insertSnippet\" , \"when\" : \"editorTextFocus\" , \"args\" : { \"name\" : \"mk_text_highlight\" , \"langId\" : \"markdown\" } }","title":"use case"},{"location":"blog/vscode/tips/#xml-region","text":"<!-- #region --> ... <!-- #endregion -->","title":"XML Region"},{"location":"blog/vscode/todo/","tags":["vscode","todo","vscode-ext"],"text":"Priority: (A) capital letter first in line Project: +project anywhere in line non-whitespace Context: @context anywhere in line non-whitespace tag: key:value x as first character mark task completion github todo primer VSCode ext # Commands and decorators for managing todo.txt files marketplace Note ctrl+shift+x: Toggle completion References # todotxt todo spec vscode todotxt-mode","title":"todo.txt"},{"location":"blog/vscode/todo/#vscode-ext","text":"Commands and decorators for managing todo.txt files marketplace Note ctrl+shift+x: Toggle completion","title":"VSCode ext"},{"location":"blog/vscode/todo/#references","text":"todotxt todo spec vscode todotxt-mode","title":"References"},{"location":"blog/vscode/yaml_json_schema/","tags":["json","yaml","json","schema","vscode"],"text":"VSCode has the ability to display autocomplete suggestions for JSON and YAML format out of the box. It\u2019s use JSON schema to do it JSON Schema # JSON Schema is a specification that allows you to describe the structure of a JSON document and validate documents against that schema. VSCode # Install YAML red hat settings # \"yaml.schemas\" : { \"<shema file location>.json\" : \"<file useage by schema>.yaml\" , \"<shema file location>.json\" : \"<file useage by schema>.json\" }, References # How to create your own auto-completion for JSON and YAML files on VS Code with the help of JSON Schema","title":"yaml json files and json-schema"},{"location":"blog/vscode/yaml_json_schema/#json-schema","text":"JSON Schema is a specification that allows you to describe the structure of a JSON document and validate documents against that schema.","title":"JSON Schema"},{"location":"blog/vscode/yaml_json_schema/#vscode","text":"Install YAML red hat","title":"VSCode"},{"location":"blog/vscode/yaml_json_schema/#settings","text":"\"yaml.schemas\" : { \"<shema file location>.json\" : \"<file useage by schema>.yaml\" , \"<shema file location>.json\" : \"<file useage by schema>.json\" },","title":"settings"},{"location":"blog/vscode/yaml_json_schema/#references","text":"How to create your own auto-completion for JSON and YAML files on VS Code with the help of JSON Schema","title":"References"},{"location":"blog/yocto/part1_hello_yocto/","tags":["yocto","101"],"text":"Elements of embedded linux # Toolchain: Compiler and other tools needed to build code for target device Bootloader: The program that init the board and load the linux kernel Kernel Root F.S: Contain all programs and libraries for our system Yocto # Yocto project provide tools for create custom linux distributions for any H.W Poky # Poky is a reference/example linux distribution create by yocto The poky repository is an aggregation of several repositories: - openembedded-core - bitbake - meta-poky - yocto-docs Poky = Bitback + Metadata Note Yocto is a origination like canonical Poky is like ubuntu Note the \u2018meta\u2019 folder in the poky repository corresponds to the Openembedded Core layer, e.g. https://git.openembedded.org/openembedded-core/. OE Core includes the main components/recipes that are widely used for any configuration. Metadata # Build instructions From where obtain sources Changes / additions to sources Metadata in yocto is collection of - configuration file (.conf) - Recipes (.bb and .bbappend) - Class (.bbclass) - Includes (.inc) Note he \u2018meta-oe\u2019 folder in meta-openembedded is another layer typically called the \u2018openembedded\u2019 layer. meta-oe contains a large amount of additional recipes. Bitback # Task scheduler BSP: Board Support Package # BSP is collection of information that defines how to support particular HW HW futures Kernel configuration Additional S.W Note poky support by default x86, x86-64, BeagleBone devices (has BSP for each H.W type) Reference # udemy yocto","title":"Part1 - Yocto tutorial"},{"location":"blog/yocto/part1_hello_yocto/#elements-of-embedded-linux","text":"Toolchain: Compiler and other tools needed to build code for target device Bootloader: The program that init the board and load the linux kernel Kernel Root F.S: Contain all programs and libraries for our system","title":"Elements of embedded linux"},{"location":"blog/yocto/part1_hello_yocto/#yocto","text":"Yocto project provide tools for create custom linux distributions for any H.W","title":"Yocto"},{"location":"blog/yocto/part1_hello_yocto/#poky","text":"Poky is a reference/example linux distribution create by yocto The poky repository is an aggregation of several repositories: - openembedded-core - bitbake - meta-poky - yocto-docs Poky = Bitback + Metadata Note Yocto is a origination like canonical Poky is like ubuntu Note the \u2018meta\u2019 folder in the poky repository corresponds to the Openembedded Core layer, e.g. https://git.openembedded.org/openembedded-core/. OE Core includes the main components/recipes that are widely used for any configuration.","title":"Poky"},{"location":"blog/yocto/part1_hello_yocto/#metadata","text":"Build instructions From where obtain sources Changes / additions to sources Metadata in yocto is collection of - configuration file (.conf) - Recipes (.bb and .bbappend) - Class (.bbclass) - Includes (.inc) Note he \u2018meta-oe\u2019 folder in meta-openembedded is another layer typically called the \u2018openembedded\u2019 layer. meta-oe contains a large amount of additional recipes.","title":"Metadata"},{"location":"blog/yocto/part1_hello_yocto/#bitback","text":"Task scheduler","title":"Bitback"},{"location":"blog/yocto/part1_hello_yocto/#bsp-board-support-package","text":"BSP is collection of information that defines how to support particular HW HW futures Kernel configuration Additional S.W Note poky support by default x86, x86-64, BeagleBone devices (has BSP for each H.W type)","title":"BSP: Board Support Package"},{"location":"blog/yocto/part1_hello_yocto/#reference","text":"udemy yocto","title":"Reference"},{"location":"blog/yocto/part2_hello_poky/","tags":["yocto","poky","101"],"text":"init environment # # from poky folder source oe-init-build-env <location of build folder> create folder and files under chosen build location local.conf bblayers.conf Build # Building custom linux distribution # bitbake <image name> bitbake core-image-minimal Fix If bitbake failed to resolve URI set CONNECTIVITY_CHECK_URIS field in conf/local.conf ```bash title=\u201dso 52395512\u201d check connectivity using google # CONNECTIVITY_CHECK_URIS = \u201chttps://www.google.com/\u201d skip connectivity checks # CONNECTIVITY_CHECK_URIS = \u201c\u201d ```","title":"Part2 - Yocto tutorial"},{"location":"blog/yocto/part2_hello_poky/#init-environment","text":"# from poky folder source oe-init-build-env <location of build folder> create folder and files under chosen build location local.conf bblayers.conf","title":"init environment"},{"location":"blog/yocto/part2_hello_poky/#build","text":"Building custom linux distribution # bitbake <image name> bitbake core-image-minimal Fix If bitbake failed to resolve URI set CONNECTIVITY_CHECK_URIS field in conf/local.conf ```bash title=\u201dso 52395512\u201d","title":"Build"},{"location":"blog/yocto/part2_hello_poky/#check-connectivity-using-google","text":"CONNECTIVITY_CHECK_URIS = \u201chttps://www.google.com/\u201d","title":"check connectivity using google"},{"location":"blog/yocto/part2_hello_poky/#skip-connectivity-checks","text":"CONNECTIVITY_CHECK_URIS = \u201c\u201d ```","title":"skip connectivity checks"},{"location":"blog/yocto/part3_run_qemu/","tags":["yocto","qemu","101"],"text":"runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-20220406114623.qemuboot.conf runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-20220406114623.qemuboot.conf nographic Note quit QEMU nographic mode by press ctrl-a then x","title":"Part3 - Yocto tutorial"},{"location":"blog/yocto/part4_add_ssh/","tags":["yocto","qemu","101"],"text":"Yocto project tree # meta-external meta-openembedded poky meta-external share git project across multiple yocto project Help git submodule git submodule add git submodule update \u2013init \u2013recursive meta-external # Collection of yocto git repositories from git meta-openembedded git submodule add https://github.com/openembedded/meta-openembedded.git layers # Add layers to bblayers.conf file bitbake-layers show-layers NOTE: Starting bitbake server... layer path priority ========================================================================== meta /home/user/yocto/poky/meta 5 meta-poky /home/user/yocto/poky/meta-poky 5 meta-yocto-bsp /home/user/yocto/poky/meta-yocto-bsp 5 meta-oe /home/user/yocto/meta-external/meta-openembedded/meta-oe 6 meta-python /home/user/yocto/meta-external/meta-openembedded/meta-python 7 Add dropbear ssh # OpenEmbedded # Search for dropbear recipe in openembedded Layer index Check openembedded-core is part of poky meta ? Yes I found dropbear under meta/recipes-core/dropbear setup # Add to local.conf append to local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear\" Note IMAGE_INSTALL is the variable that controls what is included in any image. CORE_IMAGE_EXTRA_INSTALL is a convenience variable that enable you to add extra packages to an image based on the core-image class Create image # # from build folder bitbake core-image-minimal Check # # under build folder ll tmp/work/qemux86_64-poky-linux/core-image-minimal/1.0-r0/rootfs/usr/sbin/dropbear run image with qemu # run image runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-<build number>.qemuboot.conf nographic check dropbear is running ps | grep drop 259 root 3020 S /usr/sbin/dropbear -r /etc/dropbear/dropbear_rsa_host_key -p 22 -B 293 root 4224 S grep drop ssh from host # ssh root@192.168.7.2 check recipe location # bitbake -e dropbear | grep ^FILE = # Result FILE = \"/home/user/yocto/poky/meta/recipes-core/dropbear/dropbear_2020.81.bb\" # Add python3 # Search recipe Show recipe more info setup # Add to local.conf append to local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear python3\" check recipe location # bitbake -e python3 | grep ^FILE = FILE = \"/home/user/yocto/poky/meta/recipes-devtools/python/python3_3.9.9.bb\" Create image # # from build folder bitbake core-image-minimal","title":"Part4 - Yocto tutorial"},{"location":"blog/yocto/part4_add_ssh/#yocto-project-tree","text":"meta-external meta-openembedded poky meta-external share git project across multiple yocto project Help git submodule git submodule add git submodule update \u2013init \u2013recursive","title":"Yocto project tree"},{"location":"blog/yocto/part4_add_ssh/#meta-external","text":"Collection of yocto git repositories from git meta-openembedded git submodule add https://github.com/openembedded/meta-openembedded.git","title":"meta-external"},{"location":"blog/yocto/part4_add_ssh/#layers","text":"Add layers to bblayers.conf file bitbake-layers show-layers NOTE: Starting bitbake server... layer path priority ========================================================================== meta /home/user/yocto/poky/meta 5 meta-poky /home/user/yocto/poky/meta-poky 5 meta-yocto-bsp /home/user/yocto/poky/meta-yocto-bsp 5 meta-oe /home/user/yocto/meta-external/meta-openembedded/meta-oe 6 meta-python /home/user/yocto/meta-external/meta-openembedded/meta-python 7","title":"layers"},{"location":"blog/yocto/part4_add_ssh/#add-dropbear-ssh","text":"","title":"Add dropbear ssh"},{"location":"blog/yocto/part4_add_ssh/#openembedded","text":"Search for dropbear recipe in openembedded Layer index Check openembedded-core is part of poky meta ? Yes I found dropbear under meta/recipes-core/dropbear","title":"OpenEmbedded"},{"location":"blog/yocto/part4_add_ssh/#setup","text":"Add to local.conf append to local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear\" Note IMAGE_INSTALL is the variable that controls what is included in any image. CORE_IMAGE_EXTRA_INSTALL is a convenience variable that enable you to add extra packages to an image based on the core-image class","title":"setup"},{"location":"blog/yocto/part4_add_ssh/#create-image","text":"# from build folder bitbake core-image-minimal","title":"Create image"},{"location":"blog/yocto/part4_add_ssh/#check","text":"# under build folder ll tmp/work/qemux86_64-poky-linux/core-image-minimal/1.0-r0/rootfs/usr/sbin/dropbear","title":"Check"},{"location":"blog/yocto/part4_add_ssh/#run-image-with-qemu","text":"run image runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-<build number>.qemuboot.conf nographic check dropbear is running ps | grep drop 259 root 3020 S /usr/sbin/dropbear -r /etc/dropbear/dropbear_rsa_host_key -p 22 -B 293 root 4224 S grep drop","title":"run image with qemu"},{"location":"blog/yocto/part4_add_ssh/#ssh-from-host","text":"ssh root@192.168.7.2","title":"ssh from host"},{"location":"blog/yocto/part4_add_ssh/#check-recipe-location","text":"","title":"check recipe location"},{"location":"blog/yocto/part4_add_ssh/#bitbake--e-dropbear--grep-file-resultfilehomeuseryoctopokymetarecipes-coredropbeardropbear_202081bb","text":"","title":"bitbake -e dropbear | grep ^FILE=\n# Result\nFILE=&quot;/home/user/yocto/poky/meta/recipes-core/dropbear/dropbear_2020.81.bb&quot;\n"},{"location":"blog/yocto/part4_add_ssh/#add-python3","text":"Search recipe Show recipe more info","title":"Add python3"},{"location":"blog/yocto/part4_add_ssh/#setup_1","text":"Add to local.conf append to local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear python3\"","title":"setup"},{"location":"blog/yocto/part4_add_ssh/#check-recipe-location_1","text":"bitbake -e python3 | grep ^FILE = FILE = \"/home/user/yocto/poky/meta/recipes-devtools/python/python3_3.9.9.bb\"","title":"check recipe location"},{"location":"blog/yocto/part4_add_ssh/#create-image_1","text":"# from build folder bitbake core-image-minimal","title":"Create image"},{"location":"blog/yocto/part5-terminology/","tags":["yocto","101"],"text":"Recipe # A recipe is a set of instructions that is read and processed by the bitbake (file with .bb extension) A recipe describes: - Where to fetch source code - Which patch to apply - Configuration options - Compile options - Install - License Configuration # Tell the build system what to build and put into the image (file with .conf extension) Types # Machine configuration option Distribution option Compiler tuning options General Common configuration options User options (local.conf) Example machine config # User local.conf we set the machine for example MACHINE ??= \"qemux86-64\" This setting tell the system to load machine configuration option meta/conf/machine/qemux86-64.conf Class # Class files are used to share common functionality across recipes (file with .bbclsss extension) Note classes useally locate in classes directory inside the meta* directory usage from recipe # inherit classname Layers # A collection of related recipes. layer isolate meta data according to functionality recipes are folders under layer folder Note name convention for layer meta-layername name description meta-poky Distro metadata meta-yocto-bsp BSP metadata BBLAYERS variable present in build/conf/bblayers.conf show layers bitbake-layers show-layers Find a layer # OpenEmbedded Layer Index raspberrypi ros2 layers Image # An image is the top level recipe image define how the root filesystem is built , with what packages. list all images ls meta*/recipes*/images/*.bb Packages # A package is a binary file with name .deb, .rpm Packages are produces by recipe A signal recipe produces many packages. all recipe packages describe is PACKAGES variable","title":"Part5 - Yocto terminology"},{"location":"blog/yocto/part5-terminology/#recipe","text":"A recipe is a set of instructions that is read and processed by the bitbake (file with .bb extension) A recipe describes: - Where to fetch source code - Which patch to apply - Configuration options - Compile options - Install - License","title":"Recipe"},{"location":"blog/yocto/part5-terminology/#configuration","text":"Tell the build system what to build and put into the image (file with .conf extension)","title":"Configuration"},{"location":"blog/yocto/part5-terminology/#types","text":"Machine configuration option Distribution option Compiler tuning options General Common configuration options User options (local.conf)","title":"Types"},{"location":"blog/yocto/part5-terminology/#example-machine-config","text":"User local.conf we set the machine for example MACHINE ??= \"qemux86-64\" This setting tell the system to load machine configuration option meta/conf/machine/qemux86-64.conf","title":"Example machine config"},{"location":"blog/yocto/part5-terminology/#class","text":"Class files are used to share common functionality across recipes (file with .bbclsss extension) Note classes useally locate in classes directory inside the meta* directory","title":"Class"},{"location":"blog/yocto/part5-terminology/#usage-from-recipe","text":"inherit classname","title":"usage from recipe"},{"location":"blog/yocto/part5-terminology/#layers","text":"A collection of related recipes. layer isolate meta data according to functionality recipes are folders under layer folder Note name convention for layer meta-layername name description meta-poky Distro metadata meta-yocto-bsp BSP metadata BBLAYERS variable present in build/conf/bblayers.conf show layers bitbake-layers show-layers","title":"Layers"},{"location":"blog/yocto/part5-terminology/#find-a-layer","text":"OpenEmbedded Layer Index raspberrypi ros2 layers","title":"Find a layer"},{"location":"blog/yocto/part5-terminology/#image","text":"An image is the top level recipe image define how the root filesystem is built , with what packages. list all images ls meta*/recipes*/images/*.bb","title":"Image"},{"location":"blog/yocto/part5-terminology/#packages","text":"A package is a binary file with name .deb, .rpm Packages are produces by recipe A signal recipe produces many packages. all recipe packages describe is PACKAGES variable","title":"Packages"},{"location":"blog/yocto/part6-tips/","tags":["yocto","101"],"text":"Sharing downloads # DL_DIR ?= \"/home/user/yocto/downloads/\" Fix Resolve # CONNECTIVITY_CHECK_URIS = \"https://www.google.com/\" parallel # # Determines the number of tasks that BitBake will perform in parallel (for bitbake command) BB_NUMBER_THREADS = \"6\" # Determine the number of processes that make can run in parallel (for make command) PARALLEL_MAKE = \"-j 6\"","title":"Part6 - Tips"},{"location":"blog/yocto/part6-tips/#sharing-downloads","text":"DL_DIR ?= \"/home/user/yocto/downloads/\"","title":"Sharing downloads"},{"location":"blog/yocto/part6-tips/#fix-resolve","text":"CONNECTIVITY_CHECK_URIS = \"https://www.google.com/\"","title":"Fix Resolve"},{"location":"blog/yocto/part6-tips/#parallel","text":"# Determines the number of tasks that BitBake will perform in parallel (for bitbake command) BB_NUMBER_THREADS = \"6\" # Determine the number of processes that make can run in parallel (for make command) PARALLEL_MAKE = \"-j 6\"","title":"parallel"},{"location":"blog/yocto/part7-operators/","tags":["yocto","101"],"text":"Variables # Variables can assign in conf and recipe files VARIABLE = \"value\" variable in conf # This command display variable value after config file are parsed bitbake -e | grep ^<VARIABLENAME> = # Example bitbake -e | grep ^BBPATH = # Result BBPATH = \"/home/user/yocto/poky/meta-poky:/home/user/yocto/poky/build:/home/user/yocto/poky/meta:/home/user/yocto/poky/meta-yocto-bsp:/home/user/yocto/meta-external/meta-openembedded/meta-oe:/home/user/yocto/meta-external/meta-openembedded/meta-python\" bitbake -e | grep ^TOPDIR = TOPDIR = \"/home/user/yocto/poky/build\" variable from recipe bitbake -e <recipe></recipe> | grep ^<VARIABLE> = # Example bitbake -e dropbear | grep ^DEPENDS = DEPENDS = \"autoconf-native automake-native libtool-native libtool-cross virtual/x86_64-poky-linux-gcc virtual/x86_64-poky-linux-compilerlibs virtual/libc zlib virtual/crypt update-rc.d initscripts virtual/update-alternatives\" Variable soft assignment (?=) # if variable assign as hard assignment the value is lost if no hard assignment this value are the default one MACHINE ?= \"qemuarm\" Note if ww have multiple soft assignment the first one is hold/assign Weaker default value (??=) # Assignment is made at the end of the parsing process, rather then immediately if variable assign as hard assignment the weaker value is lost if variable assign as default assignment the weaker value is lost Note if ww have multiple weak assignment the last one is hold/assign Variable Expansion # Variable can reference the content of other variable using the ${variable_name} syntax A = \"${B} hello\" B = \"${C} world\" C = \"linux\" Waring if variable not declare no expansion will happen the string is keep as is","title":"Part7 - Operators"},{"location":"blog/yocto/part7-operators/#variables","text":"Variables can assign in conf and recipe files VARIABLE = \"value\" variable in conf # This command display variable value after config file are parsed bitbake -e | grep ^<VARIABLENAME> = # Example bitbake -e | grep ^BBPATH = # Result BBPATH = \"/home/user/yocto/poky/meta-poky:/home/user/yocto/poky/build:/home/user/yocto/poky/meta:/home/user/yocto/poky/meta-yocto-bsp:/home/user/yocto/meta-external/meta-openembedded/meta-oe:/home/user/yocto/meta-external/meta-openembedded/meta-python\" bitbake -e | grep ^TOPDIR = TOPDIR = \"/home/user/yocto/poky/build\" variable from recipe bitbake -e <recipe></recipe> | grep ^<VARIABLE> = # Example bitbake -e dropbear | grep ^DEPENDS = DEPENDS = \"autoconf-native automake-native libtool-native libtool-cross virtual/x86_64-poky-linux-gcc virtual/x86_64-poky-linux-compilerlibs virtual/libc zlib virtual/crypt update-rc.d initscripts virtual/update-alternatives\"","title":"Variables"},{"location":"blog/yocto/part7-operators/#variable-soft-assignment-","text":"if variable assign as hard assignment the value is lost if no hard assignment this value are the default one MACHINE ?= \"qemuarm\" Note if ww have multiple soft assignment the first one is hold/assign","title":"Variable soft assignment (?=)"},{"location":"blog/yocto/part7-operators/#weaker-default-value-","text":"Assignment is made at the end of the parsing process, rather then immediately if variable assign as hard assignment the weaker value is lost if variable assign as default assignment the weaker value is lost Note if ww have multiple weak assignment the last one is hold/assign","title":"Weaker default value (??=)"},{"location":"blog/yocto/part7-operators/#variable-expansion","text":"Variable can reference the content of other variable using the ${variable_name} syntax A = \"${B} hello\" B = \"${C} world\" C = \"linux\" Waring if variable not declare no expansion will happen the string is keep as is","title":"Variable Expansion"},{"location":"blog/yocto/part8-custom_layer/","tags":["yocto","custom"],"text":"Custom layer # bitbake-layers create-layer <layer name> tree meta-mylayer /home/user/yocto/meta-mylayer/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 layer.conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u2514\u2500\u2500 recipes-example \u2514\u2500\u2500 example \u2514\u2500\u2500 example_0.1.bb Add layer to project # # Add bitbake-layers add-layer ~/yocto/meta-mylayer/ # Show bitbake-layers show-layers NOTE: Starting bitbake server... layer path priority ========================================================================== meta /home/user/yocto/poky/meta 5 meta-poky /home/user/yocto/poky/meta-poky 5 meta-yocto-bsp /home/user/yocto/poky/meta-yocto-bsp 5 meta-mylayer /home/user/yocto/meta-mylayer 6 Note Priority : This is the value used by BitBake to decide which recipe to use and the order in which the .bbappend files should be joined. It means that if two layers include the same recipe (.bb) file, the one with the higher priority is used. Add custom recipe # meta-mylayer/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 layer.conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u251c\u2500\u2500 recipes-example \u2502 \u2514\u2500\u2500 example \u2502 \u2514\u2500\u2500 example_0.1.bb \u2514\u2500\u2500 recipes-hello \u2514\u2500\u2500 hello \u251c\u2500\u2500 files \u2502 \u2514\u2500\u2500 hello.c \u2514\u2500\u2500 hello_1.0.bb files # recipes-hello.bb DESCRIPTION = \"Hello-my first recipe\" SECTION = \"Mywork\" LICENSE = \"CLOSED\" LIC_FILES_CHKSUM = \"file:// ${ COMMON_LICENSE_DIR } /MIT;md5=0835ade698e0bcf8506ecda2f7b4f302\" SRC_URI = \"file://hello.c\" S = \" ${ WORKDIR } \" TARGET_CC_ARCH += \" ${ LDFLAGS } \" do_compile () { ${ CC } hello.c -o hello } do_install () { install -d ${ D }${ bindir } install -m 0755 hello ${ D }${ bindir } } variables # meta/conf/bitbake.conf export exec_prefix = \"/usr\" export bindir = \"${exec_prefix}/bin\" TMPDIR ?= \"${TOPDIR}/tmp\" WORKDIR = \"${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PF}\" D = \"${WORKDIR}/image\" # TOPDIR bitbake -e | grep ^TOPDIR = TOPDIR = \"/home/user/yocto/poky/build\" hello.c #include <stdio.h> int main () { printf ( \"Hello yocto \\n \" ); return 0 ; } conf/local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear \\ python3 \\ hello \\ \" Build # bitbake core-image-minimal Test # # Run qemu runqemu qemux86-64 nographic # login $ ls -l /usr/bin/hello -rwxr-xr-x 1 root root 14376 Mar 9 2018 /usr/bin/hello # run program $ hello Hello yocto Reference # Yocto : Lab 02_Creating Custom layer and writing Recipe for Hello world","title":"Part8 - Custom layer"},{"location":"blog/yocto/part8-custom_layer/#custom-layer","text":"bitbake-layers create-layer <layer name> tree meta-mylayer /home/user/yocto/meta-mylayer/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 layer.conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u2514\u2500\u2500 recipes-example \u2514\u2500\u2500 example \u2514\u2500\u2500 example_0.1.bb","title":"Custom layer"},{"location":"blog/yocto/part8-custom_layer/#add-layer-to-project","text":"# Add bitbake-layers add-layer ~/yocto/meta-mylayer/ # Show bitbake-layers show-layers NOTE: Starting bitbake server... layer path priority ========================================================================== meta /home/user/yocto/poky/meta 5 meta-poky /home/user/yocto/poky/meta-poky 5 meta-yocto-bsp /home/user/yocto/poky/meta-yocto-bsp 5 meta-mylayer /home/user/yocto/meta-mylayer 6 Note Priority : This is the value used by BitBake to decide which recipe to use and the order in which the .bbappend files should be joined. It means that if two layers include the same recipe (.bb) file, the one with the higher priority is used.","title":"Add layer to project"},{"location":"blog/yocto/part8-custom_layer/#add-custom-recipe","text":"meta-mylayer/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 layer.conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u251c\u2500\u2500 recipes-example \u2502 \u2514\u2500\u2500 example \u2502 \u2514\u2500\u2500 example_0.1.bb \u2514\u2500\u2500 recipes-hello \u2514\u2500\u2500 hello \u251c\u2500\u2500 files \u2502 \u2514\u2500\u2500 hello.c \u2514\u2500\u2500 hello_1.0.bb","title":"Add custom recipe"},{"location":"blog/yocto/part8-custom_layer/#files","text":"recipes-hello.bb DESCRIPTION = \"Hello-my first recipe\" SECTION = \"Mywork\" LICENSE = \"CLOSED\" LIC_FILES_CHKSUM = \"file:// ${ COMMON_LICENSE_DIR } /MIT;md5=0835ade698e0bcf8506ecda2f7b4f302\" SRC_URI = \"file://hello.c\" S = \" ${ WORKDIR } \" TARGET_CC_ARCH += \" ${ LDFLAGS } \" do_compile () { ${ CC } hello.c -o hello } do_install () { install -d ${ D }${ bindir } install -m 0755 hello ${ D }${ bindir } }","title":"files"},{"location":"blog/yocto/part8-custom_layer/#variables","text":"meta/conf/bitbake.conf export exec_prefix = \"/usr\" export bindir = \"${exec_prefix}/bin\" TMPDIR ?= \"${TOPDIR}/tmp\" WORKDIR = \"${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PF}\" D = \"${WORKDIR}/image\" # TOPDIR bitbake -e | grep ^TOPDIR = TOPDIR = \"/home/user/yocto/poky/build\" hello.c #include <stdio.h> int main () { printf ( \"Hello yocto \\n \" ); return 0 ; } conf/local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear \\ python3 \\ hello \\ \"","title":"variables"},{"location":"blog/yocto/part8-custom_layer/#build","text":"bitbake core-image-minimal","title":"Build"},{"location":"blog/yocto/part8-custom_layer/#test","text":"# Run qemu runqemu qemux86-64 nographic # login $ ls -l /usr/bin/hello -rwxr-xr-x 1 root root 14376 Mar 9 2018 /usr/bin/hello # run program $ hello Hello yocto","title":"Test"},{"location":"blog/yocto/part8-custom_layer/#reference","text":"Yocto : Lab 02_Creating Custom layer and writing Recipe for Hello world","title":"Reference"},{"location":"blog/yocto/yocto-rpi-1/","tags":["rpi","yocto"],"text":"clone meta-raspberrypi # cd meta-external git submodule add git://git.yoctoproject.org/meta-raspberrypi # checkout hardknott config # bblayers.conf POKY_BBLAYERS_CONF_VERSION = \"2\" BBPATH = \" ${ TOPDIR } \" BBFILES ? = \"\" BBLAYERS ? = \" \\ /home/user/yocto/poky/meta \\ /home/user/yocto/poky/meta-poky \\ /home/user/yocto/poky/meta-yocto-bsp \\ /home/user/yocto/meta-external/meta-raspberrypi \\ \" local.conf CONF_VERSION = \"1\" MACHINE ? = \"raspberrypi4\" BB_NUMBER_THREADS = \"6\" PARALLEL_MAKE = \"-j 6\" DL_DIR ? = \"/home/user/yocto/downloads/\" CONNECTIVITY_CHECK_URIS = \"https://www.google.com/\" IMAGE_FSTYPES = \"ext4.xz rpi-sdimg\" # for SD-CARD SDIMG_ROOTFS_TYPE = \"ext4.xz\" build image # # rpi-basic-image deprecated bitbake core-image-base other packages # IMAGE_INSTALL_append = \" nano\"","title":"Yocto RPI part 1"},{"location":"blog/yocto/yocto-rpi-1/#clone-meta-raspberrypi","text":"cd meta-external git submodule add git://git.yoctoproject.org/meta-raspberrypi # checkout hardknott","title":"clone meta-raspberrypi"},{"location":"blog/yocto/yocto-rpi-1/#config","text":"bblayers.conf POKY_BBLAYERS_CONF_VERSION = \"2\" BBPATH = \" ${ TOPDIR } \" BBFILES ? = \"\" BBLAYERS ? = \" \\ /home/user/yocto/poky/meta \\ /home/user/yocto/poky/meta-poky \\ /home/user/yocto/poky/meta-yocto-bsp \\ /home/user/yocto/meta-external/meta-raspberrypi \\ \" local.conf CONF_VERSION = \"1\" MACHINE ? = \"raspberrypi4\" BB_NUMBER_THREADS = \"6\" PARALLEL_MAKE = \"-j 6\" DL_DIR ? = \"/home/user/yocto/downloads/\" CONNECTIVITY_CHECK_URIS = \"https://www.google.com/\" IMAGE_FSTYPES = \"ext4.xz rpi-sdimg\" # for SD-CARD SDIMG_ROOTFS_TYPE = \"ext4.xz\"","title":"config"},{"location":"blog/yocto/yocto-rpi-1/#build-image","text":"# rpi-basic-image deprecated bitbake core-image-base","title":"build image"},{"location":"blog/yocto/yocto-rpi-1/#other-packages","text":"IMAGE_INSTALL_append = \" nano\"","title":"other packages"},{"location":"projects/","text":"","title":"Projects"},{"location":"projects/CAP_5415/CAP_5415/","tags":["CV","courses"],"text":"Lecture1 # Yotube Reference # CAP5415 Fall2021","title":"CAP_5415"},{"location":"projects/CAP_5415/CAP_5415/#lecture1","text":"Yotube","title":"Lecture1"},{"location":"projects/CAP_5415/CAP_5415/#reference","text":"CAP5415 Fall2021","title":"Reference"},{"location":"projects/Pytorch/","tags":["DL","pytorch","101"],"text":"Deep Learning and Neural Networks with Python and Pytorch","title":"Deep Learning and Neural Networks with Python and Pytorch"},{"location":"projects/ROS2%20Cookbook/","text":"","title":"Index"},{"location":"projects/ROS2%20Cookbook/note/","text":"ros2 service call /apply_joint_effort gazebo_msgs/srv/ApplyJointEffort \u2018{ joint_name: \u201cjoint2\u201d, effort: -1.0, start_time: {sec: 0, nanosec: 0}, duration: {sec: 2000, nanosec: 0} }\u2019 ros2 service call /apply_link_wrench gazebo_msgs/srv/ApplyLinkWrench \u2018{link_name: \u201clink2\u201d, reference_frame: \u201c\u201d, reference_point: { x: 100, y: 0, z: 0 }, wrench: { force: { x: 10, y: 0, z: 0 }, torque: { x: 0, y: 0, z: 0 } }, start_time: {sec: 0, nanosec: 0}, duration: {sec: -1, nanosec: 0} }\u2019 ros2 service call /clear_joint_efforts gazebo_msgs/srv/JointRequest \u2018{joint_name: \u201cjoint2\u201d}\u2019 ros2 service call /clear_link_wrenches gazebo_msgs/srv/LinkRequest \u2018{link_name: \u201clink2\u201d}\u2019","title":"Note"},{"location":"projects/ROS2%20Cookbook/control/","tags":["control"],"text":"Controller nodes provide a convenient interface to control the joints of your robot. Controller nodes are separated into three groups: - Effort - Velocity - Position Demo (RRBot control) # controller_configuration.yaml controller_manager : ros__parameters : update_rate : 100 # Hz forward_position_controller : type : forward_command_controller/ForwardCommandController joint_state_broadcaster : type : joint_state_broadcaster/JointStateBroadcaster forward_position_controller : ros__parameters : joints : - joint1 - joint2 interface_name : position urdf # Add ros2_control tag and gazebo plugin <ros2_control name= \"GazeboSystem\" type= \"system\" > <hardware> <plugin> gazebo_ros2_control/GazeboSystem </plugin> </hardware> <joint name= \"joint1\" > <command_interface name= \"position\" /> <state_interface name= \"position\" /> </joint> <joint name= \"joint2\" > <command_interface name= \"position\" /> <state_interface name= \"position\" /> </joint> </ros2_control> <gazebo> <plugin name= \"gazebo_ros2_control\" filename= \"libgazebo_ros2_control.so\" > <parameters> $(find rrbot_control)/config/controller_configuration.yaml </parameters> </plugin> </gazebo> usage # Run gazebo with robot Start control from command line rrbot.launch.py ros2 launch rrbot_gazebo rrbot.launch.py run contrllers ros2 control load_controller --set-state start joint_state_broadcaster ros2 control load_controller --set-state start forward_position_controller position command ros2 topic pub /forward_position_controller/commands std_msgs/msg/Float64MultiArray \"data: - 0.5 - 0.5\" controller launch # from launch import LaunchDescription from launch.actions import RegisterEventHandler from launch.event_handlers import OnProcessExit from launch_ros.actions import Node def generate_launch_description (): joint_state_broadcaster_spawner = Node ( package = \"controller_manager\" , executable = \"spawner.py\" , arguments = [ \"joint_state_broadcaster\" , \"--controller-manager\" , \"/controller_manager\" ], ) robot_controller_spawner = Node ( package = \"controller_manager\" , executable = \"spawner.py\" , arguments = [ \"forward_position_controller\" , \"-c\" , \"/controller_manager\" ], ) return LaunchDescription ([ RegisterEventHandler ( event_handler = OnProcessExit ( target_action = joint_state_broadcaster_spawner , on_exit = [ robot_controller_spawner ], ) ), joint_state_broadcaster_spawner ]) Reference # ros2_control_demo","title":"Control"},{"location":"projects/ROS2%20Cookbook/control/#demo-rrbot-control","text":"controller_configuration.yaml controller_manager : ros__parameters : update_rate : 100 # Hz forward_position_controller : type : forward_command_controller/ForwardCommandController joint_state_broadcaster : type : joint_state_broadcaster/JointStateBroadcaster forward_position_controller : ros__parameters : joints : - joint1 - joint2 interface_name : position","title":"Demo (RRBot control)"},{"location":"projects/ROS2%20Cookbook/control/#urdf","text":"Add ros2_control tag and gazebo plugin <ros2_control name= \"GazeboSystem\" type= \"system\" > <hardware> <plugin> gazebo_ros2_control/GazeboSystem </plugin> </hardware> <joint name= \"joint1\" > <command_interface name= \"position\" /> <state_interface name= \"position\" /> </joint> <joint name= \"joint2\" > <command_interface name= \"position\" /> <state_interface name= \"position\" /> </joint> </ros2_control> <gazebo> <plugin name= \"gazebo_ros2_control\" filename= \"libgazebo_ros2_control.so\" > <parameters> $(find rrbot_control)/config/controller_configuration.yaml </parameters> </plugin> </gazebo>","title":"urdf"},{"location":"projects/ROS2%20Cookbook/control/#usage","text":"Run gazebo with robot Start control from command line rrbot.launch.py ros2 launch rrbot_gazebo rrbot.launch.py run contrllers ros2 control load_controller --set-state start joint_state_broadcaster ros2 control load_controller --set-state start forward_position_controller position command ros2 topic pub /forward_position_controller/commands std_msgs/msg/Float64MultiArray \"data: - 0.5 - 0.5\"","title":"usage"},{"location":"projects/ROS2%20Cookbook/control/#controller-launch","text":"from launch import LaunchDescription from launch.actions import RegisterEventHandler from launch.event_handlers import OnProcessExit from launch_ros.actions import Node def generate_launch_description (): joint_state_broadcaster_spawner = Node ( package = \"controller_manager\" , executable = \"spawner.py\" , arguments = [ \"joint_state_broadcaster\" , \"--controller-manager\" , \"/controller_manager\" ], ) robot_controller_spawner = Node ( package = \"controller_manager\" , executable = \"spawner.py\" , arguments = [ \"forward_position_controller\" , \"-c\" , \"/controller_manager\" ], ) return LaunchDescription ([ RegisterEventHandler ( event_handler = OnProcessExit ( target_action = joint_state_broadcaster_spawner , on_exit = [ robot_controller_spawner ], ) ), joint_state_broadcaster_spawner ])","title":"controller launch"},{"location":"projects/ROS2%20Cookbook/control/#reference","text":"ros2_control_demo","title":"Reference"},{"location":"projects/ROS2%20Cookbook/gazebo/gazebo_resources/","tags":["gazebo","sdf"],"text":"uri # <visual name= 'base_link_visual' > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh> <scale> 1 1 1 </scale> <uri> file://path_to_dae/textured.dae </uri> </mesh> </geometry> </visual> <visual name= 'base_link_visual' > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh> <scale> 1 1 1 </scale> <uri> model://model_name/meshes/textured.dae </uri> </mesh> </geometry> </visual> package.xml # <export> <build_type> ament_cmake </build_type> <gazebo_ros gazebo_model_path= \"${prefix}/models\" /> <gazebo_ros gazebo_media_path= \"${prefix}\" /> </export> prefix ${prefix} is replaced by package\u2019s share directory in install depend Using the above tags depend in gazebo_ros add exec_depend to package.xml","title":"Gazebo resources path"},{"location":"projects/ROS2%20Cookbook/gazebo/gazebo_resources/#uri","text":"<visual name= 'base_link_visual' > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh> <scale> 1 1 1 </scale> <uri> file://path_to_dae/textured.dae </uri> </mesh> </geometry> </visual> <visual name= 'base_link_visual' > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh> <scale> 1 1 1 </scale> <uri> model://model_name/meshes/textured.dae </uri> </mesh> </geometry> </visual>","title":"uri"},{"location":"projects/ROS2%20Cookbook/gazebo/gazebo_resources/#packagexml","text":"<export> <build_type> ament_cmake </build_type> <gazebo_ros gazebo_model_path= \"${prefix}/models\" /> <gazebo_ros gazebo_media_path= \"${prefix}\" /> </export> prefix ${prefix} is replaced by package\u2019s share directory in install depend Using the above tags depend in gazebo_ros add exec_depend to package.xml","title":"package.xml"},{"location":"projects/ROS2%20Cookbook/gazebo/sdf_model/","tags":["gazebo","sdf","launch"],"text":"Run gazebo with model sdf, set gazebo environment by add tag to package.xml <gazebo_ros gazebo_model_path=\"${prefix}/models\" /> Note prefix is substitute with current file location install/rrbot_description/share/rrbot_description/ projects rrbot_description \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 models \u2514\u2500\u2500 simple_box \u251c\u2500\u2500 model.config \u2514\u2500\u2500 model.sdf rrbot_gazebo \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 launch \u2514\u2500\u2500 sdf_world.launch.py rrbot_description # models/simple_box # model.conifg <?xml version=\"1.0\"?> <model> <name> simple_box </name> <version> 1.0 </version> <sdf version= \"1.5\" > model.sdf </sdf> <author> <name></name> <email></email> </author> <description> </description> </model> model.sdf <?xml version='1.0'?> <sdf version= \"1.4\" > <model name= \"simple_box\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"link\" > <inertial> <mass> 1.0 </mass> <inertia> <!-- inertias are tricky to compute --> <!-- http://gazebosim.org/tutorials?tut=inertia&cat=build_robot --> <ixx> 0.083 </ixx> <!-- for a box: ixx = 0.083 * mass * (y*y + z*z) --> <ixy> 0.0 </ixy> <!-- for a box: ixy = 0 --> <ixz> 0.0 </ixz> <!-- for a box: ixz = 0 --> <iyy> 0.083 </iyy> <!-- for a box: iyy = 0.083 * mass * (x*x + z*z) --> <iyz> 0.0 </iyz> <!-- for a box: iyz = 0 --> <izz> 0.083 </izz> <!-- for a box: izz = 0.083 * mass * (x*x + y*y) --> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> </model> </sdf> CMakeLists.txt # Add install command to CMakeLists.txt Copy models folder to destination install ( DIRECTORY models DESTINATION share / $ { PROJECT_NAME } ) package.xml # Add gazebo_ros tag, usage by gazebo.launch file to set gazebo environment variables <export> <build_type> ament_cmake </build_type> <gazebo_ros gazebo_model_path= \"${prefix}/models\" /> </export> rrbot_gazebo # worlds # sdf.world <?xml version=\"1.0\" ?> <sdf version= \"1.4\" > <!-- We use a custom world for the rrbot so that the camera angle is launched correctly --> <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <!-- Global light source --> <include> <uri> model://sun </uri> </include> <include> <uri> model://simple_box </uri> </include> </world> </sdf> launch # sdf_world.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource pkg_description_pkg = \"rrbot_description\" package_name = 'rrbot_gazebo' world_file = 'sdf.world' def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) pkg_simulation = get_package_share_directory ( package_name ) # launch Gazebo by including its definition gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gazebo.launch.py' ), ), launch_arguments = [( \"verbose\" , \"true\" )] ) # load the world file world_arg = DeclareLaunchArgument ( 'world' , default_value = [ os . path . join ( pkg_simulation , 'worlds' , world_file ), '' ], description = 'SDF world file' ) return LaunchDescription ([ world_arg , gazebo ]) CMakeLists.txt # Add install command to CMakeLists.txt Copy worlds folder to destination install ( DIRECTORY worlds DESTINATION share / $ { PROJECT_NAME } ) Build and Run # # Build colcon build --symlink-install --packages-select rrbot_description colcon build --symlink-install --packages-select rrbot_gazebo # Run ros2 launch rrbot_gazebo sdf_world.launch.py","title":"Spawn gazebo world with SDF model"},{"location":"projects/ROS2%20Cookbook/gazebo/sdf_model/#rrbot_description","text":"","title":"rrbot_description"},{"location":"projects/ROS2%20Cookbook/gazebo/sdf_model/#modelssimple_box","text":"model.conifg <?xml version=\"1.0\"?> <model> <name> simple_box </name> <version> 1.0 </version> <sdf version= \"1.5\" > model.sdf </sdf> <author> <name></name> <email></email> </author> <description> </description> </model> model.sdf <?xml version='1.0'?> <sdf version= \"1.4\" > <model name= \"simple_box\" > <pose> 0 0 0.5 0 0 0 </pose> <static> true </static> <link name= \"link\" > <inertial> <mass> 1.0 </mass> <inertia> <!-- inertias are tricky to compute --> <!-- http://gazebosim.org/tutorials?tut=inertia&cat=build_robot --> <ixx> 0.083 </ixx> <!-- for a box: ixx = 0.083 * mass * (y*y + z*z) --> <ixy> 0.0 </ixy> <!-- for a box: ixy = 0 --> <ixz> 0.0 </ixz> <!-- for a box: ixz = 0 --> <iyy> 0.083 </iyy> <!-- for a box: iyy = 0.083 * mass * (x*x + z*z) --> <iyz> 0.0 </iyz> <!-- for a box: iyz = 0 --> <izz> 0.083 </izz> <!-- for a box: izz = 0.083 * mass * (x*x + y*y) --> </inertia> </inertial> <collision name= \"collision\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </collision> <visual name= \"visual\" > <geometry> <box> <size> 1 1 1 </size> </box> </geometry> </visual> </link> </model> </sdf>","title":"models/simple_box"},{"location":"projects/ROS2%20Cookbook/gazebo/sdf_model/#cmakeliststxt","text":"Add install command to CMakeLists.txt Copy models folder to destination install ( DIRECTORY models DESTINATION share / $ { PROJECT_NAME } )","title":"CMakeLists.txt"},{"location":"projects/ROS2%20Cookbook/gazebo/sdf_model/#packagexml","text":"Add gazebo_ros tag, usage by gazebo.launch file to set gazebo environment variables <export> <build_type> ament_cmake </build_type> <gazebo_ros gazebo_model_path= \"${prefix}/models\" /> </export>","title":"package.xml"},{"location":"projects/ROS2%20Cookbook/gazebo/sdf_model/#rrbot_gazebo","text":"","title":"rrbot_gazebo"},{"location":"projects/ROS2%20Cookbook/gazebo/sdf_model/#worlds","text":"sdf.world <?xml version=\"1.0\" ?> <sdf version= \"1.4\" > <!-- We use a custom world for the rrbot so that the camera angle is launched correctly --> <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <!-- Global light source --> <include> <uri> model://sun </uri> </include> <include> <uri> model://simple_box </uri> </include> </world> </sdf>","title":"worlds"},{"location":"projects/ROS2%20Cookbook/gazebo/sdf_model/#launch","text":"sdf_world.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource pkg_description_pkg = \"rrbot_description\" package_name = 'rrbot_gazebo' world_file = 'sdf.world' def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) pkg_simulation = get_package_share_directory ( package_name ) # launch Gazebo by including its definition gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gazebo.launch.py' ), ), launch_arguments = [( \"verbose\" , \"true\" )] ) # load the world file world_arg = DeclareLaunchArgument ( 'world' , default_value = [ os . path . join ( pkg_simulation , 'worlds' , world_file ), '' ], description = 'SDF world file' ) return LaunchDescription ([ world_arg , gazebo ])","title":"launch"},{"location":"projects/ROS2%20Cookbook/gazebo/sdf_model/#cmakeliststxt_1","text":"Add install command to CMakeLists.txt Copy worlds folder to destination install ( DIRECTORY worlds DESTINATION share / $ { PROJECT_NAME } )","title":"CMakeLists.txt"},{"location":"projects/ROS2%20Cookbook/gazebo/sdf_model/#build-and-run","text":"# Build colcon build --symlink-install --packages-select rrbot_description colcon build --symlink-install --packages-select rrbot_gazebo # Run ros2 launch rrbot_gazebo sdf_world.launch.py","title":"Build and Run"},{"location":"projects/ROS2%20Cookbook/gazebo/simple_world_plugin/","tags":["gazebo","world","plugin"],"text":"projects rrbot_gazebo \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 world_plug.launch.py \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 simple_world_plugin.cpp \u2514\u2500\u2500 worlds \u2514\u2500\u2500 world_plug.world Worlds # world_plug.world <?xml version=\"1.0\" ?> <sdf version= \"1.4\" > <!-- We use a custom world for the rrbot so that the camera angle is launched correctly --> <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <!-- Global light source --> <include> <uri> model://sun </uri> </include> <plugin name= \"simple\" filename= \"libsimple_world_plugin.so\" /> </world> </sdf> package.xml # <export> <build_type> ament_cmake </build_type> <gazebo_ros plugin_path= \"${prefix}\" ></gazebo_ros> </export> plugin source # simple_world_plugin.cpp #include <gazebo/common/Plugin.hh> #include <rclcpp/rclcpp.hpp> #include <iostream> namespace gazebo { class WorldPluginTutorial : public WorldPlugin { public : WorldPluginTutorial () : WorldPlugin () { // gazebo log gzmsg << \"gazebo message\" << std :: endl ; gzwarn << \"gazebo warning\" << std :: endl ; gzerr << \"gazebo error\" << std :: endl ; // ROS log RCLCPP_INFO ( rclcpp :: get_logger ( \"world_plug\" ), \" ------ Hello World! ------ \" ); RCLCPP_WARN ( rclcpp :: get_logger ( \"world_plug\" ), \" ------ warning! ------ \" ); RCLCPP_ERROR ( rclcpp :: get_logger ( \"world_plug\" ), \" ------ Error! ------ \" ); } void Load ( physics :: WorldPtr _world , sdf :: ElementPtr _sdf ) { } }; GZ_REGISTER_WORLD_PLUGIN ( WorldPluginTutorial ) } CMakeLists # cmake_minimum_required ( VERSION 3.5 ) project ( rrbot_gazebo ) # Default to C++14 if ( NOT CMAKE_CXX_STANDARD ) set ( CMAKE_CXX_STANDARD 14 ) endif () if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( gazebo REQUIRED ) find_package ( gazebo_ros REQUIRED ) find_package ( rclcpp REQUIRED ) add_library ( simple_world_plugin SHARED src / simple_world_plugin . cpp ) target_include_directories ( simple_world_plugin PUBLIC $ < BUILD_INTERFACE : $ { CMAKE_CURRENT_SOURCE_DIR } / include > $ < INSTALL_INTERFACE : include > ) ament_target_dependencies ( simple_world_plugin \"gazebo_ros\" \"rclcpp\" ) install ( TARGETS simple_world_plugin DESTINATION share / $ { PROJECT_NAME }) install ( DIRECTORY worlds DESTINATION share / $ { PROJECT_NAME } ) install ( DIRECTORY launch DESTINATION share / $ { PROJECT_NAME } ) ament_package () launch # world_plug.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource package_name = 'rrbot_gazebo' world_file = 'world_plug.world' def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) pkg_simulation = get_package_share_directory ( package_name ) # launch Gazebo by including its definition gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gazebo.launch.py' ), ) ) verbose_arg = DeclareLaunchArgument ( 'verbose' , default_value = 'true' , description = 'Set \"true\" to increase messages written to terminal.' ) # load the world file world_arg = DeclareLaunchArgument ( 'world' , default_value = [ os . path . join ( pkg_simulation , 'worlds' , world_file ), '' ], description = 'SDF world file' ) return LaunchDescription ([ world_arg , verbose_arg , gazebo , ]) Usage and Run # ros2 launch rrbot_gazebo world_plug.launch.py The first three log line came from gazebo log API The Other three came from ROS log API","title":"Simple world plugin"},{"location":"projects/ROS2%20Cookbook/gazebo/simple_world_plugin/#worlds","text":"world_plug.world <?xml version=\"1.0\" ?> <sdf version= \"1.4\" > <!-- We use a custom world for the rrbot so that the camera angle is launched correctly --> <world name= \"default\" > <include> <uri> model://ground_plane </uri> </include> <!-- Global light source --> <include> <uri> model://sun </uri> </include> <plugin name= \"simple\" filename= \"libsimple_world_plugin.so\" /> </world> </sdf>","title":"Worlds"},{"location":"projects/ROS2%20Cookbook/gazebo/simple_world_plugin/#packagexml","text":"<export> <build_type> ament_cmake </build_type> <gazebo_ros plugin_path= \"${prefix}\" ></gazebo_ros> </export>","title":"package.xml"},{"location":"projects/ROS2%20Cookbook/gazebo/simple_world_plugin/#plugin-source","text":"simple_world_plugin.cpp #include <gazebo/common/Plugin.hh> #include <rclcpp/rclcpp.hpp> #include <iostream> namespace gazebo { class WorldPluginTutorial : public WorldPlugin { public : WorldPluginTutorial () : WorldPlugin () { // gazebo log gzmsg << \"gazebo message\" << std :: endl ; gzwarn << \"gazebo warning\" << std :: endl ; gzerr << \"gazebo error\" << std :: endl ; // ROS log RCLCPP_INFO ( rclcpp :: get_logger ( \"world_plug\" ), \" ------ Hello World! ------ \" ); RCLCPP_WARN ( rclcpp :: get_logger ( \"world_plug\" ), \" ------ warning! ------ \" ); RCLCPP_ERROR ( rclcpp :: get_logger ( \"world_plug\" ), \" ------ Error! ------ \" ); } void Load ( physics :: WorldPtr _world , sdf :: ElementPtr _sdf ) { } }; GZ_REGISTER_WORLD_PLUGIN ( WorldPluginTutorial ) }","title":"plugin source"},{"location":"projects/ROS2%20Cookbook/gazebo/simple_world_plugin/#cmakelists","text":"cmake_minimum_required ( VERSION 3.5 ) project ( rrbot_gazebo ) # Default to C++14 if ( NOT CMAKE_CXX_STANDARD ) set ( CMAKE_CXX_STANDARD 14 ) endif () if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( - Wall - Wextra - Wpedantic ) endif () # find dependencies find_package ( ament_cmake REQUIRED ) find_package ( gazebo REQUIRED ) find_package ( gazebo_ros REQUIRED ) find_package ( rclcpp REQUIRED ) add_library ( simple_world_plugin SHARED src / simple_world_plugin . cpp ) target_include_directories ( simple_world_plugin PUBLIC $ < BUILD_INTERFACE : $ { CMAKE_CURRENT_SOURCE_DIR } / include > $ < INSTALL_INTERFACE : include > ) ament_target_dependencies ( simple_world_plugin \"gazebo_ros\" \"rclcpp\" ) install ( TARGETS simple_world_plugin DESTINATION share / $ { PROJECT_NAME }) install ( DIRECTORY worlds DESTINATION share / $ { PROJECT_NAME } ) install ( DIRECTORY launch DESTINATION share / $ { PROJECT_NAME } ) ament_package ()","title":"CMakeLists"},{"location":"projects/ROS2%20Cookbook/gazebo/simple_world_plugin/#launch","text":"world_plug.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource package_name = 'rrbot_gazebo' world_file = 'world_plug.world' def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) pkg_simulation = get_package_share_directory ( package_name ) # launch Gazebo by including its definition gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gazebo.launch.py' ), ) ) verbose_arg = DeclareLaunchArgument ( 'verbose' , default_value = 'true' , description = 'Set \"true\" to increase messages written to terminal.' ) # load the world file world_arg = DeclareLaunchArgument ( 'world' , default_value = [ os . path . join ( pkg_simulation , 'worlds' , world_file ), '' ], description = 'SDF world file' ) return LaunchDescription ([ world_arg , verbose_arg , gazebo , ])","title":"launch"},{"location":"projects/ROS2%20Cookbook/gazebo/simple_world_plugin/#usage-and-run","text":"ros2 launch rrbot_gazebo world_plug.launch.py The first three log line came from gazebo log API The Other three came from ROS log API","title":"Usage and Run"},{"location":"projects/ROS2%20Cookbook/gazebo/tips/","tags":["tips"],"text":"Gazebo environment # GAZEBO_MODEL_PATH: Gazebo will search for models GAZEBO_RESOURCE_PATH: Gazebo search for other resources such as world and media files. GAZEBO_PLUGIN_PATH: Gazebo search for the plugin shared libraries at runtime <exec_depend> gazebo_ros </exec_depend> <export> <gazebo_ros gazebo_media_path= \"${prefix}:/another/path\" gazebo_plugin_path= \"${prefix}/lib\" gazebo_model_path= \"${prefix}/../your_models\" gazebo_resource_path= \"${prefix}:/path/to/your/resources\" /> </export> prefix # prefix Output the prefix path of a package ros2 pkg prefix diffbot_description /home/user/dev_ws/install/diffbot_description # --share Show share directory for the package ros2 pkg prefix --share diffbot_description /home/user/dev_ws/install/diffbot_description/share/diffbot_description Example # Load mesh from sdf model \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 warehouse \u2502 \u251c\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 warehouse.stl \u2502 \u251c\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf sdf visual <visual name= \"visual\" > <geometry> <mesh> <uri> model:///warehouse/meshes/warehouse.stl </uri> <scale> 0.001 0.001 0.001 </scale> </mesh> </geometry> </visual> package.xml <export> <build_type> ament_cmake </build_type> <gazebo_ros gazebo_model_path= \"${prefix}/models\" /> <gazebo_ros gazebo_media_path= \"${prefix}/worlds\" /> </export> Warning The only combination that success loading mesh under module folder is to set - uri: /meshes/mesh file - package.xml","title":"Gazebo ROS tips"},{"location":"projects/ROS2%20Cookbook/gazebo/tips/#gazebo-environment","text":"GAZEBO_MODEL_PATH: Gazebo will search for models GAZEBO_RESOURCE_PATH: Gazebo search for other resources such as world and media files. GAZEBO_PLUGIN_PATH: Gazebo search for the plugin shared libraries at runtime <exec_depend> gazebo_ros </exec_depend> <export> <gazebo_ros gazebo_media_path= \"${prefix}:/another/path\" gazebo_plugin_path= \"${prefix}/lib\" gazebo_model_path= \"${prefix}/../your_models\" gazebo_resource_path= \"${prefix}:/path/to/your/resources\" /> </export> prefix # prefix Output the prefix path of a package ros2 pkg prefix diffbot_description /home/user/dev_ws/install/diffbot_description # --share Show share directory for the package ros2 pkg prefix --share diffbot_description /home/user/dev_ws/install/diffbot_description/share/diffbot_description","title":"Gazebo environment"},{"location":"projects/ROS2%20Cookbook/gazebo/tips/#example","text":"Load mesh from sdf model \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 warehouse \u2502 \u251c\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 warehouse.stl \u2502 \u251c\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf sdf visual <visual name= \"visual\" > <geometry> <mesh> <uri> model:///warehouse/meshes/warehouse.stl </uri> <scale> 0.001 0.001 0.001 </scale> </mesh> </geometry> </visual> package.xml <export> <build_type> ament_cmake </build_type> <gazebo_ros gazebo_model_path= \"${prefix}/models\" /> <gazebo_ros gazebo_media_path= \"${prefix}/worlds\" /> </export> Warning The only combination that success loading mesh under module folder is to set - uri: /meshes/mesh file - package.xml","title":"Example"},{"location":"projects/ROS2%20Cookbook/gazebo/urdf_spawn/","tags":["gazebo","urdf","launch"],"text":"Launch file that start gazebo and spawn urdf projects rrbot_description \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 urdf \u2514\u2500\u2500 box.urdf rrbot_gazebo \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 launch \u2514\u2500\u2500 spawn_urdf.launch.py rrbot_description # urdf # Simple box urdf box.urdf <robot name= \"simple_box\" > <link name= \"my_box\" > <inertial> <origin xyz= \"2 0 0\" /> <mass value= \"1.0\" /> <inertia ixx= \"1.0\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"100.0\" iyz= \"0.0\" izz= \"1.0\" /> </inertial> <visual> <origin xyz= \"2 0 1\" /> <geometry> <box size= \"1 1 2\" /> </geometry> </visual> <collision> <origin xyz= \"2 0 1\" /> <geometry> <box size= \"1 1 2\" /> </geometry> </collision> </link> <gazebo reference= \"my_box\" > <material> Gazebo/Blue </material> </gazebo> </robot> CMakeLists.txt # Add install command to CMakeLists.txt Copy all urdf files to destination install ( DIRECTORY urdf DESTINATION share / $ { PROJECT_NAME } ) rrbot_gazebo # launch # Start gazebo verbose on Spawn urdf using spawn_entity.py node from gazebo_ros package Substitute gazebo launch file from gazebo_ros package spawn_urdf.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node pkg_description_pkg = \"rrbot_description\" package_name = 'rrbot_gazebo' def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) pkg_description = get_package_share_directory ( pkg_description_pkg ) urdf_path = os . path . join ( pkg_description , \"urdf\" , \"box.urdf\" , ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gazebo.launch.py' ), ), launch_arguments = [( \"verbose\" , \"true\" )] # (1) ) spawn_robot = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-file\" , urdf_path , \"-entity\" , \"robot\" , \"-x\" , \"0.0\" , \"-y\" , \"0.0\" , \"-z\" , \"0.0\" ], # (2) output = \"screen\" ) return LaunchDescription ([ gazebo , spawn_robot ]) passing argument to include launch as list of tuples. spawn file full path CMakeLists.txt # Add install command copy launch folder to destination install ( DIRECTORY launch DESTINATION share / $ { PROJECT_NAME } ) Build and Run # # Build colcon build --symlink-install --packages-select rrbot_description colcon build --symlink-install --packages-select rrbot_gazebo # Run ros2 launch rrbot_gazebo spawn_urdf.launch.py","title":"Spawn gazebo and with urdf"},{"location":"projects/ROS2%20Cookbook/gazebo/urdf_spawn/#rrbot_description","text":"","title":"rrbot_description"},{"location":"projects/ROS2%20Cookbook/gazebo/urdf_spawn/#urdf","text":"Simple box urdf box.urdf <robot name= \"simple_box\" > <link name= \"my_box\" > <inertial> <origin xyz= \"2 0 0\" /> <mass value= \"1.0\" /> <inertia ixx= \"1.0\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"100.0\" iyz= \"0.0\" izz= \"1.0\" /> </inertial> <visual> <origin xyz= \"2 0 1\" /> <geometry> <box size= \"1 1 2\" /> </geometry> </visual> <collision> <origin xyz= \"2 0 1\" /> <geometry> <box size= \"1 1 2\" /> </geometry> </collision> </link> <gazebo reference= \"my_box\" > <material> Gazebo/Blue </material> </gazebo> </robot>","title":"urdf"},{"location":"projects/ROS2%20Cookbook/gazebo/urdf_spawn/#cmakeliststxt","text":"Add install command to CMakeLists.txt Copy all urdf files to destination install ( DIRECTORY urdf DESTINATION share / $ { PROJECT_NAME } )","title":"CMakeLists.txt"},{"location":"projects/ROS2%20Cookbook/gazebo/urdf_spawn/#rrbot_gazebo","text":"","title":"rrbot_gazebo"},{"location":"projects/ROS2%20Cookbook/gazebo/urdf_spawn/#launch","text":"Start gazebo verbose on Spawn urdf using spawn_entity.py node from gazebo_ros package Substitute gazebo launch file from gazebo_ros package spawn_urdf.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node pkg_description_pkg = \"rrbot_description\" package_name = 'rrbot_gazebo' def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) pkg_description = get_package_share_directory ( pkg_description_pkg ) urdf_path = os . path . join ( pkg_description , \"urdf\" , \"box.urdf\" , ) gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gazebo.launch.py' ), ), launch_arguments = [( \"verbose\" , \"true\" )] # (1) ) spawn_robot = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-file\" , urdf_path , \"-entity\" , \"robot\" , \"-x\" , \"0.0\" , \"-y\" , \"0.0\" , \"-z\" , \"0.0\" ], # (2) output = \"screen\" ) return LaunchDescription ([ gazebo , spawn_robot ]) passing argument to include launch as list of tuples. spawn file full path","title":"launch"},{"location":"projects/ROS2%20Cookbook/gazebo/urdf_spawn/#cmakeliststxt_1","text":"Add install command copy launch folder to destination install ( DIRECTORY launch DESTINATION share / $ { PROJECT_NAME } )","title":"CMakeLists.txt"},{"location":"projects/ROS2%20Cookbook/gazebo/urdf_spawn/#build-and-run","text":"# Build colcon build --symlink-install --packages-select rrbot_description colcon build --symlink-install --packages-select rrbot_gazebo # Run ros2 launch rrbot_gazebo spawn_urdf.launch.py","title":"Build and Run"},{"location":"projects/ROS2%20Cookbook/gazebo/xacro_spawn/","tags":["gazebo","xacro","launch"],"text":"Launch file that start gazebo and spawn xacro that convert to urdf by the launch file projects rrbot_description \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 urdf \u2514\u2500\u2500 box.xacro rrbot_gazebo \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 launch \u2514\u2500\u2500 spawn_xacro.launch.py rrbot_description # xacro # <robot name= \"simple_box_xacro\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- Constants for robot dimensions --> <xacro:property name= \"width\" value= \"1\" /> <xacro:property name= \"length\" value= \"1\" /> <xacro:property name= \"height\" value= \"1\" /> <link name= \"my_box\" > <inertial> <origin xyz= \"2 0 0\" /> <mass value= \"1.0\" /> <inertia ixx= \"1.0\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"100.0\" iyz= \"0.0\" izz= \"1.0\" /> </inertial> <visual> <origin xyz= \"2 0 1\" /> <geometry> <box size= \"${width} ${length} ${height}\" /> </geometry> </visual> <collision> <origin xyz= \"2 0 1\" /> <geometry> <box size= \"${width} ${length} ${height}\" /> </geometry> </collision> </link> <gazebo reference= \"my_box\" > <material> Gazebo/Green </material> </gazebo> </robot> CMakeLists.txt # Add install command to CMakeLists.txt Copy all urdf files to destination install ( DIRECTORY urdf DESTINATION share / $ { PROJECT_NAME } ) rrbot_gazebo # launch # spawn_xacro.launch.py import os import xacro from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node pkg_description_pkg = \"rrbot_description\" package_name = 'rrbot_gazebo' world_file = 'rrbot.world' def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) pkg_simulation = get_package_share_directory ( package_name ) pkg_description = get_package_share_directory ( pkg_description_pkg ) # xacro path robot_description_path = os . path . join ( pkg_description , \"urdf\" , \"box.xacro\" , ) # output urdf path urdf_path = os . path . join ( pkg_description , \"urdf\" , \"box.xacro.urdf\" , ) # convert xacro to urdf doc = xacro . process_file ( robot_description_path ) . toxml () out = xacro . open_output ( urdf_path ) out . write ( doc ) # launch Gazebo gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gazebo.launch.py' ), ) ) verbose_arg = DeclareLaunchArgument ( 'verbose' , default_value = 'true' , description = 'Set \"true\" to increase messages written to terminal.' ) # load the world file world_arg = DeclareLaunchArgument ( 'world' , default_value = [ os . path . join ( pkg_simulation , 'worlds' , world_file ), '' ], description = 'SDF world file' ) spawn_robot = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-file\" , urdf_path , \"-entity\" , \"robot\" , \"-x\" , \"0.0\" , \"-y\" , \"0.0\" , \"-z\" , \"0.0\" ], output = \"screen\" ) # set args before call gazebo return LaunchDescription ([ verbose_arg , world_arg , gazebo , spawn_robot ]) Build and Run # # Build colcon build --symlink-install --packages-select rrbot_description colcon build --symlink-install --packages-select rrbot_gazebo # Run ros2 launch rrbot_gazebo spawn_xacro.launch.py","title":"Spawn gazebo and with XACRO"},{"location":"projects/ROS2%20Cookbook/gazebo/xacro_spawn/#rrbot_description","text":"","title":"rrbot_description"},{"location":"projects/ROS2%20Cookbook/gazebo/xacro_spawn/#xacro","text":"<robot name= \"simple_box_xacro\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- Constants for robot dimensions --> <xacro:property name= \"width\" value= \"1\" /> <xacro:property name= \"length\" value= \"1\" /> <xacro:property name= \"height\" value= \"1\" /> <link name= \"my_box\" > <inertial> <origin xyz= \"2 0 0\" /> <mass value= \"1.0\" /> <inertia ixx= \"1.0\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"100.0\" iyz= \"0.0\" izz= \"1.0\" /> </inertial> <visual> <origin xyz= \"2 0 1\" /> <geometry> <box size= \"${width} ${length} ${height}\" /> </geometry> </visual> <collision> <origin xyz= \"2 0 1\" /> <geometry> <box size= \"${width} ${length} ${height}\" /> </geometry> </collision> </link> <gazebo reference= \"my_box\" > <material> Gazebo/Green </material> </gazebo> </robot>","title":"xacro"},{"location":"projects/ROS2%20Cookbook/gazebo/xacro_spawn/#cmakeliststxt","text":"Add install command to CMakeLists.txt Copy all urdf files to destination install ( DIRECTORY urdf DESTINATION share / $ { PROJECT_NAME } )","title":"CMakeLists.txt"},{"location":"projects/ROS2%20Cookbook/gazebo/xacro_spawn/#rrbot_gazebo","text":"","title":"rrbot_gazebo"},{"location":"projects/ROS2%20Cookbook/gazebo/xacro_spawn/#launch","text":"spawn_xacro.launch.py import os import xacro from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node pkg_description_pkg = \"rrbot_description\" package_name = 'rrbot_gazebo' world_file = 'rrbot.world' def generate_launch_description (): pkg_gazebo_ros = get_package_share_directory ( 'gazebo_ros' ) pkg_simulation = get_package_share_directory ( package_name ) pkg_description = get_package_share_directory ( pkg_description_pkg ) # xacro path robot_description_path = os . path . join ( pkg_description , \"urdf\" , \"box.xacro\" , ) # output urdf path urdf_path = os . path . join ( pkg_description , \"urdf\" , \"box.xacro.urdf\" , ) # convert xacro to urdf doc = xacro . process_file ( robot_description_path ) . toxml () out = xacro . open_output ( urdf_path ) out . write ( doc ) # launch Gazebo gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ( os . path . join ( pkg_gazebo_ros , 'launch' , 'gazebo.launch.py' ), ) ) verbose_arg = DeclareLaunchArgument ( 'verbose' , default_value = 'true' , description = 'Set \"true\" to increase messages written to terminal.' ) # load the world file world_arg = DeclareLaunchArgument ( 'world' , default_value = [ os . path . join ( pkg_simulation , 'worlds' , world_file ), '' ], description = 'SDF world file' ) spawn_robot = Node ( package = \"gazebo_ros\" , executable = \"spawn_entity.py\" , arguments = [ \"-file\" , urdf_path , \"-entity\" , \"robot\" , \"-x\" , \"0.0\" , \"-y\" , \"0.0\" , \"-z\" , \"0.0\" ], output = \"screen\" ) # set args before call gazebo return LaunchDescription ([ verbose_arg , world_arg , gazebo , spawn_robot ])","title":"launch"},{"location":"projects/ROS2%20Cookbook/gazebo/xacro_spawn/#build-and-run","text":"# Build colcon build --symlink-install --packages-select rrbot_description colcon build --symlink-install --packages-select rrbot_gazebo # Run ros2 launch rrbot_gazebo spawn_xacro.launch.py","title":"Build and Run"},{"location":"projects/ROS2%20Cookbook/gazebo/sensors/imu/","tags":["gazebo","imu"],"text":"","title":"Gazebo IMU sensor, sdf and code"},{"location":"projects/ROS2%20Cookbook/launch.py/simple_log/","tags":["log","launch"],"text":"import launch from launch import logging log = logging . get_logger ( \"simple\" ) log . error ( \"error log line\" ) log . info ( \"info log line\" ) def generate_launch_description (): return launch . LaunchDescription ([ launch . actions . DeclareLaunchArgument ( 'msg' , default_value = 'hello world' ), launch . actions . DeclareLaunchArgument ( 'other' ), launch . actions . LogInfo ( msg = launch . substitutions . LaunchConfiguration ( 'msg' )), launch . actions . LogInfo ( msg = launch . substitutions . LaunchConfiguration ( 'other' , default = \"aa\" )), ])","title":"Simple launch file with log"},{"location":"projects/ROS2%20Cookbook/miscellaneous/mixed_cpp_pyhon_package.md/","tags":["ros2"],"text":"Reference # How to create a mixed C++ and python ament package","title":"Mixed C++ and python ament package"},{"location":"projects/ROS2%20Cookbook/miscellaneous/mixed_cpp_pyhon_package.md/#reference","text":"How to create a mixed C++ and python ament package","title":"Reference"},{"location":"projects/ROS2%20Cookbook/nav2/","tags":["navigation","nav"],"text":"Navigation is about enabling a mobile robot to move from one location to another without running into any obstacles. Odometry # Odometry get data from sensors to estimate the change in robot position, orientation and velocity over time relative to some point.","title":"NAV2"},{"location":"projects/ROS2%20Cookbook/nav2/#odometry","text":"Odometry get data from sensors to estimate the change in robot position, orientation and velocity over time relative to some point.","title":"Odometry"},{"location":"projects/ROS2%20Cookbook/perception/","tags":["cv_bridge"],"text":"install sudo apt -y install ros-foxy-vision-opencv sudo apt -y install ros-foxy-v4l2-camera # opencv from source or pip # pip3 install opencv-python urdf <gazebo reference= \"camera_link\" > <sensor type= \"camera\" name= \"camera1\" > <update_rate> 15.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 640 </width> <height> 480 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"camera_controller\" filename= \"libgazebo_ros_camera.so\" > <alwaysOn> true </alwaysOn> <updateRate> 0.0 </updateRate> <cameraName> rrbot/camera1 </cameraName> <imageTopicName> image_raw </imageTopicName> <cameraInfoTopicName> camera_info </cameraInfoTopicName> <frameName> camera_link_optical </frameName> <hackBaseline> 0.0 </hackBaseline> <distortionK1> 0.0 </distortionK1> <distortionK2> 0.0 </distortionK2> <distortionK3> 0.0 </distortionK3> <distortionT1> 0.0 </distortionT1> <distortionT2> 0.0 </distortionT2> <CxPrime> 0 </CxPrime> <Cx> 0.0 </Cx> <Cy> 0.0 </Cy> <focalLength> 0.0 </focalLength> </plugin> </sensor> </gazebo> CvBridge # import rclpy import cv2 import numpy as np from rclpy.node import Node from sensor_msgs.msg import Image from cv_bridge import CvBridge , CvBridgeError CAMERA_TOPIC = \"/camera1/image_raw\" class ImageViewer ( Node ): def __init__ ( self ): super () . __init__ ( \"viewer\" ) self . image_sub = self . create_subscription ( Image , CAMERA_TOPIC , self . callback , 10 ) self . bridge = CvBridge () def callback ( self , data ): try : cv_image = self . bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) except CvBridgeError as e : print ( e ) cv2 . imshow ( \"image\" , cv_image ) cv2 . waitKey ( 3 ) def main ( args = None ): try : rclpy . init () image_converter = ImageViewer () rclpy . spin ( image_converter ) image_converter . destroy_node rclpy . shutdown () except KeyboardInterrupt : print ( \"Shutting down\" ) cv2 . destroyAllWindows () if __name__ == '__main__' : main ()","title":"ROS2 perception start here"},{"location":"projects/ROS2%20Cookbook/perception/#cvbridge","text":"import rclpy import cv2 import numpy as np from rclpy.node import Node from sensor_msgs.msg import Image from cv_bridge import CvBridge , CvBridgeError CAMERA_TOPIC = \"/camera1/image_raw\" class ImageViewer ( Node ): def __init__ ( self ): super () . __init__ ( \"viewer\" ) self . image_sub = self . create_subscription ( Image , CAMERA_TOPIC , self . callback , 10 ) self . bridge = CvBridge () def callback ( self , data ): try : cv_image = self . bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) except CvBridgeError as e : print ( e ) cv2 . imshow ( \"image\" , cv_image ) cv2 . waitKey ( 3 ) def main ( args = None ): try : rclpy . init () image_converter = ImageViewer () rclpy . spin ( image_converter ) image_converter . destroy_node rclpy . shutdown () except KeyboardInterrupt : print ( \"Shutting down\" ) cv2 . destroyAllWindows () if __name__ == '__main__' : main ()","title":"CvBridge"},{"location":"projects/ROS2%20Cookbook/rviz/launch_robot_in_rviz/","tags":["rviz","launch"],"text":"project # rrbot_description \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 config.rviz \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 rviz1.launch.py \u2502 \u2514\u2500\u2500 rviz.launch.py \u251c\u2500\u2500 meshes \u2502 \u2514\u2500\u2500 hokuyo.dae \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 urdf \u251c\u2500\u2500 materials.xacro \u251c\u2500\u2500 rrbot.gazebo \u2514\u2500\u2500 rrbot.xacro robot_state_publisher # robot_state_publisher uses the URDF specified by the parameter robot_description and the joint positions from the topic joint_states to calculate the forward kinematics of the robot and publish the results via tf. ros2 node info /robot_state_publisher # result /robot_state_publisher Subscribers: /joint_states: sensor_msgs/msg/JointState /parameter_events: rcl_interfaces/msg/ParameterEvent Publishers: /parameter_events: rcl_interfaces/msg/ParameterEvent /robot_description: std_msgs/msg/String /rosout: rcl_interfaces/msg/Log /tf: tf2_msgs/msg/TFMessage /tf_static: tf2_msgs/msg/TFMessage joint_state_publisher # The package publishing sensor_msgs/msg/JointState messages for a robot described with URDF. Given a URDF (either passed on the command-line or via the /robot_description topic). ros2 node info /joint_state_publisher # result /joint_state_publisher Subscribers: /robot_description: std_msgs/msg/String Publishers: /joint_states: sensor_msgs/msg/JointState launch # rviz1.launch.py import os from launch_ros.actions import Node from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory package_name = 'rrbot_description' def generate_launch_description (): rviz_config_path = os . path . join ( get_package_share_directory ( package_name ), \"config\" , \"config.rviz\" ) urdf_path = os . path . join ( get_package_share_directory ( package_name ), \"urdf\" , \"rrbot.urdf\" ) robot_state_publisher_node = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , arguments = [ urdf_path ] ) joint_state_publisher_node = Node ( package = 'joint_state_publisher' , executable = 'joint_state_publisher' , name = 'joint_state_publisher' ) joint_state_publisher_gui_node = Node ( package = 'joint_state_publisher_gui' , executable = 'joint_state_publisher_gui' , name = 'joint_state_publisher_gui' ) rviz_node = Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , output = 'screen' , arguments = [ '-d' , rviz_config_path ], ) return LaunchDescription ([ joint_state_publisher_node , joint_state_publisher_gui_node , robot_state_publisher_node , rviz_node ]) launch urdf passing robot_description as parameter with open ( urdf_path , 'r' ) as infp : robot_desc = infp . read () robot_state_publisher_node = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , output = 'screen' , parameters = [{ 'robot_description' : robot_desc }] ) launch xacro xacro_path = os . path . join ( get_package_share_directory ( package_name ), \"urdf\" , \"robot.xacro\" ) robot_desc = xacro . process_file ( xacro_path ) . toxml () robot_state_publisher_node = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , output = 'screen' , parameters = [{ 'robot_description' : robot_desc }] ) Run # ros2 launch rrbot_description rviz1.launch.py RobotModel Notice to /robot_description topic policy - Description Source: Topic - Description Topic: /robot_description - Reliability Policy: Reliable - Durability Policy: Volatile","title":"rviz and launch"},{"location":"projects/ROS2%20Cookbook/rviz/launch_robot_in_rviz/#project","text":"rrbot_description \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 config.rviz \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 rviz1.launch.py \u2502 \u2514\u2500\u2500 rviz.launch.py \u251c\u2500\u2500 meshes \u2502 \u2514\u2500\u2500 hokuyo.dae \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 urdf \u251c\u2500\u2500 materials.xacro \u251c\u2500\u2500 rrbot.gazebo \u2514\u2500\u2500 rrbot.xacro","title":"project"},{"location":"projects/ROS2%20Cookbook/rviz/launch_robot_in_rviz/#robot_state_publisher","text":"robot_state_publisher uses the URDF specified by the parameter robot_description and the joint positions from the topic joint_states to calculate the forward kinematics of the robot and publish the results via tf. ros2 node info /robot_state_publisher # result /robot_state_publisher Subscribers: /joint_states: sensor_msgs/msg/JointState /parameter_events: rcl_interfaces/msg/ParameterEvent Publishers: /parameter_events: rcl_interfaces/msg/ParameterEvent /robot_description: std_msgs/msg/String /rosout: rcl_interfaces/msg/Log /tf: tf2_msgs/msg/TFMessage /tf_static: tf2_msgs/msg/TFMessage","title":"robot_state_publisher"},{"location":"projects/ROS2%20Cookbook/rviz/launch_robot_in_rviz/#joint_state_publisher","text":"The package publishing sensor_msgs/msg/JointState messages for a robot described with URDF. Given a URDF (either passed on the command-line or via the /robot_description topic). ros2 node info /joint_state_publisher # result /joint_state_publisher Subscribers: /robot_description: std_msgs/msg/String Publishers: /joint_states: sensor_msgs/msg/JointState","title":"joint_state_publisher"},{"location":"projects/ROS2%20Cookbook/rviz/launch_robot_in_rviz/#launch","text":"rviz1.launch.py import os from launch_ros.actions import Node from launch import LaunchDescription from ament_index_python.packages import get_package_share_directory package_name = 'rrbot_description' def generate_launch_description (): rviz_config_path = os . path . join ( get_package_share_directory ( package_name ), \"config\" , \"config.rviz\" ) urdf_path = os . path . join ( get_package_share_directory ( package_name ), \"urdf\" , \"rrbot.urdf\" ) robot_state_publisher_node = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , arguments = [ urdf_path ] ) joint_state_publisher_node = Node ( package = 'joint_state_publisher' , executable = 'joint_state_publisher' , name = 'joint_state_publisher' ) joint_state_publisher_gui_node = Node ( package = 'joint_state_publisher_gui' , executable = 'joint_state_publisher_gui' , name = 'joint_state_publisher_gui' ) rviz_node = Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , output = 'screen' , arguments = [ '-d' , rviz_config_path ], ) return LaunchDescription ([ joint_state_publisher_node , joint_state_publisher_gui_node , robot_state_publisher_node , rviz_node ]) launch urdf passing robot_description as parameter with open ( urdf_path , 'r' ) as infp : robot_desc = infp . read () robot_state_publisher_node = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , output = 'screen' , parameters = [{ 'robot_description' : robot_desc }] ) launch xacro xacro_path = os . path . join ( get_package_share_directory ( package_name ), \"urdf\" , \"robot.xacro\" ) robot_desc = xacro . process_file ( xacro_path ) . toxml () robot_state_publisher_node = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , output = 'screen' , parameters = [{ 'robot_description' : robot_desc }] )","title":"launch"},{"location":"projects/ROS2%20Cookbook/rviz/launch_robot_in_rviz/#run","text":"ros2 launch rrbot_description rviz1.launch.py RobotModel Notice to /robot_description topic policy - Description Source: Topic - Description Topic: /robot_description - Reliability Policy: Reliable - Durability Policy: Volatile","title":"Run"},{"location":"projects/ROS2%20Cookbook/tf/","tags":["tf"],"text":"Static transformation # ros2 run tf2_ros static_transform_publisher 2 1 0 0.765 0 0 world robot_1 ros2 run tf2_ros static_transform_publisher 1 0 0 0 0 0 robot_1 robot_2 ros2 run rviz2 rviz2 Dynamic transformation # robot_state_publisher # cli # load the content of the urdf/xacro into robot_state_publisher parameter ros2 run robot_state_publisher robot_state_publisher \\ --ros-args -p robot_description:=\"${ xacro ~/urdf/rrbot.xacro }\" launch # robot_state_publisher.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node import xacro def generate_launch_description (): # Specify the name of the package and path to xacro file within the package pkg_name = 'rrbot_description' file_name = 'rrbot.xacro' # Use xacro to process the file xacro_file = os . path . join ( get_package_share_directory ( pkg_name ), \"urd\" , file_name ) robot_description_raw = xacro . process_file ( xacro_file ) . toxml () # Configure the node node_robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , output = 'screen' , parameters = [{ 'robot_description' : robot_description_raw }] # add other parameters here if required ) # Run the node return LaunchDescription ([ node_robot_state_publisher ]) ros2 run joint_state_publisher_gui joint_state_publisher_gui References # The ROS Transform System (TF) | Getting Ready to Build Robots with ROS #6","title":"TF"},{"location":"projects/ROS2%20Cookbook/tf/#static-transformation","text":"ros2 run tf2_ros static_transform_publisher 2 1 0 0.765 0 0 world robot_1 ros2 run tf2_ros static_transform_publisher 1 0 0 0 0 0 robot_1 robot_2 ros2 run rviz2 rviz2","title":"Static transformation"},{"location":"projects/ROS2%20Cookbook/tf/#dynamic-transformation","text":"","title":"Dynamic transformation"},{"location":"projects/ROS2%20Cookbook/tf/#robot_state_publisher","text":"","title":"robot_state_publisher"},{"location":"projects/ROS2%20Cookbook/tf/#cli","text":"load the content of the urdf/xacro into robot_state_publisher parameter ros2 run robot_state_publisher robot_state_publisher \\ --ros-args -p robot_description:=\"${ xacro ~/urdf/rrbot.xacro }\"","title":"cli"},{"location":"projects/ROS2%20Cookbook/tf/#launch","text":"robot_state_publisher.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node import xacro def generate_launch_description (): # Specify the name of the package and path to xacro file within the package pkg_name = 'rrbot_description' file_name = 'rrbot.xacro' # Use xacro to process the file xacro_file = os . path . join ( get_package_share_directory ( pkg_name ), \"urd\" , file_name ) robot_description_raw = xacro . process_file ( xacro_file ) . toxml () # Configure the node node_robot_state_publisher = Node ( package = 'robot_state_publisher' , executable = 'robot_state_publisher' , output = 'screen' , parameters = [{ 'robot_description' : robot_description_raw }] # add other parameters here if required ) # Run the node return LaunchDescription ([ node_robot_state_publisher ]) ros2 run joint_state_publisher_gui joint_state_publisher_gui","title":"launch"},{"location":"projects/ROS2%20Cookbook/tf/#references","text":"The ROS Transform System (TF) | Getting Ready to Build Robots with ROS #6","title":"References"},{"location":"projects/ROS2%20Cookbook/tf/tf_tools/","tags":["tf2"],"text":"install sudo apt install ros-foxy-tf2-tools Reference # How to Create a Simulated Mobile Robot in ROS 2 Using URDF","title":"tf tools"},{"location":"projects/ROS2%20Cookbook/tf/tf_tools/#reference","text":"How to Create a Simulated Mobile Robot in ROS 2 Using URDF","title":"Reference"},{"location":"projects/ROS2%20Cookbook/xacro/vscode_tips/","tags":["xacro","vscode"],"text":"XML Region # <!-- #region title--> ... <!-- #endregion -->","title":"VSCode tips using in xacro files"},{"location":"projects/ROS2%20Cookbook/xacro/vscode_tips/#xml-region","text":"<!-- #region title--> ... <!-- #endregion -->","title":"XML Region"},{"location":"projects/TurtleBot3/TurtleBot3/","text":"","title":"TurtleBot3"},{"location":"projects/TurtleBot3/Simulation/simulation/","tags":["ros2","Turtlebot3","simulation"],"text":"Installation # cd ~/turtlebot3_ws/src/ # turtlebot3 git clone -b foxy-devel https://github.com/ROBOTIS-GIT/turtlebot3.git # turtlebot3 msgs git clone -b foxy-devel https://github.com/ROBOTIS-GIT/turtlebot3_msgs.git # simulation git clone -b foxy-devel https://github.com/ROBOTIS-GIT/turtlebot3_simulations.git # build cd ~/turtlebot3_ws && colcon build --symlink-install Run # export TURTLEBOT3_MODEL = burger ros2 launch turtlebot3_gazebo empty_world.launch.py","title":"Turtlebot3 simulation"},{"location":"projects/TurtleBot3/Simulation/simulation/#installation","text":"cd ~/turtlebot3_ws/src/ # turtlebot3 git clone -b foxy-devel https://github.com/ROBOTIS-GIT/turtlebot3.git # turtlebot3 msgs git clone -b foxy-devel https://github.com/ROBOTIS-GIT/turtlebot3_msgs.git # simulation git clone -b foxy-devel https://github.com/ROBOTIS-GIT/turtlebot3_simulations.git # build cd ~/turtlebot3_ws && colcon build --symlink-install","title":"Installation"},{"location":"projects/TurtleBot3/Simulation/simulation/#run","text":"export TURTLEBOT3_MODEL = burger ros2 launch turtlebot3_gazebo empty_world.launch.py","title":"Run"},{"location":"projects/follow_the_line/","tags":["ros2","projects"],"text":"Project # \u251c\u2500\u2500 basic_mobile_robot \u2502 \u251c\u2500\u2500 follow_line.py \u2502 \u251c\u2500\u2500 follow.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 viewer.py \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 description \u2502 \u251c\u2500\u2500 camera.xacro \u2502 \u251c\u2500\u2500 depth_camera.xacro \u2502 \u251c\u2500\u2500 face.xacro \u2502 \u251c\u2500\u2500 gazebo_control.xacro \u2502 \u251c\u2500\u2500 inertial_macros.xacro \u2502 \u251c\u2500\u2500 lidar.xacro \u2502 \u251c\u2500\u2500 robot_core.xacro \u2502 \u251c\u2500\u2500 robot.urdf.xacro \u2502 \u2514\u2500\u2500 ros2_control.xacro \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 articubot_one \u2502 \u2502 \u251c\u2500\u2500 articubot_one.launch.py \u2502 \u2502 \u2514\u2500\u2500 rsp.launch.py \u2502 \u2514\u2500\u2500 follow \u2502 \u2514\u2500\u2500 follow.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 ground_course \u2502 \u251c\u2500\u2500 materials \u2502 \u2502 \u251c\u2500\u2500 scripts \u2502 \u2502 \u2502 \u2514\u2500\u2500 course.material \u2502 \u2502 \u2514\u2500\u2500 textures \u2502 \u2502 \u2514\u2500\u2500 course.png \u2502 \u251c\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 src \u2514\u2500\u2500 worlds \u2514\u2500\u2500 course.world Demo # ros2 launch basic_mobile_robot follow.launch.py","title":"Follow the line"},{"location":"projects/follow_the_line/#project","text":"\u251c\u2500\u2500 basic_mobile_robot \u2502 \u251c\u2500\u2500 follow_line.py \u2502 \u251c\u2500\u2500 follow.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 viewer.py \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 rviz.rviz \u251c\u2500\u2500 description \u2502 \u251c\u2500\u2500 camera.xacro \u2502 \u251c\u2500\u2500 depth_camera.xacro \u2502 \u251c\u2500\u2500 face.xacro \u2502 \u251c\u2500\u2500 gazebo_control.xacro \u2502 \u251c\u2500\u2500 inertial_macros.xacro \u2502 \u251c\u2500\u2500 lidar.xacro \u2502 \u251c\u2500\u2500 robot_core.xacro \u2502 \u251c\u2500\u2500 robot.urdf.xacro \u2502 \u2514\u2500\u2500 ros2_control.xacro \u251c\u2500\u2500 launch \u2502 \u251c\u2500\u2500 articubot_one \u2502 \u2502 \u251c\u2500\u2500 articubot_one.launch.py \u2502 \u2502 \u2514\u2500\u2500 rsp.launch.py \u2502 \u2514\u2500\u2500 follow \u2502 \u2514\u2500\u2500 follow.launch.py \u251c\u2500\u2500 models \u2502 \u2514\u2500\u2500 ground_course \u2502 \u251c\u2500\u2500 materials \u2502 \u2502 \u251c\u2500\u2500 scripts \u2502 \u2502 \u2502 \u2514\u2500\u2500 course.material \u2502 \u2502 \u2514\u2500\u2500 textures \u2502 \u2502 \u2514\u2500\u2500 course.png \u2502 \u251c\u2500\u2500 model.config \u2502 \u2514\u2500\u2500 model.sdf \u251c\u2500\u2500 package.xml \u251c\u2500\u2500 src \u2514\u2500\u2500 worlds \u2514\u2500\u2500 course.world","title":"Project"},{"location":"projects/follow_the_line/#demo","text":"ros2 launch basic_mobile_robot follow.launch.py","title":"Demo"},{"location":"projects/vrx/buoyancy_plugin/","tags":["vrx","buoyancy"],"text":"vrx buoyancy plugin demo plugin code and world from vrx project usv_gazebo_plugins buoyancy_gazebo_plugin depend on wave_gazebo_plugins project also from vrx project Plugin # linear drag \\[ F_d = \\beta_l m \\frac{V}{V_T} (\\boldsymbol{v_w} - \\boldsymbol{v_c}) \\] angular drag (torque) \\[ T_d = \\beta_a m \\frac{V}{V_T} L^2 \\omega \\] <model name= \"2_box\" > <pose> 0.1 0.5 0.5 1.0 0 0 </pose> <static> False </static> <link name= \"link\" > <visual name= \"visual\" > <geometry> <box> <size> 0.171 0.171 0.171 </size> </box> </geometry> </visual> <collision name= \"collision\" > <geometry> <box> <size> 0.171 0.171 0.171 </size> </box> </geometry> </collision> <inertial> <mass> 2 </mass> <inertia> <ixx> 0.009708012000000002 </ixx> <ixy> 0 </ixy> <ixz> 0 </ixz> <iyy> 0.009708012000000002 </iyy> <iyz> 0 </iyz> <izz> 0.009708012000000002 </izz> </inertia> </inertial> </link> <plugin filename= \"libbuoyancy_gazebo_plugin.so\" name= \"BuoyancyPlugin\" > <fluid_density> 1000 </fluid_density> <fluid_level> 0.0 </fluid_level> <linear_drag> 10.0 </linear_drag> <angular_drag> 4.0 </angular_drag> <buoyancy name= \"buoyancy\" > <link_name> link </link_name> <geometry> <box> <size> 0.171 0.171 0.171 </size> </box> </geometry> </buoyancy> </plugin> </model> Note The above code is part of buoyancy_plugin_demo.world References # - vrx github - vrx buoyancy_plugin","title":"vrx buoyancy plugin"},{"location":"projects/vrx/buoyancy_plugin/#plugin","text":"linear drag \\[ F_d = \\beta_l m \\frac{V}{V_T} (\\boldsymbol{v_w} - \\boldsymbol{v_c}) \\] angular drag (torque) \\[ T_d = \\beta_a m \\frac{V}{V_T} L^2 \\omega \\] <model name= \"2_box\" > <pose> 0.1 0.5 0.5 1.0 0 0 </pose> <static> False </static> <link name= \"link\" > <visual name= \"visual\" > <geometry> <box> <size> 0.171 0.171 0.171 </size> </box> </geometry> </visual> <collision name= \"collision\" > <geometry> <box> <size> 0.171 0.171 0.171 </size> </box> </geometry> </collision> <inertial> <mass> 2 </mass> <inertia> <ixx> 0.009708012000000002 </ixx> <ixy> 0 </ixy> <ixz> 0 </ixz> <iyy> 0.009708012000000002 </iyy> <iyz> 0 </iyz> <izz> 0.009708012000000002 </izz> </inertia> </inertial> </link> <plugin filename= \"libbuoyancy_gazebo_plugin.so\" name= \"BuoyancyPlugin\" > <fluid_density> 1000 </fluid_density> <fluid_level> 0.0 </fluid_level> <linear_drag> 10.0 </linear_drag> <angular_drag> 4.0 </angular_drag> <buoyancy name= \"buoyancy\" > <link_name> link </link_name> <geometry> <box> <size> 0.171 0.171 0.171 </size> </box> </geometry> </buoyancy> </plugin> </model> Note The above code is part of buoyancy_plugin_demo.world","title":"Plugin"},{"location":"projects/vrx/buoyancy_plugin/#references","text":"- vrx github - vrx buoyancy_plugin","title":"References"},{"location":"projects/wasp/gimbal/gazebo/add_roll_control/","tags":["gazebo","gimbal"],"text":"Objective # Add ROLL control Add IMU to stabilize ROLL Project #","title":"simple gazebo gimbal with ROLL control"},{"location":"projects/wasp/gimbal/gazebo/add_roll_control/#objective","text":"Add ROLL control Add IMU to stabilize ROLL","title":"Objective"},{"location":"projects/wasp/gimbal/gazebo/add_roll_control/#project","text":"","title":"Project"},{"location":"projects/wasp/gimbal/gazebo/gimbal_small_2d/","tags":["gazebo","gimbal"],"text":"Using models from osrf github - iris_with_standoffs - gimbal_small_2d gz cli # using gz cli to get info and control gimbal topic # gz topic -l | grep iris # result /gazebo/default/iris_demo/gimbal_small_2d/base_link/wrench /gazebo/default/iris_demo/gimbal_small_2d/tilt_link/camera/cmd /gazebo/default/iris_demo/gimbal_small_2d/tilt_link/camera/image /gazebo/default/iris_demo/gimbal_small_2d/tilt_link/wrench /gazebo/default/iris_demo/gimbal_tilt_cmd /gazebo/default/iris_demo/gimbal_tilt_status Gimbal tilt # Control # Control tilt using gimbal_tilt_cmd topic gimbal_tilt_cmd gz topic --info /gazebo/default/iris_demo/gimbal_tilt_cmd # Result Type: gazebo.msgs.GzString Publishers: Subscribers: 192 .168.1.207:46047 pub gz topic -p /gazebo/default/iris_demo/gimbal_tilt_cmd --msg \"data: '1'\" gz topic -p /gazebo/default/iris_demo/gimbal_tilt_cmd --msg \"data: '0'\" Info / Status # gimbal_tilt_status gz topic --info /gazebo/default/iris_demo/gimbal_tilt_status # Result Type: gazebo.msgs.GzString Publishers: 192 .168.1.207:46047 Subscribers: cli gz topic --echo /gazebo/default/iris_demo/gimbal_tilt_status # result data: \"-0.00196318\" data: \"-0.00196315\" data: \"-0.00196316\" Control from code # Using pygazebo project github To send Protobuf messages using python import asyncio import math import pygazebo def cb ( data ): message = pygazebo . msg . gz_string_pb2 . GzString . FromString ( data ) print ( 'Received message:' , message . data ) async def main (): manager = await pygazebo . connect () publisher = await manager . advertise ( '/gazebo/default/iris_demo/gimbal_tilt_cmd' , 'gazebo.msgs.GzString' ) subscriber = await manager . subscribe ( \"/gazebo/default/iris_demo/gimbal_tilt_status\" , 'gazebo.msgs.GzString' , cb ) poses = [ 0 , 0 , math . pi / 2 , 0 ] for tilt in poses : message = pygazebo . msg . gz_string_pb2 . GzString () message . data = str ( tilt ) print ( f \"pub tilt { tilt } radian\" ) await publisher . publish ( message ) await asyncio . sleep ( 1 ) loop = asyncio . get_event_loop () loop . run_until_complete ( main ()) Plugin # To Control and get gimbal status gazebo uses plugin GimbalSmall2dPlugin source code The plugin expose gimbal_tilt_cmd as tilt command in angel (radian) and translate it\u2019s to force command with PID controller","title":"simple gazebo gimbal"},{"location":"projects/wasp/gimbal/gazebo/gimbal_small_2d/#gz-cli","text":"using gz cli to get info and control","title":"gz cli"},{"location":"projects/wasp/gimbal/gazebo/gimbal_small_2d/#gimbal-topic","text":"gz topic -l | grep iris # result /gazebo/default/iris_demo/gimbal_small_2d/base_link/wrench /gazebo/default/iris_demo/gimbal_small_2d/tilt_link/camera/cmd /gazebo/default/iris_demo/gimbal_small_2d/tilt_link/camera/image /gazebo/default/iris_demo/gimbal_small_2d/tilt_link/wrench /gazebo/default/iris_demo/gimbal_tilt_cmd /gazebo/default/iris_demo/gimbal_tilt_status","title":"gimbal topic"},{"location":"projects/wasp/gimbal/gazebo/gimbal_small_2d/#gimbal-tilt","text":"","title":"Gimbal tilt"},{"location":"projects/wasp/gimbal/gazebo/gimbal_small_2d/#control","text":"Control tilt using gimbal_tilt_cmd topic gimbal_tilt_cmd gz topic --info /gazebo/default/iris_demo/gimbal_tilt_cmd # Result Type: gazebo.msgs.GzString Publishers: Subscribers: 192 .168.1.207:46047 pub gz topic -p /gazebo/default/iris_demo/gimbal_tilt_cmd --msg \"data: '1'\" gz topic -p /gazebo/default/iris_demo/gimbal_tilt_cmd --msg \"data: '0'\"","title":"Control"},{"location":"projects/wasp/gimbal/gazebo/gimbal_small_2d/#info--status","text":"gimbal_tilt_status gz topic --info /gazebo/default/iris_demo/gimbal_tilt_status # Result Type: gazebo.msgs.GzString Publishers: 192 .168.1.207:46047 Subscribers: cli gz topic --echo /gazebo/default/iris_demo/gimbal_tilt_status # result data: \"-0.00196318\" data: \"-0.00196315\" data: \"-0.00196316\"","title":"Info / Status"},{"location":"projects/wasp/gimbal/gazebo/gimbal_small_2d/#control-from-code","text":"Using pygazebo project github To send Protobuf messages using python import asyncio import math import pygazebo def cb ( data ): message = pygazebo . msg . gz_string_pb2 . GzString . FromString ( data ) print ( 'Received message:' , message . data ) async def main (): manager = await pygazebo . connect () publisher = await manager . advertise ( '/gazebo/default/iris_demo/gimbal_tilt_cmd' , 'gazebo.msgs.GzString' ) subscriber = await manager . subscribe ( \"/gazebo/default/iris_demo/gimbal_tilt_status\" , 'gazebo.msgs.GzString' , cb ) poses = [ 0 , 0 , math . pi / 2 , 0 ] for tilt in poses : message = pygazebo . msg . gz_string_pb2 . GzString () message . data = str ( tilt ) print ( f \"pub tilt { tilt } radian\" ) await publisher . publish ( message ) await asyncio . sleep ( 1 ) loop = asyncio . get_event_loop () loop . run_until_complete ( main ())","title":"Control from code"},{"location":"projects/wasp/gimbal/gazebo/gimbal_small_2d/#plugin","text":"To Control and get gimbal status gazebo uses plugin GimbalSmall2dPlugin source code The plugin expose gimbal_tilt_cmd as tilt command in angel (radian) and translate it\u2019s to force command with PID controller","title":"Plugin"},{"location":"tags/","text":"","title":"Tags"}]}