{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#robots-inside","title":"Robots Inside","text":"<p>First steps in robotics Systems. From hardware to applications</p>"},{"location":"#last-action","title":"Last action","text":"<ul> <li>Move to zsh</li> <li>Start dev in .devcontainers</li> <li>Learn Behavior Trees</li> </ul>"},{"location":"#blog","title":"Blog","text":"<p>Each post is what I\u2019ve learned, and I wrote them down to share. Hope you\u2019ll find something interesting there.</p> <p>Read news</p>"},{"location":"#projects","title":"Projects","text":"<p>A list of my projects which are done for learning and practicing in free time.</p> <p>See projects</p>"},{"location":"#ros2","title":"ROS2","text":"<p>Enter</p>"},{"location":"#igition","title":"Igition","text":"<p>Enter</p>"},{"location":"blog/AI_Buzz/Linear_Regression/","title":"Index","text":"<p>Linear Regression</p>","tags":["deep learning","ai","beginner","regression"]},{"location":"blog/Ardupilot/","title":"Ardupilot","text":"","tags":["ardupilot"]},{"location":"blog/Ardupilot/#tutorial","title":"Tutorial","text":"<ul> <li>Run SITL and Ignition simulator</li> </ul>","tags":["ardupilot"]},{"location":"blog/Ardupilot/#reference","title":"Reference","text":"<ul> <li>ros-gz-rover</li> <li>Ardupilot SITL models for gazebo and ignition</li> <li>BlueROV2 in Ignition Gazebo</li> </ul>","tags":["ardupilot"]},{"location":"blog/Ardupilot/ardupilot_dds/","title":"Ardupilot with dds","text":"<p>Testing with DDS/micro-Ros</p>","tags":["ros2","ardupilot","dds","micro ros","xrce"]},{"location":"blog/Ardupilot/ardupilot_dds/#xrce","title":"XRCE","text":"<p>eXtremely Resource Constrained Environments</p> <p></p> <ul> <li>Micro XRCE-DDS Client</li> <li>Micro XRCE-DDS Agent</li> <li>Micro XRCE-DDS Gen</li> </ul>","tags":["ros2","ardupilot","dds","micro ros","xrce"]},{"location":"blog/Ardupilot/ardupilot_dds/#micro-xrce-dds-client","title":"Micro XRCE-DDS Client","text":"<p>eProsima client Client can communicate with the DDS Network as any other DDS actor could do. via Agent</p>","tags":["ros2","ardupilot","dds","micro ros","xrce"]},{"location":"blog/Ardupilot/ardupilot_dds/#micro-xrce-dds-agent","title":"Micro XRCE-DDS Agent","text":"<p>eProsima Agent </p> <p>The eProsima Micro XRCE-DDS Agent acts as a server between the DDS Network and eProsima Micro XRCE-DDS Clients applications.</p>","tags":["ros2","ardupilot","dds","micro ros","xrce"]},{"location":"blog/Ardupilot/ardupilot_dds/#micro-xrce-dds-gen","title":"Micro XRCE-DDS Gen","text":"<p>eProsima gen eProsima Micro XRCE-DDS Gen is a Java application used to generate source code for the eProsima Micro XRCE-DDS software.</p>","tags":["ros2","ardupilot","dds","micro ros","xrce"]},{"location":"blog/Ardupilot/ardupilot_dds/#ardupilot-demo","title":"Ardupilot Demo","text":"<p>Run demo explain by the README file</p>","tags":["ros2","ardupilot","dds","micro ros","xrce"]},{"location":"blog/Ardupilot/ardupilot_dds/#install-micro-ros","title":"Install micro-ros","text":"<p>First micro-ROS Application on Linux</p>","tags":["ros2","ardupilot","dds","micro ros","xrce"]},{"location":"blog/Ardupilot/ardupilot_dds/#reference","title":"Reference","text":"<ul> <li>Ardupilot dev conf 23 ardupilot DDS</li> <li>MicroXRCE DDS on Ardupilot</li> <li>REP-0147 A Standard interface for Aerial Vehicles</li> </ul>","tags":["ros2","ardupilot","dds","micro ros","xrce"]},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/","title":"Ardupilot SITL with ignition simulator","text":"","tags":["ardupilot","sitl","plugin"]},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#objective","title":"Objective","text":"<p>Run Ardupilot (copter) SITL and ignition simulation - fortress - ardupilot_gazebo (plugin) - MAVProxy</p>","tags":["ardupilot","sitl","plugin"]},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#ardupilot_gazebo","title":"ardupilot_gazebo","text":"<ul> <li>clone <code>https://github.com/ArduPilot/ardupilot_gazebo.git</code></li> <li>ignition-garden branch</li> <li>build check instruction <code>https://github.com/ArduPilot/ardupilot_gazebo#installation-</code></li> </ul> <pre><code># Clone ardupilot_gazebo repository branch ignition-fortress\n# git subfolder\n\nmkdir ~/git\ncd git\ngit clone -b &lt;branchname&gt; &lt;remote-repo-url&gt;\ngit clone -b ignition-garden https://github.com/ArduPilot/ardupilot_gazebo.git\n</code></pre>","tags":["ardupilot","sitl","plugin"]},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#run","title":"Run","text":"terminal1<pre><code>export IGN_GAZEBO_SYSTEM_PLUGIN_PATH=$HOME/git/ardupilot_gazebo/build:${IGN_GAZEBO_SYSTEM_PLUGIN_PATH}\nexport IGN_GAZEBO_RESOURCE_PATH=$HOME/git/ardupilot_gazebo/models:$HOME/git/ardupilot_gazebo/worlds:${IGN_GAZEBO_RESOURCE_PATH}\n\n# note remove sky tag from sdf\nign gazebo -v 1 -r iris_arducopter_runway.world\n</code></pre>","tags":["ardupilot","sitl","plugin"]},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#sitl","title":"SITL","text":"terminal2 - run SITL<pre><code>./arducopter -S --model JSON \\\n--speedup 1 \\\n--defaults copter.parm,gazebo-iris.parm \\\n-I0\n</code></pre>","tags":["ardupilot","sitl","plugin"]},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#mavproxy","title":"MAVProxy","text":"mavproxy<pre><code>mavproxy.py --master tcp:127.0.0.1:5760\n\n# Arm and takeoff\nmode guided\narm throttle\ntakeoff 5\n</code></pre>","tags":["ardupilot","sitl","plugin"]},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#iris-with-gimbal-and-camera","title":"iris with gimbal and camera","text":"<ul> <li>Use <code>iris_with_ardupilot</code> model</li> <li>Add <code>Sensors</code> plugin to world</li> <li>Load model from fule</li> <li>change camera sensor topic to <code>/gimbal/camera</code></li> <li>Run bridge</li> <li>View camera image in <code>rqt_image_view</code></li> </ul> Add sensors plugin to world<pre><code>&lt;plugin\nfilename=\"ignition-gazebo-sensors-system\"\nname=\"ignition::gazebo::systems::Sensors\"&gt;\n&lt;render_engine&gt;ogre2&lt;/render_engine&gt;\n&lt;/plugin&gt;\n</code></pre> <p>fule dashboard </p> load model from fule<pre><code>&lt;include&gt;\n&lt;name&gt;gimbal_small_2d&lt;/name&gt;\n&lt;uri&gt;https://fuel.gazebosim.org/1.0/OpenRobotics/models/Gimbal Small 2D&lt;/uri&gt;\n&lt;pose&gt;0 -0.01 0.070 1.57 0 1.57&lt;/pose&gt;\n&lt;/include&gt;\n</code></pre> <p>gz cache location</p> <pre><code>~/.ignition/fuel\n# \n~/.ignition/fuel/fuel.gazebosim.org/openrobotics/models\n</code></pre> run bridge<pre><code>ros2 run ros_gz_bridge parameter_bridge /gimbal/camera@sensor_msgs/msg/Image@ignition.msgs.Image\n</code></pre> run RQT<pre><code>ros2 run rqt_image_view rqt_image_view /gimbal/camera\n</code></pre> <p></p>","tags":["ardupilot","sitl","plugin"]},{"location":"blog/Ardupilot/ardupilot_sitl_ignition/#reference","title":"Reference","text":"<ul> <li>ardupilot_gazebo</li> <li>ros gz bridge</li> </ul>","tags":["ardupilot","sitl","plugin"]},{"location":"blog/Ardupilot/debug_sitl/","title":"Debug Ardupilot","text":"<p>Ardupilot Debugging with GDB using VSCode</p>","tags":["ardupilot","SITL","debug"]},{"location":"blog/Ardupilot/debug_sitl/#setting-up-sitl","title":"Setting up SITL","text":"","tags":["ardupilot","SITL","debug"]},{"location":"blog/Ardupilot/debug_sitl/#config-and-build","title":"Config and Build","text":"<pre><code>./waf configure --debug\n</code></pre>","tags":["ardupilot","SITL","debug"]},{"location":"blog/Ardupilot/debug_sitl/#build-with-debug-symbol","title":"build with debug symbol","text":"<pre><code># ardupilot/Tools/autotest\n./sim_vehicle.py -v ArduCopter -f quad -D\n\n# -D, --debug         build with debugging\n</code></pre> <p>check if has debug symbols</p> <pre><code>file arducopter\n#\narducopter: ELF 64-bit LSB pie executable, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=eb51dfafe7a6f361a1f661d012e9cdd8006b4595, for GNU/Linux 3.2.0, with debug_info,\nnot stripped\n</code></pre>","tags":["ardupilot","SITL","debug"]},{"location":"blog/Ardupilot/debug_sitl/#add-vscode-launch-config","title":"Add VSCode launch config","text":"attach<pre><code>{\n\"name\": \"(gdb) Attach Copter\",\n\"type\": \"cppdbg\",\n\"request\": \"attach\",\n\"program\": \"${workspaceFolder}/build/sitl/bin/arducopter\",\n\"processId\": \"${command:pickProcess}\",\n\"MIMode\": \"gdb\",\n\"setupCommands\": [\n{\n\"description\": \"Enable pretty-printing for gdb\",\n\"text\": \"-enable-pretty-printing\",\n\"ignoreFailures\": true\n}\n]\n}\n</code></pre>","tags":["ardupilot","SITL","debug"]},{"location":"blog/Ardupilot/debug_sitl/#set-breakpoint","title":"Set breakpoint","text":"","tags":["ardupilot","SITL","debug"]},{"location":"blog/Ardupilot/debug_sitl/#demo-handlemessage","title":"Demo handleMessage","text":"<p>Entry points from mavlink message from GCS or CC</p> <p>Ardupilot code stuct with common function for all type of vehicles (copter, plan, rover ..) and specific implementation for vehicle (ArduCopter)</p> <ul> <li>ArduCopter/GCS_Mavlink.cpp</li> <li>libraries/GCS_MAVLink/GCS_Common</li> </ul> <p>To catch entry point for message handler place breakpoint at:</p> <ul> <li>Set breakpoint at <code>GCS_MAVLINK::handle_common_message</code> file: GCS_Common.cpp</li> <li>Set breakpoint at <code>GCS_MAVLINK_Copter::handleMessage</code> file: ArduCopter/GCS_Mavlink.cpp</li> <li>The above function has case conditions the default one call the <code>GCS_MAVLINK::handle_common_message</code> function: <code>handle_common_message</code></li> </ul>","tags":["ardupilot","SITL","debug"]},{"location":"blog/Ardupilot/precise_landing/","title":"Reference","text":"<ul> <li>patrickpoirier51</li> </ul>","tags":["ardupilot"]},{"location":"blog/Ardupilot/rangefinder/","title":"Add rangefinder using SITL and gazebo","text":"<p>Distance / Rangefinder has two type of message  </p> <pre><code>- Distance sensor #132 (common)\n- Rangefinder #173 (ardupilotmega) (reporting)\n</code></pre>","tags":["ardupilot","rangefinder","pymavlink","mavros","gazebo","SITL","distance sensor"]},{"location":"blog/Ardupilot/rangefinder/#distance-sensor-132","title":"Distance sensor #132","text":"<p>Distance sensor mavlink message - Distance sensor #132</p>","tags":["ardupilot","rangefinder","pymavlink","mavros","gazebo","SITL","distance sensor"]},{"location":"blog/Ardupilot/rangefinder/#demo-using-pymavlink","title":"Demo (using pymavlink)","text":"<ul> <li>Config SITL with RANGE FINDER</li> <li>Send mavlink distance using <code>pymavlink</code></li> </ul> params<pre><code>RNGFND1_TYPE 10             # mavlink\nRNGFND1_ORIENT 25           # down\nRNGFND1_MAX_CM 1000         # cm\nRNGFND1_MIN_CM 10           # cm\n</code></pre> script<pre><code>import time\n\nfrom pymavlink import mavutil\nfrom pymavlink.dialects.v20 import ardupilotmega\n\nTO_MS = 1e3\nUPDATE_RATE = 0.5\nRNGFND_TYPE_MAVLINK = 10\nSENSOR_ID = 1\nSENSOR_MAX_CM = 1000\nSENSOR_MIN_CM = 10\nSENSOR_COVARIANCE = 0\n\nSIM_CURRENT_READING_CM = 200\n\n# Create the connection\nmaster = mavutil.mavlink_connection(\"udp:127.0.0.1:14550\")\n# Wait a heartbeat before sending commands\nmaster.wait_heartbeat()\n\nt_start = time.time()\nwhile True:\n    time.sleep(UPDATE_RATE)\n    boot_time = int((time.time() - t_start) * TO_MS)\n    master.mav.distance_sensor_send(\n        boot_time,\n        SENSOR_MIN_CM,\n        SENSOR_MAX_CM,\n        SIM_CURRENT_READING_CM,\n        ardupilotmega.MAV_DISTANCE_SENSOR_UNKNOWN,\n        SENSOR_ID,\n        ardupilotmega.MAV_SENSOR_ROTATION_PITCH_270,\n        SENSOR_COVARIANCE,\n    )\n</code></pre> SITL/ sim_vehicle<pre><code>./sim_vehicle.py -v ArduCopter \\\n-f quad -D \\\n--console \\\n--add-param-file /home/user/apm_ws/src/apm_bringup/config/range_finder.parm\n</code></pre> <p>params file</p> <p>Add param file to sitl <pre><code>--add-param-file &lt;file path&gt;\n</code></pre></p>","tags":["ardupilot","rangefinder","pymavlink","mavros","gazebo","SITL","distance sensor"]},{"location":"blog/Ardupilot/rangefinder/#mavros","title":"MAVROS","text":"<p>Mavros has two plugins</p> <ul> <li>distance_sensor (common msg #132)</li> <li>rangefinder (ardupilot msg #173)</li> </ul>","tags":["ardupilot","rangefinder","pymavlink","mavros","gazebo","SITL","distance sensor"]},{"location":"blog/Ardupilot/rangefinder/#demo","title":"Demo","text":"<ul> <li>Send distance using distance_sensor plugin (msg #132)</li> <li>mavros open subscriber for each distance sensor declare as <code>subscriber: true</code> see config file example</li> <li>Read data using rangefinder plugin (msg #173)</li> <li>Echo distance data from fcu using cli (/mavros/rangfinder_pub)</li> </ul>","tags":["ardupilot","rangefinder","pymavlink","mavros","gazebo","SITL","distance sensor"]},{"location":"blog/Ardupilot/rangefinder/#publish-distance-data","title":"publish distance data","text":"demo send random distance data<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom rclpy.qos import qos_profile_sensor_data\nfrom sensor_msgs.msg import Range\n\nTOPIC_DISTANCE_READ = \"/mavros/rangefinder_pub\"\nTOPIC_DISTANCE_WRITE = \"/mavros/rangefinder_sub\"\nTOPIC_APM_RANGEFINDER = \"/mavros/rangefinder/rangefinder\"\nDRONE_NO = 1\nMIN_RANGE = 0.0\nMAX_RANGE = 4.0\nRANGE_SENSOR_TYPE = 1\nSENSOR_ID = 1\nCOVARIANCE = 0\n\nPUB_INTERVAL = 1/10\n\nclass RangeFinderNode(Node):\n    def __init__(self):\n        node_name = \"range_finder\"\n        super().__init__(node_name)\n\n        #mavros open subscriber, our node pub to it\n        self.__range_pub = self.create_publisher(\n            Range, TOPIC_DISTANCE_WRITE, qos_profile=qos_profile_sensor_data\n        )\n        self.create_subscription(\n            Range, TOPIC_APM_RANGEFINDER, self.__apm_rangefinder_message_handler, qos_profile=qos_profile_sensor_data\n        )\n\n        self.create_timer(PUB_INTERVAL, self.__send_range_message)\n\n    def __apm_rangefinder_message_handler(self, msg: Range):\n        self.get_logger().info(f\"apm rangefinder: {msg.range}\")\n\n    def __send_range_message(self, distance=2.0):\n        sec, nanosec = self.get_clock().now().seconds_nanoseconds()\n        range_msg = Range()\n        range_msg.header.frame_id = \"rangefinder\"\n        range_msg.header.stamp.sec = sec\n        range_msg.header.stamp.nanosec = nanosec\n        range_msg.range = float(distance)\n        range_msg.radiation_type = RANGE_SENSOR_TYPE\n        range_msg.min_range = MIN_RANGE\n        range_msg.max_range = MAX_RANGE\n        self.__range_pub.publish(range_msg)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = RangeFinderNode()\n    try:\n        rclpy.spin(node)\n    except KeyboardInterrupt:\n        print(\"User exit\")\n    finally:\n        node.destroy_node()\n        rclpy.try_shutdown()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["ardupilot","rangefinder","pymavlink","mavros","gazebo","SITL","distance sensor"]},{"location":"blog/Ardupilot/rangefinder/#echo-distance-data","title":"echo distance data","text":"<pre><code>ros2 topic echo /mavros/rangefinder_pub\n</code></pre> <p>config parma</p> <p><code>config</code> param expend settings as YAML</p>","tags":["ardupilot","rangefinder","pymavlink","mavros","gazebo","SITL","distance sensor"]},{"location":"blog/Ardupilot/rangefinder/#config-multiple-sensors","title":"config multiple sensors","text":"<pre><code>/mavros/**/distance_sensor:\nros__parameters:\nconfig: |\nrangefinder_pub:\nid: 0\nframe_id: \"lidar\"\n#orientation: PITCH_270 # sended by FCU\nfield_of_view: 0.0  \nsend_tf: false\nsensor_position: {x:  0.0, y:  0.0, z:  -0.1}\nrangefinder_sub:\nsubscriber: true\nid: 1\norientation: PITCH_270\nrangefinder_fwd:\nsubscriber: true\nid: 2\norientation: PITCH_180\n</code></pre> <p>orientation</p> <p>declare at <code>/mavros/src/lib/enum_sensor_orientation.cpp</code></p>","tags":["ardupilot","rangefinder","pymavlink","mavros","gazebo","SITL","distance sensor"]},{"location":"blog/Ardupilot/rangefinder/#demo-to-delete","title":"Demo to delete","text":"sitl<pre><code>sim_vehicle.py -v ArduCopter -f gazebo-iris -A \"--defaults /home/user/wasp_ws/src/wasp_bringup/config/copter.parm,/home/user/wasp_ws/src/wasp_bringup/config/gazebo-iris.parm\" -I0 -m \"--out=127.0.0.1:14552\" -m \"--load-module graph\"\n</code></pre>","tags":["ardupilot","rangefinder","pymavlink","mavros","gazebo","SITL","distance sensor"]},{"location":"blog/Ardupilot/system_time/","title":"SYSTEM_TIME","text":"<p>mavlink.io</p> <p>Ardupilot send and received this message</p>","tags":["ardupilot","system_time"]},{"location":"blog/Ardupilot/system_time/#sending","title":"Sending","text":"<p>Implement by <code>GCS_Common</code> <code>send_system_time</code> method</p> <p>the unix time calc from RTC class and return only if we have time source the rtc_source_type is set by logic in <code>AP_RTC::set_utc_usec</code> that call by - GPS when we have 3D fix lock or better - Mavlink message <code>SYSTEM_TIME</code> - ?</p> ardupilot time source enum<pre><code>// ordering is important in source_type; lower-numbered is\n// considered a better time source.  These values are documented\n// and used in the parameters!\nenum source_type : uint8_t {\nSOURCE_GPS = 0,\nSOURCE_MAVLINK_SYSTEM_TIME = 1,\nSOURCE_HW = 2,\nSOURCE_NONE,\n}\n</code></pre>","tags":["ardupilot","system_time"]},{"location":"blog/Ardupilot/system_time/#demo","title":"Demo","text":"<p>Listen to <code>SYSTEM_TIME</code> message with and without GPS source</p> <pre><code>BRD_RTC_TYPES 0\nGPS_TYPE 0\n</code></pre> without gps<pre><code>2023-04-16 19:23:29,160 - __main__ - INFO - param_name: BRD_RTC_TYPES value: 1.0\n2023-04-16 19:23:30,151 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 0, 'time_boot_ms': 2154028}\n2023-04-16 19:23:31,152 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 0, 'time_boot_ms': 2155028}\n2023-04-16 19:23:32,155 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 0, 'time_boot_ms': 2156028}\n2023-04-16 19:23:33,154 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 0, 'time_boot_ms': 2157028}\n2023-04-16 19:23:34,152 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 0, 'time_boot_ms': 2158028}\n</code></pre> <pre><code>BRD_RTC_TYPES 1\nGPS_TYPE 1\n</code></pre> with gps<pre><code>2023-04-16 19:27:05,833 - __main__ - INFO - Set SYSRM_TIME message interval to 1sec\n2023-04-16 19:27:05,840 - __main__ - INFO - param_name: BRD_RTC_TYPES value: 1.0\n2023-04-16 19:27:06,836 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 0, 'time_boot_ms': 4028}\n2023-04-16 19:27:07,841 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 0, 'time_boot_ms': 5028}\n2023-04-16 19:27:08,837 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 0, 'time_boot_ms': 6028}\n2023-04-16 19:27:09,836 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 0, 'time_boot_ms': 7028}\n2023-04-16 19:27:10,837 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 0, 'time_boot_ms': 8028}\n2023-04-16 19:27:11,842 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 1681662430861592, 'time_boot_ms': 9028}\n2023-04-16 19:27:12,837 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 1681662431861192, 'time_boot_ms': 10028}\n2023-04-16 19:27:13,840 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 1681662432861625, 'time_boot_ms': 11028}\n</code></pre> <p>time_unix</p> <p>No epoc time until GPS has 3D fix</p>","tags":["ardupilot","system_time"]},{"location":"blog/Ardupilot/system_time/#demo-ii","title":"Demo II","text":"<p>Send <code>SYSTEM_TIME</code> message to send ardupilot with time source when no GPS found</p> <pre><code>BRD_RTC_TYPES 2\nGPS_TYPE 0\n</code></pre> <p>BRD_RTC_TYPES</p> <p><code>BRD_RTC_TYPES</code> must be SOURCE_HW and not SOURCE_MAVLINK_SYSTEM_TIME to pass the condition <pre><code>if (!(allowed_types &amp; (1&lt;&lt;type))) {\nreturn;\n}\n</code></pre> from  AP_RTC.cpp file</p> <pre><code>2023-04-16 22:07:18,843 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 1681671783248796, 'time_boot_ms': 573026}\n2023-04-16 22:07:18,844 - __main__ - INFO - param_name: BRD_RTC_TYPES value: 2.0\n2023-04-16 22:07:19,839 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 1681671784248396, 'time_boot_ms': 574026}\n2023-04-16 22:07:20,840 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 1681671785248829, 'time_boot_ms': 575026}\n2023-04-16 22:07:21,838 - __main__ - INFO - {'mavpackettype': 'SYSTEM_TIME', 'time_unix_usec': 1681671786248429, 'time_boot_ms': 576026}\n</code></pre> <p>BRD_RTC_TYPES</p> <p>BRD_RTC_TYPES must be <code>SOURCE_HW</code> for ardupilot accept mavlink message \u201cSYSTEM_TIME\u201d</p> check code<pre><code>import time\nimport logging\nimport os\nos.environ[\"MAVLINK20\"]=\"1\"\nfrom pymavlink import mavutil\nfrom pymavlink.dialects.v20 import ardupilotmega\n\nFMT = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\nlogging.basicConfig(format=FMT, level=logging.INFO)\nlog = logging.getLogger(__name__)\n\n# Create the connection\n# master = mavutil.mavlink_connection(\"/dev/ttyACM0\")\n# master = mavutil.mavlink_connection(\"tcp:0.0.0.0:5760\")\nmaster = mavutil.mavlink_connection(\"udp:127.0.0.1:14550\")\nONE_SEC = 1e6\n\ndef set_message_interval(interval_us):\n    master.mav.command_long_send(\n    master.target_system,\n    master.target_component,\n    ardupilotmega.MAV_CMD_SET_MESSAGE_INTERVAL,\n    0,\n    ardupilotmega.MAVLINK_MSG_ID_SYSTEM_TIME,\n    interval_us,\n    0,\n    0,\n    0,\n    0,\n    0\n    )\n\ndef set_system_time():\n    # while True:\n    current = int(time.time()*1e6)\n    log.info(\"%s\" , current)\n    master.mav.system_time_send(\n    current,\n    0)\n    time.sleep(1/1)\n\n# Wait a heartbeat before sending commands\nmaster.wait_heartbeat()\n\nset_message_interval(ONE_SEC)\nset_system_time()\n\nUSE_PARAM_ID = -1\nmaster.mav.param_request_read_send(\n    master.target_system,\n    master.target_component,\n    b\"BRD_RTC_TYPES\",\n    USE_PARAM_ID\n)\n\nwhile True:\n    msg = master.recv_match()\n    if not msg:\n        continue\n    if msg.get_type() == \"SYSTEM_TIME\":\n        log.info(\"%s\", msg.to_dict())\n    if msg.get_type() == \"PARAM_VALUE\":\n        message = msg.to_dict()\n        param_name = message[\"param_id\"]\n        if param_name == \"BRD_RTC_TYPES\":\n            param_value = message[\"param_value\"]\n            log.info(\"param_name: %s value: %s\", param_name, param_value)\n</code></pre>","tags":["ardupilot","system_time"]},{"location":"blog/Ardupilot/timesync/","title":"Clock/Time Synchronized","text":"<p>The flight controller and companion computer clocks can be synchronized using MAVLink\u2019s SYSTEM_TIME and TIMESYNC messages. This is important so that each side can blend data from the other side into its EKF.</p>","tags":["ardupilot","timesync"]},{"location":"blog/Ardupilot/timesync/#time-synchronization-protocol","title":"Time Synchronization Protocol","text":"<p>This protocol is used to synchronize clocks on MAVLink components by estimating their time offset.</p> <p>A component that wants to synchronize clocks sends out a TIMESYNC request with its current timestamp in <code>ts1</code>. A remote system that supports the protocol sends a TIMESYNC response, including both the original timestamp in <code>ts1</code> field and its own timestamp in <code>tc1</code>.</p> <p></p>","tags":["ardupilot","timesync"]},{"location":"blog/Ardupilot/timesync/#demo-sync-between-cc-and-sitlardupilot","title":"Demo: sync between CC and SITL/Ardupilot","text":"","tags":["ardupilot","timesync"]},{"location":"blog/Ardupilot/timesync/#reference","title":"Reference","text":"<ul> <li>Clock/Time synchronized</li> <li>Time Synchronization Protocol v2</li> </ul>","tags":["ardupilot","timesync"]},{"location":"blog/CPP/cmake/cmake_hello/","title":"CMAKE beginner step","text":"<p><code>build system</code> is a set of programs that build a software codebase -&gt; producing a final products from source code: executable files, share object (.so) files, static libraries (.a) for example: Ninja, Make</p> <p>cma</p>","tags":["cmake",101]},{"location":"blog/CPP/cmake/cmake_hello/#cmake-hello","title":"cmake hello","text":"<pre><code>cmake_minimum_required(VERSION 3.11)\nproject(HelloWorld)\nadd_executable(hello_world hello_world.c)\n</code></pre>","tags":["cmake",101]},{"location":"blog/CPP/cmake/cmake_hello/#add-compiler-option","title":"Add compiler option","text":"<pre><code>add_compile_options(-Wall -Wextra -Wpedantic)\n</code></pre>","tags":["cmake",101]},{"location":"blog/CPP/cmake/cmake_hello/#reference","title":"Reference","text":"<ul> <li>CMake: Best Practices</li> <li>More Modern CMake</li> </ul>","tags":["cmake",101]},{"location":"blog/CPP/gtest/","title":"LAB objective","text":"<ul> <li>Build cpp project with library using cmake</li> <li>Create testing with GTest</li> <li>Config VSCode</li> </ul>","tags":["cpp","gtest","cmake"]},{"location":"blog/CPP/gtest/#install","title":"install","text":"<pre><code>sudo apt install libgtest-dev\n</code></pre> <pre><code>\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 CMakeLists.txt\n\u2502   \u2514\u2500\u2500 src\n\u2502       \u2514\u2500\u2500 main.cpp\n\u251c\u2500\u2500 helper\n\u2502   \u251c\u2500\u2500 CMakeLists.txt\n\u2502   \u251c\u2500\u2500 include\n\u2502   \u2502   \u2514\u2500\u2500 helper\n\u2502   \u2514\u2500\u2500 src\n\u2502       \u2514\u2500\u2500 helper.cpp\n\u251c\u2500\u2500 tests\n\u2502    \u251c\u2500\u2500 CMakeLists.txt\n\u2502    \u2514\u2500\u2500 test_helper.cpp\n\u2502\n\u2514\u2500\u2500 CMakeLists.txt\n</code></pre>","tags":["cpp","gtest","cmake"]},{"location":"blog/CPP/gtest/#lib","title":"lib","text":"<ul> <li>header file (definition)</li> <li>cpp file (declaration)</li> <li>cmake file </li> </ul> include/helper/helper.h<pre><code>#pragma once\n\nnamespace helper{\nint add(int x, int y);\n}\n</code></pre> src/helper.cpp<pre><code>#include \"helper.h\"\n\nnamespace helper\n{\nint add(int x, int y)\n{\nreturn x + y;\n}\n}\n</code></pre> CMakeLists.txt<pre><code>set (SOURCES\nsrc/helper.cpp\n)\nadd_library(helper ${SOURCES})\ntarget_include_directories(helper PUBLIC include/helper)\n</code></pre>","tags":["cpp","gtest","cmake"]},{"location":"blog/CPP/gtest/#app","title":"app","text":"<ul> <li>cpp file</li> <li>cmake file</li> </ul> app/src/main.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;helper.h&gt;\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\ncout &lt;&lt; helper::add(1, 1) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> CMakeLists.txt<pre><code>add_executable(main src/main.cpp)\ntarget_link_libraries(main helper)\n</code></pre>","tags":["cpp","gtest","cmake"]},{"location":"blog/CPP/gtest/#test","title":"test","text":"<ul> <li>Test file example</li> <li>cmake file</li> </ul> test_helper<pre><code>#include &lt;gtest/gtest.h&gt;\n#include &lt;helper.h&gt;\n\nTEST(helper, add){\nEXPECT_EQ(0, helper::add(1, -1));\n}\n</code></pre> tests/CMakeList.txt<pre><code>add_subdirectory(/usr/src/gtest\n${PROJECT_BINARY_DIR}/gtest\n)\n\ninclude(CTest)\n\nset(TEST_BINARY ${PROJECT_NAME}_test)\nadd_executable(${TEST_BINARY} test_helper.cpp)\ntarget_link_libraries(${TEST_BINARY}\nhelper\ngtest\ngtest_main\n)\n\nadd_test(\nNAME ${TEST_BINARY}\nCOMMAND ${EXECUTABLE_OUTPUT_PATH}/${TEST_BINARY}\n)\n</code></pre>","tags":["cpp","gtest","cmake"]},{"location":"blog/CPP/gtest/#root","title":"root","text":"<ul> <li>Root cmake file</li> </ul> <p>root cmake must contain <code>enable_testing</code> cmake function  for testing</p> tests/CMakeList.txt<pre><code>cmake_minimum_required(VERSION 3.10)\nproject(demo)\n\nenable_testing()\n\nadd_subdirectory(helper)\nadd_subdirectory(app)\nadd_subdirectory(tests)\n</code></pre>","tags":["cpp","gtest","cmake"]},{"location":"blog/CPP/gtest/#usage","title":"usage","text":"","tags":["cpp","gtest","cmake"]},{"location":"blog/CPP/gtest/#command-line","title":"command line","text":"<pre><code>ctest -VV\n#\n...\ntest 1\nStart 1: demo_test\n\n1: Test command: /home/user/projects/gtest_tutorial/build/tests/demo_test\n1: Test timeout computed to be: 1500\n1: Running main() from /usr/src/gtest/src/gtest_main.cc\n1: [==========] Running 1 test from 1 test suite.\n1: [----------] Global test environment set-up.\n1: [----------] 1 test from helper\n1: [ RUN      ] helper.add\n1: [       OK ] helper.add (0 ms)\n1: [----------] 1 test from helper (0 ms total)\n1: 1: [----------] Global test environment tear-down\n1: [==========] 1 test from 1 test suite ran. (0 ms total)\n1: [  PASSED  ] 1 test.\n1/1 Test #1: demo_test ........................   Passed    0.00 sec\n</code></pre>","tags":["cpp","gtest","cmake"]},{"location":"blog/CPP/gtest/#vscode","title":"VSCode","text":"<p>VSCode marketplace</p> <p></p>","tags":["cpp","gtest","cmake"]},{"location":"blog/CPP/gtest/#usage_1","title":"Usage","text":"","tags":["cpp","gtest","cmake"]},{"location":"blog/CPP/learn/","title":"C++ learn by doing","text":"<p>code base on the following youtube channel</p>","tags":["cpp","c++"]},{"location":"blog/CPP/learn/#hands-on","title":"hands-on","text":"<ul> <li>macros</li> </ul>","tags":["cpp","c++"]},{"location":"blog/CPP/learn/macros/","title":"C++ MACROS learn by doing","text":"<p>Macros are section of text that replace by the compiler preprocessor stage, it\u2019s very useful in DEBUGGING for example</p>","tags":["cpp","c++"]},{"location":"blog/CPP/learn/macros/#demo","title":"Demo","text":"<p>Control with macro to use </p> main.cpp<pre><code>#include &lt;iostream&gt;\n\n#if MY_DEBUG == 1\n#define LOG(x) std::cout &lt;&lt; x &lt;&lt; std::endl;\n#else\n#define LOG(x)\n#endif\n\nint main() {\nLOG(\"HELLO\")\n}\n</code></pre>","tags":["cpp","c++"]},{"location":"blog/CPP/learn/macros/#build-and-run","title":"build and run","text":"terminal<pre><code>g++ main.cpp -o main -DMY_DEBUG=0\n./main\n# print nothing\ng++ main.cpp -o main -DMY_DEBUG=1\n./main\nHELLO\n</code></pre>","tags":["cpp","c++"]},{"location":"blog/CPP/learn/macros/#cmakeliststxt","title":"CMakeLists.txt","text":"<pre><code>cmake_minimum_required(VERSION 3.1)\nproject(demo_macros)\n\nadd_definitions(-DMY_DEBUG=0)\nadd_executable(main main.cpp)\n</code></pre>","tags":["cpp","c++"]},{"location":"blog/CPP/learn/macros/#cmakelists-with-options","title":"CMakeLists with options","text":"<pre><code>cmake_minimum_required(VERSION 3.1)\nproject(demo_macros)\n\noption(USE_DEBUG \"Enter debug mode\" OFF)\nif (USE_DEBUG)\nadd_definitions(-DMY_DEBUG=1)\nendif()\n\nadd_executable(main main.cpp)\n</code></pre>","tags":["cpp","c++"]},{"location":"blog/CPP/learn/macros/#usage","title":"usage","text":"options<pre><code>cmake -LA ..\n#\n...\nCMAKE_STRIP:FILEPATH=/usr/bin/strip\nCMAKE_VERBOSE_MAKEFILE:BOOL=FALSE\nUSE_DEBUG:BOOL=OFF\n\n#\ncmake -DUSE_DEBUG=ON ..\n</code></pre>","tags":["cpp","c++"]},{"location":"blog/CPP/learn/macros/#references","title":"References","text":"<ul> <li>Macros in c++</li> </ul>","tags":["cpp","c++"]},{"location":"blog/CPP/learn/pointer/","title":"C++ pointers learn by doing","text":"<p>base on</p> <ul> <li>Pointer are just integer that point to memory address</li> <li>Pointer are type less, we provide types to pointer just to help the compiler to memory manipulation when we read and write to memory</li> </ul>","tags":["cpp","c++"]},{"location":"blog/CPP/learn/pointer/#demo","title":"Demo","text":"point to zero<pre><code>#include &lt;iostream&gt;\n\n#define LOG(x) std::cout &lt;&lt; x &lt;&lt; std::endl;\n\nint main() {\nint a = 10;\nvoid* ptr = nullptr;\nLOG(ptr);\n}\n</code></pre> point to variable on the stack<pre><code>#include &lt;iostream&gt;\n\n#define LOG(x) std::cout &lt;&lt; x &lt;&lt; std::endl;\n\nint main() {\nint a = 10;\nvoid* ptr = &amp;a;\nLOG(ptr);\n}\n</code></pre> <p>Install memeory view</p> <p>vscode extension:  nateageek.memory-viewer</p> <p></p> <pre><code>#include &lt;iostream&gt;\n\n#define LOG(x) std::cout &lt;&lt; x &lt;&lt; std::endl;\n\nint main() {\nint a = 10;\nint* ptr = &amp;a;\n*ptr = 20;\nLOG(a);\n}\n</code></pre>","tags":["cpp","c++"]},{"location":"blog/CPP/learn/ref/","title":"C++ ref learn by doing","text":"<ul> <li>Ref are just reference to variable</li> <li>unlike pointer reference can\u2019t contain NULL value, they must reference to some variable</li> <li>They can\u2019t reassign, they don\u2019t have memory allocate for them</li> </ul> <pre><code>#include &lt;iostream&gt;\n\n#define LOG(x) std::cout &lt;&lt; x &lt;&lt; std::endl;\n\nint main() {\nint a = 5;\nint&amp; ref = a;\nref = 2;\nLOG(a);\n}\n</code></pre> <p>pass veritable as a reference to function</p> <pre><code>#include &lt;iostream&gt;\n\n#define LOG(x) std::cout &lt;&lt; x &lt;&lt; std::endl;\n\nvoid counter(int&amp; counter)\n{\ncounter++;\n}\n\nint main() {\nint a = 5;\ncounter(a);\nLOG(a);\n}\n</code></pre>","tags":["cpp","c++"]},{"location":"blog/CPP/modern/","title":"Courses","text":"<ul> <li>uni-bonn modern cpp 2018</li> </ul>"},{"location":"blog/CPP/modern/casting/","title":"casting","text":"<ul> <li>static_cast</li> <li>reinterpret_cast</li> <li>dynamic_cast</li> </ul>","tags":["cpp"]},{"location":"blog/CPP/modern/casting/#static_cast","title":"static_cast","text":"<ul> <li>Convert type of variable at compile time</li> <li>Rarely need to be use explicit</li> <li>Drive class can be upcast to its base class</li> </ul> <pre><code>static_cast&lt;NewType&gt;(variable)\n</code></pre>","tags":["cpp"]},{"location":"blog/CPP/modern/casting/#reinterpret_cast","title":"reinterpret_cast","text":"<ul> <li>Reinterpret the bytes of a variable as another type</li> <li>Mostly used when writing binary data</li> </ul> <pre><code>reinterpret_cast&lt;NewType&gt;(variable)\n</code></pre>","tags":["cpp"]},{"location":"blog/CPP/modern/casting/#dynamic_cast","title":"dynamic_cast","text":"<p>Google-style - AVOID</p>","tags":["cpp"]},{"location":"blog/CPP/modern/filesystem_hello/","title":"filesystem hello","text":"<ul> <li>create_directories</li> <li>directory_iterator</li> <li>path</li> <li>filename</li> <li>extension</li> <li>stem</li> <li>exists</li> </ul> <pre><code>#include &lt;filesystem&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nnamespace fs=std::filesystem;\n\nint main(){\nstd::string ppath = \"/tmp/fs_demo\";\nfs::create_directories(ppath);\nfor (auto p: fs::directory_iterator(ppath))\n{\nstd::cout &lt;&lt; p.path() &lt;&lt; std::endl;\ncout &lt;&lt; fs::path(p.path()).filename() &lt;&lt; endl;\ncout &lt;&lt; fs::path(p.path()).extension() &lt;&lt; endl;\ncout &lt;&lt; fs::path(p.path()).stem() &lt;&lt; endl;\n}\n\ncout &lt;&lt; boolalpha &lt;&lt; fs::exists(ppath) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>","tags":["cpp"]},{"location":"blog/CPP/modern/fmt_hello/","title":"fmt","text":"","tags":["cpp","format","fmt"]},{"location":"blog/CPP/modern/fmt_hello/#install","title":"install","text":"<pre><code>sudo apt install libfmt-dev\n</code></pre>","tags":["cpp","format","fmt"]},{"location":"blog/CPP/modern/fmt_hello/#demo","title":"Demo","text":"fmt_hello.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;fmt/core.h&gt;\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\nstring s = \"world\";\nfmt::print(\"hello {}\\n\", s);\nauto data = fmt::format(\"{1} {0}\", \"hello\", 1, 2, 3);\ncout &lt;&lt; data &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> CMakeLists.txt<pre><code>find_package(fmt REQUIRED)\n\nadd_executable(fmt_hello fmt_hello.cpp)\ntarget_link_libraries(fmt_hello PRIVATE fmt::fmt)\n</code></pre>","tags":["cpp","format","fmt"]},{"location":"blog/CPP/modern/fmt_hello/#resource","title":"Resource","text":"<ul> <li>{fmt} Formatting &amp; Printing Library</li> </ul>","tags":["cpp","format","fmt"]},{"location":"blog/CPP/modern/move_hello/","title":"Move","text":"<p>Move object ownership</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nint main(int argc, char const *argv[])\n{\nstring str = \"Hello\";\nvector&lt;string&gt; v;\n\nv.push_back(str);\ncout &lt;&lt; \"str After copy is: \" &lt;&lt; str &lt;&lt; endl;\n\n// move str into vector , str might no be empty\nv.push_back(move(str));\ncout &lt;&lt; \"str After copy is: \" &lt;&lt; str &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>","tags":["cpp"]},{"location":"blog/CPP/modern/smart_pointer/","title":"Smart pointer","text":"","tags":["cpp"]},{"location":"blog/CPP/modern/smart_pointer/#unique-pointers","title":"Unique Pointers","text":"<ul> <li>release it\u2019s memory when out of scope</li> <li>Unique pointer has no copy constructor</li> <li>Cannot be copied, can be moved</li> <li>Guarantees that memory is always owned by a single unique pointer</li> </ul> scope<pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nusing std::cout;\nusing std::endl;\n\nclass Basic{\npublic:\nBasic(){\ncout &lt;&lt; \"construct\" &lt;&lt; endl;\n}\n~Basic(){\ncout &lt;&lt; \"de construct\" &lt;&lt; endl;\n}\nint a = 10;\n};\n\nvoid run(){\nauto a_ptr = std::make_unique&lt;Basic&gt;();\ncout &lt;&lt; a_ptr-&gt;a &lt;&lt; endl;\n}\nint main(int argc, char const *argv[])\n{\ncout &lt;&lt; \"run call\" &lt;&lt; endl;\nrun();\ncout &lt;&lt; \"run exit\" &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> owner<pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nusing std::cout;\nusing std::endl;\n\nclass Basic{\npublic:\nint a = 10;\n};\n\nint main(int argc, char const *argv[])\n{\nauto a_ptr = std::make_unique&lt;Basic&gt;();\n\ncout &lt;&lt; a_ptr-&gt;a &lt;&lt; endl;\nauto b_ptr = std::move(a_ptr);\ncout &lt;&lt; b_ptr-&gt;a &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>","tags":["cpp"]},{"location":"blog/CPP/modern/smart_pointer/#smart-pointer","title":"Smart pointer","text":"<ul> <li>Store a usage counter and a raw pointer</li> <li>Increases usage counter when copied</li> <li>Decreases when destructed</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;memory&gt;\n\nusing std::cout;\nusing std::endl;\n\nclass Basic{\npublic:\nBasic(int a): a_(a){\ncout &lt;&lt; \"construct\" &lt;&lt; endl;\n}\n~Basic(){cout &lt;&lt; \"de construct\" &lt;&lt; endl;}\nprivate:\nint a_;\n};\n\nint main(int argc, char const *argv[])\n{\nauto a_ptr = std::make_shared&lt;Basic&gt;(10);\ncout &lt;&lt; a_ptr.use_count() &lt;&lt; endl;\n{\n// auto b_ptr = std::move(a_ptr);\nauto b_ptr = a_ptr;\ncout &lt;&lt; b_ptr.use_count() &lt;&lt; endl;\n}\n\nreturn 0;\n}\n</code></pre>","tags":["cpp"]},{"location":"blog/CPP/multithreading/","title":"Reference","text":"<ul> <li>Bo Qian Concurrent Programing list</li> </ul>","tags":["cpp","multithreading"]},{"location":"blog/CPP/multithreading/async_future_promise/","title":"Async Future and Promise","text":"async_future.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;future&gt;\n\nusing std::cout;\nusing std::endl;\n\nint factorial(int N){\nint res = 1;\nfor (int i = N; i &gt; 1; i--)\n{\nres *= i;\n}\nreturn res;\n\n}\n\nint main(int argc, char const *argv[])\n{\nstd::future&lt;int&gt; fu = std::async(factorial, 4);\n//call with a profile , force a new thread\n//std::future&lt;int&gt; fu = std::async(std::launch::async, factorial, 4);\n\n// wait for result from async\nint x = fu.get();\ncout &lt;&lt; x &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>","tags":["multithreading","cpp"]},{"location":"blog/CPP/multithreading/async_future_promise/#async-profile","title":"Async profile","text":"<ul> <li>launch::deferred: Deferred the call in the same thread only when <code>get</code> call</li> <li>launch::async: Call the function in new thread</li> <li>launch::deferred | launch::async (default)</li> </ul>","tags":["multithreading","cpp"]},{"location":"blog/CPP/multithreading/async_future_promise/#promise","title":"promise","text":"async_future_promise.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;future&gt;\n#include &lt;chrono&gt;\n#include &lt;thread&gt;\n\nusing std::cout;\nusing std::endl;\n\nint factorial(std::future&lt;int&gt;&amp; f){\nint res = 1;\n// wait for promise value\nint N = f.get();\nfor (int i = N; i &gt; 1; i--)\n{\nres *= i;\n}\nreturn res;\n}\n\nint main(int argc, char const *argv[])\n{\nstd::promise&lt;int&gt; p;\nstd::future&lt;int&gt; f = p.get_future();\n// promise a value in the future\nstd::future&lt;int&gt; fu = std::async(std::launch::async, factorial, std::ref(f));\n\nstd::this_thread::sleep_for(std::chrono::milliseconds(20));\n// send the promise value\np.set_value(4);\n\nint x = fu.get();\ncout &lt;&lt; x &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>","tags":["multithreading","cpp"]},{"location":"blog/CPP/multithreading/async_future_promise/#reference","title":"Reference","text":"<ul> <li>C++ Threading #7: Future, Promise and async()</li> </ul>","tags":["multithreading","cpp"]},{"location":"blog/CPP/spdlog/","title":"spdlog hello","text":"","tags":["spdlog"]},{"location":"blog/CPP/spdlog/#install","title":"install","text":"<pre><code>sudo apt install libspdlog-dev\n</code></pre>","tags":["spdlog"]},{"location":"blog/CPP/spdlog/#basic-usage","title":"basic usage","text":"hello_spd<pre><code>#include &lt;spdlog/spdlog.h&gt;\n\nint main(int argc, char const *argv[])\n{\nspdlog::set_level(spdlog::level::debug);\nspdlog::debug(\"debug {}\", \"more data\");\nspdlog::info(\"info {} {}\", \"data\", 1);\nspdlog::warn(\"warn\");\nspdlog::error(\"error\");\n\nreturn 0;\n}\n</code></pre> CMakeLists.txt<pre><code>find_package(spdlog REQUIRED)\n\nadd_executable(hello_spd hello_spd.cpp)\ntarget_link_libraries(hello_spd PRIVATE spdlog::spdlog_header_only)\n</code></pre>","tags":["spdlog"]},{"location":"blog/CPP/spdlog/log_to_file/","title":"spdlog log to file","text":"<pre><code>#include &lt;spdlog/spdlog.h&gt;\n#include &lt;spdlog/sinks/basic_file_sink.h&gt;\n\nint main(int argc, char const *argv[])\n{\nauto my_logger = spdlog::basic_logger_mt(\"my_logger\", \"log.txt\");\n\nmy_logger-&gt;set_level(spdlog::level::debug);\nmy_logger-&gt;debug(\"debug {}\", \"more data\");\nmy_logger-&gt;info(\"info {} {}\", \"data\", 1);\nmy_logger-&gt;warn(\"warn\");\nmy_logger-&gt;error(\"error\");\nreturn 0;\n}\n</code></pre> CMakeLists.txt<pre><code>find_package(spdlog REQUIRED)\n\nadd_executable(hello_spd hello_spd.cpp)\ntarget_link_libraries(hello_spd PRIVATE spdlog::spdlog_header_only)\n</code></pre>","tags":["spdlog"]},{"location":"blog/DDS/cyclondds/python-bindings/","title":"Eclipse cyclonedds python bindings","text":"","tags":["dds","cyclonedds"]},{"location":"blog/DDS/cyclondds/python-bindings/#lab","title":"LAB","text":"<p>Install cyclonedds on lxc container, config vscode as remote container</p> <ul> <li>Install cyclonedds python bindings from pip</li> <li>Config VSCode remote container</li> <li>Run Hello world example</li> </ul> <pre><code>rtspsrc location=rtsp://&lt;user&gt;&lt;/user&gt;:&lt;pass&gt;@&lt;ip&gt;:&lt;port&gt;/&lt;channel&gt; caps=\u201capplication/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H264\u201d latency=100 ! queue ! rtph264depay ! avdec_h264 ! videoconvert ! video/x-raw,format=BGRA ! appsink name=outsink\n</code></pre>","tags":["dds","cyclonedds"]},{"location":"blog/DDS/eprosima/fastdds-hello/","title":"eprosima fastdds hello","text":"","tags":["dds","eprosima","fastdds"]},{"location":"blog/DDS/eprosima/fastdds-hello/#objective","title":"Objective","text":"<ul> <li>Run fastdds basic example</li> </ul>","tags":["dds","eprosima","fastdds"]},{"location":"blog/DDS/eprosima/fastdds-hello/#setup","title":"Setup","text":"<ul> <li>Download eprosima fastdds docker download</li> <li>Load docker </li> </ul> <pre><code>docker load -i &lt;path&gt;/ubuntu-fastdds v2.7.1.tar\n</code></pre> <ul> <li>Run docker</li> </ul> <pre><code>docker run -it --privileged ubuntu-fastdds:v2.7.1 \n</code></pre>","tags":["dds","eprosima","fastdds"]},{"location":"blog/DDS/eprosima/fastdds-hello/#run-hello-example","title":"Run Hello example","text":"<p><code>Hello world</code> example locate at <code>/usr/local/eprosima/fastrtps/examples/cpp/dds/HelloWorldExample/bin</code></p> <ul> <li>Run tmux start new session</li> <li>Split window </li> <li>Run publisher in Pane1</li> <li>Run subscriber in Pane2</li> </ul> tmux new session<pre><code>tmux new-session\n#\n# press c-b and \" to split horizontal\n</code></pre> publisher<pre><code># -s number of samples\n# -i interval in ms\n./DDSHelloWorldExample publisher -s 20 -i 500\n\nStarting \nPublisher running 20 samples.\nPublisher matched.\nMessage: HelloWorld with index: 1 SENT\nMessage: HelloWorld with index: 2 SENT\nMessage: HelloWorld with index: 3 SENT\nMessage: HelloWorld with index: 4 SENT\n</code></pre> subscriber<pre><code>./DDSHelloWorldExample subscriber\n# \nSubscriber matched.\nMessage HelloWorld 1 RECEIVED\nMessage HelloWorld 2 RECEIVED\nMessage HelloWorld 3 RECEIVED\nMessage HelloWorld 4 RECEIVED\n</code></pre>","tags":["dds","eprosima","fastdds"]},{"location":"blog/DDS/eprosima/fastdds-hello/#profiles","title":"Profiles","text":"<pre><code>export FASTRTPS_DEFAULT_PROFILES_FILE=/usr/local/eprosima/fastrtps/examples/cpp/dds/HelloWorldExample/bin/DEFAULT_FASTRTPS_PROFILES.xml\n</code></pre>","tags":["dds","eprosima","fastdds"]},{"location":"blog/Ignition/","title":"Ignition simulator","text":"<p>All tutorial run on Fortress version Newer version <code>garden</code> for example move from <code>ign</code> to <code>gz</code> </p>","tags":["simulation","gazebo"]},{"location":"blog/Ignition/#official-site","title":"official site","text":"<p>gazebo sim</p> IGN_GAZEBO_RESOURCE_PATH IGN_GAZEBO_SYSTEM_PLUGIN_PATH <pre><code>export IGN_GAZEBO_RESOURCE_PATH=~/projects/ign_tutorial/worlds:~/projects/ign_tutorial/models\n</code></pre> <pre><code>$ ign topic -t \"/model/vehicle_blue/cmd_vel\" -m ignition.msgs.Twist -p \"linear: {x: 0.5}, angular: {z: 0.05}\"\n</code></pre> <pre><code>/usr/share/ignition/ignition-gazebo6/worlds\n</code></pre>","tags":["simulation","gazebo"]},{"location":"blog/Ignition/#resource","title":"Resource","text":"<p>fortress LTS docs gazebodoc</p>","tags":["simulation","gazebo"]},{"location":"blog/Ignition/#tutorials","title":"Tutorials","text":"<ul> <li>hello ignition gazebo/sim</li> <li>gui config</li> <li>ignition tutorial - building your own robot (gazebosim)</li> <li>ignition tutorial - moving the robot (gazebosim)</li> <li>moving robot using ros_gz</li> <li>camera sensor</li> <li>imu lidar and more (gazebosim)</li> </ul>","tags":["simulation","gazebo"]},{"location":"blog/Ignition/gui-control/","title":"ignition gui control","text":"","tags":["config"]},{"location":"blog/Ignition/gui-control/#resource","title":"Resource","text":"<ul> <li>GUI Configuration</li> </ul>","tags":["config"]},{"location":"blog/Ignition/hello/","title":"gazebo ignition hello world","text":"","tags":["gazebo"]},{"location":"blog/Ignition/hello/#first-try","title":"First try","text":"<p>Run gazebo with empty world from install worlds</p> <p>install worlds</p> <p><code>/usr/share/ignition/ignition-gazebo6</code></p> <pre><code>ign gazebo empty.sdf -v 4\n# -v 4 =&gt; verbose\n</code></pre>","tags":["gazebo"]},{"location":"blog/Ignition/hello/#ign-cli","title":"ign cli","text":"<ul> <li>ign cli hello</li> <li>run custom world</li> <li>control gui options</li> <li>spawn and delete entities from cli</li> </ul>","tags":["gazebo"]},{"location":"blog/Ignition/hello/#ign-command","title":"ign command","text":"<pre><code>ign --help\nThe 'ign' command provides a command line interface to the ignition tools.\n\n  ign &lt;command&gt; [options]\n\nList of available commands :\n\n  help:          Print this help text.\n  ...\n  gazebo:        Run and manage Gazebo.\n  msg:           Print information about messages.\n  ...\n  topic:         Print information about topics.\n  service:       Print information about services.\n  ...\n</code></pre>","tags":["gazebo"]},{"location":"blog/Ignition/hello/#ign-gazebo-command","title":"ign gazebo command","text":"<pre><code>ign gazebo --help\n\n  -r                           Run simulation on start.                         -v [ --verbose ] [arg]       Adjust the level of console output (0~4).        --gui-config [arg]           Ignition GUI configuration file to load.         </code></pre>","tags":["gazebo"]},{"location":"blog/Ignition/hello/#environment-variables","title":"Environment variables","text":"Variable Description IGN_GAZEBO_RESOURCE_PATH Colon separated paths used to locate resources such as worlds and models. IGN_GAZEBO_SYSTEM_PLUGIN_PATH Colon separated paths used to locate system plugins. for more check ign gazebo \u2013help","tags":["gazebo"]},{"location":"blog/Ignition/hello/#custom-worldsdf","title":"Custom world.sdf","text":"<ul> <li>load minimal world</li> <li>control gui layout</li> <li>spawn / delete model from cli</li> </ul> <p>Set ignition resource path</p> <pre><code>export IGN_GAZEBO_RESOURCE_PATH=/home/user/projects/ign_tutorial/\n</code></pre> my_empty.sdf<pre><code>&lt;sdf version=\"1.6\"&gt;\n&lt;world name=\"empty\"&gt;\n&lt;physics name=\"1ms\" type=\"ignored\"&gt;\n&lt;max_step_size&gt;0.001&lt;/max_step_size&gt;\n&lt;real_time_factor&gt;1.0&lt;/real_time_factor&gt;\n&lt;/physics&gt;\n&lt;gui&gt;\n&lt;plugin filename=\"GzScene3D\" name=\"3D View\"&gt;\n&lt;ignition-gui&gt;\n&lt;title&gt;3D View&lt;/title&gt;\n&lt;property type=\"bool\" key=\"showTitleBar\"&gt;false&lt;/property&gt;\n&lt;property type=\"string\" key=\"state\"&gt;docked&lt;/property&gt;\n&lt;/ignition-gui&gt;\n\n&lt;engine&gt;ogre2&lt;/engine&gt;\n&lt;scene&gt;scene&lt;/scene&gt;\n&lt;ambient_light&gt;0.4 0.4 0.4&lt;/ambient_light&gt;\n&lt;background_color&gt;0.8 0.8 0.8&lt;/background_color&gt;\n&lt;/plugin&gt;\n\n&lt;/gui&gt;\n&lt;plugin\nfilename=\"ignition-gazebo-physics-system\"\nname=\"ignition::gazebo::systems::Physics\"&gt;\n&lt;/plugin&gt;\n&lt;plugin\nfilename=\"ignition-gazebo-user-commands-system\"\nname=\"ignition::gazebo::systems::UserCommands\"&gt;\n&lt;/plugin&gt;\n&lt;plugin\nfilename=\"ignition-gazebo-scene-broadcaster-system\"\nname=\"ignition::gazebo::systems::SceneBroadcaster\"&gt;\n&lt;/plugin&gt;\n&lt;plugin\nfilename=\"ignition-gazebo-contact-system\"\nname=\"ignition::gazebo::systems::Contact\"&gt;\n&lt;/plugin&gt;\n\n&lt;light type=\"directional\" name=\"sun\"&gt;\n&lt;cast_shadows&gt;true&lt;/cast_shadows&gt;\n&lt;pose&gt;0 0 10 0 0 0&lt;/pose&gt;\n&lt;diffuse&gt;0.8 0.8 0.8 1&lt;/diffuse&gt;\n&lt;specular&gt;0.2 0.2 0.2 1&lt;/specular&gt;\n&lt;attenuation&gt;\n&lt;range&gt;1000&lt;/range&gt;\n&lt;constant&gt;0.9&lt;/constant&gt;\n&lt;linear&gt;0.01&lt;/linear&gt;\n&lt;quadratic&gt;0.001&lt;/quadratic&gt;\n&lt;/attenuation&gt;\n&lt;direction&gt;-0.5 0.1 -0.9&lt;/direction&gt;\n&lt;/light&gt;\n\n&lt;model name=\"ground_plane\"&gt;\n&lt;static&gt;true&lt;/static&gt;\n&lt;link name=\"link\"&gt;\n&lt;collision name=\"collision\"&gt;\n&lt;geometry&gt;\n&lt;plane&gt;\n&lt;normal&gt;0 0 1&lt;/normal&gt;\n&lt;size&gt;100 100&lt;/size&gt;\n&lt;/plane&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;plane&gt;\n&lt;normal&gt;0 0 1&lt;/normal&gt;\n&lt;size&gt;100 100&lt;/size&gt;\n&lt;/plane&gt;\n&lt;/geometry&gt;\n&lt;material&gt;\n&lt;ambient&gt;0.8 0.8 0.8 1&lt;/ambient&gt;\n&lt;diffuse&gt;0.8 0.8 0.8 1&lt;/diffuse&gt;\n&lt;specular&gt;0.8 0.8 0.8 1&lt;/specular&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n&lt;/model&gt;\n\n&lt;/world&gt;\n&lt;/sdf&gt;\n</code></pre> <ul> <li>Everything control by plugin</li> </ul>","tags":["gazebo"]},{"location":"blog/Ignition/hello/#spawn-and-remove-models","title":"Spawn and remove models","text":"","tags":["gazebo"]},{"location":"blog/Ignition/hello/#user-commands-system","title":"user-commands-system","text":"<p>Allow user control from cli</p> <pre><code>&lt;plugin\nfilename=\"ignition-gazebo-user-commands-system\"\nname=\"ignition::gazebo::systems::UserCommands\"&gt;\n&lt;/plugin&gt;\n</code></pre>","tags":["gazebo"]},{"location":"blog/Ignition/hello/#ign-service--msg-command","title":"ign service / msg command","text":"<ul> <li><pre><code># list services\nign service --list\n...\n/world/empty/create\n...\n/world/empty/remove\n...\n\n\n# more info about the service\nign service --info --service /world/empty/remove\n# result\nService providers [Address, Request Message Type, Response Message Type]:\n  tcp://172.18.0.1:45365, ignition.msgs.Entity, ignition.msgs.Boolean\n\n# Service has two type of message\n# request: ignition.msgs.Entity\n# response: ignition.msgs.Boolean\n\n# message fields\n## serach for boolean msg\nign msg --list | grep Boolean\nign_msgs.Boolean\n\n# show msg fields with --info argument\nuser@lap2:~/projects/blog$ ign msg --info ign_msgs.Boolean\nName: ignition.msgs.Boolean\nFile: ignition/msgs/boolean.proto\n\nmessage Boolean {\n.ignition.msgs.Header header = 1;\nbool data = 2;\n}\n</code></pre></li> </ul>","tags":["gazebo"]},{"location":"blog/Ignition/hello/#spawn-sdf","title":"Spawn SDF","text":"<p>using ign service to Spawn and remove entities</p> from SDF file<pre><code>ign service -s /world/empty/create --reqtype ignition.msgs.EntityFactory --reptype ignition.msgs.Boolean --timeout 300 --req 'sdf_filename: \"models/my_ball/model.sdf\" pose: {position: {z: 5}} name: \"new_name\"'\n</code></pre> from SDF string<pre><code>\n</code></pre>","tags":["gazebo"]},{"location":"blog/Ignition/hello/#remove","title":"Remove","text":"<pre><code>ign service -s /world/empty/remove \\\n--reqtype ignition.msgs.Entity \\\n--reptype ignition.msgs.Boolean \\\n--timeout 300 \\\n--req 'name: \"new_name\" type: MODEL'\n</code></pre> models/my_ball/model.sdf<pre><code>&lt;sdf version=\"1.6\"&gt;\n&lt;model name=\"spawned_model\"&gt;\n&lt;link name=\"link\"&gt;\n&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;sphere&gt;\n&lt;radius&gt;2.0&lt;/radius&gt;\n&lt;/sphere&gt;\n&lt;/geometry&gt;\n&lt;/visual&gt;\n&lt;collision name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;sphere&gt;\n&lt;radius&gt;2.0&lt;/radius&gt;\n&lt;/sphere&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;/link&gt;\n&lt;/model&gt;\n&lt;/sdf&gt;\n</code></pre>","tags":["gazebo"]},{"location":"blog/Ignition/moving_robot_ex/","title":"ignition ros2 bridge","text":"<pre><code>sudo apt install ros-humble-ros-ign\n</code></pre>","tags":["ros2","ignition","bridge"]},{"location":"blog/Ignition/moving_robot_ex/#diff-drive","title":"diff drive","text":"ros2 command<pre><code>ros2 topic pub -1 /model/vehicle_blue/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0}}\"\n</code></pre> ign command<pre><code>ign topic -t \"/model/vehicle_green/cmd_vel\" -m ignition.msgs.Twist -p \"linear: {x: 0.5}, angular: {z: 0.05}\"\n</code></pre>","tags":["ros2","ignition","bridge"]},{"location":"blog/Ignition/moving_robot_ex/#launch","title":"launch","text":"","tags":["ros2","ignition","bridge"]},{"location":"blog/Ignition/moving_robot_ex/#bridge","title":"bridge","text":"<pre><code>bridge = Node(\n    package='ros_gz_bridge',\n    executable='parameter_bridge',\n    arguments=['/model/vehicle_blue/cmd_vel@geometry_msgs/msg/Twist@ignition.msgs.Twist',\n                '/model/vehicle_blue/odometry@nav_msgs/msg/Odometry@ignition.msgs.Odometry',\n                '/model/vehicle_green/cmd_vel@geometry_msgs/msg/Twist@ignition.msgs.Twist',\n                '/model/vehicle_green/odometry@nav_msgs/msg/Odometry@ignition.msgs.Odometry'],\n    parameters=[{'qos_overrides./model/vehicle_blue.subscriber.reliability': 'reliable',\n                    'qos_overrides./model/vehicle_green.subscriber.reliability': 'reliable'}],\n    output='screen'\n)\n</code></pre> <pre><code># topic@ros2 msg type@ignition msg type\n/model/vehicle_blue/cmd_vel@geometry_msgs/msg/Twist@ignition.msgs.Twist\n</code></pre>","tags":["ros2","ignition","bridge"]},{"location":"blog/Ignition/physics/","title":"Reference","text":"<ul> <li>Physics simulation concepts</li> <li>Louise Pouble</li> </ul>"},{"location":"blog/Ignition/tips/","title":"SDF specification and tools","text":"","tags":["sdf","tips"]},{"location":"blog/Ignition/tips/#validate--check-sdf-file","title":"validate / check sdf file","text":"<pre><code>ign sdf -k &lt;sdf.file&gt;\n</code></pre>","tags":["sdf","tips"]},{"location":"blog/Ignition/programing/","title":"Index","text":""},{"location":"blog/Ignition/programing/#demos","title":"demos","text":"<ul> <li>ignition dev stand alone, hello example</li> </ul>"},{"location":"blog/Ignition/programing/ignition_dev_hello/","title":"Ignition programing","text":"","tags":["ignition","ign-transport"]},{"location":"blog/Ignition/programing/ignition_dev_hello/#objective","title":"Objective","text":"<ul> <li>Subscriber to ign topic</li> </ul>","tags":["ignition","ign-transport"]},{"location":"blog/Ignition/programing/ignition_dev_hello/#demo","title":"demo","text":"","tags":["ignition","ign-transport"]},{"location":"blog/Ignition/programing/ignition_dev_hello/#project","title":"project","text":"<pre><code>\u251c\u2500\u2500 build\n\u251c\u2500\u2500 main.cpp\n\u2514\u2500\u2500 CMakeLists.txt\n</code></pre>","tags":["ignition","ign-transport"]},{"location":"blog/Ignition/programing/ignition_dev_hello/#code","title":"code","text":"main.cpp<pre><code>#include &lt;iostream&gt;\n#include \"ignition/msgs/clock.pb.h\"\n#include \"ignition/transport/Node.hh\"\n\nvoid cb(const ignition::msgs::Clock &amp;msg)\n{\nstd::cout &lt;&lt; msg.DebugString() &lt;&lt; std::endl;\n}\n\nint main(int, char**) {\nstd::cout &lt;&lt; \"Hello, ignition !\\n\";\nstd::string topic = \"/clock\";\nignition::transport::Node node;\nnode.Subscribe(topic, cb);\nignition::transport::waitForShutdown();\n}\n</code></pre> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.10.0)\nproject(ign_demos VERSION 0.1.0)\n\nfind_package(ignition-transport11 QUIET REQUIRED OPTIONAL_COMPONENTS log)\nset(IGN_TRANSPORT_VER ${ignition-transport11_VERSION_MAJOR})\n\nadd_executable(main main.cpp)\ntarget_link_libraries(main ignition-transport${IGN_TRANSPORT_VER}::core)\n</code></pre>","tags":["ignition","ign-transport"]},{"location":"blog/Ignition/programing/ignition_dev_hello/#run-demo","title":"Run demo","text":"terminal1<pre><code>ign gazebo -r\n</code></pre> terminal2<pre><code>./main\n\nsystem {\nsec: 1666468493\nnsec: 778510659\n}\nreal {\nsec: 15\nnsec: 459216049\n}\nsim {\nsec: 14\nnsec: 393000000\n}\n</code></pre>","tags":["ignition","ign-transport"]},{"location":"blog/Ignition/programing/ignition_dev_hello/#clock-topic","title":"Clock topic","text":"<pre><code>ign topic --info -t /clock\n#\nPublishers [Address, Message Type]:\n  tcp://172.18.0.1:34283, ignition.msgs.Clock\n</code></pre> <pre><code>ign msg --info ignition.msgs.Clock\n#\nName: ignition.msgs.Clock\nFile: ignition/msgs/clock.proto\n\nmessage Clock {\n.ignition.msgs.Header header = 1;\n.ignition.msgs.Time system = 2;\n.ignition.msgs.Time real = 3;\n.ignition.msgs.Time sim = 4;\n}\n</code></pre>","tags":["ignition","ign-transport"]},{"location":"blog/Ignition/sensors/camera/","title":"ignition camera sensor","text":"<p>check <code>camera_sensor.sdf</code> at example worlds</p> <p>don\u2019t forget world sensors plugin <pre><code>&lt;plugin\nfilename=\"ignition-gazebo-sensors-system\"\nname=\"ignition::gazebo::systems::Sensors\"&gt;\n&lt;render_engine&gt;ogre2&lt;/render_engine&gt;\n&lt;/plugin&gt;\n</code></pre></p> <pre><code>&lt;sensor name=\"camera\" type=\"camera\"&gt;\n&lt;camera&gt;\n&lt;horizontal_fov&gt;1.047&lt;/horizontal_fov&gt;\n&lt;image&gt;\n&lt;width&gt;320&lt;/width&gt;\n&lt;height&gt;240&lt;/height&gt;\n&lt;/image&gt;\n&lt;clip&gt;\n&lt;near&gt;0.1&lt;/near&gt;\n&lt;far&gt;100&lt;/far&gt;\n&lt;/clip&gt;\n&lt;/camera&gt;\n&lt;always_on&gt;1&lt;/always_on&gt;\n&lt;update_rate&gt;15&lt;/update_rate&gt;\n&lt;visualize&gt;true&lt;/visualize&gt;\n&lt;topic&gt;/vehicle/front_camera&lt;/topic&gt;\n&lt;/sensor&gt;\n</code></pre> <pre><code>ign topic --list | grep camera\n# result\n/gui/camera/pose\n/vehicle/camera_info\n/vehicle/front_camera\n\n# info\nign topic --info --topic /vehicle/front_camera\nPublishers [Address, Message Type]:\n  tcp://172.18.0.1:45921, ignition.msgs.Image\n\n# echo\nign topic --echo -t /vehicle/front_camera\n\n# msg\nign msg --info ign_msgs.Image\nName: ignition.msgs.Image\nFile: ignition/msgs/image.proto\n\nmessage Image {\n.ignition.msgs.Header header = 1;\nuint32 width = 2;\nuint32 height = 3;\nuint32 step = 4;\nbytes data = 5;\n.ignition.msgs.PixelFormatType pixel_format_type = 6;\n}\n</code></pre>","tags":["camera","sensors"]},{"location":"blog/Ignition/sensors/camera/#ignition-image_display","title":"ignition image_display","text":"","tags":["camera","sensors"]},{"location":"blog/Ignition/sensors/camera/#add-imagedisplay-to-sdf","title":"Add ImageDisplay to sdf","text":"<ul> <li>Add <code>ImageDisplay</code> plugin under <code>gui</code> tag <pre><code>&lt;plugin filename=\"ImageDisplay\" name=\"Image Display\"&gt;\n&lt;ignition-gui&gt;\n&lt;property key=\"state\" type=\"string\"&gt;docked&lt;/property&gt;\n&lt;/ignition-gui&gt;\n&lt;/plugin&gt;\n</code></pre></li> </ul>","tags":["camera","sensors"]},{"location":"blog/Ignition/sensors/camera/#ros2-bridge","title":"ros2 bridge","text":"<p>ros_gz_bridge</p> <p>https://github.com/gazebosim/ros_gz/tree/humble/ros_gz_bridge</p> <p>don\u2019t forget to hit play, or Gazebo Sim won\u2019t generate any images</p> terminal2<pre><code>ros2 run ros_gz_bridge parameter_bridge /vehicle/front_camera@sensor_msgs/msg/Image@ignition.msgs.Image\n</code></pre> terminal3<pre><code>ros2 run rqt_image_view rqt_image_view /vehicle/front_camera\n</code></pre> <p></p>","tags":["camera","sensors"]},{"location":"blog/Ignition/sensors/lidar/","title":"ignition lidar sensor","text":"<p>Add sensor plugin under <code>&lt;world&gt;</code> tag <pre><code>&lt;plugin\nfilename=\"libignition-gazebo-sensors-system.so\"\nname=\"ignition::gazebo::systems::Sensors\"&gt;\n&lt;render_engine&gt;ogre2&lt;/render_engine&gt;\n&lt;/plugin&gt;\n</code></pre></p>","tags":["lidar","sensors"]},{"location":"blog/Ignition/sensors/lidar/#lidar-sensor-example","title":"LIDAR sensor example","text":"<pre><code>&lt;sensor name='gpu_lidar' type='gpu_lidar'&gt;\"\n&lt;pose relative_to='lidar_frame'&gt;0 0 0 0 0 0&lt;/pose&gt;\n&lt;topic&gt;lidar&lt;/topic&gt;\n&lt;update_rate&gt;10&lt;/update_rate&gt;\n&lt;lidar&gt;\n&lt;scan&gt;\n&lt;horizontal&gt;\n&lt;samples&gt;640&lt;/samples&gt;\n&lt;resolution&gt;1&lt;/resolution&gt;\n&lt;min_angle&gt;-1.396263&lt;/min_angle&gt;\n&lt;max_angle&gt;1.396263&lt;/max_angle&gt;\n&lt;/horizontal&gt;\n&lt;vertical&gt;\n&lt;samples&gt;1&lt;/samples&gt;\n&lt;resolution&gt;1&lt;/resolution&gt;\n&lt;min_angle&gt;0.0&lt;/min_angle&gt;\n&lt;max_angle&gt;0.0&lt;/max_angle&gt;\n&lt;/vertical&gt;\n&lt;/scan&gt;\n&lt;range&gt;\n&lt;min&gt;0.08&lt;/min&gt;\n&lt;max&gt;10.0&lt;/max&gt;\n&lt;resolution&gt;0.01&lt;/resolution&gt;\n&lt;/range&gt;\n&lt;/lidar&gt;\n&lt;always_on&gt;1&lt;/always_on&gt;\n&lt;visualize&gt;true&lt;/visualize&gt;\n&lt;/sensor&gt;\n</code></pre>","tags":["lidar","sensors"]},{"location":"blog/Ignition/sensors/lidar/#ign-laserscan-msg","title":"ign LaserScan msg","text":"<pre><code>ign msg --info ign_msgs.LaserScan\n#\nName: ignition.msgs.LaserScan\nFile: ignition/msgs/laserscan.proto\n\nmessage LaserScan {\n.ignition.msgs.Header header = 1;\nstring frame = 2;\n.ignition.msgs.Pose world_pose = 3;\ndouble angle_min = 4;\ndouble angle_max = 5;\ndouble angle_step = 6;\ndouble range_min = 7;\ndouble range_max = 8;\nuint32 count = 9;\ndouble vertical_angle_min = 10;\ndouble vertical_angle_max = 11;\ndouble vertical_angle_step = 12;\nuint32 vertical_count = 13;\nrepeated double ranges = 14;\nrepeated double intensities = 15;\n</code></pre>","tags":["lidar","sensors"]},{"location":"blog/Ignition/sensors/lidar/#show-in-rviz","title":"show in rviz","text":"<ul> <li>using ros_gz_bridge</li> </ul> ros_gz_bridge<pre><code>ros2 run ros_gz_bridge parameter_bridge /lidar@sensor_msgs/msg/LaserScan@ignition.msgs.LaserScan\n</code></pre> <pre><code>ros2 run rviz2 rviz2\n</code></pre>","tags":["lidar","sensors"]},{"location":"blog/Ignition/sensors/lidar/#settings","title":"settings","text":"field value Fixed Frame Topic size 0.1 <pre><code># get frame from message\nign topic --echo -t /lidar| grep -i frame\n</code></pre>","tags":["lidar","sensors"]},{"location":"blog/Misl/aptly/","title":"Aptly Swiss army knife for Debian repository management","text":"<p>Aptly is a free Debian repository management tool that allows you to mirror remote repositories, manage local package repositories, take snapshots, pull new versions of packages along with dependencies</p>","tags":["aptly","apt","repository"]},{"location":"blog/Misl/aptly/#install","title":"Install","text":"<p>Download and install aptly </p> <ul> <li>untar</li> <li>move to <code>/usr/bin</code></li> </ul>","tags":["aptly","apt","repository"]},{"location":"blog/Misl/aptly/custom_repo/","title":"aptly repo","text":"<p>Local repository is a collection of packages (most usually custom packages created internally).  Multiple versions of the same package could be added to the repository. In order to capture current repository state we use snapshot</p>","tags":["aptly","repo","local"]},{"location":"blog/Misl/aptly/custom_repo/#repo","title":"repo","text":"","tags":["aptly","repo","local"]},{"location":"blog/Misl/aptly/custom_repo/#create","title":"Create","text":"<p>Create local package repository. Repository would be empty when created, packages could be added to the repository from local files, copied or moved from another local repository or imported from the mirror. more</p> <pre><code>aptly -distribution=\"jammy\" -architectures=\"amd64\" \\\nrepo \\\ncreate \\\nmy_repo\n</code></pre>","tags":["aptly","repo","local"]},{"location":"blog/Misl/aptly/custom_repo/#list","title":"List","text":"<p>Commands list displays list of all local package repositories. more</p> <pre><code>aptly repo list\n</code></pre>","tags":["aptly","repo","local"]},{"location":"blog/Misl/aptly/custom_repo/#add","title":"Add","text":"<p>Command adds packages to local repository from .deb more</p> <p>From <code>deb</code> folder location</p> <pre><code>aptly repo add my_repo *deb\n</code></pre>","tags":["aptly","repo","local"]},{"location":"blog/Misl/aptly/custom_repo/#snapshot","title":"Snapshot","text":"<p>Snapshot is a fixed state of remote repository mirror or local repository. Internally snapshot is list of references to packages. </p> <p>more</p> <p>Creates snapshot from current state of local package repository. </p> <p><pre><code>aptly snapshot create &lt;name&gt; from repo &lt;repo-name&gt;\n</code></pre> - name: snapshot name - repo-name: local repository name</p> <pre><code>aptly snapshot create \\\nsnap_my_repo \\\nfrom repo my_repo\n</code></pre>","tags":["aptly","repo","local"]},{"location":"blog/Misl/aptly/custom_repo/#publish","title":"Publish","text":"<p>Publishes snapshot as repository to be consumed by apt.  more</p> <pre><code>aptly publish snapshot &lt;name&gt; [&lt;prefix&gt;]\n</code></pre> <ul> <li>prefix: Add prefix to repo url</li> <li>architectures: publish only selected arc from snapshot</li> <li>distribution: distribution name to publish</li> <li>skip-signing: don\u2019t sign Release files with GPG</li> </ul> publish with prefix<pre><code>aptly -architectures=\"amd64\" -skip-signing=true \\\npublish snapshot -architectures=\"amd64\" \\\nsnap_my_repo local\n</code></pre>","tags":["aptly","repo","local"]},{"location":"blog/Misl/aptly/custom_repo/#serve","title":"Serve","text":"<p>aptly can serve published repositories using its own embedded webserver. more</p> <pre><code>aptly server\n</code></pre>","tags":["aptly","repo","local"]},{"location":"blog/Misl/aptly/custom_repo/#sourcelist","title":"source.list","text":"<ul> <li>Add this line to use by apt</li> </ul> line in source.list<pre><code>deb http://lap2:8080/local/ jammy main\n</code></pre>","tags":["aptly","repo","local"]},{"location":"blog/Misl/aptly/custom_repo/#reference","title":"Reference","text":"<ul> <li>Introducing \u2018Aptly\u2019, A Debian Repository Management Tool</li> </ul>","tags":["aptly","repo","local"]},{"location":"blog/Misl/aptly/mirror/","title":"Mirror","text":"","tags":["aptly","apt","repository","mirror"]},{"location":"blog/Misl/aptly/mirror/#lab---create-mirror","title":"LAB - create mirror","text":"<p>Create mirror for qgis, mirror only amd64 architecture  ubuntu jammy 22.04 distribution</p>","tags":["aptly","apt","repository","mirror"]},{"location":"blog/Misl/aptly/mirror/#mirror","title":"Mirror","text":"<p>Creates mirror of remote repository</p> <p>Aptly documentation for more</p>","tags":["aptly","apt","repository","mirror"]},{"location":"blog/Misl/aptly/mirror/#create","title":"Create","text":"create mirror<pre><code>aptly mirror -architectures=\"amd64\" \\\n-ignore-signatures \\\ncreate qgis-jammy  \\\nhttps://ubuntu.qgis.org/ubuntu-ltr/ jammy main </code></pre>","tags":["aptly","apt","repository","mirror"]},{"location":"blog/Misl/aptly/mirror/#udate","title":"Udate","text":"update mirror<pre><code>aptly mirror \\\n-ignore-signatures \\\nupdate \\\nqgis-jammy\n</code></pre>","tags":["aptly","apt","repository","mirror"]},{"location":"blog/Misl/aptly/mirror/#snapshot","title":"Snapshot","text":"snapshot<pre><code>aptly snapshot create \\\nqgis-jammy-snapshot \\\nfrom mirror qgis-jammy\n</code></pre> create GPG key<pre><code>gpg --full-generate-key\n#\ngpg: key FB7DBD6EA7954594 marked as ultimately trusted\ngpg: directory '/home/user/.gnupg/openpgp-revocs.d' created\n\npublic and secret key created and signed.\n\npub   rsa1024 2023-06-10 [SC]\n2061DF2A405A938EFEFC5B93FB7DBD6EA7954594\nuid                      robobe &lt;robobe@gmail.com&gt;\nsub   rsa1024 2023-06-10 [E]\n</code></pre>","tags":["aptly","apt","repository","mirror"]},{"location":"blog/Misl/aptly/mirror/#publish","title":"Publish","text":"<p>Publishes snapshot as repository to be consumed by apt Valid GPG key is required for publishing.</p> <p>more </p> publish<pre><code>aptly publish \\\nsnapshot \\\n-distribution=\"jammy\" \\\n-architectures=\"amd64\" \\\n-gpg-key=\"2061DF2A405A938EFEFC5B93FB7DBD6EA7954594\" \\\nqgis-jammy-snapshot\n</code></pre>","tags":["aptly","apt","repository","mirror"]},{"location":"blog/Misl/aptly/mirror/#export-key","title":"Export key","text":"<p>Export gpg key to be use by apt</p> export key<pre><code>gpg --armor --output ~/.aptly/public/gpg --export 2061DF2A405A938EFEFC5B93FB7DBD6EA7954594\n</code></pre> serve<pre><code>aptly serve\n</code></pre> install key<pre><code>wget -O - -q http://127.0.0.1:8080/gpg | sudo apt-key add -\n</code></pre>","tags":["aptly","apt","repository","mirror"]},{"location":"blog/Misl/aptly/mirror/#apt","title":"apt","text":"add to source.list<pre><code>deb http://127.0.0.1:8080/ jammy main\n</code></pre> apt cache<pre><code>apt-cache policy qgis\n#\nqgis:\n  Installed: (none)\nCandidate: 1:3.28.7+36jammy\n  Version table:\n     1:3.28.7+36jammy 500\n500 http://127.0.0.1:8080 jammy/main amd64 Packages\n     3.22.4+dfsg-3build1 500\n500 http://us.archive.ubuntu.com/ubuntu jammy/universe amd64 Packages\n</code></pre>","tags":["aptly","apt","repository","mirror"]},{"location":"blog/Misl/aptly/mirror/#reference","title":"Reference","text":"<ul> <li>Setting up a Debian package mirror with Aptly for offline use</li> </ul>","tags":["aptly","apt","repository","mirror"]},{"location":"blog/Misl/aptly/mirror_ros2_repostory/","title":"Aptly Demo: mirror ROS2 humble repository","text":"","tags":["aptly","ros2"]},{"location":"blog/Misl/aptly/mirror_ros2_repostory/#create-mirror","title":"create mirror","text":"","tags":["aptly","ros2"]},{"location":"blog/Misl/aptly/mirror_ros2_repostory/#install-key","title":"install key","text":"<pre><code>sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre>","tags":["aptly","ros2"]},{"location":"blog/Misl/aptly/mirror_ros2_repostory/#import","title":"import","text":"<pre><code>gpg --no-default-keyring --keyring /usr/share/keyrings/ros-archive-keyring.gpg --export | gpg --no-default-keyring --keyring trustedkeys.gpg --import\n</code></pre>","tags":["aptly","ros2"]},{"location":"blog/Misl/aptly/mirror_ros2_repostory/#create","title":"create","text":"create mirror<pre><code>aptly mirror -architectures=\"amd64\" \\\ncreate ros2-humble  \\\nhttp://packages.ros.org/ros2/ubuntu/ jammy main </code></pre>","tags":["aptly","ros2"]},{"location":"blog/Misl/aptly/mirror_ros2_repostory/#update","title":"update","text":"<pre><code>aptly mirror update ros2-humble\n</code></pre>","tags":["aptly","ros2"]},{"location":"blog/Misl/aptly/mirror_with_filter_and_dependecies/","title":"Use aptly to mirror selected packages and all the package dependencies","text":"<p>Mirror <code>python3-opencv</code> package and all the package dependencies</p> create mirror<pre><code>aptly create mirror\n</code></pre>","tags":["aptly","mirror"]},{"location":"blog/Misl/crypt/veracrypt/","title":"Reference","text":"<ul> <li>veracrypt download</li> <li>How to Verify PGP Signature of Downloaded Software on Linux</li> <li>Use veracrypt ubuntu 22.04</li> <li>How to Use VeraCrypt on Command Line to Encrypt Drives on Ubuntu</li> </ul>","tags":["encryption","pgp"]},{"location":"blog/Misl/docker/","title":"Docker","text":"<ul> <li>Docker image with none root user</li> <li>Run X11 app on docker image</li> <li>Docker with nvida support</li> </ul>","tags":["docker"]},{"location":"blog/Misl/docker/#reference","title":"Reference","text":"<ul> <li>Docker Build: A Beginner\u2019s Guide to Building Docker Images</li> </ul>","tags":["docker"]},{"location":"blog/Misl/docker/docker_gui_tester/","title":"Run GUI application on docker","text":"<p>Run x11 app on docker image</p>","tags":["docker"]},{"location":"blog/Misl/docker/docker_gui_tester/#dockerfile","title":"Dockerfile","text":"<ul> <li>Install x11-app package</li> <li>Run <code>xeyes</code></li> </ul> <pre><code>FROM ubuntu:22.04 AS base\n\nENV DEBIAN_FRONTEND=noninteractive\n\nARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Create a non-root user\nRUN groupadd --gid $USER_GID $USERNAME \\\n&amp;&amp; useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n# [Optional] Add sudo support for the non-root user\n  &amp;&amp; apt-get update \\\n&amp;&amp; apt-get install -y sudo \\\n&amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n&amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n# Cleanup\n  &amp;&amp; rm -rf /var/lib/apt/lists/* \\\n&amp;&amp; echo 'export PS1=\"\ud83d\udc33 \\u@\\h: \\w\\a\\ # \"' &gt; /home/$USERNAME/.bashrc\n\nRUN apt-get update \\\n&amp;&amp; apt-get install -y x11-apps\n\nCMD [\"/usr/bin/xeyes\"]\n</code></pre>","tags":["docker"]},{"location":"blog/Misl/docker/docker_gui_tester/#usage","title":"Usage","text":"<p>!!! tip Don\u2019t forget     The xhost command adds or deletes host names on the list of machines from which the X Server accepts connections.     <pre><code>xhost + local:docker\n</code></pre></p>","tags":["docker"]},{"location":"blog/Misl/docker/docker_gui_tester/#cli","title":"cli","text":"<pre><code>docker run -it \\\n--rm \\\n--user user \\\n--workdir /home/user \\\n--hostname dev \\\n-e DISPLAY=$DISPLAY \\\n-v /tmp/.X11-unix:/tmp/.X11-unix \\\nubuntu:gui\n</code></pre>","tags":["docker"]},{"location":"blog/Misl/docker/docker_gui_tester/#docker-compose","title":"docker-compose","text":"docker-compose.yaml<pre><code>version: \"3.0\"\nservices:\nubuntu:\nimage: ubuntu:gui\nhostname: dev\nuser: user\nworking_dir: /home/user\nenvironment:\n- DISPLAY=${DISPLAY}\nvolumes:\n- /tmp/.X11-unix:/tmp/.X11-unix\nnetwork_mode: host\n</code></pre>","tags":["docker"]},{"location":"blog/Misl/docker/docker_none_root_user/","title":"Docker with none ROOT user","text":"<p>Create docker image base on ubuntu 22.04 Add user <code>user</code> to image</p>","tags":["docker"]},{"location":"blog/Misl/docker/docker_none_root_user/#dockerfile","title":"Dockerfile","text":"<ul> <li>Add user <code>user</code> to image</li> <li>Install <code>sudo</code></li> <li>Add user to <code>sudoers</code></li> <li>Set prompt</li> </ul> <pre><code>FROM ubuntu:22.04 AS base\n\nENV DEBIAN_FRONTEND=noninteractive\n\nARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Create a non-root user\nRUN groupadd --gid $USER_GID $USERNAME \\\n&amp;&amp; useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n# [Optional] Add sudo support for the non-root user\n  &amp;&amp; apt-get update \\\n&amp;&amp; apt-get install -y sudo \\\n&amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n&amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n# Cleanup\n  &amp;&amp; rm -rf /var/lib/apt/lists/* </code></pre>","tags":["docker"]},{"location":"blog/Misl/docker/docker_none_root_user/#usage","title":"Usage","text":"<p>Run image with <code>user</code> context set <code>hostname</code> and <code>workdir</code></p>","tags":["docker"]},{"location":"blog/Misl/docker/docker_none_root_user/#cli","title":"cli","text":"<pre><code>docker run -it \\\n--rm \\\n--user user \\\n--workdir /home/user \\\n--hostname dev \\\nubuntu:user \\\n</code></pre>","tags":["docker"]},{"location":"blog/Misl/docker/docker_none_root_user/#docker-compose","title":"docker-compose","text":"<pre><code>version: \"3.0\"\nservices:\n  ubuntu:\n    image: ubuntu:user\n    hostname: dev\n    user: user\n    working_dir: /home/user\n</code></pre>","tags":["docker"]},{"location":"blog/Misl/docker/docker_nvidia_install/","title":"Install docker with nvidia support","text":"<p>Prerequisite</p> <p>Install nvidia driver on host machine</p> <ul> <li>Install docker follow <code>digitalocean</code></li> <li>Install <code>nvidia-container-toolkit</code></li> <li>Check</li> </ul>","tags":["docker","nvidia"]},{"location":"blog/Misl/docker/docker_nvidia_install/#install","title":"Install","text":"","tags":["docker","nvidia"]},{"location":"blog/Misl/docker/docker_nvidia_install/#nvidia-container-toolkit","title":"nvidia-container-toolkit","text":"<pre><code>distribution=$(. /etc/os-release;echo $ID$VERSION_ID)\n# key\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\n# apt\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\n# install\nsudo apt-get update &amp;&amp; sudo apt-get install -y nvidia-container-toolkit\n</code></pre> <p>Note</p> <p>nvidia-docker.list point to <code>ubuntu 18.04</code></p>","tags":["docker","nvidia"]},{"location":"blog/Misl/docker/docker_nvidia_install/#checking","title":"Checking","text":"first run<pre><code>docker run --gpus all nvidia/cuda:10.0-base nvidia-smi\nUnable to find image 'nvidia/cuda:10.0-base' locally\n10.0-base: Pulling from nvidia/cuda\n25fa05cd42bd: Pull complete \n2d6e353a95ec: Pull complete \ndf0051b6f25d: Pull complete \nad1e3e71b0c0: Pull complete \nd26e14de793e: Pull complete \nDigest: sha256:2f608ac9f6c6a9abb34112ccd85058877f669d4c976d7e3fc1c7cafcf5ef7dff\nStatus: Downloaded newer image for nvidia/cuda:10.0-base\nFri Jun  3 05:56:41 2022       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 510.73.05    Driver Version: 510.73.05    CUDA Version: 11.6     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce ...  Off  | 00000000:58:00.0 Off |                  N/A |\n| N/A   46C    P0    N/A /  N/A |      9MiB /  2048MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n+-----------------------------------------------------------------------------+\n</code></pre> <p>Note</p> <p><code>--gps all</code> arg in docker run command</p>","tags":["docker","nvidia"]},{"location":"blog/Misl/docker/docker_nvidia_install/#gui","title":"gui","text":"<pre><code>xhost +local:docker\ndocker run --gpus all -it \\\n-e DISPLAY=$DISPLAY \\\n-v /tmp/.X11-unix:/tmp/.X11-unix \\\nnathzi1505:darknet bash\n</code></pre>","tags":["docker","nvidia"]},{"location":"blog/Misl/docker/docker_nvidia_install/#reference","title":"Reference","text":"<ul> <li>How To Install and Use Docker on Ubuntu 20.04</li> <li>nvidia docker</li> <li>docker nvidia</li> <li>How to get your CUDA application running in a Docker container</li> </ul>","tags":["docker","nvidia"]},{"location":"blog/Misl/docker/multistage_docker/","title":"Docker multi-stage","text":"","tags":["docker","multi-stage","stage"]},{"location":"blog/Misl/docker/multistage_docker/#with-multi-stage-builds-you-use-multiple-from-statements-in-your-dockerfile-each-from-instruction-can-use-a-different-base-and-each-of-them-begins-a-new-stage-of-the-build-you-can-selectively-copy-artifacts-from-one-stage-to-another-leaving-behind-everything-you-dont-want-in-the-final-image","title":"With multi-stage builds, you use multiple FROM statements in your Dockerfile. Each FROM instruction can use a different base, and each of them begins a new stage of the build. You can selectively copy artifacts from one stage to another, leaving behind everything you don\u2019t want in the final image","text":"","tags":["docker","multi-stage","stage"]},{"location":"blog/Misl/docker/multistage_docker/#build-stage","title":"Build stage","text":"<pre><code>docker build --target builder -f Dockerfile -t react-b:latest . # The --target the option allows you to specify a specific stage at which you'd like to stop.\n</code></pre>","tags":["docker","multi-stage","stage"]},{"location":"blog/Misl/docker/multistage_docker/#reference","title":"Reference","text":"<ul> <li>Building Images Faster and Better With Multi-Stage Builds</li> </ul>","tags":["docker","multi-stage","stage"]},{"location":"blog/Misl/git/git_bundle/","title":"git bundle","text":"<p>Git bundle is a utility that allow you to pack repository, branch, specific commit to signal file and expend them easily.</p>","tags":["git","bundle"]},{"location":"blog/Misl/git/git_bundle/#demo-bundle-range-of-commits","title":"Demo: Bundle Range of commits","text":"","tags":["git","bundle"]},{"location":"blog/Misl/git/git_bundle/#bundle","title":"bundle","text":"view commits<pre><code>git log --oneline origin/master..master\n</code></pre> bundle commits<pre><code>git bundle create patch.bundle origin/master..master\n</code></pre>","tags":["git","bundle"]},{"location":"blog/Misl/git/git_bundle/#unbundling","title":"Unbundling","text":"<pre><code>git branch temp\n\ngit switch temp\n\ngit fetch -u patch.bundle master:temp\n\ngit switch master\n\ngit merge temp\n\ngit branch --delete temp\n</code></pre>","tags":["git","bundle"]},{"location":"blog/Misl/git/git_bundle/#reference","title":"Reference","text":"<ul> <li>A Guide for Bundling Git Repos</li> </ul>","tags":["git","bundle"]},{"location":"blog/Misl/git/github_pro_tips/","title":"github pro tips","text":"","tags":["github"]},{"location":"blog/Misl/git/github_pro_tips/#fuzzy-file-finder","title":"Fuzzy file finder","text":"<p>Press t in any repository to access it and start typing the name of the file you want to find</p>","tags":["github"]},{"location":"blog/Misl/git/github_pro_tips/#browse-files-and-directories-with-ease","title":"Browse files and directories with ease","text":"<p>Great browser extension called Octotree helps you navigate directories, and open files with a familiar tree-like structure.</p>","tags":["github"]},{"location":"blog/Misl/git/github_pro_tips/#reference","title":"Reference","text":"<ul> <li>GitHub Protips: Tips, tricks, hacks, and secrets from Lee Reilly</li> </ul>","tags":["github"]},{"location":"blog/Misl/git/pre_commit/","title":"git pre-commit","text":"<p>All Git hooks are ordinary scripts that Git executes when certain events occur in the repository</p> <p>git hooks locate in <code>.git/hooks</code> folder</p> <p><code>pre-commit</code> is a library that help us manage the <code>pre-commit</code> hook</p>","tags":["git","hooks","pre-commit"]},{"location":"blog/Misl/git/pre_commit/#install","title":"Install","text":"<pre><code>python -m pip install pre-commit\n#or from pyz\n# Download from release\npython pre-commit-#.#.#.pyz\n</code></pre>","tags":["git","hooks","pre-commit"]},{"location":"blog/Misl/git/pre_commit/#pre-commit","title":"pre-commit","text":"<p>pre-commit is a tool that help us config and install git hook for pre-commit event.</p>","tags":["git","hooks","pre-commit"]},{"location":"blog/Misl/git/pre_commit/#usage","title":"usage","text":"<ul> <li>Install</li> <li>Create config file at project root folder</li> <li>Add hooks</li> <li>Install hooks</li> <li>Test / Run hooks</li> </ul>","tags":["git","hooks","pre-commit"]},{"location":"blog/Misl/git/pre_commit/#config-hooks","title":"config hooks","text":"<pre><code>touch .pre-commit-config.yaml\n</code></pre> <pre><code>repos:\n-   repo: https://github.com/psf/black\nrev: 23.3.0\nhooks:\n-   id: black\n</code></pre> <p>supported hooks</p> <p><code>rev</code> can take from github project releases page</p> <p>supported hooks</p> <p>Get hooks list from pre-commit</p>","tags":["git","hooks","pre-commit"]},{"location":"blog/Misl/git/pre_commit/#install-hook","title":"install hook","text":"<pre><code>pre-commit install\n</code></pre>","tags":["git","hooks","pre-commit"]},{"location":"blog/Misl/git/pre_commit/#test-run","title":"Test/ run","text":"<pre><code>#-a all-files\npre-commit run -a\n</code></pre>","tags":["git","hooks","pre-commit"]},{"location":"blog/Misl/git/pre_commit/#tips","title":"Tips","text":"<p>Action order 1. config modify action hooks 2. config check action hooks </p>","tags":["git","hooks","pre-commit"]},{"location":"blog/Misl/git/pre_commit/#references","title":"References","text":"<ul> <li>pre-commit</li> <li>4 Tools to Format &amp; Check your Code with Pre-Commit</li> </ul>","tags":["git","hooks","pre-commit"]},{"location":"blog/Misl/lxd/","title":"LXD hello","text":"<p>LXD system container and virtual machine manager. </p> <p>Virtual machines emulate a physical machine, using the hardware of the host system from a full and completely isolated operating system implemented through the use of qemu. System containers, on the other hand, use the OS kernel of the host system instead of creating their own environment</p>","tags":["lxd","container"]},{"location":"blog/Misl/lxd/#install","title":"Install","text":"<pre><code>sudo apt update\nsudo apt install lxd\n# pick version 4.0\n</code></pre>","tags":["lxd","container"]},{"location":"blog/Misl/lxd/#add-user-to-lxd-group","title":"Add user to lxd group","text":"<pre><code> sudo adduser $USER lxd\n # check with id command\nid\n uid=1000(user) gid=1000(user) groups=1000(user),4(adm),20(dialout),24(cdrom),27(sudo),132(lxd),998(docker)\n</code></pre>","tags":["lxd","container"]},{"location":"blog/Misl/lxd/#init-lxd","title":"Init LXD","text":"<pre><code>lxd init\n</code></pre>","tags":["lxd","container"]},{"location":"blog/Misl/lxd/#create-first-container","title":"Create first container","text":"","tags":["lxd","container"]},{"location":"blog/Misl/lxd/#launch","title":"launch","text":"<p>launch      Create and start instances from images</p> <pre><code>lxc launch images:{distro}/{version}/{arch} {container-name}\n</code></pre> <ul> <li>launch ubuntu 22.04 <pre><code>lxc launch images:ubuntu/22.04/amd64 ubuntu2204\n</code></pre></li> </ul> <pre><code>lxc list\n# result\n+------------+---------+--------------------+-----------------------------------------------+-----------+-----------+\n|    NAME    |  STATE  |        IPV4        |                     IPV6                      |   TYPE    | SNAPSHOTS |\n+------------+---------+--------------------+-----------------------------------------------+-----------+-----------+\n| ubuntu2204 | RUNNING | 10.10.10.62 (eth0) | fd42:5179:549e:e81d:216:3eff:fe3f:5b92 (eth0) | CONTAINER | 0         |\n+------------+---------+--------------------+-----------------------------------------------+-----------+-----------+\n</code></pre>","tags":["lxd","container"]},{"location":"blog/Misl/lxd/#get-shell","title":"Get shell","text":"<pre><code>lxc exec  ubuntu2204 -- /bin/bash\nroot@ubuntu2204:~# id\nuid=0(root) gid=0(root) groups=0(root)\n\nroot@ubuntu2204:~# cat /etc/lsb-release \nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=22.04\nDISTRIB_CODENAME=jammy\nDISTRIB_DESCRIPTION=\"Ubuntu 22.04.1 LTS\"\n</code></pre>","tags":["lxd","container"]},{"location":"blog/Misl/lxd/#login-as-none-root","title":"login as none root","text":"<pre><code>lxc exec  ubuntu2204 --user 1000 /bin/bash\n# \nubuntu@ubuntu2204:/$ id\nuid=1000(ubuntu) gid=0(root) groups=0(root)\n</code></pre>","tags":["lxd","container"]},{"location":"blog/Misl/lxd/#basic-lxc","title":"Basic lxc","text":"<pre><code>lxc list\nlxc info &lt;container name&gt;\nlxc exec &lt;container name&gt; &lt;command&gt;\nlxc stop &lt;container name&gt;\nlxc move &lt;container name&gt; &lt; new container name&gt;\nlxc copy &lt;container name&gt; &lt; new container name&gt;\nlxc delete &lt;container name&gt;\nlxc config\nlxc file push source &lt;container name&gt;/dest\nlxc file pull &lt;container name&gt;/source dest\nlxc file edit &lt;container name&gt;/file path\n</code></pre> <p>alias / custom commands <pre><code>lxc list -c n,s,4,image.description:image\n</code></pre></p>","tags":["lxd","container"]},{"location":"blog/Misl/lxd/#login-with-ssh","title":"login with ssh","text":"<ul> <li>install openssh-server in container</li> </ul> <pre><code>sudo apt install openssh-server\n</code></pre> <ul> <li>Copy host pub key to container</li> </ul> <pre><code>cp ~/.ssh/id_rsa.pub /tmp/authorized_keys\nlxc file push /tmp/authorized_keys ubuntu2204/home/ubuntu/.ssh/authorized_keys -p\n</code></pre>","tags":["lxd","container"]},{"location":"blog/Misl/lxd/#snapshot","title":"Snapshot","text":"","tags":["lxd","container"]},{"location":"blog/Misl/lxd/#lxc-snapshot-container-namelxc-info-container-name--more-info-about-the-snapshotlxc-restore-container-name-snap-name-lxc-delete-container-namesnap-name","title":"<pre><code>lxc snapshot &lt;container name&gt;\nlxc info &lt;container name&gt; # more info about the snapshot\nlxc restore &lt;container name&gt; &lt;snap name&gt; \nlxc delete &lt;container name&gt;/&lt;snap name&gt; \n</code></pre>","text":"","tags":["lxd","container"]},{"location":"blog/Misl/lxd/#sharing","title":"sharing","text":"<p>https://www.cyberciti.biz/faq/how-to-add-or-mount-directory-in-lxd-linux-container/</p> <pre><code>mkdir ~/share\nlxc config device add ubuntu2204 share disk source=~/share path=/home/ubuntu/share\n# Device share added to ubuntu2204\n\n# show\nlxc config device show ubuntu2204\n# result\nshare:\n  path: /home/ubuntu/share\n  source: /home/user/share\n  type: disk\n\n# show on container\nll /home/user/ubuntu\n#\n...\ndrwxrwxr-x 2 nobody nogroup 4096 Jul 28 15:42 share/\n\n# fix permission\n# \nlxc config set ubuntu2204 raw.idmap \"both 1000 1000\"\n\n# restart container\nlxc restart ubuntu2204\n</code></pre>","tags":["lxd","container"]},{"location":"blog/Misl/lxd/#reference","title":"Reference","text":"<ul> <li>LXD</li> <li>LXD getting started</li> <li>The LXD 2.0: Blog post series [0/12]</li> <li>Install ROS 2 Humble in Ubuntu 20.04 or 18.04 using LXD containers</li> <li>ROS Development with LXD</li> </ul>","tags":["lxd","container"]},{"location":"blog/Misl/lxd/container_configuration/","title":"LXD - Container configuration and profile","text":"","tags":["lxd","lxc"]},{"location":"blog/Misl/lxd/container_configuration/#config","title":"Config","text":"<pre><code>lxc config set &lt;container&gt; &lt;key&gt; &lt;value&gt;\n</code></pre>","tags":["lxd","lxc"]},{"location":"blog/Misl/lxd/container_configuration/#profile","title":"Profile","text":"lxc profile list lxc profile show  lxc profile edit &lt;profile lxc profile add  ,  lxc profile assign  ,","tags":["lxd","lxc"]},{"location":"blog/Misl/lxd/lxd_with_x11/","title":"LXD - Running GUI application","text":"x11.profile<pre><code>config:\nenvironment.DISPLAY: :0\nenvironment.PULSE_SERVER: unix:/home/ubuntu/pulse-native\nnvidia.driver.capabilities: all\nnvidia.runtime: \"true\"\nuser.user-data: |\n#cloud-config\nruncmd:\n- 'sed -i \"s/; enable-shm = yes/enable-shm = no/g\" /etc/pulse/client.conf'\npackages:\n- x11-apps\n- mesa-utils\n- pulseaudio\ndescription: GUI LXD profile\ndevices:\nPASocket1:\nbind: container\nconnect: unix:/run/user/1000/pulse/native\nlisten: unix:/home/ubuntu/pulse-native\nsecurity.gid: \"1000\"\nsecurity.uid: \"1000\"\nuid: \"1000\"\ngid: \"1000\"\nmode: \"0777\"\ntype: proxy\nX0:\nbind: container\nconnect: unix:@/tmp/.X11-unix/X1\nlisten: unix:@/tmp/.X11-unix/X0\nsecurity.gid: \"1000\"\nsecurity.uid: \"1000\"\ntype: proxy\nmygpu:\ntype: gpu\nname: x11\nused_by: []\n</code></pre> <p>$DISPLAY</p> <pre><code>X0:\n  bind: container\n  connect: unix:@/tmp/.X11-unix/X1\n</code></pre> <p>The number <code>X1</code> drive from <code>$DISPLAY</code> environment variable</p> <pre><code># Create profile\nlxc profile create x11\n# Edit/load profile\ncat x11.profile | lxc profile edit x11\n# add profile to container\nlxc profile add ubuntu2204 x11\n# or launch with profile\nlxc launch  ubuntu2204 --user 1000  --profile default --profile x11 /bin/bash\n</code></pre>","tags":["lxd","lxc","x11","profile"]},{"location":"blog/Misl/lxd/lxd_with_x11/#check","title":"Check","text":"","tags":["lxd","lxc","x11","profile"]},{"location":"blog/Misl/lxd/lxd_with_x11/#reference","title":"Reference","text":"<ul> <li>Running X11 software in LXD containers </li> </ul>","tags":["lxd","lxc","x11","profile"]},{"location":"blog/Misl/lxd/nvidia_gpu/","title":"Nvida GPU inside LXD","text":"","tags":["nvidia","lxc","lxd"]},{"location":"blog/Misl/lxd/nvidia_gpu/#objective","title":"Objective","text":"<ul> <li>Run cuda app inside lxc</li> </ul>","tags":["nvidia","lxc","lxd"]},{"location":"blog/Misl/lxd/nvidia_gpu/#lab","title":"LAB","text":"<p>Using the pervious container add nvidia and cuda capabilities</p> <p>Note</p> <p>Nvidia and cuda installed on the host machine</p> <pre><code>lxc config set ubuntu2204 nvidia.runtime=true\nlxc config device add ubuntu2204 gpu gpu\n# restart container\nlxc restart ubuntu2204\n# attach shell\nlxc exec  ubuntu2204 --user 1000 /bin/bash\n# run nvidia-smi\nnvidia-smi\n</code></pre>","tags":["nvidia","lxc","lxd"]},{"location":"blog/Misl/lxd/nvidia_gpu/#test-cuda","title":"Test cuda","text":"<p>copy <code>bandwidthTest</code> binary from host to container and run</p> <p>Note</p> <p>My Host installed with cuda <code>11.6</code> version</p> <pre><code>lxc file push /usr/local/cuda-11.6/extras/demo_suite/bandwidthTest ubuntu2204/home/ubuntu/\n\n# from container shell run\n./bandwidthTest [CUDA Bandwidth Test] - Starting...\nRunning on...\n\n Device 0: NVIDIA GeForce MX450\n Quick Mode\n\n Host to Device Bandwidth, 1 Device(s)\nPINNED Memory Transfers\n   Transfer Size (Bytes)    Bandwidth(MB/s)\n33554432         3076.7\n\n Device to Host Bandwidth, 1 Device(s)\nPINNED Memory Transfers\n   Transfer Size (Bytes)    Bandwidth(MB/s)\n33554432         3214.5\n\n Device to Device Bandwidth, 1 Device(s)\nPINNED Memory Transfers\n   Transfer Size (Bytes)    Bandwidth(MB/s)\n33554432         70878.8\n\nResult = PASS\n</code></pre>","tags":["nvidia","lxc","lxd"]},{"location":"blog/Misl/lxd/nvidia_gpu/#reference","title":"Reference","text":"<ul> <li>GPU data processing inside LXD</li> </ul>","tags":["nvidia","lxc","lxd"]},{"location":"blog/Misl/marp/","title":"Marpit: Markdown presentation","text":"","tags":["vscode","marpit","presentation","marp","markdown","mermaid"]},{"location":"blog/Misl/marp/#usage","title":"Usage","text":"slides.md<pre><code>---\nmarp: true\nsize: 4:3\n---\n\n# Headings\n\n## Heading 2\n### Heading 3\n\n---\n\n# Basic Formatting\n\nThis should be **bold** and *italic*.\n\n**Unorder list**\n- item 1\n- item 2\n- item 3\n\n---\n\n**Order list**\n1. item 1\n1. item 2\n1. item 3\n</code></pre>","tags":["vscode","marpit","presentation","marp","markdown","mermaid"]},{"location":"blog/Misl/marp/#preview","title":"Preview","text":"<p>View Marpit presentation</p> <p>Use command: Markdown: Open Preview to the side  and not the command that belong to Markdown Preview Enhanced</p> <p></p>","tags":["vscode","marpit","presentation","marp","markdown","mermaid"]},{"location":"blog/Misl/marp/#toggle-marpit","title":"Toggle marpit","text":"","tags":["vscode","marpit","presentation","marp","markdown","mermaid"]},{"location":"blog/Misl/marp/#export","title":"Export","text":"<p>marp export to: HTML, PDF, PPTX</p> <p></p> <pre><code>\"markdown.marp.exportType\": \"pdf\"\n</code></pre>","tags":["vscode","marpit","presentation","marp","markdown","mermaid"]},{"location":"blog/Misl/marp/#how-to-and-tips","title":"How to and Tips","text":"","tags":["vscode","marpit","presentation","marp","markdown","mermaid"]},{"location":"blog/Misl/marp/#theme","title":"theme","text":"<pre><code>---\ntitle: demo marpit presentation\ndescription: example slide\nmarp: true\nsize: 4:3\npaginate: true\ntheme: gaia\n---\n</code></pre>","tags":["vscode","marpit","presentation","marp","markdown","mermaid"]},{"location":"blog/Misl/marp/#settings","title":"settings","text":"<ul> <li>paginate: Shows page number on the slide or not</li> <li>size: </li> </ul>","tags":["vscode","marpit","presentation","marp","markdown","mermaid"]},{"location":"blog/Misl/marp/#images","title":"Images","text":"<pre><code>---\n\n![bg left](https://picsum.photos/720?image=29) \n- image on the left, with text on the right\n---\n\n![bg left:33%](https://picsum.photos/720?image=29) \n- same of above, but image is 33% of the slide)\n\n---\n</code></pre>","tags":["vscode","marpit","presentation","marp","markdown","mermaid"]},{"location":"blog/Misl/marp/#reference","title":"Reference","text":"<ul> <li>Unleash Your Creativity with Marp Presentation Customization </li> </ul>","tags":["vscode","marpit","presentation","marp","markdown","mermaid"]},{"location":"blog/Misl/mkdocs/tips/","title":"mkdocs tips","text":"","tags":["mkdocs","tips"]},{"location":"blog/Misl/mkdocs/tips/#image-size","title":"image size","text":"<pre><code>![](images/mkdocs.png){width=50}\n![](images/mkdocs.png){width=150}\n</code></pre>","tags":["mkdocs","tips"]},{"location":"blog/Misl/mkdocs/tips/#image-as-url-link","title":"image as url link","text":"<pre><code>[![](images/mkdocs.png){width=50}](plugins.md)\n</code></pre>","tags":["mkdocs","tips"]},{"location":"blog/Misl/mkdocs/tips/#image-align","title":"image align","text":"<p> Text on right side Text on right side Text on right side Text on right side</p>","tags":["mkdocs","tips"]},{"location":"blog/Misl/mkdocs/tips/#imagesmkdocspng-alignleft-width150","title":"<pre><code>![](images/mkdocs.png){ align=left width=150}\n</code></pre>","text":"","tags":["mkdocs","tips"]},{"location":"blog/Misl/mkdocs/tips/#table-cell-with-multiple-line","title":"Table cell with multiple line","text":"<p>using HTML tag <code>&lt;br&gt;</code></p> <pre><code>| Format   | Tag example                  |\n| -------- | ---------------------------  |\n| multiline | line1&lt;br&gt;==line2==&lt;br&gt;line3 |\n</code></pre> Format Tag example multiline line1line2line3","tags":["mkdocs","tips"]},{"location":"blog/Misl/regex/","title":"Index","text":""},{"location":"blog/Misl/regex/#word-boundaries","title":"word boundaries","text":"<p>The metacharacter b is an anchor It matches at a position that is called a \u201cword boundary\u201d</p> <p></p>"},{"location":"blog/Misl/regex/#range","title":"range","text":"<p>[a-zA-Z0-9]</p>"},{"location":"blog/Misl/video/examples/","title":"FFMpeg and Gstreamer Examples","text":"","tags":["video","ffmpeg","gstreamer","cheat-sheet"]},{"location":"blog/Misl/video/examples/#jpeg","title":"jpeg","text":"<ul> <li>Stream jpeg stream over udp using gstreamer</li> <li>Play stream using FFPlay and sdp file</li> </ul> Terminal1: gstreamer udp stream<pre><code>gst-launch-1.0 -v videotestsrc  \\\n ! video/x-raw,width=640,height=480 \\\n ! timeoverlay \\\n ! tee name=\"local\" \\\n ! queue \\\n ! videoconvert \\\n ! autovideosink sync=false\\\n local. \\\n ! queue \\\n ! jpegenc \\\n ! rtpjpegpay \\\n ! udpsink host=127.0.0.1 port= 5000\n</code></pre> udp.sdp<pre><code>m=video 5000 RTP/AVP 26\na=rtpmap:26 JPEG/90000;\nc=IN IP4 127.0.0.1\n</code></pre> Terminal 2: ffplay<pre><code>ffplay \\\n    -protocol_whitelist file,rtp,udp \\\n    -fflags nobuffer \\\n    -flags low_delay \\\n    -framedrop \\\n    -i udp.sdp\n</code></pre>","tags":["video","ffmpeg","gstreamer","cheat-sheet"]},{"location":"blog/Misl/video/ffmpeg/","title":"SDP","text":"<p>Session Description Protocol</p>","tags":["video","ffmpeg","sdp"]},{"location":"blog/Misl/video/ffmpeg/#refernces","title":"Refernces","text":"<ul> <li>RTP (I): Intro to RTP and SDP</li> </ul>","tags":["video","ffmpeg","sdp"]},{"location":"blog/Misl/video/gstreamer/","title":"Gstreamer","text":"","tags":["video","gstreamer","nvidia"]},{"location":"blog/Misl/video/gstreamer/#install","title":"Install","text":"<pre><code>sudo apt-get install libgstreamer1.0-0 \\\ngstreamer1.0-dev \\\ngstreamer1.0-tools \\\ngstreamer1.0-doc\n\nsudo apt-get install gstreamer1.0-plugins-base \\\ngstreamer1.0-plugins-good # nvidia plugs\nsudo apt-install deepstream-6.0\n</code></pre>","tags":["video","gstreamer","nvidia"]},{"location":"blog/Misl/video/gstreamer/#demos","title":"Demos","text":"very basic sample<pre><code>gst-launch-1.0 videotestsrc \\\n! videoconvert \\\n! autovideosink\n</code></pre>","tags":["video","gstreamer","nvidia"]},{"location":"blog/Misl/video/gstreamer/#streaming","title":"Streaming","text":"","tags":["video","gstreamer","nvidia"]},{"location":"blog/Misl/video/gstreamer/#streaming-source","title":"streaming source","text":"H265<pre><code>gst-launch-1.0 videotestsrc \\\n! video/x-raw,width=640,height=480,framerate=25/1,format=I420 \\\n! timeoverlay valignment=4 halignment=1 \\\n! nvvidconv \\\n! 'video/x-raw(memory:NVMM),width=640,height=480' \\\n! nvv4l2h265enc insert-sps-pps=1 idrinterval=15 \\\n! h265parse \\\n! rtph265pay \\\n! udpsink port=5000 host=\"192.168.1.207\"\n</code></pre>","tags":["video","gstreamer","nvidia"]},{"location":"blog/Misl/video/gstreamer/#read-vide-with-sdp-file","title":"read vide with sdp file","text":"sdp<pre><code>c=IN IP4 192.168.1.207\nm=video 5000 RTP/AVP 96\na=rtpmap:96 H265/90000\n</code></pre>","tags":["video","gstreamer","nvidia"]},{"location":"blog/Misl/video/gstreamer/#rtsp-client","title":"rtsp client","text":"<p>```bash title=\u201dffprob\u201d ffprobe rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4</p>","tags":["video","gstreamer","nvidia"]},{"location":"blog/Misl/video/gstreamer/virtual_camera/","title":"gstreamer and virtual camera","text":"","tags":["gstreamer","v4l2loopback"]},{"location":"blog/Misl/video/gstreamer/virtual_camera/#demo","title":"Demo","text":"<ul> <li>Create virtual device</li> <li>Create pipe write to virtual device</li> <li>Create pipe read from device</li> </ul> create virtual camera<pre><code>sudo modprobe v4l2loopback video_nr=\"42\" \\\n'card_label=virtcam' \\\nexclusive_caps=1 \\\nmax_buffers=2\n</code></pre> terminal1<pre><code>gst-launch-1.0 videotestsrc \\\n! videoconvert \\\n! v4l2sink device=/dev/video42\n</code></pre> terminal2<pre><code>gst-launch-1.0 v4l2src device=/dev/video42 \\\n! videoconvert \\\n! autovideosink\n</code></pre> <p>remove virtual camera</p> <pre><code>sudo modprobe -r v4l2loopback\n</code></pre>","tags":["gstreamer","v4l2loopback"]},{"location":"blog/Misl/video/gstreamer/python_binding/gst_appsink_demo/","title":"Gstreamer python binding appsink pipe","text":"appsrc demo<pre><code>import sys\nimport numpy as np\nimport traceback\nimport time\nimport gi\ngi.require_version('Gst', '1.0')\nfrom gi.repository import Gst, GLib\n\n# Initializes Gstreamer, it's variables, paths\nGst.init(sys.argv)\n\nPIPELINE = \"\"\"videotestsrc num-buffers=100 \\\n    ! video/x-raw, width=320, height=240 \\\n    ! queue  \\\n    ! video/x-raw, format=BGR\n    ! appsink name=sink sync=true  max-buffers=1 drop=true  emit-signals=true\"\"\"\n\ndef on_new_sample(app_sink):\n    sample = app_sink.emit('pull-sample')\n    caps = sample.get_caps()\n\n    # Extract the width and height info from the sample's caps\n    height = caps.get_structure(0).get_value(\"height\")\n    width = caps.get_structure(0).get_value(\"width\")\n\n    buf = sample.get_buffer()\n    array = np.ndarray((height, width, 3),\n            buffer=buf.extract_dup(0, buf.get_size()), \n            dtype=np.uint8)\n    print(array.shape)\n    return Gst.FlowReturn.OK\n\n\ndef on_message(bus: Gst.Bus, message: Gst.Message, loop: GLib.MainLoop):\n    mtype = message.type\n    if mtype == Gst.MessageType.EOS:\n        print(\"End of stream\")\n        loop.quit()\n\n    elif mtype == Gst.MessageType.ERROR:\n        err, debug = message.parse_error()\n        print(err, debug)\n        loop.quit()\n\n    elif mtype == Gst.MessageType.WARNING:\n        err, debug = message.parse_warning()\n        print(err, debug)\n\n    return True\n\npipeline = Gst.parse_launch(PIPELINE)\nbus = pipeline.get_bus()\n# allow bus to emit messages to main thread\nbus.add_signal_watch()\n# Start pipeline\npipeline.set_state(Gst.State.PLAYING)\n# Init GObject loop to handle Gstreamer Bus Events\nloop = GLib.MainLoop()\n\n# Add handler to specific signal\nbus.connect(\"message\", on_message, loop)\n\nappsink = pipeline.get_by_name(\"sink\")\nhandler_id = appsink.connect(\"new-sample\", on_new_sample)\n\ntry:\n    loop.run()\nexcept Exception:\n    traceback.print_exc()\n    loop.quit()\n\n# Stop Pipeline\npipeline.set_state(Gst.State.NULL)\n</code></pre>","tags":["video","gstreamer","gi"]},{"location":"blog/Misl/video/gstreamer/python_binding/gst_appsink_demo/#reference","title":"Reference","text":"<ul> <li>ardusub Receive and display stream</li> </ul>","tags":["video","gstreamer","gi"]},{"location":"blog/Misl/video/gstreamer/python_binding/gst_appsrc_demo/","title":"Gstreamer python binding appsrc pipe","text":"appsrc demo<pre><code>import sys\nimport numpy as np\nimport traceback\nimport time\nimport gi\ngi.require_version('Gst', '1.0')\nfrom gi.repository import Gst, GLib\n\n# Initializes Gstreamer, it's variables, paths\nGst.init(sys.argv)\n\nPIPELINE = \"appsrc name=app_src ! video/x-raw,width=640,height=480,format=BGR,framerate=10/1 ! videoconvert ! autovideosink\"\n\ndef ndarray_to_gst_buffer(array: np.ndarray) -&gt; Gst.Buffer:\n\"\"\"Converts numpy array to Gst.Buffer\"\"\"\n    return Gst.Buffer.new_wrapped(array.tobytes())\n\n\ndef on_message(bus: Gst.Bus, message: Gst.Message, loop: GLib.MainLoop):\n    mtype = message.type\n    if mtype == Gst.MessageType.EOS:\n        print(\"End of stream\")\n        loop.quit()\n\n    elif mtype == Gst.MessageType.ERROR:\n        err, debug = message.parse_error()\n        print(err, debug)\n        loop.quit()\n\n    elif mtype == Gst.MessageType.WARNING:\n        err, debug = message.parse_warning()\n        print(err, debug)\n\n    return True\n\npipeline = Gst.parse_launch(PIPELINE)\nappsource = pipeline.get_by_name(\"app_src\")\nbus = pipeline.get_bus()\n# allow bus to emit messages to main thread\nbus.add_signal_watch()\n# Start pipeline\npipeline.set_state(Gst.State.PLAYING)\n# Init GObject loop to handle Gstreamer Bus Events\nloop = GLib.MainLoop()\n\n# Add handler to specific signal\nbus.connect(\"message\", on_message, loop)\n\n# Push buffer and check\nfor _ in range(10):\n    arr = np.random.randint(low=0,high=255,size=(480,640,3),dtype=np.uint8)\n    appsource.emit(\"push-buffer\", ndarray_to_gst_buffer(arr))\n    time.sleep(1/10)\nappsource.emit(\"end-of-stream\")\n\ntry:\n    loop.run()\nexcept Exception:\n    traceback.print_exc()\n    loop.quit()\n\n# Stop Pipeline\npipeline.set_state(Gst.State.NULL)\n</code></pre>","tags":["video","gstreamer","gi"]},{"location":"blog/Misl/video/gstreamer/python_binding/gst_simple_demo/","title":"Gstreamer python binding basic pipe","text":"basic gst binding<pre><code>import sys\nimport traceback\nimport gi\ngi.require_version('Gst', '1.0')\nfrom gi.repository import Gst, GLib\n\n# Initializes Gstreamer, it's variables, paths\nGst.init(sys.argv)\n\nPIPELINE = \"videotestsrc num-buffers=100 ! autovideosink\"\n\ndef on_message(bus: Gst.Bus, message: Gst.Message, loop: GLib.MainLoop):\n    mtype = message.type\n    if mtype == Gst.MessageType.EOS:\n        print(\"End of stream\")\n        loop.quit()\n\n    elif mtype == Gst.MessageType.ERROR:\n        err, debug = message.parse_error()\n        print(err, debug)\n        loop.quit()\n\n    elif mtype == Gst.MessageType.WARNING:\n        err, debug = message.parse_warning()\n        print(err, debug)\n\n    return True\n\npipeline = Gst.parse_launch(PIPELINE)\nbus = pipeline.get_bus()\n# allow bus to emit messages to main thread\nbus.add_signal_watch()\n# Start pipeline\npipeline.set_state(Gst.State.PLAYING)\n# Init GObject loop to handle Gstreamer Bus Events\nloop = GLib.MainLoop()\n\n\n# Add handler to specific signal\nbus.connect(\"message\", on_message, loop)\n\ntry:\n    loop.run()\nexcept Exception:\n    traceback.print_exc()\n    loop.quit()\n\n# Stop Pipeline\npipeline.set_state(Gst.State.NULL)\n</code></pre>","tags":["video","gstreamer","gi"]},{"location":"blog/Misl/video/gstreamer/python_binding/python_binding_hello/","title":"Install","text":"<p>Gstreamer python bindings implement by <code>PyGObject</code></p> <p>Note</p> <p>PyGObject is a Python package which provides bindings for GObject based libraries such as GTK, GStreamer and many more.</p> install<pre><code># Install mark library installed other dependencies\nsudo apt install \\\nlibgirepository1.0-dev \\\nlibcairo2-dev \\\npython3-dev \\\ngir1.2-gtk-3.0\n\npip3 install pycairo\npip3 install PyGObject\n</code></pre> <p>PyGObject site ubuntu Install instruction</p>","tags":["video","gstreamer","gi"]},{"location":"blog/Misl/video/gstreamer/python_binding/python_binding_hello/#simple-example","title":"Simple example","text":"gst<pre><code>import gi\ngi.require_version('Gst', '1.0')\nfrom gi.repository import Gst, GLib\nimport sys\nimport traceback\nGst.init(sys.argv)\ncommand = \"videotestsrc ! autovideosink\"\npipeline = Gst.parse_launch(command)\npipeline.set_state(Gst.State.PLAYING)\nloop = GLib.MainLoop()\ntry:\nloop.run()\nexcept:\ntraceback.print_exc()\n</code></pre>","tags":["video","gstreamer","gi"]},{"location":"blog/Misl/video/gstreamer/python_binding/python_binding_hello/#reference","title":"Reference","text":"<ul> <li>demo to check</li> </ul>","tags":["video","gstreamer","gi"]},{"location":"blog/Others/Geo_spatial/","title":"Index","text":"","tags":["kml","python","geo","gis","spatial"]},{"location":"blog/Others/Geo_spatial/#demos","title":"Demos","text":"<ul> <li>Polygon area</li> </ul>","tags":["kml","python","geo","gis","spatial"]},{"location":"blog/Others/Geo_spatial/#reference","title":"Reference","text":"<ul> <li>GDAL</li> </ul>","tags":["kml","python","geo","gis","spatial"]},{"location":"blog/Others/Geo_spatial/calc_kml_polygon_area/","title":"Calc polygon area from KML","text":"","tags":["kml","python","geo","gis"]},{"location":"blog/Others/Geo_spatial/calc_kml_polygon_area/#kml","title":"KML","text":"<p>Keyhole Markup Language (KML) is an XML notation for expressing geographic annotation and visualization within two-dimensional maps and three-dimensional Earth browsers (wikipedia)</p> <p>KML tags can divide into three categories 1. Feature 2. Geometry 3. Style</p>","tags":["kml","python","geo","gis"]},{"location":"blog/Others/Geo_spatial/calc_kml_polygon_area/#feature","title":"Feature","text":"<p>Container Tag for our Demo, Placemark hole Geometry and metadata for specific location</p>","tags":["kml","python","geo","gis"]},{"location":"blog/Others/Geo_spatial/calc_kml_polygon_area/#geometry","title":"Geometry","text":"<ul> <li>Point</li> <li>LineString</li> <li>Polygon</li> <li>Linear Ring</li> </ul>","tags":["kml","python","geo","gis"]},{"location":"blog/Others/Geo_spatial/calc_kml_polygon_area/#style","title":"Style","text":"<p>Drawing style for different geometries</p>","tags":["kml","python","geo","gis"]},{"location":"blog/Others/Geo_spatial/calc_kml_polygon_area/#code","title":"Code","text":"<p>The demo KML contain one placemark with one polygon</p>","tags":["kml","python","geo","gis"]},{"location":"blog/Others/Geo_spatial/calc_kml_polygon_area/#packages","title":"Packages","text":"","tags":["kml","python","geo","gis"]},{"location":"blog/Others/Geo_spatial/calc_kml_polygon_area/#fastkml","title":"fastkml","text":"<p>Fastkml is a library to read, write and manipulate KML files</p>","tags":["kml","python","geo","gis"]},{"location":"blog/Others/Geo_spatial/calc_kml_polygon_area/#pygeoif","title":"pygeoif","text":"<p>PyGeoIf provides a interface protocol for geo-spatial (GIS) vector data</p>","tags":["kml","python","geo","gis"]},{"location":"blog/Others/Geo_spatial/calc_kml_polygon_area/#pyproj","title":"pyproj","text":"<p>cartographic projections and coordinate transformations library</p>","tags":["kml","python","geo","gis"]},{"location":"blog/Others/Geo_spatial/calc_kml_polygon_area/#shapely","title":"shapely","text":"<p>Shapely is Python package for manipulation and analysis of planar geometric objects. </p> <pre><code>\"\"\"\npip install fastkml\npip install shapely\npip install pyproj\n\"\"\"\nfrom fastkml import kml\nfrom fastkml.kml import Placemark, Document\nfrom pygeoif.geometry import Polygon\nfrom pyproj import Geod\nimport shapely.geometry.polygon\nfrom os import path\n\nfile_path = \"/workspaces/gis_tutorial/data/test.kml\"\nwith open(file_path, \"r\", encoding=\"utf-8\") as f:\n    doc = f.read()\nk = kml.KML()\n# lxml support encoding issue\ndoc = bytes(bytearray(doc, encoding=\"utf-8\"))\nk.from_string(doc)\nfeatures = list(k.features())\n\ndocument: Document = features[0]\nplacemark: Placemark\nfor placemark in document.features():\n    geo: Polygon = placemark.geometry\n    poly_points = [(lat, lon) for lat, lon, _ in geo.exterior.coords]\npoly_points.reverse()\npoly = shapely.geometry.polygon.Polygon(poly_points)\ngeod = Geod(ellps=\"WGS84\")\npoly_area, poly_perimeter = geod.geometry_area_perimeter(poly)\n\nprint(poly_area)\nprint(poly_perimeter)\n</code></pre>","tags":["kml","python","geo","gis"]},{"location":"blog/Others/Geo_spatial/calc_kml_polygon_area/#reference","title":"Reference","text":"<ul> <li>The 4 Most Common Geometries in KML</li> <li>The Definite (&amp; ONLY) Guide to FastKML.</li> </ul>","tags":["kml","python","geo","gis"]},{"location":"blog/Others/Geo_spatial/GDAL/","title":"Index","text":"<pre><code>gdalinfo --version\n</code></pre>","tags":["gdal","ogr","geo","gis","raster","vector","spatial"]},{"location":"blog/Others/Geo_spatial/GDAL/#reference","title":"Reference","text":"<ul> <li>GDAL Tutorial</li> </ul>","tags":["gdal","ogr","geo","gis","raster","vector","spatial"]},{"location":"blog/Python/snippets/","title":"Python snippets","text":"","tags":["snippets","cheat Sheet"]},{"location":"blog/Python/snippets/#log","title":"log","text":"log to console<pre><code>log = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO, format=\"[%(asctime)s] [%(name)s] %(levelname)s - %(message)s\", datefmt='%H:%M:%S')\n</code></pre>","tags":["snippets","cheat Sheet"]},{"location":"blog/Python/asyncio/future_demo/","title":"future demo","text":"future_demo<pre><code>import asyncio\nimport time\nimport threading\nimport logging\nlogging.basicConfig(format=\"[%(levelname)s] %(asctime)s %(message)s\", level=logging.DEBUG)\nlog = logging.getLogger(__name__)\nstart = None\ndef fetch(with_time: int)-&gt; None:\nlog.info(threading.current_thread().name)\ntime.sleep(with_time)\nasync def do_work(delay, work):\nawait asyncio.sleep(delay)\nlog.info(work)\ndef callback(future: asyncio.Future) -&gt; None:\nend = time.time()\nlog.info(f\"callback run after: {end-start}\")\nasync def main():\nlog.info(threading.current_thread().name)\nmy_loop = asyncio.get_event_loop()\nasyncio.create_task(do_work(1, \"hello\"))\nasyncio.create_task(do_work(2, \"hello2\"))\nfuture = my_loop.run_in_executor(None, fetch, 3)\nglobal start\nstart = time.time()\nfuture.add_done_callback(callback)\nawait future\nend = time.time()\nlog.info(f\"continue run after await time {end-start}\")\nawait asyncio.create_task(do_work(1, \"hello end \"))\nasyncio.run(main())\n</code></pre>","tags":["python","asyncio","future"]},{"location":"blog/Python/asyncio/hello_asyncio/","title":"Reference","text":"<p>Guide to Concurrency in Python with Asyncio</p>","tags":["python","asyncio"]},{"location":"blog/Python/click/","title":"Click","text":"<p>Click is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary. It\u2019s the \u201cCommand Line Interface Creation Kit\u201d.  click web site</p>","tags":["python","click","cli"]},{"location":"blog/Python/click/#install","title":"install","text":"<pre><code>pip install click\n</code></pre>","tags":["python","click","cli"]},{"location":"blog/Python/click/#demo","title":"Demo","text":"<p>A function becomes a Click command line tool by decorating it through <code>click.command()</code></p> <pre><code>import click\n\n@click.command()\ndef hello():\n    print(\"hello\")\n\nif __name__ == \"__main__\":\n    hello()\n</code></pre> <p>usage <pre><code>python hello_click.py --help\nUsage: hello_click.py [OPTIONS]\n\nOptions:\n  --help  Show this message and exit.\n</code></pre></p>","tags":["python","click","cli"]},{"location":"blog/Python/click/#add-option","title":"Add option","text":"<p>Option has a lot of options \u2026 Options</p> <pre><code>import click\n\n@click.command()\n@click.option(\"--count\", default=1, help=\"No. of hello's\")\ndef hello(count=0):\n    for _ in range(count):\n        print(\"hello\")\n\nif __name__ == \"__main__\":\n    hello()\n</code></pre> <p>Function default value</p> <p>Add default value in function just for lint , to disabled errors click option decorate is charge for default add pass the argument from command line</p> <p>usage <pre><code>python \nhello_click.py --help\nUsage: hello_click.py [OPTIONS]\n\nOptions:\n  --count INTEGER  No. of hello's\n  --help           Show this message and exit.\n</code></pre></p> <pre><code>python hello_click.py --count=3\n</code></pre>","tags":["python","click","cli"]},{"location":"blog/Python/click/#add-arguments","title":"Add arguments","text":"<p>Arguments work similarly to options but are positional, they has less features and <code>click</code> will not create document for them  more</p> <pre><code>import click\n\n@click.command()\n@click.option(\"--count\", default=1, help=\"No. of hello's\")\n@click.argument(\"name\")\ndef hello(name=\"\", count=0):\n    for _ in range(count):\n        print(name)\n\nif __name__ == \"__main__\":\n    hello()\n</code></pre> <p>usage <pre><code>python hello_click.py --help   \nUsage: hello_click.py [OPTIONS] NAME\n\nOptions:\n  --count INTEGER  No. of hello's\n  --help           Show this message and exit.\n</code></pre></p>","tags":["python","click","cli"]},{"location":"blog/Python/click/#group-commands","title":"Group commands","text":"<p>Commands and Groups</p> <pre><code>import click\n\n@click.group()\ndef cli():\n    pass\n\n@cli.command(help=\"create dummy\")\ndef create():\n    print(\"create\")\n\n@cli.command(help=\"remove dummy\")\ndef remove():\n    print(\"remove\")\n\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p>Assing command to group</p> <p>Replace <code>click</code> decorate with group function name for example <code>cli</code></p> <p>usage</p> <pre><code>python hello_click.py --help\nUsage: hello_click.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create  create dummy\n  remove  remove dummy\n</code></pre>","tags":["python","click","cli"]},{"location":"blog/Python/from_project_to_deb/","title":"Index","text":"<ul> <li>first demo using stdeb to package simple script</li> </ul>","tags":["deb","debian","package","python","setup"]},{"location":"blog/Python/from_project_to_deb/minimal_script/","title":"From simple script to DEB package","text":"<p>Create debian package for simple python script using <code>stdeb</code> control dependencies and add shortcut to launch the script</p>","tags":["deb","stdeb","python","project","package"]},{"location":"blog/Python/from_project_to_deb/minimal_script/#project","title":"Project","text":"project structure<pre><code>python_deb_tutorial\n\u251c\u2500\u2500 python_deb_tutorial\n\u2502   \u251c\u2500\u2500 hello.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 setup.py\n</code></pre> setup.py<pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name='my_script',\n    version='0.0.1',\n    description='very simple script',\n    packages=find_packages(),\n    entry_points={\n        'console_scripts': [\n            'hello = python_deb_tutorial.hello:main',\n        ],\n    }\n)\n</code></pre> hello.py<pre><code>#! /usr/bin/python3\n\ndef main():\n    print(\"hello deb\")\n</code></pre>","tags":["deb","stdeb","python","project","package"]},{"location":"blog/Python/from_project_to_deb/minimal_script/#create-package","title":"create package","text":"<pre><code>python setup.py --command-packages=stdeb.command bdist_deb\n</code></pre>","tags":["deb","stdeb","python","project","package"]},{"location":"blog/Python/from_project_to_deb/minimal_script/#install-run-remove-deb","title":"install. run. remove deb","text":"install<pre><code># from project folder\nsudo dpkg -i deb_dist/python3-my-script_0.0.1-1_all.deb\n</code></pre> run<pre><code># script installed in `/usr/bin` folder\n# just call the entry name from the setup.py\n#\nhello\n</code></pre> remove<pre><code>sudo dpkg -r python3-my-script\n</code></pre>","tags":["deb","stdeb","python","project","package"]},{"location":"blog/Python/from_project_to_deb/minimal_script/#add-shortcut-and-icon","title":"Add shortcut and icon","text":"<ul> <li>Add my-script.png</li> <li>Add my-script.desktop</li> </ul> project structure<pre><code>python_deb_tutorial\n\u251c\u2500\u2500 python_deb_tutorial\n\u2502   \u251c\u2500\u2500 hello.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 my-script.desktop\n\u251c\u2500\u2500 my-script.png\n\u2514\u2500\u2500 setup.py\n</code></pre> my-script.desktop<pre><code>[Desktop Entry]\nName=My hello app\nExec=/usr/bin/hello\nIcon=/usr/share/icons/my-script.png\nTerminal=true\nType=Application\n</code></pre> setup.py<pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name='my_script',\n    version='0.0.1',\n    description='very simple script',\n    packages=find_packages(),\n    entry_points={\n        'console_scripts': [\n            'hello = python_deb_tutorial.hello:main',\n        ],\n    },\n    data_files = [\n        ('share/applications/', ['my-script.desktop']),\n        ('share/icons/', ['my-script.png'])\n    ]\n)\n</code></pre>","tags":["deb","stdeb","python","project","package"]},{"location":"blog/Python/from_project_to_deb/minimal_script/#try","title":"try","text":"","tags":["deb","stdeb","python","project","package"]},{"location":"blog/Python/from_project_to_deb/minimal_script/#add-package-dependencies","title":"Add package dependencies","text":"","tags":["deb","stdeb","python","project","package"]},{"location":"blog/Python/from_project_to_deb/minimal_script/#python-packages","title":"python packages","text":"<ul> <li>Add <code>install_requires</code> to setup.py</li> </ul> <pre><code>install_requires=[\n        'dependency1',\n        'dependency2',\n        'dependency3'\n    ],\n</code></pre>","tags":["deb","stdeb","python","project","package"]},{"location":"blog/Python/from_project_to_deb/minimal_script/#deb-packages","title":"deb packages","text":"<ul> <li>Add <code>stdeb.cfg</code> to project root same level of <code>setup.py</code></li> </ul> project structure<pre><code>python_deb_tutorial\n\u251c\u2500\u2500 python_deb_tutorial\n\u2502   \u251c\u2500\u2500 hello.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 stdeb.cfg\n\u2514\u2500\u2500 setup.py\n</code></pre> stdeb.cfg<pre><code>[DEFAULT]\nmaintainer = robo be &lt;you@example.com&gt;\nDepends3: python3-pip, python3-loguru\n</code></pre> create<pre><code>python setup.py --command-packages=stdeb.command bdist_deb\n</code></pre> check<pre><code># dpkg -I &lt;package&gt;.deb\ndpkg -I deb_dist/python3-my-script_0.0.1-1_all.deb\n#\nsize 29036 bytes: control archive=1160 bytes.\n     254 bytes,    10 lines      control              907 bytes,    10 lines      md5sums              585 bytes,    19 lines   *  postinst             #!/bin/sh\n201 bytes,     7 lines   *  postrm               #!/bin/sh\n413 bytes,    12 lines   *  prerm                #!/bin/sh\nPackage: python3-my-script\n Source: my-script\n Version: 0.0.1-1\n Architecture: all\n Maintainer: robo be &lt;you@example.com&gt;\n Installed-Size: 57\nDepends: python3:any, python3-pip, python3-loguru\n Section: python\n Priority: optional\n Description: very simple script\n</code></pre> Install<pre><code># using apt to install deb with all dependencies\nsudo apt install ./python3-my-script_0.0.1-1_all.deb\n</code></pre> <p>deb with dependencies</p> <p>Use <code>apt install</code> to install deb with dependencies</p>","tags":["deb","stdeb","python","project","package"]},{"location":"blog/Python/from_project_to_deb/use_devcontainer_to_create_deb_package/","title":"Using Docker to generated debian package using stdeb","text":"<p>Install and run <code>stdeb</code> on Docker container using vscode <code>.devcontainer</code></p> <ul> <li>Add tasks to build and inspect the deb file</li> </ul>","tags":["deb","stdeb","python","project","package","docker","devcontainer"]},{"location":"blog/Python/from_project_to_deb/use_devcontainer_to_create_deb_package/#dockerfile","title":"Dockerfile","text":"Dockerfile<pre><code>FROM ubuntu:22.04\nRUN apt-get update &amp;&amp; \\\napt-get install -y \\\npython3 \\\npython3-pip \\\npython3-venv \\\nnet-tools \\\niputils-ping \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update &amp;&amp; \\\napt-get install -y \\\npython3-all \\\ndebhelper \\\ndh-python \\\npython3-stdeb \\\nlocales \\\nlocales-all \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set the locale\nENV LC_ALL en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US.UTF-8\n\nARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n# Create a non-root user\nRUN groupadd --gid $USER_GID $USERNAME \\\n&amp;&amp; useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n# [Optional] Add sudo support for the non-root user\n  &amp;&amp; apt-get update \\\n&amp;&amp; apt-get install -y sudo git-core bash-completion \\\n&amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n&amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n# Cleanup\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nCMD [\"/bin/bash\"]\n</code></pre>","tags":["deb","stdeb","python","project","package","docker","devcontainer"]},{"location":"blog/Python/from_project_to_deb/use_devcontainer_to_create_deb_package/#devcontainer","title":"devcontainer","text":"<pre><code>{\n\"build\": {\n\"dockerfile\": \"Dockerfile\",\n\"context\": \"..\"\n},\n\"remoteUser\": \"user\",\n\"containerUser\": \"user\"\n}\n</code></pre>","tags":["deb","stdeb","python","project","package","docker","devcontainer"]},{"location":"blog/Python/from_project_to_deb/use_devcontainer_to_create_deb_package/#vscode-tasks","title":"vscode tasks","text":"vscode tasks<pre><code>{\n\"version\": \"2.0.0\",\n\"tasks\": [\n{\n\"label\": \"build deb\",\n\"type\": \"shell\",\n\"command\": \"python3 setup.py --command-packages=stdeb.command bdist_deb\",\n\"problemMatcher\": []\n\n},\n{\n\"label\": \"deb package info\",\n\"type\": \"shell\",\n\"command\": \"dpkg -I deb_dist/python3-${input:pkg_name}*.deb\",\n\"problemMatcher\": []\n},\n{\n\"label\": \"list deb files\",\n\"type\": \"shell\",\n\"command\": \"dpkg -c deb_dist/python3-${input:pkg_name}*.deb\",\n\"problemMatcher\": []\n}\n\n],\n\"inputs\": [\n{\n\"id\": \"pkg_name\",\n\"type\": \"promptString\",\n\"description\": \"name from setup.py\"\n}\n]\n}\n</code></pre>","tags":["deb","stdeb","python","project","package","docker","devcontainer"]},{"location":"blog/Python/multithreading/","title":"Index","text":"<ul> <li>barrier</li> </ul>"},{"location":"blog/Python/multithreading/barrier/","title":"Multithreading - barrier","text":"<p>Barrier objects are used to wait for a fixed number of thread to complete execution before any particular thread can proceed forward with is execution</p>","tags":["multithreading"]},{"location":"blog/Python/multithreading/barrier/#demo","title":"Demo","text":"<ul> <li>sleep function simulate to work load</li> <li>init barrier for 2 threads</li> <li>thread <code>t2</code> wait for <code>t1</code> on barrier</li> <li>when <code>t1</code> reach the barrier both threads <code>t1, t2</code> can continue</li> </ul> barrier<pre><code>import threading\nimport logging\nimport time\nlog = logging.getLogger(__name__)\nlogging.basicConfig(\nlevel=logging.INFO,\nformat=\"[%(asctime)s] [%(name)s] %(levelname)s - %(message)s\",\ndatefmt=\"%H:%M:%S\",\n)\ndef job(name: str, wait_time: int) -&gt; None:\nlog.info(f\"Thread {name} running\")\ntime.sleep(wait_time)\nlog.info(f\"Thread {name} wait on barrier\")\nbarrier.wait()\nlog.info(f\"Thread {name} continue running\")\nbarrier = threading.Barrier(2)\nt1 = threading.Thread(target=job, args=(\"t1\", 5))\nt2 = threading.Thread(target=job, args=(\"t2\", 3))\nt1.start()\nt2.start()\n</code></pre>","tags":["multithreading"]},{"location":"blog/Python/multithreading/barrier/#result","title":"result","text":"<pre><code>[07:17:58] [__main__] INFO - Thread t1 running\n[07:17:58] [__main__] INFO - Thread t2 running\n[07:18:01] [__main__] INFO - Thread t2 wait on barrier\n[07:18:03] [__main__] INFO - Thread t1 wait on barrier\n[07:18:03] [__main__] INFO - Thread t1 continue running\n[07:18:03] [__main__] INFO - Thread t2 continue running\n</code></pre>","tags":["multithreading"]},{"location":"blog/Python/multithreading/barrier/#reference","title":"Reference","text":"<ul> <li> Python\u2019s Thread Barriers in 8 mins </li> </ul>","tags":["multithreading"]},{"location":"blog/Python/numpy/numpy_reshape/","title":"numpy reshape","text":"<p>The new shape should be compatible with the original shape\u2019</p> <p>Tips</p> <p>Set one of the reshape parameters as <code>-1</code> Allow numpy to figure unknown dimension keep the above criteria  </p> <pre><code>s = np.array([[1, 2, 3, 4],\n     [5, 6, 7, 8],\n     [9, 10, 11, 12]])\ns.shape\n(3,4)\n\ns1 = np.reshape(s, -1)\ns1.shape\n(12,)\n\ns2 = s.reshape(1, -1)\ns2.shape\n(1, 12)\n\ns3 = s.reshape(-1, 1, 2)\n(6, 1, 2)\ns3\narray([\n    [[ 1,  2]],\n    [[ 3,  4]],\n    [[ 5,  6]],\n    [[ 7,  8]],\n    [[ 9, 10]],\n    [[11, 12]]])\n</code></pre>","tags":["python","numpy"]},{"location":"blog/Python/numpy/numpy_reshape/#reference","title":"Reference","text":"<ul> <li>Numpy Tutorial \u2013 Your first numpy guide to build python coding foundations</li> <li>Python NumPy For Your Grandma</li> </ul>","tags":["python","numpy"]},{"location":"blog/Python/project_template/","title":"Python project template","text":"<p>This post explain project structure and how to create github template repository</p> <p>Other post show how to config virtual environment install package unittest and tools usage</p> <ul> <li>part 1: this post</li> <li>part 2: venv and pip</li> <li>part 3: unitest using pytest</li> <li>Tools:<ul> <li>pylint</li> <li>flake8</li> <li>mypy</li> <li>config isort, black, mypy and pylint with pre-commit hook</li> </ul> </li> <li>Demo: Crate project</li> <li>Add projects documentation</li> </ul>","tags":["python","project"]},{"location":"blog/Python/project_template/#project-tree","title":"project tree","text":"<pre><code>py_template/\n\u251c\u2500\u2500 .vscode\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 py_template\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 .pylintrc\n\u251c\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 tests\n|    \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 venv\n\u2514\u2500\u2500 version.py\n</code></pre> file name description Makefile automate validation and running tests .pylintrc pylint rules","tags":["python","project"]},{"location":"blog/Python/project_template/#github","title":"GitHUB","text":"<p>Set project as a Template </p> <p>my python projct template on github</p>","tags":["python","project"]},{"location":"blog/Python/project_template/#reference","title":"Reference","text":"<ul> <li>Modern python developers toolkit</li> <li>template example</li> <li>Python Dev Environment</li> </ul>","tags":["python","project"]},{"location":"blog/Python/project_template/black/","title":"Python project template - black and isort","text":"","tags":["python","project","template","black","isort"]},{"location":"blog/Python/project_template/black/#vscode-settings","title":"VSCode settings","text":"settings.json<pre><code>{\n\"editor.formatOnSave\": true,\n\"[python]\": {\n\"editor.codeActionsOnSave\": {\n\"source.organizeImports\": true\n}\n},\n\"python.formatting.provider\": \"black\",\n}\n</code></pre>","tags":["python","project","template","black","isort"]},{"location":"blog/Python/project_template/black/#black-and-isort-argssettings","title":"black and isort args/settings","text":"pyproject.toml<pre><code>[tool.black]\nline-length = 99 # override black's default line-length\nexclude = '''\n/(\n    \\.git\n  | \\.mypy_cache\n  | \\.tox\n  | venv\n  | \\.venv\n  | _build\n  | buck-out\n  | build\n  | dist\n)/\n'''\n\n[tool.isort]\n# make it compatible with black\nprofile = \"black\" </code></pre>","tags":["python","project","template","black","isort"]},{"location":"blog/Python/project_template/cookiecutter/","title":"Cookiecutter","text":"<p>Cookiecutter uses <code>Jinja2</code> templating system</p>","tags":["python","project","templates","cookiecutter"]},{"location":"blog/Python/project_template/cookiecutter/#cookiecutterjson","title":"cookiecutter.json","text":"","tags":["python","project","templates","cookiecutter"]},{"location":"blog/Python/project_template/cookiecutter/#private-variables","title":"private variables","text":"<p>cookiecutter.json can contain private variables that user won\u2019t be required to fill.</p>","tags":["python","project","templates","cookiecutter"]},{"location":"blog/Python/project_template/cookiecutter/#conditionals","title":"Conditionals","text":"cookiecutter.json<pre><code>{\n\"pytest_enabled\": [\n\"y\",\n\"n\"\n]\n}\n</code></pre> requirements_dev.txt<pre><code>mkdocs\n\n{%- if cookiecutter.pytest_enabled == 'y' %}\npytest\n{%- endif %}\n</code></pre> <p>jinja remove empty line</p> <p>Add <code>-</code> after <code>%</code> to remove jinja empty lines for <code>variable</code> settings <code>if</code> and <code>for</code> loops</p>","tags":["python","project","templates","cookiecutter"]},{"location":"blog/Python/project_template/cookiecutter/#cookiecutter-privates","title":"cookiecutter privates","text":"","tags":["python","project","templates","cookiecutter"]},{"location":"blog/Python/project_template/cookiecutter/#_copy_without_render","title":"_copy_without_render","text":"<p>list of file/ directories to copy without render</p> <p>```json title=\u201dcookiecutter.json\u201d {     \u201c_copy_without_render\u201d: [         \u201cREADME.md\u201d     ] }</p>","tags":["python","project","templates","cookiecutter"]},{"location":"blog/Python/project_template/docs/","title":"Python project template - docs","text":"","tags":["python","project","template","docs","project document","docstrings"]},{"location":"blog/Python/project_template/docs/#install","title":"Install","text":"<pre><code>pip install mkdocs-material\npip install mkdocstrings\npip install mkdocstrings-python\npip install mkdocs-click\n</code></pre>","tags":["python","project","template","docs","project document","docstrings"]},{"location":"blog/Python/project_template/docs/#init-docs","title":"Init docs","text":"<ul> <li>Create <code>docs</code> folder</li> <li>Create <code>mkdocs.yml</code> in project root</li> </ul> <pre><code># from project root run\nmkdocs new .\n</code></pre> mkdocs.yml<pre><code>site_name: My Docs\ntheme:\nname: \"readthedocs\"\n\nplugins:\n- search\n- mkdocstrings\n\nmarkdown_extensions:\n- mkdocs-click\nwatch:\n- .  # reload docs for any file changes\n</code></pre>","tags":["python","project","template","docs","project document","docstrings"]},{"location":"blog/Python/project_template/docs/#simple-demo","title":"Simple Demo","text":"<pre><code># Reference\n\n::: my_library.my_module.my_class\n</code></pre> index.md<pre><code>::: demo_pkg.demo_module\n</code></pre> demo_pkg.demo_module<pre><code>\"\"\"\nmodule doctring\n\"\"\"\ndef foo() -&gt; None:\n\"\"\"_summary_\n    \"\"\"\n\ndef hello(a: List, b: int = 0) -&gt; bool:\n\"\"\"_summary_\n\n    Args:\n        a (List): _description_\n        b (int, optional): _description_. Defaults to 0.\n\n    Raises:\n        Exception: _description_\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    print(a)\n    print(b)\n    if b:\n        raise Exception(\"new demo exception\")\n    return True\n</code></pre>","tags":["python","project","template","docs","project document","docstrings"]},{"location":"blog/Python/project_template/docs/#vscode","title":"VSCode","text":"<ul> <li>Install and use autoDocstring extension</li> </ul>","tags":["python","project","template","docs","project document","docstrings"]},{"location":"blog/Python/project_template/docs/#_1","title":"Python project template - docs","text":"","tags":["python","project","template","docs","project document","docstrings"]},{"location":"blog/Python/project_template/docs/#reference","title":"Reference","text":"<ul> <li>mkdocstrings</li> <li>mkdocstrings usage</li> </ul>","tags":["python","project","template","docs","project document","docstrings"]},{"location":"blog/Python/project_template/flake8/","title":"Python project template - flake8","text":"<p>Flake8 acts as a linter and checking cod against code styling given by PEP8 Flake8 is a wrapper which verifies pep8, pyflakes, and circular complexity.</p>","tags":["python","project","template","flake8","linter","git-hook"]},{"location":"blog/Python/project_template/flake8/#install","title":"install","text":"<pre><code>python -m pip install flake8\n</code></pre>","tags":["python","project","template","flake8","linter","git-hook"]},{"location":"blog/Python/project_template/flake8/#config","title":"config","text":"<p>Flake8 supports storing its configuration in your project in one of <code>setup.cfg</code>, <code>tox.ini</code>, or <code>.flake8</code>.</p> .flake8<pre><code>[flake8]\nextend-ignore = E121\nmax-line-length = 120\nexclude = .git,__pycache__,docs/source/conf.py,old,build,dist\n</code></pre> <p>Error / Violation Codes</p>","tags":["python","project","template","flake8","linter","git-hook"]},{"location":"blog/Python/project_template/flake8/#demo","title":"demo","text":"<ul> <li>check code from command line</li> <li>For demoing add config file to ignore <code>F841</code></li> <li>Run again</li> <li>code example<pre><code>class Demo:\n    def demo_method(self):\n        x = 2  # pylint: disable=unused-variable\n</code></pre></li> </ul> run manual<pre><code>~/.local/bin/flake8 pylint_demo.py\npylint_demo.py:3:9: F841 local variable 'x' is assigned to but never used\n</code></pre>","tags":["python","project","template","flake8","linter","git-hook"]},{"location":"blog/Python/project_template/flake8/#add-flake8-config","title":"Add flake8 config","text":".flake8<pre><code>[flake8]\nextend-ignore = F841\nexclude = .git,__pycache__,docs/source/conf.py,old,build,dist\nmax-line-length = 120\n</code></pre>","tags":["python","project","template","flake8","linter","git-hook"]},{"location":"blog/Python/project_template/flake8/#git-hook","title":"git hook","text":"<ul> <li>Config flake8 as <code>local</code> repo</li> </ul> <pre><code>repos:\n- repo: local\nhooks:\n- id: flake8\nname: flake8\nentry: /home/user/.local/bin/flake8\nlanguage: system\ntypes: [python]\nargs: [\n\"--config=.flake8\"\n]\n</code></pre>","tags":["python","project","template","flake8","linter","git-hook"]},{"location":"blog/Python/project_template/mypy/","title":"Python project template - mypy","text":"","tags":["python","project","template","mypy"]},{"location":"blog/Python/project_template/mypy/#install","title":"install","text":"<pre><code>pip install mypy\n</code></pre>","tags":["python","project","template","mypy"]},{"location":"blog/Python/project_template/mypy/#demo","title":"demo","text":"demo.py<pre><code>def func(a, b):\n    return a+b\n</code></pre>","tags":["python","project","template","mypy"]},{"location":"blog/Python/project_template/mypy/#usage","title":"usage","text":"","tags":["python","project","template","mypy"]},{"location":"blog/Python/project_template/mypy/#from-cli","title":"from cli","text":"shell<pre><code>mypy demo.py\n\nSuccess: no issues found in 1 source file\n\n## Strict mode\nmypy --strict demo.py\n\nerror: Function is missing a type annotation\nFound 1 error in 1 file (checked 1 source file)\n</code></pre>","tags":["python","project","template","mypy"]},{"location":"blog/Python/project_template/mypy/#vscode","title":"VSCode","text":"<ul> <li>Enabled mypy</li> <li>Set <code>strict</code> argument</li> </ul> settings.json<pre><code>\"python.linting.mypyEnabled\": true\n</code></pre>","tags":["python","project","template","mypy"]},{"location":"blog/Python/project_template/mypy/#config","title":"config","text":"pyproject.toml<pre><code>[tool.mypy]\nstrict = true\n</code></pre>","tags":["python","project","template","mypy"]},{"location":"blog/Python/project_template/pre_commit/","title":"Python project template - pre-commit","text":"<p>Demo of usage pre-commit tool</p> <p>Install pre-commit tool and config it with four tools</p> <ul> <li>isort</li> <li>black</li> <li>mypy</li> <li>flake8</li> </ul>","tags":["python","project","template","pre-commit","git-hook","isort","black","mypy","flake8"]},{"location":"blog/Python/project_template/pre_commit/#pre-commit","title":"pre-commit","text":"<ul> <li>Install pre-commit</li> <li>Add config file</li> <li>Install hooks</li> <li>Add hooks</li> <li>Run</li> </ul> install<pre><code>python -m pip install pre-commit\n</code></pre> config<pre><code>touch .pre-commit-config.yaml\n</code></pre> install hook<pre><code>pre-commit install\n</code></pre>","tags":["python","project","template","pre-commit","git-hook","isort","black","mypy","flake8"]},{"location":"blog/Python/project_template/pre_commit/#hooks","title":"hooks","text":"","tags":["python","project","template","pre-commit","git-hook","isort","black","mypy","flake8"]},{"location":"blog/Python/project_template/pre_commit/#isort","title":"isort","text":"<p>isort is a Python utility / library to sort imports alphabetically, and automatically separated into sections and by type.</p> <ul> <li>config pre-commit</li> <li>add isort config to <code>pyproject.toml</code></li> <li>install and run</li> </ul> .pre-commit-config.yaml<pre><code>repos:\n- repo: https://github.com/PyCQA/isort\nrev: 5.12.0\nhooks:\n- id: isort\n</code></pre> pyproject.toml<pre><code>[settings]\n[tool.black]\nline-length = 120\n\n[tool.isort]\nprofile = \"black\"\n</code></pre> install and run<pre><code>pre-commit install\n# Run\npre-commit run -a\n</code></pre> <p>config with black</p> <p>config isort with <code>black</code> profile</p>","tags":["python","project","template","pre-commit","git-hook","isort","black","mypy","flake8"]},{"location":"blog/Python/project_template/pre_commit/#black","title":"black","text":"<p>Black is a PEP 8 compliant opinionated formatter. Black reformats entire files in place.</p> <ul> <li>config pre-commit</li> <li>add isort config to <code>pyproject.toml</code></li> <li>install and run</li> </ul> .pre-commit-config.yaml<pre><code>repos:\n- repo: https://github.com/psf/black\nrev: 23.3.0\nhooks:\n- id: black\nlanguage_version: python3.10\n</code></pre> pyproject.toml<pre><code>[settings]\n[tool.black]\nline-length = 120\n\n[tool.isort]\nprofile = \"black\"\n</code></pre> install and run<pre><code>pre-commit install\n# Run\npre-commit run -a\n</code></pre> <p>config isort</p> <p>config isort with <code>black</code> profile</p> <p>black and isort format import different,  if both config as pre-commit action they interrupt each other</p> <p>disable fmt format for code section</p> <pre><code># fmt: off\n...\n# fmt: on\n</code></pre>","tags":["python","project","template","pre-commit","git-hook","isort","black","mypy","flake8"]},{"location":"blog/Python/project_template/pre_commit/#mypy","title":"mypy","text":"<ul> <li>config pre-commit</li> <li>add mypy section to <code>pyproject.toml</code> config</li> <li>install and run</li> </ul> .pre-commit-config.yaml<pre><code>repos:\n- repo: https://github.com/pre-commit/mirrors-mypy\nrev: v0.942\nhooks:\n- id: mypy\n</code></pre> pyproject.toml<pre><code>[settings]\n[tool.black]\nline-length = 120\n\n[tool.mypy]\n</code></pre> <p>add inline ignore</p> <pre><code># type: ignore\n</code></pre>","tags":["python","project","template","pre-commit","git-hook","isort","black","mypy","flake8"]},{"location":"blog/Python/project_template/pre_commit/#flake8","title":"flake8","text":"<ul> <li>config pre-commit</li> <li>add <code>.flake8</code> config</li> </ul> <p>code style checker for PEP8</p> .pre-commit-config.yaml<pre><code>repos:\n- repo: https://github.com/PyCQA/flake8\nrev: 6.0.0\nhooks:\n- id: flake8\n</code></pre> .flake8<pre><code>[flake8]\nmax-line-length = 120\nmax-complexity = 10\nexclude=src/apm_demos/test/*\n</code></pre>","tags":["python","project","template","pre-commit","git-hook","isort","black","mypy","flake8"]},{"location":"blog/Python/project_template/pre_commit/#recap","title":"Recap","text":"<ul> <li>isort, black and mypy config from <code>myproject.toml</code></li> <li>flake8 config with its on file <code>.flake8</code></li> <li>isort must be config with black profile</li> </ul> <p>disabled pre-commit</p> <pre><code>git commit --no-verify\n</code></pre>","tags":["python","project","template","pre-commit","git-hook","isort","black","mypy","flake8"]},{"location":"blog/Python/project_template/pre_commit/#pre-commit-configyaml","title":".pre-commit-config.yaml","text":"<pre><code>files: src/apm_demos\nrepos:\n- repo: https://github.com/PyCQA/isort\nrev: 5.12.0\nhooks:\n- id: isort\n- repo: https://github.com/psf/black\nrev: 23.3.0\nhooks:\n- id: black\nlanguage_version: python3.10\n- repo: https://github.com/pre-commit/mirrors-mypy\nrev: v0.942\nhooks:\n- id: mypy\n- repo: https://github.com/PyCQA/flake8\nrev: 6.0.0\nhooks:\n- id: flake8\n</code></pre>","tags":["python","project","template","pre-commit","git-hook","isort","black","mypy","flake8"]},{"location":"blog/Python/project_template/pre_commit/#reference","title":"Reference","text":"<ul> <li>pre-commit schema</li> </ul>","tags":["python","project","template","pre-commit","git-hook","isort","black","mypy","flake8"]},{"location":"blog/Python/project_template/project_unittest/","title":"Python project template - unittest","text":"","tags":["python","project","template","unittest","pytest"]},{"location":"blog/Python/project_template/project_unittest/#install-and-setup","title":"Install and Setup","text":"<ul> <li>Add <code>pytest</code> to <code>requirements-dev.txt</code> </li> <li>Run <code>pip install -r requirements-dev.txt</code> again</li> <li>Create <code>tests</code> sub folder under root project folder</li> <li>Add tests modules files prefix with <code>test_</code></li> <li>Add function to modules start also with <code>test_</code> prefix</li> <li>Install project using <code>pip install -e .</code></li> <li>Run <code>pytest</code></li> </ul>","tags":["python","project","template","unittest","pytest"]},{"location":"blog/Python/project_template/project_unittest/#demo","title":"demo","text":"<p>demp_proj project </p> <pre><code>py_template/\n\u251c\u2500\u2500 .vscode\n\u251c\u2500\u2500 py_template\n|    \u2514\u2500\u2500 example.py\n\u251c\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 tests\n|    \u2514\u2500\u2500 test_example.py\n\u251c\u2500\u2500 venv\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 requirements-dev.txt\n\u2514\u2500\u2500 version.py\n</code></pre> test_example.py<pre><code>\n</code></pre> example.py<pre><code>\n</code></pre>","tags":["python","project","template","unittest","pytest"]},{"location":"blog/Python/project_template/pylint/","title":"Python project template - pylint","text":"<p>Linting is the automated source code checking for programmatic and stylistic errors.  A lint tool is a basic static code analyzer</p> <p><code>pylint</code> is default VSCode linter and it enable by default</p>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#install","title":"install","text":"install<pre><code>pip install pylint\n</code></pre>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#vscode","title":"VSCode","text":"","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#setings","title":"Setings","text":"vscode settings<pre><code>\"python.linting.pylintEnabled\": true\n</code></pre>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#extensions","title":"Extensions","text":"<p>pylint extension for Visual Studio Code</p> <ul> <li>Execute pylint automatically on python file</li> <li>bundle with pylint can changed by settings <code>pylint.path</code></li> </ul>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#control","title":"Control","text":"<p>control pylint with rules file <code>.pylintrc</code> </p> <p><code>pylintrc</code> file location</p> <ul> <li><code>/etc/pylintrc</code></li> <li><code>~/pylintrc</code></li> <li><code>&lt;project_path&gt;/pylintrc</code></li> </ul> create pylintrc<pre><code>pylint --generate-rcfile &gt; pylintrc\n</code></pre> <p>VSCode</p> <p>VSCode look automaticly for <code>pylintrc</code> at the project root</p> <p>pylintrc</p> <p>pre-commit git hook not found the pylintrc file if we prefix it with dot (<code>.pylintrc</code>)</p> <p>VSCode file mapping</p> <p>map <code>pylintrc</code> file to ini type <pre><code>\"files.associations\": {\n    \"pylintrc\": \"ini\"\n},\n</code></pre></p>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#demo","title":"Demo","text":"<p>minimal <code>pylintrc</code> file to disabled checker message</p> <pre><code>[MASTER]\ndisable=\n    C0114, # (missing-module-docstring)\n    C0115,  # (missing-class-docstring)\n</code></pre>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#demo-ii","title":"Demo II","text":"<p>Add rules inline </p> <ul> <li>Add comment to end of line</li> </ul> <pre><code># pylint: disable=[problem-code]\n\n# pylint: disable=unused-private-member\n</code></pre> <p></p>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#run-manual","title":"Run manual","text":"<pre><code>~/.local/bin/pylint &lt;file full path&gt;\n~/.local/bin/pylint --rcfile=&lt;config_file&gt; &lt;file full path&gt;\n</code></pre> demo<pre><code>~/.local/bin/pylint --rcfile pylintrc  pylint_demo.py\n************* Module pylint_demo\npylint_demo.py:2:4: R0201: Method could be a function (no-self-use)\npylint_demo.py:1:0: R0903: Too few public methods (1/2) (too-few-public-methods)\n</code></pre>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#git-hook","title":"git hook","text":"<ul> <li>Install pre-commit python util</li> <li>Add <code>.pre-commit-config.yaml</code></li> <li>Run pre-commit install </li> <li>Add files to <code>stage</code></li> <li>Run <code>pre-commit run</code> or try commit stage files</li> </ul> install<pre><code>pip install pre-commit\n</code></pre> .pre-commit-config.yaml<pre><code>repos:\n- repo: local\nhooks:\n- id: pylint\nname: pylint\nentry: pylint\nlanguage: system\ntypes: [python]\nargs: [\n\"--rcfile=pylintrc\"\n]\n</code></pre>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#demo_1","title":"Demo","text":"<pre><code> ~/.local/bin/pre-commit run\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /home/user/.cache/pre-commit/patch1681097484-36170.\npylint...................................................................Failed\n- hook id: pylint\n- exit code: 8\n\n************* Module pylint_demo\nlinters/pylint_demo.py:1:0: R0903: Too few public methods (1/2) (too-few-public-methods)\n\n-------------------------------------------------------------------\nYour code has been rated at 6.67/10 (previous run: 10.00/10, -3.33)\n\n\n\n[INFO] Restored changes from /home/user/.cache/pre-commit/patch1681097484-36170.\n</code></pre>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#pylintrc-template","title":"pylintrc template","text":"<pre><code>[MASTER]\ndisable=\nC0114, # (missing-module-docstring)\nC0115, # (missing-class-docstring)\nC0116, # (missing-function-docstring)\n\n[FORMAT]\n# Maximum number of characters on a single line.\nmax-line-length=120\n\n[BASIC]\n# Good variable names which should always be accepted, separated by a comma\ngood-names=x,y\n</code></pre>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#tips","title":"Tips","text":"","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#line-disable","title":"line disable","text":"<pre><code>import config.logging_settings # pylint: disable=unused-import\n</code></pre>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#function-scope-disable","title":"function scope disable","text":"<pre><code>def test():\n    # Disable all the no-member violations in this function\n    # pylint: disable=no-member\n    ...\n    # pylint: enable=no-member\n</code></pre>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/pylint/#reference","title":"Reference","text":"<ul> <li>pyline error codes</li> </ul>","tags":["python","project","template","pylint","linter","git-hook"]},{"location":"blog/Python/project_template/use_case/","title":"Python project - demo","text":"<ul> <li>Create project</li> <li>Init git</li> <li>Add virtual env. install project in <code>development mode</code></li> <li>Install dependencies from requirements-dev.txt</li> </ul>","tags":["python","project","template","from a-z"]},{"location":"blog/Python/project_template/use_case/#steps","title":"Steps","text":"<ul> <li>Create root project folder</li> <li>Create virtual environment</li> <li>Source it</li> <li>Create project src sub folder (same as project name)</li> <li>Add <code>__init__.py</code></li> <li>At root project folder add</li> <li>setup.py</li> <li>.gitignore</li> <li>.pylintrc</li> <li>requirements.txt</li> <li>requirements-dev.txt</li> <li>README.md</li> <li>Init git</li> <li>Add and commit files</li> <li>Add tests folder</li> <li>Write first unit test</li> <li>Install <code>pytest</code> package</li> <li>Config VSCode for using <code>pytest</code></li> <li>Tools set</li> <li>black</li> <li>isort</li> <li>flake8</li> <li>pylint</li> <li>mypy</li> </ul> project struct<pre><code>\u251c\u2500\u2500 py_commonlib\n\u2502   \u251c\u2500\u2500 hello.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 requirements-dev.txt\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 tests\n\u2502    \u2514\u2500\u2500 test_demo.py\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .pylintrc\n\u2514\u2500\u2500 venv\n</code></pre> venv<pre><code>python -m venv venv\nsource venv/bin/activate\n</code></pre>","tags":["python","project","template","from a-z"]},{"location":"blog/Python/project_template/use_case/#requirements","title":"requirements","text":"requirements requirements-dev.txt<pre><code>-r requirements.txt\nblack\npytest\n</code></pre> <ul> <li> <p>Install dev and runtime packages <pre><code>(venv)python -m pip install -r requirements-dev.txt\n</code></pre></p> </li> <li> <p>Install project in <code>development mode</code> <pre><code>(venv)python -m pip install -e .\n</code></pre></p> </li> </ul> <p>Note</p> <p>Create symlink between virtual env <code>site-packages</code> to project folder <pre><code># /venv/lib/python3.10/site-packages \npy-commonlib.egg-link\n</code></pre></p> <p>to check</p> <p>why <code>development mode</code> create <code>xxx.egg-info</code> folder at project root</p>","tags":["python","project","template","from a-z"]},{"location":"blog/Python/project_template/use_case/#setuppy","title":"setup.py","text":"<ul> <li>Set/Read <code>install_requires</code> from <code>requirements.txt</code></li> </ul> <p>Dev packages</p> <p>dev packages install from <code>requirements-dev.txt</code> At can be declare and install from setup.py. I preferred to config only runtime dependencies in <code>setup.py</code></p> setup.py<pre><code>extras_require={\"dev\": [\"flake8\", \"mypy\", \"black\", \"isort\"]}\n</code></pre> install<pre><code># bash\npip install -e .[dev]\n# zsh\npip install -e \".[dev]\"\n</code></pre> <pre><code>from setuptools import setup, find_packages\n\nwith open(\"requirements.txt\", \"r\", encoding=\"utf-8\") as f:\n    required = f.read().splitlines()\n\nPACKAGE_NAME = \"py_commonlib\"\nsetup(\n    name=PACKAGE_NAME,\n    version=\"0.0.1\",\n    author=\"Author Name\",\n    author_email=\"author@gmail.com\",\n    description=\"python pkg for testing python project template\",\n    packages=find_packages(),\n    install_requires=required,\n)\n</code></pre>","tags":["python","project","template","from a-z"]},{"location":"blog/Python/project_template/use_case/#tests","title":"Tests","text":"<ul> <li>each <code>test</code> file start with <code>test</code> prefix</li> </ul>","tags":["python","project","template","from a-z"]},{"location":"blog/Python/project_template/use_case/#run-from-cli","title":"run from cli","text":"","tags":["python","project","template","from a-z"]},{"location":"blog/Python/project_template/use_case/#run-testspython--m-pytest","title":"run tests<pre><code>python -m pytest\n</code></pre>","text":"","tags":["python","project","template","from a-z"]},{"location":"blog/Python/project_template/use_case/#git-submodules","title":"git submodules","text":"<p>Using Git Submodule and Develop Mode to Manage Python Projects</p>","tags":["python","project","template","from a-z"]},{"location":"blog/Python/project_template/venv_pip_and_requirements/","title":"Python project template - venv","text":"","tags":["python","project"]},{"location":"blog/Python/project_template/venv_pip_and_requirements/#venv","title":"venv","text":"create<pre><code>python -m venv venv\n</code></pre> usage<pre><code># Clear all outside reference\nunset PYTHONPATH\nsource venv/bin/activate\n</code></pre> <p>virtual env</p> <p>Clear all other reference to python libraries by unset <code>PYTHONPATH</code> variable</p>","tags":["python","project"]},{"location":"blog/Python/project_template/venv_pip_and_requirements/#pip","title":"pip","text":"<p>auto complation</p> <pre><code>pip complation --bash &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>","tags":["python","project"]},{"location":"blog/Python/project_template/venv_pip_and_requirements/#dependencies","title":"Dependencies","text":"<ul> <li>Using pip to install project dependencies</li> <li>Separate dependencies to two or more files</li> <li>dev packages</li> <li>prod packages(reference prod file from setup.py)</li> <li>project source reference</li> </ul>","tags":["python","project"]},{"location":"blog/Python/project_template/venv_pip_and_requirements/#project","title":"project","text":"<ul> <li>Install / Reference project from virtualenv</li> </ul> <pre><code>pip install -e .\n</code></pre> <p>Tip</p> <p><code>pip install -e .</code> require setup.py file</p>","tags":["python","project"]},{"location":"blog/Python/project_template/venv_pip_and_requirements/#requirements","title":"requirements","text":"<p>Tip</p> <p>Call <code>prod</code> file from <code>dev</code> using <code>-r</code> option <pre><code>-r requirements.txt\n</code></pre></p>","tags":["python","project"]},{"location":"blog/Python/project_template/venv_pip_and_requirements/#prod","title":"prod","text":"requirements.txt<pre><code># Add project requirements here\n</code></pre>","tags":["python","project"]},{"location":"blog/Python/project_template/venv_pip_and_requirements/#dev","title":"dev","text":"requirements-dev.txt<pre><code>-r requirements.txt\nblack\nmypy\nisort\n</code></pre> usage<pre><code>pip install -r requirements-dev.txt\n</code></pre>","tags":["python","project"]},{"location":"blog/Python/project_template/venv_pip_and_requirements/#setuppy","title":"setup.py","text":"minimal setup<pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name='MyPackageName',\n    version='1.0.0',\n    url='https://github.com/mypackage.git',\n    author='Author Name',\n    author_email='author@gmail.com',\n    description='Description of my package',\n    packages=find_packages(),    \n    install_requires=[],\n)\n</code></pre>","tags":["python","project"]},{"location":"blog/Python/project_template/vscode/","title":"Python project template - VSCode","text":"<p>VSCode setting and extensions for python project</p>","tags":["python","project","template","vscode"]},{"location":"blog/Python/project_template/vscode/#settings","title":"Settings","text":"","tags":["python","project","template","vscode"]},{"location":"blog/Python/project_template/vscode/#project-explorer","title":"Project explorer","text":"exclude files<pre><code>\"files.exclude\": {\n\"venv/\": true,\n\"**/__pycache__\": true,\n}\n</code></pre>","tags":["python","project","template","vscode"]},{"location":"blog/Python/project_template/vscode/#extensions","title":"Extensions","text":"","tags":["python","project","template","vscode"]},{"location":"blog/Python/project_template/vscode/#tasks","title":"Tasks","text":"<p> Load VSCode Tasks into Status Bar.</p>","tags":["python","project","template","vscode"]},{"location":"blog/Python/project_template/vscode/#demo","title":"Demo","text":"<ul> <li>config isort as task</li> <li><code>Task</code> extension add <code>statusbar</code> to task config option  <pre><code>{\n\"version\": \"2.0.0\",\n\"tasks\": [\n{\n\"label\": \"isort\",\n\"type\": \"shell\",\n\"command\": \"isort ${file}\",\n\"options\": {\n\"statusbar\": {\n\"color\" : \"#22C1D6\",\n\"tooltip\" : \"run isort\",\n\"label\": \"isort\",\n\"filePattern\": \"py\"\n}\n}\n}\n]\n}\n</code></pre></li> </ul> <p>task useful links</p> <ul> <li>task Variables Reference</li> <li>for task bar icons</li> </ul> <p>global tasks.json</p> <p>Place task file at <code>~/.config/Code/User/tasks.json</code></p>","tags":["python","project","template","vscode"]},{"location":"blog/Python/pytest/","title":"Test","text":"<ul> <li>Arrange (setup)</li> <li>Act (object/method under test)</li> <li>Assert</li> <li>Cleanup</li> </ul>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/#groping-tests","title":"Groping Tests","text":"","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/#custom-markers","title":"Custom markers","text":"<ul> <li>Using <code>pytest.mark</code> decorator we can group tests </li> </ul> <p>Idea for custom marker - sanity - regression</p> <pre><code>import pytest\n\n@pytest.mark.g1\ndef test_demo():\n    assert True\n</code></pre> <pre><code>python -m pytest -m g1 g2\n</code></pre>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/#builtin-markers","title":"Builtin markers","text":"<pre><code>pytest --markers\n\n...\n@pytest.mark.skip(reason=None)\n@pytest.mark.skipif(condition, ..., *, reason=...)\n@pytest.mark.xfail(condition, ..., *, reason=..., run=True, raises=None, strict=xfail_strict)\n...\n</code></pre>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/#xfail","title":"xfail","text":"<p>mark the test function as an expected failure</p>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/#for-example-if-function-under-test-not-implement-yet","title":"for example if function under test not implement yet","text":"","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/#reference","title":"Reference","text":"<ul> <li>PyTest for Absolute Beginners</li> <li>pytest IndianPythonista</li> </ul>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/conftest/","title":"Pytest conftest","text":"<p>Using <code>conftest.py</code> to share fixtures and hooks among all tests</p>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/conftest/#autouse","title":"autouse","text":"conftest.py<pre><code>from typing import Iterator\nimport pytest\n\n\n@pytest.fixture(autouse=True)\ndef setup_teardownII() -&gt; Iterator[None]:\n    print(\"run setup fixture before test\")\n    yield\n    print(\"run tear down fixture after test\")\n</code></pre> <p>autouse</p> <p>Set <code>autouse</code> to run this fixture for all tests</p> test_file.py<pre><code>def test_with_fixture() -&gt; None:\n    print(\"run test III\")\n    assert True\n</code></pre> <p>run pytest verbose</p> <pre><code>python -m pytest -s &lt;test file&gt;\n</code></pre>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/conftest/#run-tests","title":"Run tests","text":"<pre><code>python -m pytest -s test_file.py\n#\nrun setup fixture before test\nrun test III\n.run tear down fixture after test\n</code></pre>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/conftest/#scope","title":"scope","text":"<p>Fixture scopes</p> <p>Fixtures are created when first requested by a test, and are destroyed based on their scope:</p> <ul> <li>function: (default) The fixture is destroy at the end of the test,</li> <li>class: </li> <li>module:</li> <li>package:</li> <li>session: The fixture destroy at the end of the last session.</li> </ul>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/conftest/#scope-demo","title":"scope demo","text":"conftest.py<pre><code>from typing import Iterator\nimport pytest\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef setup_teardownII() -&gt; Iterator[None]:\n    print(\"\\nrun setup fixture before session start\")\n    yield\n    print(\"run tear down fixture after session end\")\n</code></pre> test_file.py<pre><code>def test_with_fixture() -&gt; None:\n    print(\"run test\")\n    assert True\n\ndef test_with_fixture_II() -&gt; None:\n    print(\"run testII\")\n    assert True\n\ndef test_with_fixtureIII() -&gt; None:\n    print(\"run test III\")\n    assert True\n</code></pre>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/conftest/#run","title":"run","text":"<pre><code>python -m pytest -s tests/test_file.py\n#\nrun setup fixture before session start\nrun test\n.run testII\n.run test III\n.run tear down fixture after session end\n</code></pre>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/fixture/","title":"Pytest fixture","text":"<p>Fixture are function that help us to arrange the domain/ environment before test and then help us to clean the mess after the test</p> <p>These are accessed by test functions through arguments see demo</p> <pre><code>from typing import Callable\nfrom typing import Iterator\nimport pytest\n\n@pytest.fixture\ndef setup() -&gt; None:\n    print(\"run setup fixture before test\")\n\n@pytest.fixture\ndef setup_teardown() -&gt; Iterator[None]:\n    print(\"run setup fixture before test\")\n    yield\n    print(\"run teardown fixture after test\")\n\n\ndef test_with_fixture(setup: Callable) -&gt; None:\n    print(\"run test\")\n    assert True\n\ndef test_with_fixture_II(setup_teardown: Callable) -&gt; None:\n    print(\"run testII\")\n    assert True\n</code></pre> <p>run pytest verbose</p> <pre><code>python -m pytest -s &lt;test file&gt;\n</code></pre>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/mock/","title":"PyTest - Mocking","text":"<p>mocking</p> <p>A mock object is a simulated object that mimics the behavior of the smallest testable parts of an application in controlled ways. It\u2019s replace of one or more function or objects calls</p> <p>A mock function call return a predefined value immediately without doing any work</p> <p>In Python mocking implement by <code>unittest.mock</code> module</p>","tags":["pytest","mock"]},{"location":"blog/Python/pytest/mock/#simple-demo","title":"Simple demo","text":"project<pre><code>search\n  \u251c\u2500\u2500 tutorial\n  \u2502 \u251c\u2500\u2500 __init__.py\n  \u2502 \u2514\u2500\u2500 demo.py\n  \u2514\u2500\u2500 tests\n   \u2514\u2500\u2500 test_demo.py\n</code></pre> demo.py<pre><code># method to mock\ndef get_number() -&gt; int:\n    return 5\n\n# function under test\ndef add(a: int) -&gt; int:\n    b = get_number()\n    return a + b\n</code></pre> test_demo.py<pre><code>from unittest.mock import patch, MagicMock\n\n@patch(\"tutorial.demo.get_number\")\ndef test_add_mock(mock_get_number: MagicMock) -&gt; None:\n    mock_get_number.return_value = 2\n    result = add(1)\n    assert result == 3\n</code></pre> <p>Warning</p> <p><code>@path</code> full name of the function or class to patch <code>module_name.func_name</code> for example to path <code>get_number</code> function in <code>demo</code> module. <code>@patch(\"demo.get_number\")</code></p>","tags":["pytest","mock"]},{"location":"blog/Python/pytest/mock/#magicmock","title":"MagicMock","text":"<p>Provide a simple mocking interface that allow to mock partial real object that we wont to patch</p>","tags":["pytest","mock"]},{"location":"blog/Python/pytest/mock/#return_value","title":"return_value","text":"<p>allows you to choose what the patched callable returns, usually  we return the same type of the real callable but controllable</p>","tags":["pytest","mock"]},{"location":"blog/Python/pytest/mock/#side_effect","title":"side_effect","text":"<p>Change the behavior of the mock</p>","tags":["pytest","mock"]},{"location":"blog/Python/pytest/mock/#side_effect--iterable","title":"side_effect = Iterable","text":"<p>yield the values from defined iterable on subsequent call</p> <pre><code>&gt;&gt;&gt; from unittest.mock import MagicMock\n&gt;&gt;&gt; m = MagicMock()\n&gt;&gt;&gt; m.get_data.side_effect = [5, 10, 15]\n&gt;&gt;&gt; m.get_data()\n5\n&gt;&gt;&gt; m.get_data()\n10\n&gt;&gt;&gt; m.get_data()\n15\n</code></pre> <pre><code>from unittest.mock import patch\n\ndef my_input() -&gt; int:\n    return 1\n\ndef method_to_test():\n    a = my_input()\n    b = my_input()\n    return a+b\n\n\n@patch(\"test_demo.my_input\")\ndef test_multiple(mock_my_input):\n    mock_my_input.side_effect = [1, 2]\n    result = method_to_test()\n    assert result == 3\n</code></pre>","tags":["pytest","mock"]},{"location":"blog/Python/pytest/mock/#side_effect--exception","title":"side_effect = Exception","text":"<pre><code>m.check.side_effect = Exception(\"custom exception\")\n&gt;&gt;&gt; m.check()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/lib/python3.8/unittest/mock.py\", ...\n    raise effect\nException: custom exception\n</code></pre>","tags":["pytest","mock"]},{"location":"blog/Python/pytest/mock/#ide_effect--callable","title":"ide_effect = callable","text":"<p>The callable will be executed on each call with the parameters passed when calling the mocked method</p> <pre><code>&gt;&gt;&gt; def call_me(name):\n...     print(name)\n... \n&gt;&gt;&gt; m.run_call.side_effect = call_me\n&gt;&gt;&gt; m.run_call(\"a\")\na\n&gt;&gt;&gt; m.run_call(\"b\")\nb\n&gt;&gt;&gt; m.run_call.call_count\n2\n&gt;&gt;&gt; m.run_call(\"b\")\nb\n&gt;&gt;&gt; m.run_call.call_count\n3\n</code></pre>","tags":["pytest","mock"]},{"location":"blog/Python/pytest/mock/#reference","title":"Reference","text":"<ul> <li>Mock\u2019s return_value &amp; side effect</li> <li> Unit Testing in Python with pytest | Introduction to mock (Part-9) </li> <li>Unit Testing in Python with pytest | Advanced Mocking (Part-10)</li> </ul>","tags":["pytest","mock"]},{"location":"blog/Python/pytest/params/","title":"pytest parameterize tests","text":"","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/params/#fixture","title":"fixture","text":"test_with_params.py<pre><code>from typing import Callable\nimport pytest\nfrom _pytest.fixtures import SubRequest\n\n@pytest.fixture(params=[10, 20, 30])\ndef demo_fixture(request: SubRequest) -&gt; None:\n    print(f\"\\nrun test with param: {request.param}\")\n\n\ndef test_with_fixture(demo_fixture: Callable) -&gt; None:\n    print(\"run test\")\n    assert True\n</code></pre> <pre><code>python -m pytest -s tests/test_with_params.py\n#\ntests/test_with_params.py \nrun test with param: 10\nrun test\n.\nrun test with param: 20\nrun test\n.\nrun test with param: 30\nrun test\n.\n</code></pre>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/params/#markerparametrize","title":"marker.parametrize","text":"<pre><code>from typing import Callable\nimport pytest\nfrom _pytest.fixtures import SubRequest\n\n\n@pytest.mark.parametrize(\"a, b, result\", [(1, 2, 3), (5, 5, 11), (2, 2, 4)])\ndef test_add(a: int, b: int, result: int) -&gt; None:\n    assert a + b == result\n</code></pre>","tags":["pytest","unittest","python"]},{"location":"blog/Python/pytest/params/#run-test","title":"run test","text":"<pre><code>python -m pytest -s -v tests/test_with_params.py\n#\ntests/test_with_params.py::test_add[1-2-3] PASSED\ntests/test_with_params.py::test_add[5-5-11] FAILED\ntests/test_with_params.py::test_add[2-2-4] PASSED\n\n====================================================================== FAILURES =======================================================================\n__________________________________________________________________ test_add[5-5-11] ___________________________________________________________________\n\na = 5, b = 5, result = 11\n\n@pytest.mark.parametrize(\"a, b, result\", [(1, 2, 3), (5, 5, 11), (2, 2, 4)])\ndef test_add(a: int, b: int, result: int) -&gt; None:\n&gt;       assert a + b == result\nE       assert 10 == 11\nE         -10\nE         +11\n\ntests/test_with_params.py:18: AssertionError\n========================================================= 1 failed, 2 passed in 0.03 seconds\n</code></pre>","tags":["pytest","unittest","python"]},{"location":"blog/Python/python/iterator_and_generator/","title":"Iterator and Generator hello","text":"<p>Iterator in Python is simply an object that can be iterated upon. An object which will return data, one element at a time.</p> <p>Python iterator object must implement two special methods (iterator protocol) - iter() - next()</p> <p>iterable</p> <p>An object is called iterable if we can get an iterator from it. Container like <code>list</code> and <code>tuple</code> are iterable object</p>","tags":["python","iterator","generator"]},{"location":"blog/Python/python/iterator_and_generator/#custom-iterators","title":"Custom iterators","text":"<pre><code>class Base2():\n    def __init__(self, max) -&gt; None:\n        self.__max = max\n        self.__current = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.__current &gt; self.__max:\n            raise StopIteration()\n        result = 2**self.__current\n        self.__current += 1\n        return result\n</code></pre> <p>iter and next</p> <p><code>iter(obj)</code> and <code>next(obj)</code> method is the same like calling <code>obj.__next__()</code> and <code>obj.__iter__()</code> method</p>","tags":["python","iterator","generator"]},{"location":"blog/Python/python/iterator_and_generator/#iterator-usage","title":"iterator usage","text":"<ul> <li>Iterator raise <code>StopIteration</code> exception when it\u2019s ended</li> </ul> <pre><code>worker = Base2(2)\nworker_iter = worker.__iter__()\nprint(next(worker_iter))\nprint(worker_iter.__next__())\nprint(next(worker_iter))\nprint(next(worker_iter))\n\n1\n2\n4\nTraceback (most recent call last):\n  File \"/home/user/projects/blog/examples/python/python/custom_iterators.py\", line 22, in &lt;module&gt;\n    print(next(worker_iter))\n  File \"/home/user/projects/blog/examples/python/python/custom_iterators.py\", line 12, in __next__\n    raise StopIteration()\nStopIteration\n</code></pre>","tags":["python","iterator","generator"]},{"location":"blog/Python/python/iterator_and_generator/#generator","title":"Generator","text":"<pre><code>def base2(max):\n    for x in range(max):\n        yield 2**x\n\nprint(base2(3))\nfor i in base2(3):\n    print(i)\n\n&lt;generator object base2 at 0x7f8aa5cc07b0&gt;\n1\n2\n4\n</code></pre>","tags":["python","iterator","generator"]},{"location":"blog/Python/python/iterator_and_generator/#generator-expression","title":"Generator Expression","text":"<pre><code>g = (2**x for x in range(3))\nprint(g)\nfor i in g:\n    print(i)\n\n#\n&lt;generator object &lt;genexpr&gt; at 0x7f9af03247b0&gt;\n1\n2\n4\n</code></pre>","tags":["python","iterator","generator"]},{"location":"blog/Python/python/iterator_and_generator/#reference","title":"Reference","text":"<ul> <li>How to make an iterator in Python</li> </ul>","tags":["python","iterator","generator"]},{"location":"blog/Python/python/bytearray/","title":"Bytearray","text":"<p>The bytearray class is a mutable sequence of integers in the range 0 &lt;= x &lt; 256.</p> <pre><code>data = bytearray(10)\ndata\nbytearray(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n</code></pre> <p>mutable vs immutable</p> <p>A mutable object can be changed after it\u2019s created, and an immutable object can\u2019t. </p>","tags":["python"]},{"location":"blog/Python/python/bytearray/#bytearray-bytes-and-string","title":"bytearray, bytes and string","text":"<p><code>bytes</code> and <code>bytearray</code> classes both hold arrays of bytes, where each byte can take on a value between 0 and 255. The primary difference is that a bytes object is immutable, meaning that once created, you cannot modify its elements. By contrast, a bytearray object allows you to modify its elements</p> <pre><code># create array with 10 bytes\ndata = bytearray(10)\nb = bytes(data)\n&gt;&gt;&gt; b\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n</code></pre> <pre><code>my_str = \"abcd\"\n&gt;&gt;&gt; my_data = bytearray(my_str, 'ascii')\n&gt;&gt;&gt; my_data\nbytearray(b'abcd')\n&gt;&gt;&gt; len(my_data)\n4\n\n&gt;&gt;&gt; my_data = bytearray(my_str, 'utf-16')\n&gt;&gt;&gt; len(my_data)\n10\n</code></pre>","tags":["python"]},{"location":"blog/Python/python/bytearray/#more","title":"more","text":"<pre><code>&gt;&gt;&gt; data=bytearray([65,66,67])\n&gt;&gt;&gt; data\nbytearray(b'ABC')\n\n# show etch value as hex\n&gt;&gt;&gt; [hex(c) for c in data]\n['0x41', '0x42', '0x43']\n\n# append\n&gt;&gt;&gt; data.append(68)\ndata\nbytearray(b'ABCD')\n\n# replace\n&gt;&gt;&gt; data[1:3] = [0x62, 0x63]\n&gt;&gt;&gt; data\nbytearray(b'AbcD')\n\n# extend\n&gt;&gt;&gt; data.extend([0x45, 0x46])\n&gt;&gt;&gt; data\nbytearray(b'AbcDEF')\n\n# extend\n&gt;&gt;&gt; new_data = bytearray(b\"GH\")\n&gt;&gt;&gt; new_data\nbytearray(b'GH')\n&gt;&gt;&gt; data + new_data\nbytearray(b'AbcDEFGH')\n</code></pre>","tags":["python"]},{"location":"blog/Python/python/logging/","title":"Logging","text":"<ul> <li>Add Custom level</li> <li>Color log</li> </ul>","tags":["python"]},{"location":"blog/Python/python/logging/color_log_by_level/","title":"Color log","text":"","tags":["python","logging"]},{"location":"blog/Python/python/logging/color_log_by_level/#logging-formatting","title":"Logging Formatting","text":"<p>Formatter enrich the log message by adding more information like: time, python file, logger name and more</p> simple_formatter.py<pre><code>import logging\n\nFMT = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\nlogging.basicConfig(format=FMT, level=logging.INFO)\n\nlog = logging.getLogger(\"demo\")\nlog.info(\"formatter example\")\n</code></pre> result<pre><code>2022-11-26 07:10:35,660 - demo - INFO - formatter example\n</code></pre> name format desc asctime %(asctime)s time when the LogRecord was created name %(name)s Name of the logger used to log the call. levelname %(levelname)s Text logging level for the message (\u2018DEBUG\u2019, \u2018INFO\u2019, \u2018WARNING\u2019, \u2018ERROR\u2019, \u2018CRITICAL\u2019) message %(message)s The logged message, computed as msg % args <p>Tip</p> <p>more log record attribute</p>","tags":["python","logging"]},{"location":"blog/Python/python/logging/color_log_by_level/#custom-formatter","title":"Custom formatter","text":"<p>Extend the <code>logging.Formatter</code> class and override the <code>format</code> method</p> <ul> <li>Color formatter</li> <li>Custom Level</li> </ul> logging/color.py<pre><code>import logging\nFMT = \"%(asctime)s - %(name)s - %(levelname)s -%(message)s\"\nclass CustomFormatter(logging.Formatter):\nGRAY = '\\u001b[38;21m'\nBLUE = '\\u001b[38;5;39m'\nYELLOW = '\\u001b[38;5;226m'\nRED = '\\u001b[38;5;196m'\nBOLD_RED = '\\u001b[31;1m'\n__reset = '\\u001b[0m'\nGREEN = \"\\u001b[32m\"\nMAGENTA= \"\\u001b[35m\"\nCYAN= \"\\u001b[36m\"\nBACKGROUND_RED = \"\\u001b[41m\"\nBACKGROUND_GREEN = \"\\u001b[42m\"\ndef __init__(self, fmt):\nsuper().__init__()\nself.fmt = fmt\nself.__color_formats = {\nlogging.DEBUG: self.GRAY + self.fmt + self.__reset,\nlogging.INFO: self.BLUE + self.fmt + self.__reset,\nlogging.WARNING: self.YELLOW + self.fmt + self.__reset,\nlogging.ERROR: self.RED + self.fmt + self.__reset,\nlogging.CRITICAL: self.BOLD_RED + self.fmt + self.__reset,\n}\ndef set_level_color(self, level, color):\n\"\"\"\n        Color code: https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html\n        \"\"\"\nself.__color_formats[level] = color + self.fmt + self.__reset\ndef format(self, record):\nlog_fmt = self.__color_formats.get(record.levelno)\nformatter = logging.Formatter(log_fmt)\nreturn formatter.format(record)\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\nLOG_LEVEL_CLIENT = 21\nlogging.CLIENT = LOG_LEVEL_CLIENT \nlogging.addLevelName(logging.CLIENT, \"CLIENT\")\nlogger = logging.getLogger(\"color_logger\")\nlogger.setLevel(logging.DEBUG)\n#create console handler and set level to debug\nhandler = logging.StreamHandler()\nhandler.setLevel(logging.DEBUG)\ncolor_formatter = CustomFormatter(FMT)\ncolor_formatter.set_level_color(logging.CLIENT, CustomFormatter.BACKGROUND_GREEN)\nhandler.setFormatter(color_formatter)\nlogger.addHandler(handler)\n# usage\nlogger.debug('This is a debug-level message')\nlogger.info('This is an info-level message')\nlogger.warning('This is a warning-level message')\nlogger.error('This is an error-level message')\nlogger.critical('This is a critical-level message')\nlogger.log(logging.CLIENT, \"this is client\")\n</code></pre> <p></p>","tags":["python","logging"]},{"location":"blog/Python/python/logging/custom_level/","title":"Add custom level","text":"<p>Python has six log levels with each one assigned a specific integer indicating the severity of the log:</p> <ul> <li>NOTSET=0</li> <li>DEBUG=10</li> <li>INFO=20</li> <li>WARN=30</li> <li>ERROR=40</li> <li>CRITICAL=50</li> </ul> <p>using <code>setLevel</code> method on <code>logging</code> and <code>handlers</code> we can control/filter the output logging severity  </p>","tags":["python","logging"]},{"location":"blog/Python/python/logging/custom_level/#demo","title":"Demo","text":"custom_level.py<pre><code>import logging\n#create new log level\nLOG_LEVEL_CLIENT = 21\nlogging.CLIENT = LOG_LEVEL_CLIENT \nlogging.addLevelName(logging.CLIENT, \"CLIENT\")\n#create logger with \"mylogger\"\nlogger = logging.getLogger(\"mylogger\")\nlogger.setLevel(logging.DEBUG)\n#create console handler and set level to debug\nhandler = logging.StreamHandler()\nhandler.setLevel(logging.INFO)\nlogger.addHandler(handler)\n#create formatter\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s -%(message)s\")\nhandler.setFormatter(formatter)\nlogger.debug(\"this is debug\")\nlogger.info(\"this is info\")\nlogger.log(logging.CLIENT, \"this is client\")\nlogger.warning(\"this is warning\")\nlogger.error(\"this is error\")\nlogger.critical(\"this is critical\")\n</code></pre> Result<pre><code>2022-11-26 06:44:19,616 - mylogger - INFO -this is info\n2022-11-26 06:44:19,616 - mylogger - CLIENT -this is client\n2022-11-26 06:44:19,616 - mylogger - WARNING -this is warning\n2022-11-26 06:44:19,616 - mylogger - ERROR -this is error\n2022-11-26 06:44:19,616 - mylogger - CRITICAL -this is critical\n</code></pre> <p>setLevel</p> <p>The above example <code>setLevel</code> method set to severity output to <code>Info</code> No <code>DEBUG</code> logging is \u201cprint\u201d</p>","tags":["python","logging"]},{"location":"blog/Python/python/named_tuple/named_tuple/","title":"Basic usage","text":"NameTuple<pre><code>from typing import NamedTuple\n\nclass MyTuple(NamedTuple):\n    id: int\n    name: str\n\nt1 = MyTuple(1, \"A\")\nt2 = MyTuple(*(2, \"B\"))\nt3 = MyTuple(**{\n    \"id\": 3,\n    \"name\": \"C\"})\nt4 = MyTuple._make([4, \"D\"])\n\nprint(t1)\nprint(t2)\nprint(t3)\nprint(t4)\n</code></pre>","tags":["python","tuple","namedtuple"]},{"location":"blog/Python/typing/","title":"type hinting","text":"<pre><code>from typing import (\n    Any,\n    Callable,\n    Generic,\n    Optional,\n    Sequence,\n    Type,\n    TypeVar,\n    Union,\n    cast,\n)\n</code></pre>","tags":["python","typing","annotation"]},{"location":"blog/Python/typing/#list-tuple-dict","title":"List, Tuple, Dict","text":"<pre><code>from typing import List, Tuple, Dict\n\nl: List[str] = [\"a\", \"b\", \"c\"]\nt: Tuple[int, str] = (1, \"a\")\nd: Dict[str, int] = {\"a\": 1}\n</code></pre>","tags":["python","typing","annotation"]},{"location":"blog/Python/typing/#overload","title":"overload","text":"<pre><code>from collections.abc import Sequence\nfrom typing import overload\n\n\n@overload\ndef double(input_: int) -&gt; int:\n    ...\n\n\n@overload\ndef double(input_: Sequence[int]) -&gt; list[int]:\n    ...\n\n\ndef double(input_: int | Sequence[int]) -&gt; int | list[int]:\n    if isinstance(input_, Sequence):\n        return [i * 2 for i in input_]\n    return input_ * 2\n\nif __name__ == \"__main__\":\n    print(double(1))\n    print(double([1, 2, 3]))\n</code></pre>","tags":["python","typing","annotation"]},{"location":"blog/Python/typing/#generic","title":"generic","text":"","tags":["python","typing","annotation"]},{"location":"blog/Python/typing/generic/","title":"Using Generics in python","text":"<pre><code>from typing import List, Generic, TypeVar\n\nT = TypeVar(\"T\")\n\nclass Items(Generic[T]):\n    def __init__(self) -&gt; None:\n        self.__data: List[T] = []\n\n    def add_item(self, item: T) -&gt; None:\n        self.__data.append(item)\n\n    def first(self) -&gt; T | None:\n        if self.__data:\n            return self.__data[0]\n        return None\n\n\nif __name__ == \"__main__\":\n    items = Items[str]()\n    items.add_item(\"a\")\n    # items.add_item(1)\n\n    other_items = Items[int]()\n    other_items.add_item(1)\n</code></pre>","tags":["python","typing","annotation"]},{"location":"blog/Python/typing/generic/#reference","title":"Reference","text":"<ul> <li>Using Generics in Python</li> <li>Python\u2019s covariance and contravariance</li> </ul>","tags":["python","typing","annotation"]},{"location":"blog/Python/typing/typever/","title":"TypeVar","text":"<pre><code>from typing import TypeVar\nT = TypeVar(\"T\")\n\ndef foo(arg: T) -&gt; T:\n    return arg\n</code></pre> <pre><code>import decimal\nfrom typing import TypeVar\n\nNumber = TypeVar(\"Number\", int, float, decimal.Decimal)\n\ndef double(value: Number) -&gt; Number:\n    return value * 2\n\nresult: int\nresult = double(5)\n</code></pre>","tags":["typing","typever","python"]},{"location":"blog/Python/typing/typever/#reference","title":"Reference","text":"<ul> <li>Advanced type annotations using Python\u2019s TypeVar</li> <li><code>TypeVar</code>s explained </li> </ul>","tags":["typing","typever","python"]},{"location":"blog/Python/zmq/","title":"Cookbook","text":"<ul> <li>ZMQ Req/Rep pattern with dataclass and msgpack</li> </ul>","tags":["pyzmq","zmq"]},{"location":"blog/Python/zmq/req_rep_msgpack/","title":"Req/Rep zmq pattern with msgpack","text":"<p>ZMQ Req/Rep zmq pattern with python dataclasses and msgpack</p>","tags":["python","zmq","msgpack"]},{"location":"blog/Python/zmq/req_rep_msgpack/#install","title":"install","text":"install dependencies<pre><code>pip install msgpack\npip install pyzmq\n</code></pre>","tags":["python","zmq","msgpack"]},{"location":"blog/Python/zmq/req_rep_msgpack/#demo","title":"demo","text":"req/rep<pre><code>import multiprocessing\nimport logging\nfrom dataclasses import dataclass, asdict\nimport msgpack\nimport zmq\nFMT = \"%(asctime)s - %(lineno)s - %(levelname)s - %(message)s\"\nlogging.basicConfig(format=FMT, level=logging.INFO)\nlog = logging.getLogger(__name__)\nTOPIC = b\"topic\"\nSERVICE_PORT = 5555\n@dataclass\nclass Data_Request:\nf_int: int\nf_float: float\nf_string: str\n@dataclass\nclass Data_Response:\nsuccess: bool\ndef server():\ncontext = zmq.Context()\nsocket = context.socket(zmq.REP)\nsocket.bind(f\"tcp://*:{SERVICE_PORT}\")\ntopic, data = socket.recv_multipart()\nmsg = msgpack.unpackb(data)\nlog.info(f\"server get request: {msg}\")\nresponse = Data_Response(success=True)\ndata = msgpack.packb(asdict(response))\nsocket.send(data)\ndef client():\ncontext = zmq.Context()\nsocket = context.socket(zmq.REQ)\nsocket.connect(f\"tcp://127.0.0.1:{SERVICE_PORT}\")\n# Create request msg\nmsg = Data_Request(1, 2.0, \"string\")\nraw = asdict(msg)\ndata = msgpack.packb(raw)\nsocket.send_multipart([TOPIC, data])\n# Recv response from server\ndata = socket.recv()\n# unpack socket data\nraw = msgpack.unpackb(data)\n# Convert to msg\nmsg = Data_Response(**raw)\nlog.info(f\"server response: {msg.success}\")\nif __name__ == \"__main__\":\np_server = multiprocessing.Process(target=server)\np_client = multiprocessing.Process(target=client)\np_client.start()\np_server.start()\np_server.join()\np_client.join()\n</code></pre>","tags":["python","zmq","msgpack"]},{"location":"blog/ROS2/","title":"Index","text":""},{"location":"blog/ROS2/#cpp","title":"CPP","text":"<p>Read news</p>"},{"location":"blog/ROS2/#python","title":"Python","text":"<p>Read news</p>"},{"location":"blog/ROS2/#launch","title":"Launch","text":""},{"location":"blog/ROS2/#ignition","title":"Ignition","text":""},{"location":"blog/ROS2/#gazebo","title":"Gazebo","text":""},{"location":"blog/ROS2/#books","title":"books","text":"<ul> <li>A Concise Introduction to Robot Programming with ROS2</li> </ul>"},{"location":"blog/ROS2/#good-sites","title":"good sites","text":"<ul> <li>articulatedrobotics</li> </ul>"},{"location":"blog/ROS2/#packages-to-check","title":"packages to check","text":"<ul> <li>YASMIN State machine</li> <li>gym-ignition</li> </ul>"},{"location":"blog/ROS2/#workshop-to-do","title":"workshop to do","text":"<ul> <li>ROS 2 Executor: How to make it efficient, real-time and deterministic?</li> </ul>"},{"location":"blog/ROS2/#video-to-watch","title":"Video to watch","text":"<ul> <li>KR Autonomous Flight: An Open Source Flight Stack for GPS-denied UAVs</li> </ul>"},{"location":"blog/ROS2/to_read/","title":"ROS2 pkg to read about and try","text":"<ul> <li>ros-tooling</li> <li>domain bridge</li> </ul>","tags":["ros2"]},{"location":"blog/ROS2/to_read/#build-deb","title":"build deb","text":"<ul> <li>Building a custom Debian package</li> <li>How to build a local Debian ROS2 package </li> </ul>","tags":["ros2"]},{"location":"blog/ROS2/to_read/#cmake","title":"cmake","text":"<ul> <li>CMake basics</li> </ul>","tags":["ros2"]},{"location":"blog/ROS2/to_read/#git-project-to-check","title":"git project to check","text":"<ul> <li>rviz_2d_overlay_plugins</li> </ul>","tags":["ros2"]},{"location":"blog/ROS2/cli/action/","title":"ROS2 action cli","text":"","tags":["action","cli"]},{"location":"blog/ROS2/cli/action/#demo","title":"Demo","text":"<pre><code>ros2 run turtlesim turtlesim_node\n</code></pre>","tags":["action","cli"]},{"location":"blog/ROS2/cli/action/#check-for-actions","title":"Check for actions","text":"cli<pre><code>ros2 action list\n/turtle1/rotate_absolute\n\n# -t show action type\nros2 action list -t\n/turtle1/rotate_absolute [turtlesim/action/RotateAbsolute]\n</code></pre>","tags":["action","cli"]},{"location":"blog/ROS2/cli/action/#show-interface","title":"Show interface","text":"<pre><code>ros2 interface show turtlesim/action/RotateAbsolute # Request: The desired heading in radians\nfloat32 theta\n---\n# Result: The angular displacement in radians to the starting position\nfloat32 delta\n---\n# Feedback: The remaining rotation in radians\nfloat32 remaining\n</code></pre>","tags":["action","cli"]},{"location":"blog/ROS2/cli/action/#send-goal","title":"send goal","text":"<pre><code># ros2 action send_goal action_name action_type value\n# -f show feedback\nros2 action send_goal -f /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: 1.575}\n\n\nWaiting for an action server to become available...\nSending goal:\n     theta: 1.575\n\nFeedback:\n    remaining: 1.5750000476837158\n\nGoal accepted with ID: 8340924a5f1c4e75b36ae3d95f399429\n\nFeedback:\n    remaining: 1.559000015258789\n\n...\n\nFeedback:\n    remaining: 0.007000088691711426\n\nResult:\n    delta: -1.5679999589920044\n\nGoal finished with status: SUCCEEDED\n</code></pre>","tags":["action","cli"]},{"location":"blog/ROS2/cli/ros2_command_line_interface/","title":"ROS 2 Command Line Interface","text":""},{"location":"blog/ROS2/cli/ros2_command_line_interface/#reference","title":"Reference","text":"<ul> <li>Creating a ROS 2 CLI command and verb</li> <li>cheats sheet</li> <li>ROS 2 Command Line Interface</li> </ul>"},{"location":"blog/ROS2/cli/run_simple_node/","title":"Run ROS2 Node","text":"<p>Run minimal ROS2 node from:</p> <ul> <li>cli</li> <li>add namespace</li> <li>remap topic</li> <li>remap node name</li> <li>launch file</li> <li>cli control debug level</li> </ul>","tags":["ros2","cli","namespace","remap"]},{"location":"blog/ROS2/cli/run_simple_node/#run-from-cli","title":"Run from cli","text":"<pre><code>ros2 run params_demos minimal\n#\n[INFO] [1680205241.556490384] [simple_param_node]: my_int: 3\n[INFO] [1680205242.543293520] [simple_param_node]: my_int: 2\n[INFO] [1680205243.543186445] [simple_param_node]: my_int: 1\n[INFO] [1680205244.543174591] [simple_param_node]: close timer\n</code></pre> <pre><code>ros2 node list\n# \n/simple_param_node\n</code></pre>","tags":["ros2","cli","namespace","remap"]},{"location":"blog/ROS2/cli/run_simple_node/#add-namespace","title":"Add namespace","text":"terminal 1<pre><code>ros2 run params_demos minimal --ros-args --remap __ns:=/custom\n</code></pre> terminal 2<pre><code>ros2 node list           #\n/custom/simple_param_node\n</code></pre>","tags":["ros2","cli","namespace","remap"]},{"location":"blog/ROS2/cli/run_simple_node/#remap-topic-name","title":"Remap topic name","text":"terminal 1<pre><code># without namespace\nros2 run params_demos minimal --ros-args --remap /simple_param_node/my_topic:=/new_topic\n\n# with namespace\nros2 run params_demos minimal --ros-args --remap /custom/simple_param_node/my_topic:=/new_topic --remap __ns:=/custom\n</code></pre> terminal 2<pre><code>ros2 node list           #\n/custom/simple_param_node\n\nros2 topic list #\n/new_topic\n</code></pre> <p>Topic absolute name</p> <p>topic name start with forward slash are absolute  when you rename topic and the remap topic name are not absolute.   namespace add to the topic name as prefix</p> <pre><code>ros2 run params_demos minimal --ros-args --remap /custom/simple_param_node/my_topic:=new_topic --remap __ns:=/custom\n\nros2 topic list #\n/custom_ns/new_topic\n</code></pre> <pre><code>ros2 run params_demos minimal --ros-args --remap /custom/simple_param_node/my_topic:=/new_topic --remap __ns:=/custom\n\nros2 topic list #\n/new_topic\n</code></pre> <p>Add fqn to topic name</p> <p>Topic and Service name mapping to DDS</p> <pre><code>fqn = self.get_fully_qualified_name()\nself.get_logger().info(f\"node name: {node_name}\")\nself.pub = self.create_publisher(Int32, fqn + TOPIC, 10)\n</code></pre>","tags":["ros2","cli","namespace","remap"]},{"location":"blog/ROS2/cli/run_simple_node/#remap-node-name","title":"Remap node name","text":"Terminal 1<pre><code>ros2 run params_demos minimal --ros-args --remap __node:=node_new_name\n</code></pre> Terminal 2<pre><code>ros2 node list\n#\n/node_new_name\n\nros2 topic list\n#\n/node_new_name/my_topic\n/parameter_events\n/rosout\n</code></pre>","tags":["ros2","cli","namespace","remap"]},{"location":"blog/ROS2/cli/run_simple_node/#remap-node-name-with-namespace","title":"Remap node name with namespace","text":"Terminal 1<pre><code>run params_demos minimal --ros-args --remap __node:=node_new_name --remap __ns:=/custom\n</code></pre> Terminal 2<pre><code>ros2 node list #\n/custom/node_new_name\n\nros2 topic list\n#\n/custom/node_new_name/my_topic\n/parameter_events\n/rosout\n</code></pre> <p>Note</p> <pre><code>name = self.get_name()\nns = self.get_namespace()\nfqn = self.get_fully_qualified_name()\nself.get_logger().info(f\"node name: {name}\")\nself.get_logger().info(f\"ns: {ns}\")\nself.get_logger().info(f\"fqn: {fqn}\")\n</code></pre> <pre><code>ros2 run params_demos minimal --ros-args --remap __node:=node_new_name --remap __ns:=/custom\n[INFO] [1680233355.573926310] [custom.node_new_name]: node name: node_new_name\n[INFO] [1680233355.574155685] [custom.node_new_name]: ns: /custom\n[INFO] [1680233355.574342657] [custom.node_new_name]: fqn: /custom/node_new_name\n</code></pre>","tags":["ros2","cli","namespace","remap"]},{"location":"blog/ROS2/cli/run_simple_node/#launch","title":"launch","text":"<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    sim_node =  Node(\n            package='params_demos',\n            namespace='custom',\n            executable='minimal',\n            name='simple_node'\n        )\n\n\n    ld.add_action(sim_node)\n    return ld\n</code></pre> <pre><code>ros2 node list\n/custom/simple_node\n#\nros2 topic list\n/custom/simple_node/my_topic\n</code></pre>","tags":["ros2","cli","namespace","remap"]},{"location":"blog/ROS2/cli/run_simple_node/#remap-topics","title":"remap topics","text":"<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    sim_node =  Node(\n            package='params_demos',\n            namespace='custom',\n            executable='minimal',\n            name='simple_node',\n            remappings=[\n                (\"/custom/simple_node/my_topic\", \"/new_topic_name\")\n            ]\n        )\n\n\n    ld.add_action(sim_node)\n    return ld\n</code></pre> <pre><code>ros2 node list\n/custom/simple_node\n#\nros2 topic list\n/new_topic_name\n</code></pre>","tags":["ros2","cli","namespace","remap"]},{"location":"blog/ROS2/cli/run_simple_node/#cli-and-launch-logging-level-control","title":"cli and launch logging level control","text":"<p>more ros2 logging info</p>","tags":["ros2","cli","namespace","remap"]},{"location":"blog/ROS2/cli/run_simple_node/#cli","title":"cli","text":"<p>loging level:</p> <ul> <li>debug</li> <li>info</li> <li>warn</li> <li>error</li> </ul> terminal<pre><code>ros2 run params_demos minimal --ros-args --log-level debug\n</code></pre>","tags":["ros2","cli","namespace","remap"]},{"location":"blog/ROS2/cli/run_simple_node/#launch_1","title":"launch","text":"<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\ndef generate_launch_description():\nld = LaunchDescription()\nsim_node =  Node(\npackage='params_demos',\nnamespace='custom',\nexecutable='minimal',\nname='simple_node',\nremappings=[\n(\"/custom/simple_node/my_topic\", \"/new_topic_name\")\n],\narguments=['--ros-args', '--log-level', 'warn']\n)\nld.add_action(sim_node)\nreturn ld\n</code></pre>","tags":["ros2","cli","namespace","remap"]},{"location":"blog/ROS2/cli/run_simple_node/#reference","title":"Reference","text":"<ul> <li>ROS Command Line Arguments</li> <li>Topic and Service name mapping to DDS</li> </ul>","tags":["ros2","cli","namespace","remap"]},{"location":"blog/ROS2/control2/","title":"ROS2 Control_2","text":"<pre><code>sudo apt install ros-humble-ros2-control\nsudo apt install ros-humble-ros2-controllers\nsudo apt install ros-humble-gazebo-ros2-control\n</code></pre>","tags":["ros2","control2"]},{"location":"blog/ROS2/control2/#demo-usage","title":"Demo usage","text":"<pre><code> ros2 control list_hardware_interfaces ros2 run controller_manager spawner diff_cont\n ros2 run controller_manager spawner joint_broad\n</code></pre> <p><code>bash terminal=\"teleop\" ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args -r /cmd_vel:=/diff_cont/cmd_vel_unstamped</code></p>","tags":["ros2","control2"]},{"location":"blog/ROS2/control2/#resource","title":"Resource","text":"<ul> <li>#12 - ros2_control Concept &amp; Simulation</li> <li> Solving the problem EVERY robot has (with ros2_control) </li> </ul>","tags":["ros2","control2"]},{"location":"blog/ROS2/control2/tutorial/effort/","title":"Effort controller","text":"","tags":["ros2","ros2_control","effort"]},{"location":"blog/ROS2/control2/tutorial/effort/#urdf","title":"urdf","text":"ros2 control<pre><code>&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n&lt;hardware&gt;\n&lt;plugin&gt;gazebo_ros2_control/GazeboSystem&lt;/plugin&gt;\n&lt;/hardware&gt;\n&lt;joint name=\"camera2base\"&gt;\n&lt;command_interface name=\"effort\" /&gt;\n&lt;state_interface name=\"position\" /&gt;\n&lt;state_interface name=\"velocity\" /&gt;\n&lt;state_interface name=\"effort\" /&gt;\n&lt;/joint&gt;\n&lt;/ros2_control&gt;\n</code></pre> load config<pre><code>&lt;gazebo&gt;\n&lt;plugin filename=\"libgazebo_ros2_control.so\" name=\"gazebo_ros2_control\"&gt;\n&lt;parameters&gt;$(find gazebo_tutorial_pkg)/config/effort.yaml&lt;/parameters&gt;\n&lt;/plugin&gt;\n&lt;/gazebo&gt;\n</code></pre>","tags":["ros2","ros2_control","effort"]},{"location":"blog/ROS2/control2/tutorial/effort/#config","title":"config","text":"<pre><code>controller_manager:\nros__parameters:\nupdate_rate: 100  # Hz\njoint_effort_controller:\ntype: effort_controllers/JointGroupEffortController\njoint_state_broadcaster:\ntype: joint_state_broadcaster/JointStateBroadcaster\njoint_effort_controller:\nros__parameters:\njoints:\n- camera2base\ninterface_name: effort\ncommand_interfaces:\n- effort\nstate_interfaces:\n- position\n- velocity\njoint_state_broadcaster:\nros__parameters:\njoints:\n- camera2base\n</code></pre>","tags":["ros2","ros2_control","effort"]},{"location":"blog/ROS2/control2/tutorial/effort/#usage","title":"usage","text":"","tags":["ros2","ros2_control","effort"]},{"location":"blog/ROS2/control2/tutorial/effort/#load-controllers","title":"load controllers","text":"<pre><code>ros2 run controller_manager spawner joint_effort_controller\n</code></pre> <p>unload controller</p> <p>using unspawn command to take command down <pre><code>ros2 run controller_manager unspawner joint_effort_controller\n</code></pre></p>","tags":["ros2","ros2_control","effort"]},{"location":"blog/ROS2/control2/tutorial/effort/#topics","title":"topics","text":"<pre><code>/clock\n/dynamic_joint_states\n/joint_effort_controller/commands\n/joint_effort_controller/transition_event\n/joint_state_broadcaster/transition_event\n</code></pre>","tags":["ros2","ros2_control","effort"]},{"location":"blog/ROS2/control2/tutorial/effort/#usage_1","title":"usage","text":"","tags":["ros2","ros2_control","effort"]},{"location":"blog/ROS2/control2/tutorial/effort/#command","title":"command","text":"<pre><code>ros2 topic pub --once \\\n/joint_effort_controller/commands \\\nstd_msgs/msg/Float64MultiArray \"{data: [10]}\"\n</code></pre>","tags":["ros2","ros2_control","effort"]},{"location":"blog/ROS2/control2/tutorial/position/","title":"ROS2 control, simple tutorial base on one continues joint","text":"","tags":["ros2","ros2_control"]},{"location":"blog/ROS2/control2/tutorial/position/#objective","title":"Objective","text":"<ul> <li>Create simple <code>urdf</code> with two links and one continues joint</li> <li>Define controllers<ul> <li>Position</li> <li>Velocity</li> <li>Effort</li> </ul> </li> </ul> robot.urdf<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"simple_example\"&gt;\n&lt;link name=\"world\"/&gt;\n\n&lt;material name=\"blue\"&gt;\n&lt;color rgba=\"0 0 0.8 1\"/&gt;\n&lt;/material&gt;\n\n&lt;material name=\"black\"&gt;\n&lt;color rgba=\"0 0 0 1\"/&gt;\n&lt;/material&gt;\n\n&lt;joint name=\"word2base\" type=\"fixed\"&gt;\n&lt;parent link=\"world\"/&gt;\n&lt;child link=\"base_link\"/&gt;\n&lt;/joint&gt;\n&lt;link name=\"base_link\"&gt;\n&lt;inertial&gt;\n&lt;mass value=\"10\" /&gt;\n&lt;inertia ixx=\"0.4\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.4\" iyz=\"0.0\" izz=\"0.2\"/&gt;\n&lt;/inertial&gt;\n&lt;collision&gt;\n&lt;geometry&gt;\n&lt;cylinder radius=\"0.05\" length=\"0.24\" /&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual&gt;\n&lt;geometry&gt;\n&lt;cylinder radius=\"0.05\" length=\"0.24\" /&gt;\n&lt;/geometry&gt;\n&lt;material name=\"black\"/&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n\n&lt;link name=\"second_link\"&gt;\n&lt;inertial&gt;\n&lt;mass value=\"0.18\" /&gt;\n&lt;inertia ixx=\"0.0002835\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.0002835\" iyz=\"0.0\" izz=\"0.000324\" /&gt;\n&lt;/inertial&gt;\n&lt;origin rpy=\"0.0 0.0 0.0\" xyz=\"0.0 0.0 0.0\" /&gt;\n&lt;collision&gt;\n&lt;geometry&gt;\n&lt;box size=\"0.05 0.05 0.15\" /&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual&gt;\n&lt;geometry&gt;\n&lt;box size=\"0.05 0.05 0.15\" /&gt;\n&lt;/geometry&gt;\n&lt;material name=\"blue\"/&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n\n&lt;joint name=\"base_to_second_joint\" type=\"continuous\"&gt;\n&lt;parent link=\"base_link\"/&gt;\n&lt;child link=\"second_link\"/&gt;\n&lt;axis xyz=\"0 0 1\"/&gt;\n&lt;origin xyz=\"0.0 0.0 0.2\" rpy=\"0.0 0.0 0.0\"/&gt;\n&lt;/joint&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["ros2","ros2_control"]},{"location":"blog/ROS2/control2/tutorial/position/#position-controller","title":"Position controller","text":"<ul> <li>Add ros2_control definition to urdf</li> <li>Add gazebo plugin definition to urdf</li> <li>Add gazebo plugin yaml file</li> <li>Load controller</li> <li>Pub command</li> </ul> ros2_control<pre><code>&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n&lt;hardware&gt;\n&lt;plugin&gt;gazebo_ros2_control/GazeboSystem&lt;/plugin&gt;\n&lt;/hardware&gt;    &lt;joint name=\"base_to_second_joint\"&gt;\n&lt;command_interface name=\"position\"/&gt;\n&lt;state_interface name=\"position\"/&gt;\n&lt;state_interface name=\"velocity\"/&gt;\n&lt;state_interface name=\"effort\"/&gt;\n&lt;/joint&gt;\n&lt;/ros2_control&gt;\n</code></pre> ros2_Control plugin<pre><code>&lt;gazebo&gt;\n&lt;plugin filename=\"libgazebo_ros2_control.so\" name=\"gazebo_ros2_control\"&gt;\n&lt;parameters&gt;$(find simple_joint)/config/position.yaml&lt;/parameters&gt;\n&lt;/plugin&gt;\n&lt;/gazebo&gt;\n</code></pre> position.yaml<pre><code>controller_manager:\nros__parameters:\nupdate_rate: 100  # Hz\n\nposition_controller:\ntype: position_controllers/JointGroupPositionController\n\njoint_state_broadcaster:\ntype: joint_state_broadcaster/JointStateBroadcaster\n\nposition_controller:\nros__parameters:\njoints:\n- camera2base\ninterface_name: position\ncommand_interfaces:\n- position\nstate_interfaces:\n- position\n- velocity\n\njoint_state_broadcaster:\nros__parameters:\njoints:\n- camera2base\n</code></pre>","tags":["ros2","ros2_control"]},{"location":"blog/ROS2/control2/tutorial/position/#usage","title":"usage","text":"load controllers<pre><code># joint_state\nros2 run controller_manager spawner joint_state_broadcaster\n\n# position controller\nros2 run controller_manager spawner position_controller\n</code></pre> topics<pre><code># topics\nros2 topic list\n\n/clock\n/dynamic_joint_states\n/joint_state_broadcaster/transition_event\n/joint_states\n/parameter_events\n/performance_metrics\n/position_controller/commands\n/position_controller/transition_event\n/robot_description\n/rosout\n/tf\n/tf_static\n</code></pre>","tags":["ros2","ros2_control"]},{"location":"blog/ROS2/control2/tutorial/position/#position-command","title":"position command","text":"pub position command<pre><code>ros2 topic pub --once \\\n/position_controller/commands \\\nstd_msgs/msg/Float64MultiArray \"{data: [1.575]}\"\n</code></pre>","tags":["ros2","ros2_control"]},{"location":"blog/ROS2/control2/tutorial/position/#state","title":"state","text":"<pre><code>ros2 topic echo /dynamic_joint_states\n# \n---\nheader:\n  stamp:\n    sec: 108\nnanosec: 430000000\nframe_id: ''\njoint_names:\n- camera2base\ninterface_values:\n- interface_names:\n  - position\n  - velocity\n  - effort\n  values:\n  - 1.5750000000000002\n  - -2.7191856406436335e-23\n  - 0.0\n---\n</code></pre>","tags":["ros2","ros2_control"]},{"location":"blog/ROS2/control2/tutorial/velocity/","title":"Control joint using velocity command","text":"","tags":["ros2","ros2_control","velocity"]},{"location":"blog/ROS2/control2/tutorial/velocity/#urdf","title":"urdf","text":"load controller from urdf<pre><code>&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n&lt;hardware&gt;\n&lt;plugin&gt;gazebo_ros2_control/GazeboSystem&lt;/plugin&gt;\n&lt;/hardware&gt;\n&lt;joint name=\"camera2base\"&gt;\n&lt;command_interface name=\"velocity\" /&gt;\n&lt;state_interface name=\"position\" /&gt;\n&lt;state_interface name=\"velocity\" /&gt;\n&lt;state_interface name=\"effort\" /&gt;\n&lt;/joint&gt;\n&lt;/ros2_control&gt;\n\n&lt;gazebo&gt;\n&lt;plugin filename=\"libgazebo_ros2_control.so\" name=\"gazebo_ros2_control\"&gt;\n&lt;parameters&gt;$(find gazebo_tutorial_pkg)/config/velocity.yaml&lt;/parameters&gt;\n&lt;/plugin&gt;\n&lt;/gazebo&gt;\n</code></pre> load ros2_control plugin<pre><code>&lt;gazebo&gt;\n&lt;plugin filename=\"libgazebo_ros2_control.so\" name=\"gazebo_ros2_control\"&gt;\n&lt;parameters&gt;$(find simple_joint)/config/velocity.yaml&lt;/parameters&gt;\n&lt;/plugin&gt;\n&lt;/gazebo&gt;\n</code></pre>","tags":["ros2","ros2_control","velocity"]},{"location":"blog/ROS2/control2/tutorial/velocity/#config","title":"config","text":"velocity.yaml<pre><code>controller_manager:\nros__parameters:\nupdate_rate: 100  # Hz\n\njoint_velocity_controller:\ntype: velocity_controllers/JointGroupVelocityController\n\njoint_state_broadcaster:\ntype: joint_state_broadcaster/JointStateBroadcaster\n\njoint_velocity_controller:\nros__parameters:\njoints:\n- camera2base\ninterface_name: velocity\ncommand_interfaces:\n- velocity\nstate_interfaces:\n- position\n- velocity\n\njoint_state_broadcaster:\nros__parameters:\njoints:\n- camera2base\n</code></pre>","tags":["ros2","ros2_control","velocity"]},{"location":"blog/ROS2/control2/tutorial/velocity/#usage","title":"usage","text":"load controllers<pre><code># joint_state\nros2 run controller_manager spawner joint_state_broadcaster\n\n# velocity controller\nros2 run controller_manager spawner velocity_controller\n</code></pre> <p>OR </p> load_controller.launch.py<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\ndef generate_launch_description():\nld = LaunchDescription()\nros2_state_spawner = Node(\npackage='controller_manager',\nexecutable='spawner',\narguments=['joint_state_broadcaster'],\noutput='screen'\n)\nros2_controller_spawner = Node(\npackage='controller_manager',\nexecutable='spawner',\narguments=['joint_effort_controller'],\noutput='screen'\n)\nld.add_action(ros2_state_spawner)\nld.add_action(ros2_controller_spawner)\nreturn ld\n</code></pre>","tags":["ros2","ros2_control","velocity"]},{"location":"blog/ROS2/control2/tutorial/velocity/#titles-as-cli","title":"titles as cli","text":"topics<pre><code>...\n/clock\n/dynamic_joint_states\n/joint_state_broadcaster/transition_event\n/joint_states\n/joint_velocity_controller/commands\n/joint_velocity_controller/transition_event\n/parameter_events\n</code></pre>","tags":["ros2","ros2_control","velocity"]},{"location":"blog/ROS2/control2/tutorial/velocity/#velocity-command","title":"velocity command","text":"pub velocity command<pre><code>ros2 topic pub --once \\\n/joint_velocity_controller/commands \\\nstd_msgs/msg/Float64MultiArray \"{data: [0.707]}\"\n</code></pre> <pre><code>ros2 topic echo /dynamic_joint_states\n#\n---\nheader:\n  stamp:\n    sec: 305\nnanosec: 327000000\nframe_id: ''\njoint_names:\n- camera2base\ninterface_values:\n- interface_names:\n  - position\n  - velocity\n  - effort\n  values:\n  - 187.45397219177687\n  - 0.707\n  - 0.0\n---\n</code></pre>","tags":["ros2","ros2_control","velocity"]},{"location":"blog/ROS2/cpp/","title":"ROS2 CPP,","text":"<ul> <li> <p>tutorials</p> </li> <li> <p>debug ros2 node</p> </li> </ul>","tags":["ros2","cpp"]},{"location":"blog/ROS2/cpp/#post-to-read","title":"post to read","text":"<ul> <li>How to create a ROS2 library</li> </ul>","tags":["ros2","cpp"]},{"location":"blog/ROS2/cpp/debug_with_gdb/","title":"Debug ROS2 Node with GDB","text":"<p>Debug ROS2 cpp node with gdb and gdbserver and vscode</p>","tags":["gdb","debug","ros2","cpp"]},{"location":"blog/ROS2/cpp/debug_with_gdb/#build","title":"build","text":"<pre><code># set debug flag in CMake file\nset(CMAKE_BUILD_TYPE Debug)\n#  \nset(CMAKE_BUILD_TYPE RelWithDebInfo)\n\n# or from cli\n\ncolcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo\n</code></pre>","tags":["gdb","debug","ros2","cpp"]},{"location":"blog/ROS2/cpp/debug_with_gdb/#run","title":"Run","text":"<pre><code>ros2 run --prefix 'gdb --args' package_name executable_name\n\n# example\nros2 run --prefix 'gdb --args' cpp_demo_pkg oop_node_simple\n</code></pre>","tags":["gdb","debug","ros2","cpp"]},{"location":"blog/ROS2/cpp/debug_with_gdb/#gdb-command","title":"gdb command","text":"<pre><code>layout next\nl\nb main\n</code></pre>","tags":["gdb","debug","ros2","cpp"]},{"location":"blog/ROS2/cpp/debug_with_gdb/#vscode","title":"VSCode","text":"<p>set VSCode and gdb as debug server</p> <pre><code>ros2 run --prefix 'gdbserver localhost:3000' package_name executable_name\n\n# example\nros2 run --prefix 'gdbserver localhost:3000' cpp_demo_pkg oop_node_simple\n</code></pre>","tags":["gdb","debug","ros2","cpp"]},{"location":"blog/ROS2/cpp/debug_with_gdb/#vscode-config","title":"vscode config","text":"launch.json<pre><code>{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"name\": \"C++ Debugger\",\n\"request\": \"launch\",\n\"type\": \"cppdbg\",\n\"miDebuggerServerAddress\": \"localhost:3000\",\n\"cwd\": \"/\",\n\"program\": \"[build-path-executable]\"\n}\n]\n}\n</code></pre>","tags":["gdb","debug","ros2","cpp"]},{"location":"blog/ROS2/cpp/debug_with_gdb/#reference","title":"Reference","text":"<ul> <li>How can I run ROS2 nodes in a debugger</li> </ul>","tags":["gdb","debug","ros2","cpp"]},{"location":"blog/ROS2/cpp/qos/","title":"ROS2 QoS","text":"<p>ROS 2 offers a rich variety of Quality of Service (QoS) policies that allow you to tune communication between nodes.</p> <p>A set of QoS \u201cpolicies\u201d combine to form a QoS \u201cprofile\u201d. profile can be choose for given scenario (Sensor data for example)</p>","tags":["qos"]},{"location":"blog/ROS2/cpp/gtest/hello_gtest/","title":"LAB","text":"<ul> <li>Create GTest for ROS2 package</li> <li>Create ROS2 package as Library</li> </ul>","tags":["gtest","ros2"]},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#project","title":"Project","text":"<pre><code>my_cpp_library/\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 include\n\u2502   \u2514\u2500\u2500 my_cpp_library\n\u2502       \u2514\u2500\u2500 library_header.h\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 main.cpp\n\u2502   \u2514\u2500\u2500 my_cpp_library.cpp\n\u2514\u2500\u2500 test\n\u251c\u2500\u2500 CMakeLists.txt\n    \u251c\u2500\u2500 demo_test.cpp\n    \u2514\u2500\u2500 main.cpp\n</code></pre>","tags":["gtest","ros2"]},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#library","title":"Library","text":"","tags":["gtest","ros2"]},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#include-folder","title":"include folder","text":"my_cpp_library/include/my_cpp_library/library_header.h<pre><code>#pragma once\n\nnamespace demo{\nint add(int a, int b);\n}\n</code></pre>","tags":["gtest","ros2"]},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#src-folder","title":"src folder","text":"my_cpp_library/src/my_cpp_library.cpp<pre><code>#include \"library_header.h\"\n\nnamespace demo{\nint add(int a, int b){\nreturn a+b;\n}\n}\n</code></pre> my_cpp_library/src/main.cpp<pre><code>#include &lt;iostream&gt;\n#include \"library_header.h\"\n\nint main()\n{\nstd::cout &lt;&lt; demo::add(1, 2) &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre>","tags":["gtest","ros2"]},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#test-folder","title":"test folder","text":"my_cpp_library/test/main.cpp<pre><code>#include \"gtest/gtest.h\"\n\nint main(int argc, char **argv) {\n::testing::InitGoogleTest(&amp;argc, argv);\nreturn RUN_ALL_TESTS();\n}\n</code></pre> demo_test.cpp<pre><code>#include \"gtest/gtest.h\"\n#include \"library_header.h\"\n\nTEST(MyFirstTestSuite, DemoTest)\n{\nEXPECT_TRUE(true);\n}\n\nTEST(MyFirstTestSuite, AddTest)\n{\nauto result = demo::add(1, 2);\nEXPECT_TRUE(result == 3);\n}\n</code></pre> test/CMakeLists.txt<pre><code>if(BUILD_TESTING)\nfind_package(ament_cmake_gtest REQUIRED)\n\nset(TESTFILES\nmain.cpp\ndemo_test.cpp\n)\n# Add gtest executables\nament_add_gtest(${PROJECT_NAME}_test ${TESTFILES})\ntarget_link_libraries(${PROJECT_NAME}_test my_lib)\n\ninstall(TARGETS\n${PROJECT_NAME}_test\nDESTINATION lib/${PROJECT_NAME})\nendif()\n</code></pre>","tags":["gtest","ros2"]},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#package","title":"package","text":"CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(my_cpp_library)\n\nset(CMAKE_CXX_STANDARD 17)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\nadd_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\n\ninclude_directories(include/my_cpp_library)\n\n# Create library\nadd_library(my_lib src/my_cpp_library.cpp)\n# main\nadd_executable(main src/main.cpp)\ntarget_link_libraries(main my_lib)\n\ninstall(TARGETS main\nDESTINATION lib/${PROJECT_NAME}/\n)\n\ninstall(\nTARGETS my_lib\nEXPORT my_lib\nLIBRARY DESTINATION lib\nARCHIVE DESTINATION lib\nRUNTIME DESTINATION bin\nINCLUDES DESTINATION include\n)\n\nadd_subdirectory(test)\n\nament_package()\n</code></pre>","tags":["gtest","ros2"]},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#usage","title":"usage","text":"<ul> <li>build </li> <li>test</li> <li>test-result</li> </ul>","tags":["gtest","ros2"]},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#build","title":"build","text":"<pre><code>colcon build --package-select my_cpp_library\n</code></pre>","tags":["gtest","ros2"]},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#test","title":"test","text":"<pre><code># Run test\ncolcon test --packages-select my_cpp_library\n\n# Run test with verbose output\ncolcon test --packages-select my_cpp_library --event-handler=console_direct+\n</code></pre>","tags":["gtest","ros2"]},{"location":"blog/ROS2/cpp/gtest/hello_gtest/#test-result","title":"test-result","text":"<p>Show only result summery</p> <pre><code>colcon test-result --test-result-base build/my_cpp_library\n</code></pre>","tags":["gtest","ros2"]},{"location":"blog/ROS2/cpp/intra-process/","title":"Reference","text":"<ul> <li>Setting up efficient intra-process communication</li> <li>intra process demos source code</li> </ul>","tags":["tag"]},{"location":"blog/ROS2/cpp/plugins/","title":"Reference","text":"<p>-Creating and using plugins (C++) - Package Summary</p>","tags":["ros2","plugins","cpp"]},{"location":"blog/ROS2/cpp/tutorial/","title":"ROS2 CPP Tutorial","text":"","tags":["ros2","cpp"]},{"location":"blog/ROS2/cpp/tutorial/#tutorials","title":"Tutorials","text":"<ul> <li>minimal: basic node </li> </ul>","tags":["ros2","cpp"]},{"location":"blog/ROS2/cpp/tutorial/custom_msg/","title":"LAB","text":"<ul> <li>Create and use custom msg</li> </ul>","tags":["msg"]},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#custom-msg-package","title":"Custom msg package","text":"create pkg<pre><code>ros2 pkg create custom_interfaces --build-type ament_cmake \\\n--dependencies rclcpp\n</code></pre> msg folder<pre><code># create msg folder\nmkdir msg </code></pre> msg file<pre><code># create txt file name Age.msg\n# more types \nfloat32 age\n</code></pre>","tags":["msg"]},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#cmake","title":"cmake","text":"<ul> <li>Add <code>rosidl_default_generators</code> package</li> <li>add <code>rosidl_generate_interfaces</code> macro</li> </ul> <pre><code>find_package(rosidl_default_generators REQUIRED)\n\nrosidl_generate_interfaces(${PROJECT_NAME}\n\"msg/Age.msg\"\n)\n</code></pre>","tags":["msg"]},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#packagexml","title":"package.xml","text":"<ul> <li>Add the following lines to the package.xml file.</li> </ul> <pre><code>&lt;build_depend&gt;rosidl_default_generators&lt;/build_depend&gt;\n\n&lt;exec_depend&gt;rosidl_default_runtime&lt;/exec_depend&gt;\n\n&lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt;\n</code></pre>","tags":["msg"]},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#usage","title":"usage","text":"<ul> <li>Create publisher to pub the new msg</li> </ul>","tags":["msg"]},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#cmake_1","title":"cmake","text":"<pre><code>find_package(custom_interfaces REQUIRED) # This is the package that contains the custom interface\n\nadd_executable(age_publisher_node src/publish_age.cpp)\nament_target_dependencies(age_publisher_node rclcpp custom_interfaces) install(TARGETS\nage_publisher_node\nDESTINATION lib/${PROJECT_NAME}\n)\n</code></pre>","tags":["msg"]},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#packagexml_1","title":"package.xml","text":"<ul> <li>Add depend for our new package</li> </ul> <pre><code>&lt;depend&gt;custom_interfaces&lt;/depend&gt;\n</code></pre>","tags":["msg"]},{"location":"blog/ROS2/cpp/tutorial/custom_msg/#reference","title":"Reference","text":"<ul> <li>About ROS 2 interfaces</li> </ul>","tags":["msg"]},{"location":"blog/ROS2/cpp/tutorial/minimal/","title":"Minimal ROS2 Node","text":"","tags":["cpp","node"]},{"location":"blog/ROS2/cpp/tutorial/minimal/#create-package","title":"Create package","text":"<pre><code>ros2 pkg create &lt;package_name&gt; --build-type ament_cmake --dependencies &lt;package_dependencies&gt;\n</code></pre>","tags":["cpp","node"]},{"location":"blog/ROS2/cpp/tutorial/minimal/#minimal-node","title":"Minimal Node","text":"minimal.cpp<pre><code>#include \"rclcpp/rclcpp.hpp\"\n\nclass Minimal : rclcpp::Node\n{\npublic:\nMinimal():Node(\"Minimal\")\n{\nRCLCPP_INFO(this-&gt;get_logger(), \"hello minimal node\");\n}\n};\n\nint main(int argc, char **argv)\n{\nrclcpp::init(argc, argv);\nauto node = std::make_shared&lt;Minimal&gt;();\nrclcpp::shutdown();\nreturn 0;\n}\n</code></pre> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(cpp_tutorial)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\nadd_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(rclcpp REQUIRED)\nfind_package(fmt REQUIRED)\n\nadd_executable(minimal src/minimal.cpp)\nament_target_dependencies(minimal rclcpp fmt:fmt)\n\ninstall(TARGETS\nminimal\nDESTINATION lib/${PROJECT_NAME})\n\nament_package()\n</code></pre> <p>copy/install binaries</p> <p><code>install(TARGETS   &lt;binary name/target&gt; DESTINATION lib/${PROJECT_NAME} )</code></p> <p>copy/install folders</p> <p><code>install(DIRECTORY   launch DESTINATION share/${PROJECT_NAME} )</code></p>","tags":["cpp","node"]},{"location":"blog/ROS2/cpp/tutorial/minimal/#build","title":"build","text":"<pre><code># from WS root folder\ncolcon build --package-select &lt;package name&gt;\n</code></pre>","tags":["cpp","node"]},{"location":"blog/ROS2/cpp/tutorial/minimal/#usage","title":"usage","text":"<pre><code>source install/setup.bash\nros2 run cpp_tutorial minimal\n</code></pre>","tags":["cpp","node"]},{"location":"blog/ROS2/cpp/tutorial/minimal/#logging","title":"logging","text":"<p>Write log to file</p> <p>Write log file to file ROS2 Demo</p> <pre><code>mkdir /tmp/ros_log\nexport ROS_LOG_DIR=/tmp/ros_log\nros2 run cpp_tutorial minimal\n</code></pre>","tags":["cpp","node"]},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/","title":"zero copy shm fastdds","text":"<pre><code>ros2_shm_demo/\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 msg\n\u2502   \u2514\u2500\u2500 ShmTopic.msg\n\u251c\u2500\u2500 package.xml\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 listener.cpp\n    \u2514\u2500\u2500 talker.cpp\n</code></pre>","tags":["zero-copy","shm","fastdds"]},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#msg","title":"msg","text":"ShmTopic.msg<pre><code># A generic char array allows passing arbitrary data.\n#\nchar[256] data\nuint8 size\nuint64 counter\n\nuint8 MAX_SIZE=255\n</code></pre>","tags":["zero-copy","shm","fastdds"]},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#src","title":"src","text":"","tags":["zero-copy","shm","fastdds"]},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#talker","title":"talker","text":"talker.cpp<pre><code>#include &lt;chrono&gt;\n#include &lt;cstring&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;utility&gt;\n\n#include \"rclcpp/rclcpp.hpp\"\n\n#include \"ros2_shm_demo/msg/shm_topic.hpp\"\n\nusing namespace std::chrono_literals;\n\nclass Talker : public rclcpp::Node {\nprivate:\nusing Topic = ros2_shm_demo::msg::ShmTopic;\n\npublic:\nexplicit Talker(const rclcpp::NodeOptions &amp;options)\n: Node(\"shm_demo_talker\", options) {\n\nauto publishMessage = [this]() -&gt; void {\nauto loanedMsg = m_publisher-&gt;borrow_loaned_message();\n\npopulateLoanedMessage(loanedMsg);\n\nm_publisher-&gt;publish(std::move(loanedMsg));\nm_count++;\n};\n\nrclcpp::QoS qos(rclcpp::KeepLast(10));\nm_publisher = this-&gt;create_publisher&lt;Topic&gt;(\"chatter\", qos);\nm_timer = this-&gt;create_wall_timer(1s, publishMessage);\n}\n\nprivate:\nuint64_t m_count = 1;\nrclcpp::Publisher&lt;Topic&gt;::SharedPtr m_publisher;\nrclcpp::TimerBase::SharedPtr m_timer;\n\nvoid populateLoanedMessage(rclcpp::LoanedMessage&lt;Topic&gt; &amp;loanedMsg) {\nTopic &amp;msg = loanedMsg.get();\n\n// Create the data.\n// In general this will not be constant.\n// Ideally we would create it in place but the ROS API does not allow\n// that. Therefore we need to copy it to the loaned message.\n\nstd::string payload{\"Hello World\"};\n\n// We can track a quasi dynamic (bounded) size like this to avoid\n// copying more data than needed.\nmsg.size = (uint8_t)std::min(payload.size(), (size_t)Topic::MAX_SIZE);\nmsg.counter = m_count;\n\n// Note that msg.data is a std::array generated by the IDL compiler\nstd::memcpy(msg.data.data(), payload.data(), msg.size);\n\nRCLCPP_INFO(this-&gt;get_logger(), \"Publishing %s %lu\", payload.c_str(),\nmsg.counter);\n}\n};\n\nint main(int argc, char *argv[]) {\nrclcpp::init(argc, argv);\nrclcpp::NodeOptions options;\nrclcpp::spin(std::make_shared&lt;Talker&gt;(options));\nrclcpp::shutdown();\n\nreturn 0;\n}\n</code></pre>","tags":["zero-copy","shm","fastdds"]},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#listener","title":"listener","text":"listener.cpp<pre><code>#include &lt;cstring&gt;\n#include &lt;memory&gt;\n#include \"rclcpp/rclcpp.hpp\"\n#include \"ros2_shm_demo/msg/shm_topic.hpp\"\n\nclass Listener : public rclcpp::Node {\nprivate:\nusing Topic = ros2_shm_demo::msg::ShmTopic;\n\npublic:\nexplicit Listener(const rclcpp::NodeOptions &amp;options)\n: Node(\"shm_demo_listener\", options) {\n\n// subscription callback to process arriving data\nauto callback = [this](const Topic::SharedPtr msg) -&gt; void {\n// Read the message and perform operations accordingly.\n// Here we copy the data and display it.\n\nstd::memcpy(m_lastData, msg-&gt;data.data(), msg-&gt;size);\nm_lastData[Topic::MAX_SIZE] =\n'\\0'; // in case there was no zero termination\n\nRCLCPP_INFO(this-&gt;get_logger(), \"Received %s %lu\", m_lastData,\nmsg-&gt;counter);\n};\n\nrclcpp::QoS qos(rclcpp::KeepLast(10));\nm_subscription = create_subscription&lt;Topic&gt;(\"chatter\", qos, callback);\n}\n\nprivate:\nrclcpp::Subscription&lt;Topic&gt;::SharedPtr m_subscription;\n\nchar m_lastData[256];\n};\n\nint main(int argc, char *argv[]) {\nrclcpp::init(argc, argv);\nrclcpp::NodeOptions options;\nrclcpp::spin(std::make_shared&lt;Listener&gt;(options));\nrclcpp::shutdown();\n\nreturn 0;\n}\n</code></pre>","tags":["zero-copy","shm","fastdds"]},{"location":"blog/ROS2/cpp/zero-copy/zero_copy_shm_fastdds/#cmakelists","title":"CMakeLists","text":"<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(ros2_shm_demo)\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(rosidl_default_generators REQUIRED)\nfind_package(rclcpp REQUIRED)\n\ninclude_directories(include)\n#msg\nset(msg_files\n\"msg/ShmTopic.msg\"\n)\n\nrosidl_generate_interfaces(${PROJECT_NAME}\n${msg_files}\n)\nament_export_dependencies(rosidl_default_runtime)\n\n# talker\nadd_executable(talker\nsrc/talker.cpp\n)\nament_target_dependencies(talker\n\"rclcpp\"\n)\nrosidl_get_typesupport_target(cpp_typesupport_target \"${PROJECT_NAME}\" \"rosidl_typesupport_cpp\")\ntarget_link_libraries(talker\n${cpp_typesupport_target}\n)\ninstall(TARGETS talker DESTINATION lib/${PROJECT_NAME})\n\n# listener\nadd_executable(listener\nsrc/listener.cpp\n)\n\nament_target_dependencies(listener\n\"rclcpp\"\n)\nrosidl_get_typesupport_target(cpp_typesupport_target \"${PROJECT_NAME}\" \"rosidl_typesupport_cpp\")\ntarget_link_libraries(listener\n${cpp_typesupport_target}\n)\ninstall(TARGETS listener DESTINATION lib/${PROJECT_NAME})\n\nendif()\n\nament_package()\n</code></pre>","tags":["zero-copy","shm","fastdds"]},{"location":"blog/ROS2/demos/","title":"Demos","text":"<ul> <li>Mix Cpp and Python in same pkg</li> </ul>","tags":["ros2"]},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/","title":"Objective","text":"<ul> <li>Create pkg with python and cpp code</li> </ul>","tags":["ros2"]},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#project","title":"Project","text":"<ul> <li>Create new pkg <code>cmake_ament</code></li> <li>Add python <code>src</code> folder name like the package name</li> <li>Add <code>__init__.py</code> file to mark this folder as a python package</li> </ul> <pre><code>mix_pkg\n\u2502\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 mix_pkg\n\u251c\u2500\u2500 mix_pkg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 simple_sub.py\n\u251c\u2500\u2500 package.xml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 simple_pub.cpp\n</code></pre>","tags":["ros2"]},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#cmake","title":"CMake","text":"<p>The pkg is a standard <code>cmake</code> pkg with python support</p> <ul> <li>Add <code>ament_cmake_python</code> package to use</li> <li>Use <code>ament_python_install_package</code> macro from this pkg to install the python files</li> <li>Copy the python scripts to <code>pkg</code> `install&lt;project_name&gt;lib folder</li> </ul> <pre><code>cmake_minimum_required(VERSION 3.8)\nproject(mix_pkg)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\nadd_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\nfind_package(ament_cmake REQUIRED)\nfind_package(ament_cmake_python REQUIRED)\nfind_package(rclcpp REQUIRED)\nfind_package(rclpy REQUIRED)\nfind_package(std_msgs REQUIRED)\n\nadd_executable(simple_pub src/simple_pub.cpp)\nament_target_dependencies(simple_pub rclcpp std_msgs)\n\n# Install Cpp executables\ninstall(TARGETS\nsimple_pub\nDESTINATION lib/${PROJECT_NAME}\n)\n\n# Install Python modules\nament_python_install_package(${PROJECT_NAME})\n\n# Install Python executables\ninstall(PROGRAMS\nmix_pkg/simple_sub.py\nDESTINATION lib/${PROJECT_NAME}\n)\n\nament_package()\n</code></pre>","tags":["ros2"]},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#packagexml","title":"package.xml","text":"<ul> <li>Add build and other dependencies</li> </ul> <pre><code>&lt;buildtool_depend&gt;ament_cmake&lt;/buildtool_depend&gt;\n&lt;buildtool_depend&gt;ament_cmake_python&lt;/buildtool_depend&gt;\n\n&lt;depend&gt;rclcpp&lt;/depend&gt;\n&lt;depend&gt;rclpy&lt;/depend&gt;\n</code></pre>","tags":["ros2"]},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#code","title":"code","text":"mix_pkg/simple_sub.py<pre><code>#!/usr/bin/env python3\n\nimport rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\n\n\nclass SimpleSub(Node):\n    def __init__(self):\n        super().__init__(\"simple_sub_py\")\n        self.subscription = self.create_subscription(\n            String, \"topic\", self.listener_callback, 10\n        )\n        self.subscription\n\n    def listener_callback(self, msg):\n        self.get_logger().info('I heard: \"%s\"' % msg.data)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = SimpleSub()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> src/simple_pub.cpp<pre><code>#include &lt;chrono&gt;\n#include &lt;functional&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/string.hpp\"\n\nusing namespace std::chrono_literals;\n\nclass SimplePublisher : public rclcpp::Node\n{\npublic:\nSimplePublisher() : Node(\"simple_cpp_pub\"), count_(0)\n{\npublisher_ = this-&gt;create_publisher&lt;std_msgs::msg::String&gt;(\"topic\", 10);\ntimer_ = this-&gt;create_wall_timer(\n500ms, std::bind(&amp;SimplePublisher::timer_callback, this));\n}\n\nprivate:\nvoid timer_callback()\n{\nauto message = std_msgs::msg::String();\nmessage.data = \"Hello, world! \" + std::to_string(count_++);\nRCLCPP_INFO(this-&gt;get_logger(), \"Publishing: '%s'\", message.data.c_str());\npublisher_-&gt;publish(message);\n}\n\nprivate:\nrclcpp::TimerBase::SharedPtr timer_;\nrclcpp::Publisher&lt;std_msgs::msg::String&gt;::SharedPtr publisher_;\nsize_t count_;\n};\n\nint main(int argc, char *argv[])\n{\nrclcpp::init(argc, argv);\nrclcpp::spin(std::make_shared&lt;SimplePublisher&gt;());\nrclcpp::shutdown();\nreturn 0;\n}\n</code></pre>","tags":["ros2"]},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#build-and-usage","title":"Build and usage","text":"<p>Warning</p> <p>cmake_python_ament set the Python permission script under install/lib/ If we build the package with   <code>--symlink-install</code> no permission has set","tags":["ros2"]},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#usage","title":"usage","text":"terminal 1<pre><code>ros2 run mix_pkg simple_pub\n</code></pre> terminal 2<pre><code>ros2 run mix_pkg simple_sub.py\n</code></pre> <p>Note</p> <p>Run the python node with the <code>py</code> extension</p>","tags":["ros2"]},{"location":"blog/ROS2/demos/mix_pkg_cpp_py/#reference","title":"Reference","text":"<ul> <li>ament_cmake_python</li> </ul>","tags":["ros2"]},{"location":"blog/ROS2/demos/articubot_one/","title":"Resource","text":"<ul> <li>articulatedrobotics</li> </ul>","tags":["tutorial"]},{"location":"blog/ROS2/demos/bug0/","title":"BUG0 Algorithm","text":"<p>The Bug0 Algorithm is an autonomous navigation algorithm that uses only the sensor\u2019s data without any map. The algorithm has basically two different behaviors:</p> <ul> <li>Behavior 1: Head to goal</li> <li>Behavior 2: Follow the obstacle</li> </ul> <p></p>","tags":["ros2","algorithm"]},{"location":"blog/ROS2/demos/bug0/#behavior-1","title":"Behavior 1","text":"","tags":["ros2","algorithm"]},{"location":"blog/ROS2/demos/bug0/#reference","title":"Reference","text":"<ul> <li>BUG Algorithm Application</li> </ul>","tags":["ros2","algorithm"]},{"location":"blog/ROS2/demos/camera_calibration/","title":"ROS2 camera calibration","text":"","tags":["calibration"]},{"location":"blog/ROS2/demos/camera_calibration/#dependencies","title":"Dependencies","text":"<pre><code>sudo apt install ros-humble-usb-cam\n\ncamera_calibration pkg from image-pipeline repository\n</code></pre>","tags":["calibration"]},{"location":"blog/ROS2/demos/camera_calibration/#checkerboard","title":"Checkerboard","text":"<ul> <li>9*6 Checkerboard</li> <li>Count 9 (brown)</li> <li>Count 6 (blue)</li> </ul>","tags":["calibration"]},{"location":"blog/ROS2/demos/camera_calibration/#calibrate","title":"calibrate","text":"<ul> <li>Run video source</li> <li>Run calibration Node</li> </ul> usb camera<pre><code>ros2 run usb_cam usb_cam_node_exe --ros-args \\\n-p video_device:=/dev/video4 \\\n-p image_width:=800 \\\n-p image_height:=600\n</code></pre> <pre><code>bash title=\"calibration node\"\nrun camera_calibration cameracalibrator \\\n--size 8x6 \\\n--square 0.03 \\\n--ros-args -r image:=image_raw\n</code></pre> <p>save data to <code>/tmp/calibrationdata.tar.gz</code></p>","tags":["calibration"]},{"location":"blog/ROS2/demos/camera_calibration/#resource","title":"Resource","text":"<ul> <li>checkerboard-collection</li> <li>calibration tutorial</li> </ul>","tags":["calibration"]},{"location":"blog/ROS2/demos/diff_drive/","title":"Reference","text":"<ul> <li>Igt One</li> <li>move from here c++ and python pkg</li> <li>dolly</li> <li>ardupilot</li> </ul>","tags":["diff"]},{"location":"blog/ROS2/demos/pid/","title":"Reference","text":"<ul> <li>rocketbot</li> </ul>","tags":["ros2","pid"]},{"location":"blog/ROS2/dev_environment/","title":"ROS2 developer environment settings","text":"<p>linters</p>","tags":["ros2","dev"]},{"location":"blog/ROS2/dev_environment/#from-code-to-package-deploy","title":"From code to package deploy","text":"","tags":["ros2","dev"]},{"location":"blog/ROS2/dev_environment/#--from-code-to-package-deploy","title":"- From code to package deploy","text":"","tags":["ros2","dev"]},{"location":"blog/ROS2/dev_environment/#reference","title":"Reference","text":"<ul> <li>Autoware.Auto guides</li> <li>Code style and language versions</li> <li>From code to package deploy</li> </ul>","tags":["ros2","dev"]},{"location":"blog/ROS2/dev_environment/colcon/","title":"Colcon build system","text":"<p>colcon is a command line tool to improve the workflow of building, testing and using multiple software packages. It automates the process, handles the ordering and sets up the environment to use the packages.</p>","tags":["ros2","colcon"]},{"location":"blog/ROS2/dev_environment/colcon/#build-tools","title":"Build tools","text":"<p>Build tools are programs that automate the creation of executable applications from source code - Compiling - Linking - Packaging</p>","tags":["ros2","colcon"]},{"location":"blog/ROS2/dev_environment/colcon/#build-system","title":"Build system","text":"<ul> <li>Repeatable: ensure that that the project is built exactly the same way every time it builds</li> <li>Reproducible: easily recreate (reproduce) the steps that are required to perform a build</li> <li>Standard ensure that all of your projects follow the same steps and implement best practices</li> </ul> <p>Note</p> <ul> <li>Make</li> <li>Ninja</li> </ul>","tags":["ros2","colcon"]},{"location":"blog/ROS2/dev_environment/colcon/#generator","title":"Generator","text":"<ul> <li>CMake: create build system for specific O.S or system</li> </ul>","tags":["ros2","colcon"]},{"location":"blog/ROS2/dev_environment/colcon/#meta-build","title":"Meta build","text":"","tags":["ros2","colcon"]},{"location":"blog/ROS2/dev_environment/colcon/#install","title":"Install","text":"<pre><code>sudo apt install python3-colcon-common-extensions\n</code></pre>","tags":["ros2","colcon"]},{"location":"blog/ROS2/dev_environment/colcon/#usage","title":"Usage","text":"<p>In the root of the workspace run <code>colcon build</code></p>","tags":["ros2","colcon"]},{"location":"blog/ROS2/dev_environment/colcon/#extension","title":"extension","text":"","tags":["ros2","colcon"]},{"location":"blog/ROS2/dev_environment/colcon/#clean","title":"clean","text":"install<pre><code>sudo apt install python3-colcon-clean </code></pre> clean workspace<pre><code>colcon clean workspace\n</code></pre>","tags":["ros2","colcon"]},{"location":"blog/ROS2/dev_environment/colcon/#references","title":"References","text":"<ul> <li>ROS2 foxy Using colcon to build packages\uf0c1</li> </ul>","tags":["ros2","colcon"]},{"location":"blog/ROS2/dev_environment/colcon/colcon_cd/","title":"Colcon_cd","text":"<p>A shell function for colcon-core to change the current working directory</p> <p>Note</p> <p><code>colcon_cd</code> search pkg from current directory tree</p>","tags":["ros2","colcon_cd"]},{"location":"blog/ROS2/dev_environment/colcon/colcon_cd/#install-and-setup","title":"install and setup","text":"apt<pre><code>sudo apt install python3-colcon-common-extensions\n</code></pre> setup<pre><code>Add `colcon_cd` to `.bashrc`\n# debian install\necho 'source /usr/share/colcon_cd/function/colcon_cd.sh' &gt;&gt; ~/.bashrc\n</code></pre>","tags":["ros2","colcon_cd"]},{"location":"blog/ROS2/dev_environment/docker/","title":"Docker image","text":"<p>Docker file base on Allison Thackston  work</p>","tags":["ros2","docker"]},{"location":"blog/ROS2/dev_environment/docker/#objective","title":"Objective","text":"<ul> <li>Create ROS2 humble docker image</li> <li>Run image and share simple workspace with simple pkg that contain minimal pub sub<ul> <li>Run from cli</li> <li>Run with docker-compose</li> </ul> </li> </ul>","tags":["ros2","docker"]},{"location":"blog/ROS2/dev_environment/docker/#usage","title":"Usage","text":"<ul> <li>Run docker from cli</li> </ul> <p>shm</p> <p>Share <code>/dev/shm</code> between host and container</p>","tags":["ros2","docker"]},{"location":"blog/ROS2/dev_environment/docker/#cli","title":"cli","text":"run command<pre><code>docker run --rm -it \\\n-e DISPLAY=$DISPLAY \\ \\\n--user user \\\n--workdir /home/user \\\n--hostname dev \\\n--net host \\\n--volume /tmp/.X11-unix:/tmp/.X11-unix:rw \\\n--volume /home/user/ros2_ws:/home/user/ros2_ws \\\n--volume /dev/shm:/dev/shm \\\nhumble:dev \\\nbash\n</code></pre>","tags":["ros2","docker"]},{"location":"blog/ROS2/dev_environment/docker/#docker-compose","title":"docker-compose","text":"<pre><code>version: \"3.0\"\nservices:\n  pub:\n    image: humble:dev\n    hostname: dev\n    user: user\n    working_dir: /home/user\n    stdin_open: true\n    tty: true \n    environment:\n      - DISPLAY=${DISPLAY}\n    volumes:\n      - /tmp/.X11-unix:/tmp/.X11-unix\n      - /home/user/ros2_ws:/home/user/ros2_ws\n      - /dev/shm:/dev/shm\n    network_mode: host\n</code></pre>","tags":["ros2","docker"]},{"location":"blog/ROS2/dev_environment/docker/rpi_run_docker/","title":"Run Dockerize ROS2 Humble on RPI4","text":"<ul> <li>Install and Run docker on RPI</li> <li>Config devcontainer on local dev</li> <li>Attach / Run to docker container</li> </ul>","tags":["ros2","docker","rpi"]},{"location":"blog/ROS2/dev_environment/docker/rpi_run_docker/#ros2-docker","title":"ros2 docker","text":"<pre><code>docker run -it --rm ros:humble-ros-base /bin/bash\n</code></pre>","tags":["ros2","docker","rpi"]},{"location":"blog/ROS2/dev_environment/docker/rpi_run_docker/#vscode-devcontainer","title":"vscode devcontainer","text":"settings.json<pre><code>{\n\"docker.host\": \"ubuntu@&lt;rpi ip&gt;\"\n}\n</code></pre> devcontainer.json<pre><code>{\n\"name\": \"VS Code Remote docker PI\",\n\n\"context\": \"..\",\n\"dockerFile\": \"../docker/Dockerfile\",\n\n\"settings\": { \"terminal.integrated.shell.linux\": null\n},\n\n\"extensions\": [],\n\n\"workspaceFolder\": \"/pi_ws\",\n\"workspaceMount\": \"source=/home/user/pi_ws/,target=/pi_ws,type=bind,consistency=cached\",\n}\n</code></pre>","tags":["ros2","docker","rpi"]},{"location":"blog/ROS2/dev_environment/docker/rpi_run_docker/#docker-port-2375","title":"docker port 2375","text":"<p>port 2375</p> <pre><code>exec socat -d TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock\n</code></pre> <p>start ssh without systemd</p> <pre><code>/etc/init.d/ssh start\n</code></pre>","tags":["ros2","docker","rpi"]},{"location":"blog/ROS2/dev_environment/docker/rpi_run_docker/#reference","title":"Reference","text":"<ul> <li>Here\u2019s How to Install Docker on Raspberry Pi?  -Enable TCP port 2375 for external connection to Docker</li> </ul>","tags":["ros2","docker","rpi"]},{"location":"blog/ROS2/dev_environment/docker/run_build_arm_docker_containers_x86/","title":"Running and Building ARM Docker Containers on x86","text":"<pre><code>sudo apt-get install \\\nqemu \\\nbinfmt-support\\\nqemu-user-static </code></pre>","tags":["ros2","docker","arm","qemu"]},{"location":"blog/ROS2/dev_environment/docker/run_build_arm_docker_containers_x86/#docker-run---rm---platform-linuxaarch64--t-arm64v8ubuntu-uname--m","title":"<pre><code>docker run --rm \\\n--platform linux/aarch64 \\\n-t arm64v8/ubuntu uname -m \n</code></pre>","text":"","tags":["ros2","docker","arm","qemu"]},{"location":"blog/ROS2/dev_environment/docker/run_build_arm_docker_containers_x86/#reference","title":"Reference","text":"<ul> <li>Running and Building ARM Docker Containers on x86 </li> </ul>","tags":["ros2","docker","arm","qemu"]},{"location":"blog/ROS2/dev_environment/linters/","title":"linters","text":"<p>Lint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs</p>","tags":["ros2","linter"]},{"location":"blog/ROS2/dev_environment/linters/#cpp","title":"cpp","text":"<ul> <li>ament_cmake_clang_format</li> </ul>","tags":["ros2","linter"]},{"location":"blog/ROS2/dev_environment/linters/#python","title":"python","text":"<ul> <li>ament_mypy</li> </ul>","tags":["ros2","linter"]},{"location":"blog/ROS2/dev_environment/linters/cpp/ament_cmake_clang_format/","title":"ament_cmake_clang_format","text":"<p>Checks the code style of C / C++ source files using ClangFormat</p>","tags":["ros2","linter"]},{"location":"blog/ROS2/dev_environment/linters/cpp/ament_cmake_clang_format/#install","title":"install","text":"<pre><code>sudo apt install ros-humble-ament-cmake-clang-format\n</code></pre>","tags":["ros2","linter"]},{"location":"blog/ROS2/dev_environment/linters/cpp/ament_cmake_clang_format/#usage","title":"usage","text":"<ul> <li>CMakeLists settings</li> <li>package.xml</li> <li>cli commands</li> </ul> CMakeLists.txt<pre><code>if(BUILD_TESTING)\nfind_package(ament_lint_auto REQUIRED)\nament_lint_auto_find_test_dependencies()\nendif()\n</code></pre> <p><code>ament_lint_auto_find_test_dependencies</code> function search for linter\u2019s in <code>package.xml</code></p> package.xml<pre><code>&lt;test_depend&gt;ament_lint_auto&lt;/test_depend&gt;\n&lt;test_depend&gt;ament_cmake_clang_format&lt;/test_depend&gt;\n</code></pre> <pre><code># build\ncolcon build --packages-select cpp_tutrial_pkg # run test / linters\ncolcon test --packages-select cpp_tutrial_pkg # show test results\ncolcon test-result\ncolcon test-result --verbose\n# run the linter directly\nament_clang_format src/tutorials/cpp_tutrial_pkg/\n# fix the problem's\nament_clang_format src/tutorials/cpp_tutrial_pkg/ --reformat\n# run colcon test again, no errors\ncolcon test --packages-select cpp_tutrial_pkg # show test results, no errors\ncolcon test-result\n</code></pre> <p>clear test result</p> <p>test_result</p> <pre><code>colcon test-result --delete\n</code></pre>","tags":["ros2","linter"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/","title":"Linting ROS 2 Packages with mypy","text":"<p>linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs.  </p> <p>mypy is an optional static type checker for Python that aims to combine the benefits of dynamic (or \u201cduck\u201d) typing and static typing</p>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#python-hinting","title":"python hinting","text":"<p>Type hints are performed using <code>Python annotation</code>  They are used at add types to variables function arguments and return values, Python hinting has no runtime effect they only use for static analyses with tools like <code>mypy</code> and help ide\u2019s to help us with more information and intellisense</p> <p>Post from Python tutorial: Introduction to Python type hints</p> hinting demo<pre><code>from typing import List\nfrom typing import Union\n\nnumber = Union[int, float]\n\ndef get_list(item: number) -&gt; List[number]:\n    list = [1, 2, item]\n    return list\n\nprint(get_list(1.0))\n</code></pre>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#vscode","title":"VSCode","text":"<p>Config mypy </p> setting.json<pre><code>\"python.linting.mypyEnabled\": true,\n\"python.linting.mypyCategorySeverity.error\":\"Warning\",\n\"python.linting.mypyArgs\": [\n\"--ignore-missing-imports\"\n]\n</code></pre>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#ros2-linting","title":"ROS2 linting","text":"<p>The <code>ament_lint</code> metapackage defines many common linters that can integrate into the build/test pipeline for ROS 2. The package ament_mypy within handles mypy integration</p>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#install","title":"install","text":"<pre><code>sudo apt install ros-humble-ament-cmake-mypy\n</code></pre>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#mypy-demo","title":"mypy demo","text":"<ul> <li>Config package.xml</li> <li>Edit setup.py</li> <li>Add TestCase</li> </ul>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#packagexml","title":"package.xml","text":"<ul> <li>Add entry</li> </ul> <pre><code>&lt;test_depend&gt;ament_mypy&lt;/test_depend&gt;\n</code></pre>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#setuppy","title":"setup.py","text":"<p>Add / Edit line</p> <pre><code>tests_require=['pytest']\n</code></pre>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#testcase","title":"TestCase","text":"test_mypy.py<pre><code>from ament_mypy.main import main\n\nimport pytest\n\n\n@pytest.mark.mypy\n@pytest.mark.linter\ndef test_mypy():\n    rc = main()\n    assert rc == 0, 'Found code style errors / warnings'\n</code></pre>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#run-colcon-test","title":"Run (colcon test)","text":"<pre><code>colcon test --packages-select &lt;YOUR_PACKAGE&gt; --event-handlers console_direct+\n</code></pre>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#mypy-ini","title":"mypy ini","text":"<p>mypy ini read the doc for more settings</p> <p>ROS2 ament mypy</p> <p><code>ini</code> file location at <code>test</code> folder for <code>colcon test</code></p> mypy.ini<pre><code>[mypy]\nignore_missing_imports = True\n</code></pre>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#ignore_missing_imports","title":"ignore_missing_imports","text":"<p>Suppresses error messages about imports that cannot be resolved.</p>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#show_column_numbers","title":"show_column_numbers","text":"<p>Shows column numbers in error messages.</p>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/linters/python/ament_mypy/#reference","title":"Reference","text":"<ul> <li>Linting ROS 2 Packages with mypy</li> </ul>","tags":["linter","ros2","mypy"]},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/","title":"ROS2 Package","text":""},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#from-code-to-deploy","title":"from code to deploy","text":""},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#ros2","title":"ROS2","text":"<p>Robot Operating System (ROS) is an open-source robotics middleware suite. Although ROS is not an operating system (OS) but a set of software frameworks for robot software development (wikipedia)</p>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#ros2_1","title":"ROS2","text":"<ol> <li>How to resolve the robotic problem</li> <li>Why of thinking</li> <li>Think only on your\u2019s.</li> <li>Standard. Standard. Standard. </li> <li>Community</li> </ol>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#ros2-framework","title":"ROS2 Framework","text":"<ol> <li>Nodes / Process</li> <li>Communication (DDS) </li> <li>Tools (rqt, bag, ..)</li> <li>ECO System (diagnostics, logging, allot of packages)</li> <li>Standard. Standard. Standard. </li> </ol>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#verbs","title":"Verbs","text":"<ul> <li>Package</li> <li>Nodes</li> <li>Topics</li> <li>Pub</li> <li>Sub</li> <li>Service</li> <li>Action</li> <li>Parameters</li> <li>Messages</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#code-to-deploy","title":"Code to Deploy","text":""},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#lets-start","title":"let\u2019s start","text":""},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#axe-and-other-tools","title":"AXE and other tools","text":"<p>\u201cGive me six hours to chop down a tree and I will spend the first four sharpening the axe\u201d  (Abraham Lincoln)</p> <ul> <li>Dev environment</li> <li>VSCode</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#package-from-code-to-deploy","title":"Package from code to deploy","text":"<ul> <li>Requirements analysis</li> <li>Design</li> <li>Coding</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#continue-","title":"Continue \u2026","text":"<ul> <li>Code quality</li> <li>Tests</li> <li>Linters</li> <li>Static and Dynamic analyze</li> <li>Source Control</li> <li>Documents</li> <li>Package Version</li> <li>Deploy</li> <li>CI / Maintenance</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#language","title":"Language","text":"<ul> <li>Python (3.10)</li> <li>CPP (C++17)</li> <li>CMAKE</li> <li>XML / yaml / json / schema</li> <li>BASH</li> <li>GIT</li> <li>Network</li> <li>Physics and Simulation</li> <li>Markdown</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#dev-environment","title":"Dev Environment","text":"<ul> <li>GIT</li> <li>VSCode</li> <li>Extensions</li> <li>ROS2</li> <li>Docker</li> <li>Network and diagnostic tools</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#vscode","title":"VSCode","text":"<ul> <li>Python</li> <li>autoDocstring</li> <li>pylint, pylance</li> <li>Git</li> <li>Git Graph</li> <li>Git Lance</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#vscode-more-extensions","title":"VSCode more Extensions","text":"<ul> <li>Other</li> <li>xml</li> <li>xml tools</li> <li>yaml</li> <li>Helper</li> <li>tabout</li> <li>draw.io</li> <li>project manager</li> <li>Code spell checker</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#demo-time","title":"Demo Time","text":"<p>Simple python package from code to deploy</p> <ul> <li>Requirements and Design</li> <li>Code</li> <li>Code Quality</li> <li>Source Control</li> <li>Versioning</li> <li>Dependencies</li> <li>Deploy</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#demo","title":"Demo","text":"<p>Optical Flow simple tracker</p> <p></p>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#design","title":"Design","text":"<p>4 Nodes - Image source   - test   - camera - Tracker - Viewer and controller</p>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#topic-and-messages","title":"Topic and messages","text":""},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#code-quality","title":"Code Quality","text":""},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#take-time-but-pay-off-in-the-long-run","title":"Take time but pay off in the long run","text":"<ul> <li>Type hinting</li> <li>Formatters</li> <li>Linters</li> <li>Test (pytest)</li> <li>unit test</li> <li>integration test</li> <li>Commit / Pre-commit</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#type-hinting","title":"Type hinting","text":"<p>Type hint should be use whenever unit test are worth writing</p> <p>They help you as a developer write better code</p>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#linters","title":"Linters","text":"<p>A linter is a tool to help you improve your code</p> <ul> <li>Fewer errors in production</li> <li>Readable, maintainable, consistent code</li> <li>Code Style (no endless arguments)</li> <li>More secure and performant code</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#linters-tools","title":"Linters tools","text":"<ul> <li>Pylint</li> <li>Flake8</li> <li>mypy</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#git","title":"GIT","text":"<ul> <li>branching strategy </li> <li>commit </li> <li>tag</li> <li>merge request</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#branching-strategy","title":"branching strategy","text":""},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#git-helping-tools","title":"GIT helping tools","text":"<ul> <li>GIT cli</li> <li>VSCode</li> <li>Builtin</li> <li>GitLens</li> <li>Git Graph</li> </ul>"},{"location":"blog/ROS2/dev_environment/ros2_python_package/ros2_code_to_deploy/#thinks-that-left-out","title":"Thinks that left out","text":"<p>  - C++ - Cross Compiler - Simulation - CI/CD - Docker and Dev container</p>"},{"location":"blog/ROS2/dev_environment/vscode/","title":"ROS2 VSCode settings, Extensions Settings and tips","text":"<ul> <li>settings</li> <li>extensions</li> <li>tips</li> </ul>","tags":["ros2","vscode","settings"]},{"location":"blog/ROS2/dev_environment/vscode/settings/","title":"ROS2 VSCode dev settings","text":"","tags":["ros2","vscode","settings"]},{"location":"blog/ROS2/dev_environment/vscode/settings/#settings","title":"settings","text":"","tags":["ros2","vscode","settings"]},{"location":"blog/ROS2/dev_environment/vscode/settings/#file-associations","title":"file associations","text":"<pre><code>\"files.associations\": {\n\"*.xacro\": \"xml\",\n\"*.world\": \"xml\",\n\"*.sdf\": \"xml\",\n\"*.gazebo\": \"xml\"\n}\n</code></pre>","tags":["ros2","vscode","settings"]},{"location":"blog/ROS2/dev_environment/vscode/settings/#key-bindings","title":"key bindings","text":"","tags":["ros2","vscode","settings"]},{"location":"blog/ROS2/dev_environment/vscode/settings/#add-new-file-and-new-folder-in-explorer-tree","title":"Add new file and new folder in explorer tree","text":"<pre><code>{\n\"key\": \"ctrl+n\",\n\"command\": \"explorer.newFile\",\n\"when\": \"explorerViewletFocus\"\n},\n{\n\"key\": \"ctrl+shift+n\",\n\"command\": \"explorer.newFolder\",\n\"when\": \"explorerViewletFocus\"\n},\n</code></pre>","tags":["ros2","vscode","settings"]},{"location":"blog/ROS2/dev_environment/vscode/tips/","title":"ROS2 VSCode tips","text":"","tags":["ros2","vscode","tips"]},{"location":"blog/ROS2/dev_environment/vscode/tips/#python-intellisense","title":"python intellisense","text":"<p>Specifies extra search paths for import resolution. Accepts paths specified as strings and separated by commas</p> <pre><code>\"python.analysis.extraPaths\": []\n</code></pre>","tags":["ros2","vscode","tips"]},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/","title":"ROS2 VSCode recommend extensions","text":"<ul> <li>Language</li> <li>python</li> <li>cpp</li> <li>cmake</li> <li>XML</li> <li>yaml</li> <li>dev goodies</li> <li>auto snippets</li> <li>tabout</li> </ul>","tags":["ros2","vscode"]},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#yaml","title":"yaml","text":"<p>YAML red hat</p> <pre><code>ext install redhat.vscode-yaml\n</code></pre>","tags":["ros2","vscode"]},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#xml","title":"XML","text":"<p>XML red hat</p> <pre><code>ext install redhat.vscode-xml\n</code></pre>","tags":["ros2","vscode"]},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#colcon","title":"colcon","text":"<p>XML red hat</p> <pre><code>ext install deitry.colcon-helper\n</code></pre>","tags":["ros2","vscode"]},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#dev-goodies","title":"Dev goodies","text":"","tags":["ros2","vscode"]},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#tabout","title":"Tabout","text":"<p> TabOut Tab out of quotes, brackets, etc for Visual Studio Code.</p>","tags":["ros2","vscode"]},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#snippets","title":"Snippets","text":"<p> Snippets</p>","tags":["ros2","vscode"]},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#autosnippet","title":"AutoSnippet","text":"<p> Auto Snippet</p> <pre><code>https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.auto-snippet\n</code></pre> <p>This extension automatically inserts a predefined snippet when a file is created, or an empty file is opened.</p>","tags":["ros2","vscode"]},{"location":"blog/ROS2/dev_environment/vscode/vscode_ros_extensions/#demo","title":"Demo","text":"<p>Create Template for sdf <code>model.config</code> file</p> <pre><code>\"autoSnippet.snippets\": [\n{\n\"pattern\": \"**/model.config\",\n\"snippet\": \"gazebo_model_config\"\n}\n]\n</code></pre> sdf model config<pre><code>\"gazebo_model_config\": {\n\"prefix\": \"sdf_model_config\",\n\"body\": [\n\"&lt;?xml version=\\\"1.0\\\"?&gt;\",\n\"&lt;model&gt;\",\n\"  &lt;name&gt;${1}&lt;/name&gt;\",\n\"  &lt;version&gt;1.0&lt;/version&gt;\",\n\"  &lt;sdf version=\\\"${2|1.5,1.6|}\\\"&gt;${3:${1}}.sdf&lt;/sdf&gt;\",\n\"  &lt;author&gt;\",\n\"    &lt;name&gt;&lt;/name&gt;\",\n\"    &lt;email&gt;&lt;/email&gt;\",\n\"  &lt;/author&gt;\",\n\"  &lt;description&gt;\",\n\"  &lt;/description&gt;\",\n\"&lt;/model&gt;\"\n],\n\"description\": \"gazebo model config file template\"\n}\n</code></pre>","tags":["ros2","vscode"]},{"location":"blog/ROS2/eco/Behavior_Trees/","title":"Behavior Trees","text":"<p>Is a Task Switching Structure \u201cWhat to do next?\u201d</p> <p>Each action needs to know \u201cDid i succeed or fail\u201d</p> <p></p> <p>The Ancestors decide \u201cWhat to do next\u201d</p>","tags":["ros2","behavior"]},{"location":"blog/ROS2/eco/Behavior_Trees/#behaviours","title":"Behaviours\uf0c1","text":"<ul> <li>check / condition</li> <li>action</li> </ul>","tags":["ros2","behavior"]},{"location":"blog/ROS2/eco/Behavior_Trees/#actions","title":"Actions","text":"<p>check</p> <ul> <li>Fallback (?)(or): If failure then tick next else return </li> <li>Sequence (-&gt;)(and): if success then tick next else return </li> </ul>","tags":["ros2","behavior"]},{"location":"blog/ROS2/eco/Behavior_Trees/#condition","title":"Condition","text":"<p>Conditions are Action that - never return Running - do not change the world</p>","tags":["ros2","behavior"]},{"location":"blog/ROS2/eco/Behavior_Trees/#when-to-switch-task","title":"When to switch task","text":"<ul> <li>Success</li> <li>Failure</li> <li>Interrupting by more important task</li> </ul>","tags":["ros2","behavior"]},{"location":"blog/ROS2/eco/Behavior_Trees/#to-read","title":"TO-Read","text":"<ul> <li>Introduction to Behavior Trees</li> <li>Building a Python Toolbox for Robot Behavior</li> </ul>","tags":["ros2","behavior"]},{"location":"blog/ROS2/eco/Behavior_Trees/#reference","title":"Reference","text":"<ul> <li>Behavior Trees in Robotics</li> <li>Introduction to behavior trees</li> </ul>","tags":["ros2","behavior"]},{"location":"blog/ROS2/eco/Behavior_Trees/py_trees/","title":"Index","text":"<ul> <li>py_trees</li> <li>py trees for ROS</li> <li>py_trees_ros_tutorials</li> <li>github py_trees</li> <li>github py_trees_ros</li> <li>github py_trees_ros_tutorials</li> </ul>","tags":["py_trees","bt","behavior_trees","ros2","python"]},{"location":"blog/ROS2/eco/Behavior_Trees/py_trees/sub2_blackboard_demo/","title":"Sub2 blackboard demo","text":"<p>Simple Tree with one behavior that save data from subscriber to blackboard</p> <pre><code>sub_demo = py_trees_ros.subscribers.ToBlackboard(\n    name=\"sub2bb\",\n    topic_name=\"my_topic\",\n    topic_type=String,\n    qos_profile=qos_profile_system_default,\n    blackboard_variables = {'chatter': None}\n)\n</code></pre>","tags":["py_trees","bt","behavior_trees","ros2","blackboard"]},{"location":"blog/ROS2/eco/Behavior_Trees/py_trees/sub2_blackboard_demo/#demo","title":"Demo","text":"tree<pre><code>ros2 run py_trees_demo simple_tree_sub\n</code></pre> pub topic<pre><code>ros2 topic pub /my_topic std_msgs/msg/String \"{ data: hello2 }\"\n</code></pre> blackboard watcher<pre><code>py-trees-blackboard-watcher\n</code></pre>","tags":["py_trees","bt","behavior_trees","ros2","blackboard"]},{"location":"blog/ROS2/eco/Behavior_Trees/py_trees/sub2_blackboard_demo/#tree","title":"Tree","text":"tree<pre><code>import py_trees\nimport py_trees_ros.trees\nimport py_trees.console as console\nimport rclpy\nfrom std_msgs.msg import String\nfrom rclpy.qos import qos_profile_system_default\ndef tutorial_create_root() -&gt; py_trees.behaviour.Behaviour:\nsub_demo = py_trees_ros.subscribers.ToBlackboard(\nname=\"sub2bb\",\ntopic_name=\"my_topic\",\ntopic_type=String,\nqos_profile=qos_profile_system_default,\nblackboard_variables = {'chatter': None}\n)\nroot = py_trees.composites.Selector(name=\"Tasks\", memory=False)\nroot.add_child(sub_demo)\nreturn root\ndef main(args=None):\n\"\"\"\n    Entry point for the demo script.\n    \"\"\"\nrclpy.init(args=None)\nroot = tutorial_create_root()\ntree = py_trees_ros.trees.BehaviourTree(\nroot=root,\nunicode_tree_debug=True\n)\ntry:\ntree.setup(node_name=\"foo\", timeout=15.0)\nexcept py_trees_ros.exceptions.TimedOutError as e: #pylint: disable=[invalid-name]\nconsole.logerror(console.red + f\"failed to setup the tree, aborting [{str(e)}]\" + console.reset)\ntree.shutdown()\nrclpy.try_shutdown()\nexcept KeyboardInterrupt:\n# not a warning, nor error, usually a user-initiated shutdown\nconsole.logerror(\"tree setup interrupted\")\ntree.shutdown()\nrclpy.try_shutdown()\ntree.tick_tock(period_ms=1000.0)\ntry:\nrclpy.spin(tree.node)\nexcept (KeyboardInterrupt, rclpy.executors.ExternalShutdownException):\npass\nfinally:\ntree.shutdown()\nrclpy.try_shutdown()\nif __name__ == '__main__':\nmain()\n</code></pre>","tags":["py_trees","bt","behavior_trees","ros2","blackboard"]},{"location":"blog/ROS2/eco/PlotJuggler/","title":"PlotJuggler","text":"<p>PlotJuggler Fast, intuitive and extensible time series visualization tool.</p>","tags":["ros2","plot","visualization","debugging"]},{"location":"blog/ROS2/eco/PlotJuggler/#install","title":"install","text":"<pre><code>sudo apt install ros-humble-plotjuggler-ros\n</code></pre>","tags":["ros2","plot","visualization","debugging"]},{"location":"blog/ROS2/eco/PlotJuggler/#usage","title":"usage","text":"","tags":["ros2","plot","visualization","debugging"]},{"location":"blog/ROS2/eco/PlotJuggler/#launch","title":"launch","text":"<pre><code>plotjuggler = Node(\n        name=\"kf_plot\",\n        package=\"plotjuggler\",\n        executable=\"plotjuggler\",\n        arguments=['-l', os.path.join(pkg, \"config\", \"plot.xml\")],\n        output=\"screen\"\n    )\n</code></pre>","tags":["ros2","plot","visualization","debugging"]},{"location":"blog/ROS2/eco/PlotJuggler/#reference","title":"Reference","text":"<ul> <li>guide</li> <li>github</li> </ul>","tags":["ros2","plot","visualization","debugging"]},{"location":"blog/ROS2/eco/diagnostic/","title":"ROS2 diagnostic","text":"<p>ROS diagnostics gives you the ability to monitor your system. There are two components in its architecture:</p> <ul> <li>updater</li> <li>aggregator</li> </ul> <p>The updater publishes diagnostic status messages on the <code>/diagnostics</code> topic, and the aggregator listens to these statuses, aggregates them, and publishes the results on the <code>/diagnostics_agg</code> topic.</p> <p>A system can have multiple updaters. They are meant to communicate with devices such as motors, sensors, computers, batteries, etc, in order to retrieve and publish relevant status data. The information being published on the /diagnostics topic is flat  </p> <p>The aggregator collects, categorizes, and groups the statuses from all the system components. You can take a look at what is being published on the /diagnostics and /diagnostics_agg topics with the rqt_runtime_monitor and rqt_robot_monitor tools</p>","tags":["diagnostic","DiagnosticTask"]},{"location":"blog/ROS2/eco/diagnostic/#diagnostictask","title":"DiagnosticTask","text":"<p>DiagnosticTask is an abstract base class for collecting diagnostic data. </p> <p>A DiagnosticTask has a name, and a function that is called to create a DiagnosticStatusWrapper. </p> <p>DiagnosticsTask subclass by</p> <ul> <li>CompositeDiagnosticTask</li> <li>FrequencyStatus</li> <li>GenericFunctionDiagnosticTask</li> <li>Heartbeat</li> <li>TimeStampStatus</li> </ul>","tags":["diagnostic","DiagnosticTask"]},{"location":"blog/ROS2/eco/diagnostic/#diagnostic_aggregator","title":"diagnostic_aggregator","text":"<p>Aggregator is a node that subscribes to <code>/diagnostics</code>, processes it and republishes aggregated data on <code>/diagnostics_agg</code>.</p> <p>The aggregator creates a series of analyzers to handle incoming <code>DiagnosticStatus</code></p> <p>API</p> <p></p>","tags":["diagnostic","DiagnosticTask"]},{"location":"blog/ROS2/eco/diagnostic/#diagnostics-viewers","title":"diagnostics viewers","text":"install<pre><code>sudo apt install ros-humble-rqt-robot-monitor\nsudo apt install ros-humble-rqt-runtime-monitor\n</code></pre>","tags":["diagnostic","DiagnosticTask"]},{"location":"blog/ROS2/eco/diagnostic/#reference","title":"Reference","text":"<ul> <li>REP-107 Diagnostic System for Robots Running ROS</li> <li>ros diagnostic</li> <li>wiki</li> <li>python example</li> </ul>","tags":["diagnostic","DiagnosticTask"]},{"location":"blog/ROS2/eco/diagnostic/#projects-to-check","title":"projects to check","text":"<ul> <li>rviz_2d_overlay_plugins)</li> </ul>","tags":["diagnostic","DiagnosticTask"]},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/","title":"Simple diagnostics demo","text":"","tags":["ros2","diagnostics","tutorials"]},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/#lab","title":"LAB","text":"<ul> <li>Write simple node</li> <li>Add diagnostic task to monitor node state</li> <li>Add diagnostic updater and bind the task</li> <li>Add diagnostic aggregator</li> <li>Show/Monitor  diagnostics data</li> </ul>","tags":["ros2","diagnostics","tutorials"]},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/#node","title":"Node","text":"task_demo<pre><code>import rclpy\nfrom diagnostic_msgs.msg import DiagnosticStatus\nfrom diagnostic_updater import DiagnosticStatusWrapper, DiagnosticTask, Updater\nfrom rclpy.node import Node\nclass SimpleDiagnosticsUpdater(Updater):\ndef __init__(self, node):\nperiod = 1\nsuper().__init__(node, period)\nself.setHardwareID(\"simple hw\")\nclass DummyTask(DiagnosticTask):\ndef __init__(self):\nsuper().__init__(\"dummy task\")\nself.__monitor_data: int = 0\ndef set_data(self, value: int) -&gt; None:\nself.__monitor_data = value\ndef run(self, stat: DiagnosticStatusWrapper) -&gt; DiagnosticStatusWrapper:\nstatus: DiagnosticStatus = DiagnosticStatus.OK\nmsg: str = \"task ok\"\nif (self.__monitor_data % 5) == 0:\nstatus = DiagnosticStatus.WARN\nmsg = \"task warning\"\nif (self.__monitor_data % 10) == 0:\nstatus = DiagnosticStatus.ERROR\nmsg = \"task error\"\nstat.summary(status, msg)\nreturn stat\nclass MyNode(Node):\ndef __init__(self):\nnode_name = \"simple\"\nsuper().__init__(node_name)\nself.__init_diagnostics()\nself.__data_to_monitor = 0\nself.create_timer(1.0, self.__timer_handler)\nself.get_logger().info(\"Hello ROS2\")\ndef __init_diagnostics(self) -&gt; None:\nself.diagnostics_updater = SimpleDiagnosticsUpdater(self)\nself.dummy_task = DummyTask()\nself.diagnostics_updater.add(self.dummy_task)\ndef __timer_handler(self):\nself.__data_to_monitor += 1\nself.dummy_task.set_data(self.__data_to_monitor)\nself.diagnostics_updater.update()\ndef main(args=None):\nrclpy.init(args=args)\nnode = MyNode()\ntry:\nrclpy.spin(node)\nexcept KeyboardInterrupt:\nprint(\"User exit\")\nfinally:\nnode.destroy_node()\nrclpy.try_shutdown()\nif __name__ == \"__main__\":\nmain()\n</code></pre>","tags":["ros2","diagnostics","tutorials"]},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/#aggregator-config","title":"Aggregator config","text":"diagnostics_aggregator_config<pre><code>analyzers:\nros__parameters:\npath: Sensors\nprimary:\ntype: 'diagnostic_aggregator/AnalyzerGroup'\npath: Demo_group\nanalyzers:\nprimary:\ntype: 'diagnostic_aggregator/GenericAnalyzer'\npath: simple_path_demo\ncontains: [\"dummy task\"]\n</code></pre>","tags":["ros2","diagnostics","tutorials"]},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/#launch","title":"launch","text":"demo.launch.py<pre><code>import os\n\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.actions import ExecuteProcess\nfrom launch_ros.actions import Node\n\nPACKAGE = \"diagnostics_tutorial\"\n\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    config = os.path.join(\n        get_package_share_directory(PACKAGE),\n        \"config\",\n        \"diagnostics_aggregator_config.yaml\",\n    )\n\n    simple_node = Node(package=PACKAGE, executable=\"task\")\n\n    agg_node = ExecuteProcess(\n        cmd=[\n            \"ros2\",\n            \"run\",\n            \"diagnostic_aggregator\",\n            \"aggregator_node\",\n            \"--ros-args\",\n            \"--params-file\",\n            config,\n        ],\n        name=\"aggregator_node\",\n        emulate_tty=True,\n        output=\"screen\",\n    )\n\n    robot_monitor = Node(package=\"rqt_robot_monitor\", executable=\"rqt_robot_monitor\")\n\n    runtime_monitor = Node(\n        package=\"rqt_runtime_monitor\", executable=\"rqt_runtime_monitor\"\n    )\n\n    ld.add_action(simple_node)\n    ld.add_action(agg_node)\n    ld.add_action(robot_monitor)\n    ld.add_action(runtime_monitor)\n    return ld\n</code></pre>","tags":["ros2","diagnostics","tutorials"]},{"location":"blog/ROS2/eco/diagnostic/diagnostic_demo/#show-diagnostics","title":"Show Diagnostics","text":"<ul> <li>rqt_runtime_monitor (right)</li> <li>rqt_robot_monitor (left)</li> </ul> <p>!!!     messages show in Tree view by <code>path</code> attribute in each level</p> <p></p>","tags":["ros2","diagnostics","tutorials"]},{"location":"blog/ROS2/eco/images_and_video/gstreamer/","title":"ROS2 GStreamer","text":"<p>ROS2 package originally developed by the Brown Robotics Lab for broadcasting any GStreamer video stream via image transport</p> install<pre><code>sudo apt install ros-humble-gscam\n</code></pre>","tags":["ros2","gst","gstreamer"]},{"location":"blog/ROS2/eco/linear_algebra/","title":"Utils","text":"","tags":["math"]},{"location":"blog/ROS2/eco/linear_algebra/#python","title":"python","text":"","tags":["math"]},{"location":"blog/ROS2/eco/linear_algebra/#transforms3d","title":"Transforms3d","text":"<p>This package is a collection of Python functions and classes to create and convert 3-dimensional transformations such as rotations, zooms, shears and reflections \u2026</p> <pre><code>pip install transforms3d\n</code></pre>","tags":["math"]},{"location":"blog/ROS2/eco/linear_algebra/#reference","title":"Reference","text":"<ul> <li>transformations</li> <li>Rotation Conversion Tool</li> </ul>","tags":["math"]},{"location":"blog/ROS2/eco/mavros/","title":"ROS2 MAVROS","text":"<ul> <li>Ardupilot minimal example</li> </ul>","tags":["mavros"]},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_minimal/","title":"Objective","text":"<p>Minimal connection to arducopter with mavros</p> <ul> <li>Run SITL (without gazebo)</li> <li>Run MAVROS</li> <li>Get State and change mode</li> </ul>","tags":["ardupilot","mavros"]},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_minimal/#sitl","title":"SITL","text":"terminal1<pre><code>sim_vehicle.py -v ArduCopter\n</code></pre>","tags":["ardupilot","mavros"]},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_minimal/#mavros","title":"mavros","text":"terminal2<pre><code>ros2 run  mavros mavros_node --ros-args -p fcu_url:=udp://:14550@\n</code></pre>","tags":["ardupilot","mavros"]},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_minimal/#rqt","title":"rqt","text":"terminal3<pre><code>ros2 run rqt_gui rqt_gui\n</code></pre> <ul> <li>Load topic_monitor plugin</li> <li>mark <code>mavros/state</code> topic</li> <li>Load Service Caller plugin</li> <li>select <code>mavros/set_mode</code> service</li> </ul> <ul> <li>Set service <code>custom mode</code> field to <code>GUIDED</code> and call</li> <li>Check that <code>mavros/state</code> topic changed</li> </ul>","tags":["ardupilot","mavros"]},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_python/","title":"Ardupilot MAVROS minimal python node","text":"<p>Implement ROS2 Python node usage <code>mavros</code> That change mode, arm and takeoff using mavros services and topics</p>","tags":["ardupilot","mavros"]},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_python/#sitl","title":"SITL","text":"terminal1<pre><code>sim_vehicle.py -v ArduCopter --console\n</code></pre>","tags":["ardupilot","mavros"]},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_python/#mavros","title":"mavros","text":"terminal2<pre><code>ros2 run  mavros mavros_node --ros-args -p fcu_url:=udp://:14550@\n</code></pre>","tags":["ardupilot","mavros"]},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_python/#node","title":"node","text":"<ul> <li>set mode to \u2018GUIDED\u2019</li> <li>Arming</li> <li>Takeoff</li> </ul> <pre><code>import rclpy\nfrom rclpy.node import Node\nfrom rclpy.qos import qos_profile_system_default\nfrom mavros_msgs.msg import State\nfrom mavros_msgs.srv import SetMode, CommandBool, CommandTOL\n# from mavros_msgs.srv._set_mode import SetMode_Request\n\n\nTOPIC_TAKEOFF = \"/mavros/cmd/takeoff\"\nTOPIC_ARMING = \"/mavros/cmd/arming\"\nTOPIC_SET_MODE = \"/mavros/set_mode\"\nTOPIC_STATE = \"/mavros/state\"\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"minimal\"\n        super().__init__(node_name)\n        self.armed = False\n        self.in_air = False\n        self.state_sub = self.create_subscription(State, TOPIC_STATE, self.state_cb, qos_profile=qos_profile_system_default)\n        self.set_mode_client = self.create_client(SetMode, , qos_profile=qos_profile_system_default)\n        self.arming_client = self.create_client(CommandBool, TOPIC_ARMING, qos_profile=qos_profile_system_default)\n        self.takeoff_client = self.create_client(CommandTOL, TOPIC_TAKEOFF, qos_profile=qos_profile_system_default)\n        while not self.set_mode_client.wait_for_service(timeout_sec=1.0):\n            self.get_logger().info('set_mode service not available, waiting again...')\n        self.get_logger().info(\"hello mavros python\")\n\n    def mode_changed_handler(self, future):\n        response = future.result()\n        self.get_logger().info(\"{}\".format(response))\n\n    def arming_handler(self, future):\n        response = future.result()\n        self.get_logger().info(\"{}\".format(response))\n        self.armed = response.success\n\n    def takeoff_handler(self, future):\n        response = future.result()\n        self.get_logger().info(\"{}\".format(response))\n        self.in_air = response.success\n\n    def state_cb(self, msg):\n        self.get_logger().info(\"{}\".format(msg), throttle_duration_sec=2)\n        if msg.mode == \"STABILIZE\":\n            request = SetMode.Request() # SetMode_Request()\n            request.custom_mode = \"GUIDED\"\n            future = self.set_mode_client.call_async(request)\n            future.add_done_callback(self.mode_changed_handler)\n\n        if msg.mode == \"GUIDED\" and not self.armed:\n            request = CommandBool.Request()\n            request.value = True\n            future = self.arming_client.call_async(request)\n            future.add_done_callback(self.arming_handler)\n\n        if msg.armed and not self.in_air:\n            request = CommandTOL.Request()\n            request.altitude = 15.0\n            future = self.takeoff_client.call_async(request)\n            future.add_done_callback(self.takeoff_handler)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["ardupilot","mavros"]},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/","title":"mavros Arducopter SITL hello","text":"","tags":["apm","mavros","sitl"]},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/#objective","title":"Objective","text":"<ul> <li>Run copter SITL</li> <li>connect with mavros</li> <li>work with: call service , get info</li> <li>understand the code (arming for example)</li> </ul>","tags":["apm","mavros","sitl"]},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/#usage","title":"Usage","text":"terminal1<pre><code># Run SITL with mavproxy\n# mavproxy connect to port tcp 5760 and output udp to port 14550\ncd ardupilot\ncd ArduCopter\n../Tools/autotest/sim_vehicle.py\n</code></pre> terminal2<pre><code># run mavros\nros2 run mavros mavros_node --ros-args -p fcu_url:=udp://localhost:14550@\n</code></pre> terminal3<pre><code>ros2 topic echo /mavros/state\n#\n---\nheader:\n  stamp:\n    sec: 1665044282\nnanosec: 30902710\nframe_id: ''\nconnected: true\narmed: false\nguided: true\nmanual_input: true\nmode: GUIDED\nsystem_status: 3\n---\n</code></pre>","tags":["apm","mavros","sitl"]},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/#arming","title":"arming","text":"<pre><code>## search for arming service\nros2 service list | grep arm\n/mavros/cmd/arming\n\n## get more info about the service\nros2 service type /mavros/cmd/arming\nmavros_msgs/srv/CommandBool\n\n## show message info\nros2 interface show mavros_msgs/srv/CommandBool\n# Common type for switch commands\n\nbool value\n---\nbool success\nuint8 result\n\n## cal the service\nros2 service call /mavros/cmd/arming mavros_msgs/srv/CommandBool \"{value: True}\"\nrequester: making request: mavros_msgs.srv.CommandBool_Request(value=True)\n\nresponse:\nmavros_msgs.srv.CommandBool_Response(success=True, result=0)\n</code></pre>","tags":["apm","mavros","sitl"]},{"location":"blog/ROS2/eco/mavros/mavros_ardupilot_sitl_hello/#check-the-code","title":"check the code","text":"command.cpp<pre><code>arming_srv =\nnode-&gt;create_service&lt;mavros_msgs::srv::CommandBool&gt;(\n\"~/arming\",\nstd::bind(\n&amp;CommandPlugin::arming_cb, this, _1, _2,\n_3), rmw_qos_profile_services_default, srv_cg);\n\n...\n\nvoid arming_cb(\nconst std::shared_ptr&lt;rmw_request_id_t&gt; req_header [[maybe_unused]],\nconst mavros_msgs::srv::CommandBool::Request::SharedPtr req,\nmavros_msgs::srv::CommandBool::Response::SharedPtr res)\n{\nusing mavlink::common::MAV_CMD;\nsend_command_long_and_wait(\nfalse,\nenum_value(MAV_CMD::COMPONENT_ARM_DISARM), 1,\n(req-&gt;value) ? 1.0 : 0.0,\n0, 0, 0, 0, 0, 0,\nres-&gt;success, res-&gt;result);\n}\n</code></pre>","tags":["apm","mavros","sitl"]},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/","title":"mavros diagnostic","text":"<p>see mavros_ardupilot_sitl_hello to run sitl and mavros node</p>","tags":["mavros","diagnostic","rat_runtime_monitor"]},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/#run-time-monitor","title":"Run time monitor","text":"<pre><code>apt install ros-humble-rqt-runtime-monitor\n</code></pre>","tags":["mavros","diagnostic","rat_runtime_monitor"]},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/#usgae","title":"usgae","text":"","tags":["mavros","diagnostic","rat_runtime_monitor"]},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/#check-the-code","title":"check the code","text":"<pre><code>  void handle_heartbeat(\nconst mavlink::mavlink_message_t * msg,\nmavlink::minimal::msg::HEARTBEAT &amp; hb, plugin::filter::SystemAndOk filter [[maybe_unused]])\n{\nusing mavlink::minimal::MAV_MODE_FLAG;\nauto it = find_or_create_vehicle_info(msg-&gt;sysid, msg-&gt;compid);\nauto vehicle_mode = uas-&gt;str_mode_v10(hb.base_mode, hb.custom_mode);\nauto stamp = node-&gt;now();\n// update context &amp;&amp; setup connection timeout\nuas-&gt;update_heartbeat(hb.type, hb.autopilot, hb.base_mode);\nuas-&gt;update_connection_status(true);\ntimeout_timer-&gt;reset();\n// build state message after updating uas\nauto state_msg = mavros_msgs::msg::State();\nstate_msg.header.stamp = stamp;\nstate_msg.connected = true;\nstate_msg.armed = !!(hb.base_mode &amp; enum_value(MAV_MODE_FLAG::SAFETY_ARMED));\nstate_msg.guided = !!(hb.base_mode &amp; enum_value(MAV_MODE_FLAG::GUIDED_ENABLED));\nstate_msg.manual_input = !!(hb.base_mode &amp; enum_value(MAV_MODE_FLAG::MANUAL_INPUT_ENABLED));\nstate_msg.mode = vehicle_mode;\nstate_msg.system_status = hb.system_status;\nstate_pub-&gt;publish(state_msg);\nhb_diag.tick(hb.type, hb.autopilot, state_msg.mode, hb.system_status);\n}\n</code></pre>","tags":["mavros","diagnostic","rat_runtime_monitor"]},{"location":"blog/ROS2/eco/mavros/mavros_diagnostic/#state-message","title":"state message","text":"<pre><code># find state topic\nros2 topic list | grep state\n#\n/mavros/extended_state\n/mavros/state\n\n# get more info on the topic\nros2 topic info /mavros/state\n#\nType: mavros_msgs/msg/State\nPublisher count: 1\nSubscription count: 0\n\nros2 interface show mavros_msgs/msg/State\n#\nstd_msgs/Header header\n    builtin_interfaces/Time stamp\n        int32 sec\n        uint32 nanosec\n    string frame_id\nbool connected\nbool armed\nbool guided\nbool manual_input\nstring mode\nuint8 system_status\n</code></pre>","tags":["mavros","diagnostic","rat_runtime_monitor"]},{"location":"blog/ROS2/eco/pluginlib/","title":"Reference","text":"<ul> <li>Creating and using plugins (C++)</li> </ul>","tags":["plugin"]},{"location":"blog/ROS2/eco/web_interface/hello/","title":"Part1 - Web interfcae","text":"","tags":["ros2","web","rosbridge"]},{"location":"blog/ROS2/eco/web_interface/hello/#rosbridge","title":"Rosbridge","text":"<p>Rosbridge provides a JSON API to ROS functionality for non-ROS programs</p> <p>rosbridge_suite</p> install<pre><code>sudo apt-get install ros-foxy-rosbridge-suite\n</code></pre>","tags":["ros2","web","rosbridge"]},{"location":"blog/ROS2/eco/web_interface/hello/#run","title":"Run","text":"<p>Open websocket on port 9090 as default</p> run bridge<pre><code>ros2 launch rosbridge_server rosbridge_websocket_launch.xml\n</code></pre>","tags":["ros2","web","rosbridge"]},{"location":"blog/ROS2/eco/web_interface/hello/#roslibjs","title":"roslibjs","text":"<p>roslibjs is the core JavaScript library for interacting with ROS from the browser. It uses WebSockets to connect with rosbridge and provides publishing, subscribing, service calls, actionlib, TF, URDF parsing, and other essential ROS functionality</p>","tags":["ros2","web","rosbridge"]},{"location":"blog/ROS2/eco/web_interface/hello/#run_1","title":"Run","text":"<p>Demo web page using <code>roslibjs</code> library</p> basic connection<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\" /&gt;\n\n&lt;script type=\"text/javascript\" src=\"http://static.robotwebtools.org/roslibjs/current/roslib.min.js\"&gt;&lt;/script&gt;\n\n&lt;script type=\"text/javascript\" type=\"text/javascript\"&gt;\nvar ros = new ROSLIB.Ros({\nurl: 'ws://localhost:9090'\n});\n\nros.on('connection', function () {\ndocument.getElementById(\"status\").innerHTML = \"Connected\";\n});\n\nros.on('error', function (error) {\ndocument.getElementById(\"status\").innerHTML = \"Error\";\n});\n\nros.on('close', function () {\ndocument.getElementById(\"status\").innerHTML = \"Closed\";\n});\n&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;h1&gt;Simple ROS User Interface&lt;/h1&gt;\n&lt;p&gt;Connection status: &lt;span id=\"status\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","tags":["ros2","web","rosbridge"]},{"location":"blog/ROS2/eco/web_interface/hello/#reference","title":"Reference","text":"<ul> <li>roslibjs</li> <li>Robot Web Tools</li> <li>rosbridge_suite</li> <li>ROS web tutorial part 1 - rosbridge server and roslibjs</li> </ul>","tags":["ros2","web","rosbridge"]},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/","title":"Part2 - hello vue","text":"<p>Vue.js is an open-source MVVM framework</p> <p>Note</p> <p>Install HTML Preview and change it\u2019s security permission to view vue html pages </p>","tags":["vue","web",101]},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/#hello","title":"hello","text":"<pre><code>&lt;script type=\"importmap\"&gt;\n{\n\"imports\": {\n\"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n}\n}\n&lt;/script&gt;\n\n&lt;div id=\"app\"&gt;{{ message }}&lt;/div&gt;\n\n&lt;script type=\"module\"&gt;\nimport { createApp } from 'vue'\n\ncreateApp({\ndata() {\nreturn {\nmessage: 'Hello Vue3!'\n}\n}\n}).mount('#app')\n&lt;/script&gt;\n</code></pre>","tags":["vue","web",101]},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/#data","title":"Data","text":"<p>The variables in Vue.js are JavaScript style variables and support all the standard types that are available in vanilla JavaScript. </p> <p>These types include:</p> <ul> <li>String - Stores strings</li> <li>Number - Stores integers, floating point, and exponential notations</li> <li>Boolean - Stores \u2018true\u2019 or \u2018false\u2019</li> <li>Null - Represents null value</li> <li>Object - Stores a dictionary</li> <li>Array - Stores a list of variables</li> </ul> data<pre><code>&lt;script type=\"importmap\"&gt;\n{\n\"imports\": {\n\"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n}\n}\n&lt;/script&gt;\n\n&lt;div id=\"app\"&gt;\n    &lt;div&gt;string: {{ name }}&lt;/div&gt;\n    &lt;div&gt;number: {{ count }}&lt;/div&gt;\n    &lt;div&gt;bool: {{ visible }}&lt;/div&gt;\n    &lt;div&gt;array: {{ todos[1] }}&lt;/div&gt;\n    &lt;div&gt;null: {{ error }}&lt;/div&gt;\n    &lt;div&gt;object: {{ object.foo }}&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script type=\"module\"&gt;\nimport { createApp } from 'vue'\n\ncreateApp({\ndata() {\nreturn {\nname: 'Bob',                    //string\ncount: 0,                       //number\nvisible: false,                 //boolean\ntodos: ['task1', 'task2'],      //array\nerror: null,                     //null\nobject: {                       //object\nfoo: 'bar'\n}\n}\n}\n}).mount('#app')\n&lt;/script&gt;\n</code></pre>","tags":["vue","web",101]},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/#method","title":"Method","text":"<p>The methods property in the Vue instance contains the definitions of all the functions that the Vue instance can perform. Function cat called by specific event or where needed</p> method<pre><code>&lt;script type=\"importmap\"&gt;\n{\n\"imports\": {\n\"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n}\n}\n&lt;/script&gt;\n\n&lt;div id=\"app\"&gt;{{get_name()}}&lt;/div&gt;\n\n&lt;script type=\"module\"&gt;\nimport { createApp } from 'vue'\n\ncreateApp({\ndata() {\nreturn {\ngreeting: 'Hello world'\n}\n},\nmethods: {\nget_name: function(){\nreturn this.greeting;\n}\n}\n}).mount('#app')\n&lt;/script&gt;\n</code></pre> <p>Note</p> <p>using <code>this</code> to refer <code>data</code> variables</p>","tags":["vue","web",101]},{"location":"blog/ROS2/eco/web_interface/part2_hello_vue/#references","title":"References","text":"<ul> <li>vue3</li> </ul>","tags":["vue","web",101]},{"location":"blog/ROS2/eco/web_interface/part3_vue_handling/","title":"Part3 - vue user handling","text":"<ul> <li>live server</li> <li>vetur</li> <li>material icon theme</li> </ul>","tags":["vue","binding",101]},{"location":"blog/ROS2/eco/web_interface/part3_vue_handling/#basic-struct","title":"Basic struct","text":"<ul> <li>index.html: contain vue root element</li> <li>app.js: create app and mount to the root element</li> </ul> index.html<pre><code>&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;vue&lt;/title&gt;\n    &lt;script src=\"https://unpkg.com/vue@3.0.2\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!--template--&gt;\n    &lt;div id=\"app\"&gt;\n        &lt;p&gt;{{ title }}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> app.js<pre><code>const app = Vue.createApp({\ndata() { return {\ntitle: \"hello vue\"    }\n}\n})\napp.mount('#app')\n</code></pre>","tags":["vue","binding",101]},{"location":"blog/ROS2/eco/web_interface/part3_vue_handling/#bind-and-event","title":"Bind and event","text":"vue div<pre><code>&lt;div id=\"app\"&gt;\n    &lt;p&gt;{{ title }} {{counter}}&lt;/p&gt;\n    &lt;button v-on:click=\"counter++\"&gt;inc&lt;/button&gt;\n    &lt;button @click=\"counter--\"&gt;dec&lt;/button&gt;\n    &lt;div @click=\"counter=0\"&gt;reset&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Note</p> <p><code>@</code> is a shorthand for <code>v-on</code> <code>v-on:click</code> is <code>@click</code></p>","tags":["vue","binding",101]},{"location":"blog/ROS2/eco/web_interface/part3_vue_handling/#methods-property","title":"methods property","text":"<ul> <li>Add <code>methods</code> property to vue app</li> </ul> <pre><code>&lt;div id=\"app\"&gt;\n    &lt;p&gt;{{ title }} {{counter}}&lt;/p&gt;\n    &lt;button @click=\"reset\"&gt;reset&lt;/button&gt;\n    &lt;button @click=\"preset(10)\"&gt;preset&lt;/button&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>const app = Vue.createApp({\ndata() { return {\ntitle: \"hello vue\",\ncounter: 0\n}\n},\nmethods: {\nreset(){\nthis.counter = 0\n},\npreset(value){\nthis.counter = value\n}\n}\n})\n</code></pre>","tags":["vue","binding",101]},{"location":"blog/ROS2/eco/web_interface/part5_roslib_vue/","title":"Bridge","text":"run node<pre><code>ros2 launch rosbridge_server rosbridge_websocket_launch.xml\n</code></pre>","tags":["ros2","vue","rosbridge"]},{"location":"blog/ROS2/eco/web_interface/part5_roslib_vue/#web","title":"Web","text":"<ul> <li>index.html: load libraries and HTML template</li> <li>app.js: Create vue app and init roslib connection</li> </ul> index.html<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\" /&gt;\n&lt;script src=\"http://static.robotwebtools.org/roslibjs/current/roslib.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/vue@3.0.2\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Simple ROS User Interface&lt;/h1&gt;\n&lt;div id=\"app\"&gt;\n&lt;p&gt;ros status: {{status}}&lt;/p&gt;\n&lt;/div&gt;\n&lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> app.js<pre><code>const app = Vue.createApp({\ndata() {\nreturn {\nstatus: \"---\",\nparam: 0\n}\n},\nmounted() {\nthis.ros = new ROSLIB.Ros({\nurl: 'ws://localhost:9090'\n});\n},\n})\nvm = app.mount('#app')\nvm.ros.on('connection', () =&gt; {\nvm.status = \"--connected--\";\n});\n</code></pre>","tags":["ros2","vue","rosbridge"]},{"location":"blog/ROS2/eco/web_interface/part5_roslib_vue/#parameter","title":"Parameter","text":"declared<pre><code>var my_param = new ROSLIB.Param({\nros: vm.ros,\nname: '/node:param_name'\n});\n</code></pre> get / set<pre><code>//Get\nmy_param.get(function (value) {\nif (value != null) {\nconsole.log(value);\n}\n});\n\n//Set\nmy_param.set(5)\n</code></pre>","tags":["ros2","vue","rosbridge"]},{"location":"blog/ROS2/fastdds/discovery/","title":"DDS Discovery and discovery server","text":"<p>Zenoh</p> <p>Check if work with fast-dds  zenoh</p> <p>Discovery server</p> <ul> <li>discovery server</li> <li>Using Fast DDS Discovery Server as discovery protocol</li> </ul> <p>ToDo</p> <ul> <li>03b: ROS1 &amp; ROS2 network analysis</li> </ul>","tags":["ros2","dds","discovery"]},{"location":"blog/ROS2/fastdds/discovery/#reference","title":"Reference","text":"","tags":["ros2","dds","discovery"]},{"location":"blog/ROS2/fastdds/discovery/#--fast-dds-discovery","title":"- fast-dds Discovery","text":"<ul> <li> Edge Robotics with ROS2 and Eclipse Zenoh </li> <li>Minimizing Discovery Overhead in ROS2</li> </ul>","tags":["ros2","dds","discovery"]},{"location":"blog/ROS2/fastdds/static_discovery/","title":"Reference","text":"<ul> <li>Static Discovery Support</li> </ul>","tags":["dds","fastdds","profile"]},{"location":"blog/ROS2/fastdds/unicast_discovery/","title":"Objective","text":"<ul> <li>Show ROS node normal discovery behavior</li> <li>Unicast discovery: Set Node discovery protocol to unicast</li> </ul> <p>For each ROS 2 process running on a computer, one DDS \u201cparticipant\u201d is created Each DDS participant takes up two <code>unicast</code> ports on the computer.</p> <ul> <li>Discovery Unicast port: for discovery / meta-traffic</li> <li>User Unicast port: for user traffic port</li> </ul>","tags":["dds","fastdds","profile"]},{"location":"blog/ROS2/fastdds/unicast_discovery/#ros2-node-demo","title":"ROS2 Node demo","text":"<ul> <li>Run Pub/Sub nodes</li> <li>Check open ports</li> <li>Analyze discovery data with wireshark </li> </ul> <p>Domain_ID</p> <p>Nodes run on domain 0</p> <p></p> usage<pre><code>ros2 run demo_nodes_cpp talker\n</code></pre> <pre><code>sudo lsof -i -P -n | grep UDP | grep talker\n#\ntalker    877967            user    9u  IPv4 72699380      0t0  UDP *:7400 \ntalker    877967            user   10u  IPv4 72699382      0t0  UDP *:7412 \ntalker    877967            user   12u  IPv4 72699383      0t0  UDP *:7413 \ntalker    877967            user   14u  IPv4 72699385      0t0  UDP *:60083\n</code></pre> <p></p> <p>The Node/Participant publish multicast discovery data each 3 sec, on port <code>7400</code></p>","tags":["dds","fastdds","profile"]},{"location":"blog/ROS2/fastdds/unicast_discovery/#multiple-node","title":"Multiple node","text":"terminal1<pre><code>ros2 run demo_nodes_cpp talker\n</code></pre> terminal2<pre><code>ros2 run demo_nodes_cpp listener\n</code></pre> <p>multiple node</p> <p>if we run more the one node, each of them send multicast discovery data on the the domain port <code>7400</code></p> lsof<pre><code>sudo lsof -i -P -n | grep UDP | grep 'list\\|talker' talker    883188            user    9u  IPv4 72872989      0t0  UDP *:7400 talker    883188            user   10u  IPv4 72872991      0t0  UDP *:7412 talker    883188            user   12u  IPv4 72872992      0t0  UDP *:7413 talker    883188            user   14u  IPv4 72872994      0t0  UDP *:34513 talker    883188            user   15u  IPv4 72872995      0t0  UDP 192.168.1.221:35422 listener  883200            user    9u  IPv4 72864737      0t0  UDP *:7400 listener  883200            user   10u  IPv4 72864740      0t0  UDP *:7414 listener  883200            user   12u  IPv4 72864742      0t0  UDP *:7415 listener  883200            user   14u  IPv4 72864744      0t0  UDP *:37961 listener  883200            user   15u  IPv4 72864745      0t0  UDP 192.168.1.221:43254 </code></pre>","tags":["dds","fastdds","profile"]},{"location":"blog/ROS2/fastdds/unicast_discovery/#disabled-multicast-discovery","title":"Disabled multicast discovery","text":"<p>To disabled multicast discovery data we need to use fastdds custom profile, We set the profile by <code>FASTRTPS_DEFAULT_PROFILES_FILE</code> environment variable that point to the profile file</p> <ul> <li>The profile disabled multicast discovery</li> <li>Set Node sending discovery unicast data to it\u2019s config peers</li> </ul> usage demo<pre><code>export FASTRTPS_DEFAULT_PROFILES_FILE=\"$(pwd)/STATIC_profile.xml\"\nros2 run demo_nodes_cpp talker\n</code></pre>","tags":["dds","fastdds","profile"]},{"location":"blog/ROS2/fastdds/unicast_discovery/#demo","title":"demo","text":"","tags":["dds","fastdds","profile"]},{"location":"blog/ROS2/fastdds/unicast_discovery/#run-pubtalker","title":"Run Pub/Talker","text":"<p>To disabled Node/Participant we need to tale the node where to find the other peer</p> <ul> <li>Start nodes on domain_id=0</li> <li>Set the Publisher/Talker node participant number to 20</li> <li>Set the Subscriber/Listener peer node participant number to 22</li> </ul> <p></p> UNICAST_PROFILE_W.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;profiles xmlns=\"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\"&gt;\n&lt;participant profile_name=\"disable_multicast\" is_default_profile=\"true\"&gt;\n&lt;rtps&gt;\n&lt;participantID&gt;20&lt;/participantID&gt;\n&lt;builtin&gt;\n&lt;metatrafficUnicastLocatorList&gt;\n&lt;locator/&gt;\n&lt;/metatrafficUnicastLocatorList&gt;\n&lt;initialPeersList&gt;\n&lt;locator&gt;\n&lt;udpv4&gt;\n&lt;address&gt;127.0.0.1&lt;/address&gt;\n&lt;port&gt;7454&lt;/port&gt;\n&lt;/udpv4&gt;\n&lt;/locator&gt;\n&lt;/initialPeersList&gt;\n&lt;/builtin&gt;\n&lt;/rtps&gt;\n&lt;/participant&gt;\n&lt;/profiles&gt;\n</code></pre> terminal1<pre><code>source /opt/ros/humble/setup.bash\nexport FASTRTPS_DEFAULT_PROFILES_FILE=\"$(pwd)/UNICAST_PROFILE_W.xml\"\nros2 run demo_nodes_cpp talker\n</code></pre> <pre><code>sudo lsof -i -P -n | grep UDP | grep 'list\\|talker'\ntalker    881133            user    9u  IPv4 72808683      0t0  UDP *:7450 \ntalker    881133            user   10u  IPv4 72808684      0t0  UDP *:7451 \ntalker    881133            user   12u  IPv4 72808686      0t0  UDP *:56018\n</code></pre> <p>We can see that no multicast domain is open, and the node open ports <code>7450, 7451</code> according to the domain port calculator</p> terminal2<pre><code>source /opt/ros/humble/setup.bash\nexport FASTRTPS_DEFAULT_PROFILES_FILE=\"$(pwd)/UNICAST_PROFILE_R.xml\"\nros2 run demo_nodes_cpp listener\n</code></pre> <p></p> <p>The node send its discovery data to other peer declare at the xml profile in 3 sec interval</p> <p>for know the peer not running and we got <code>icmp</code> port unreachable message</p>","tags":["dds","fastdds","profile"]},{"location":"blog/ROS2/fastdds/unicast_discovery/#running-both-node","title":"Running both node","text":"<ul> <li>Both node send discovery data in 3 sec interval to each other</li> </ul> <pre><code>sudo lsof -i -P -n | grep UDP | grep 'list\\|talker'\ntalker    881133            user    9u  IPv4 72808683      0t0  UDP *:7450 \ntalker    881133            user   10u  IPv4 72808684      0t0  UDP *:7451 \ntalker    881133            user   12u  IPv4 72808686      0t0  UDP *:56018 \ntalker    881133            user   13u  IPv4 72808687      0t0  UDP 192.168.1.221:42527 \nlistener  881878            user    9u  IPv4 72822584      0t0  UDP *:7454 \nlistener  881878            user   10u  IPv4 72822585      0t0  UDP *:7455 \nlistener  881878            user   12u  IPv4 72822587      0t0  UDP *:51421 \nlistener  881878            user   13u  IPv4 72822588      0t0  UDP 192.168.1.221:52642 </code></pre>","tags":["dds","fastdds","profile"]},{"location":"blog/ROS2/fastdds/unicast_discovery/#profiles","title":"Profiles","text":"","tags":["dds","fastdds","profile"]},{"location":"blog/ROS2/fastdds/unicast_discovery/#publishertalker","title":"Publisher/Talker","text":"UNICAST_PROFILE_W.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;profiles xmlns=\"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\"&gt;\n&lt;participant profile_name=\"disable_multicast\" is_default_profile=\"true\"&gt;\n&lt;rtps&gt;\n&lt;participantID&gt;20&lt;/participantID&gt;\n&lt;builtin&gt;\n\n&lt;metatrafficUnicastLocatorList&gt;\n&lt;locator/&gt;\n&lt;/metatrafficUnicastLocatorList&gt;\n&lt;initialPeersList&gt;\n&lt;locator&gt;\n&lt;udpv4&gt;\n&lt;address&gt;127.0.0.1&lt;/address&gt;\n&lt;port&gt;7454&lt;/port&gt;\n&lt;/udpv4&gt;\n&lt;/locator&gt;\n&lt;/initialPeersList&gt;\n&lt;/builtin&gt;\n&lt;/rtps&gt;\n&lt;/participant&gt;\n&lt;/profiles&gt;\n</code></pre>","tags":["dds","fastdds","profile"]},{"location":"blog/ROS2/fastdds/unicast_discovery/#subscriberlistener","title":"Subscriber/Listener","text":"UNICAST_PROFILE_R.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;profiles xmlns=\"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\"&gt;\n&lt;participant profile_name=\"disable_multicast\" is_default_profile=\"true\"&gt;\n&lt;rtps&gt;\n&lt;participantID&gt;22&lt;/participantID&gt;\n&lt;builtin&gt;\n&lt;metatrafficUnicastLocatorList&gt;\n&lt;locator/&gt;\n&lt;/metatrafficUnicastLocatorList&gt;\n&lt;initialPeersList&gt;\n&lt;locator&gt;\n&lt;udpv4&gt;\n&lt;address&gt;127.0.0.1&lt;/address&gt;\n&lt;port&gt;7450&lt;/port&gt;\n&lt;/udpv4&gt;\n&lt;/locator&gt;\n&lt;/initialPeersList&gt;\n&lt;/builtin&gt;\n&lt;/rtps&gt;\n&lt;/participant&gt;\n&lt;/profiles&gt;\n</code></pre>","tags":["dds","fastdds","profile"]},{"location":"blog/ROS2/fastdds/unicast_discovery/#reference","title":"Reference","text":"<ul> <li>fast-dds discovery</li> </ul>","tags":["dds","fastdds","profile"]},{"location":"blog/ROS2/gazebo/","title":"ros2 gazebo integration","text":"<pre><code>sudo apt install ros-humble-gazebo-ros-pkgs\n</code></pre>","tags":["ros2","gazebo-classic"]},{"location":"blog/ROS2/gazebo/#test-integration","title":"test integration","text":"<pre><code>gazebo --verbose /opt/ros/humble/share/gazebo_plugins/worlds/gazebo_ros_diff_drive_demo.world\n</code></pre> <pre><code>ros2 topic pub /demo/cmd_demo geometry_msgs/Twist '{linear: {x: 1.0}}' -1\n</code></pre>","tags":["ros2","gazebo-classic"]},{"location":"blog/ROS2/gazebo/#_1","title":"ros2 gazebo integration","text":"","tags":["ros2","gazebo-classic"]},{"location":"blog/ROS2/gazebo/#reference","title":"Reference","text":"<ul> <li>ROS2 Gazebo migration guide</li> <li>Installing gazebo_ros_pkgs (ROS 2)</li> </ul>","tags":["ros2","gazebo-classic"]},{"location":"blog/ROS2/gazebo/01-launch_gazebo/","title":"gazebo_ros","text":"<p>Provides ROS plugins that offer message and service publishers for interfacing with Gazebo through ROS.</p>","tags":["gazebo","launch",101]},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#sudo-apt-install-ros-foxy-gazebo-ros","title":"<pre><code>sudo apt install ros-foxy-gazebo-ros\n</code></pre>","text":"","tags":["gazebo","launch",101]},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#project","title":"project","text":"<p>my ros2_gazebo_tutorial</p> <pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 launch\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 basic_gazebo.launch.py\n\u251c\u2500\u2500 package.xml\n\u2514\u2500\u2500 worlds\n    \u2514\u2500\u2500 empty.world\n</code></pre>","tags":["gazebo","launch",101]},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#world","title":"world","text":"empty.world<pre><code>&lt;?xml version='1.0'?&gt;\n&lt;sdf version=\"1.6\"&gt;\n&lt;world name=\"room\"&gt;\n&lt;include&gt;\n&lt;uri&gt;model://sun&lt;/uri&gt;\n&lt;/include&gt;\n&lt;include&gt;\n&lt;uri&gt;model://ground_plane&lt;/uri&gt;\n&lt;/include&gt;\n&lt;/world&gt;\n&lt;/sdf&gt;\n</code></pre>","tags":["gazebo","launch",101]},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#launch","title":"launch","text":"basic_gazebo.launch.py","tags":["gazebo","launch",101]},{"location":"blog/ROS2/gazebo/01-launch_gazebo/#cmake","title":"cmake","text":"<ul> <li>Copy launch and world folders </li> </ul> CMakeLists.txt<pre><code># Add this line to CMakeLists.txt\n\ninstall(DIRECTORY\nlaunch\nworlds\nDESTINATION share/${PROJECT_NAME}/\n)\n</code></pre>","tags":["gazebo","launch",101]},{"location":"blog/ROS2/gazebo/02-spawn/","title":"Part2 - spawn","text":"","tags":["gazebo-classic","tutorial","spawn"]},{"location":"blog/ROS2/gazebo/02-spawn/#project","title":"project","text":"<p>my ros2_gazebo_tutorial</p> <pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 launch\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 spawn.launch.py\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 worlds\n\u2502   \u2514\u2500\u2500 empty.world\n\u2514\u2500\u2500 models\n \u00a0\u00a0 \u2514\u2500\u2500 simple\n \u00a0\u00a0     \u251c\u2500\u2500 model.config\n \u00a0\u00a0     \u2514\u2500\u2500 model.sdf.xacro\n</code></pre>","tags":["gazebo-classic","tutorial","spawn"]},{"location":"blog/ROS2/gazebo/02-spawn/#launch","title":"launch","text":"basic_gazebo.launch.py","tags":["gazebo-classic","tutorial","spawn"]},{"location":"blog/ROS2/gazebo/moving_object/","title":"Moving object","text":"<p>service tags:     - gazebo     - ros2     - plugins</p>"},{"location":"blog/ROS2/gazebo/moving_object/#moving-an-object-in-gazebo-using-ros2-service","title":"Moving an object in Gazebo using ROS2 service","text":"<p>Control gazebo entities (links) using ROS2 and <code>libgazebo_ros_state</code> gazebo plugin. this plugin has two services: - get_entity_state - set_entity_state</p>"},{"location":"blog/ROS2/gazebo/moving_object/#lab-objective","title":"LAB objective","text":"<ul> <li>Get gazebo entity state using ROS2 service</li> <li>Set gazebo entities state using ROS2 service</li> <li>Set/Get from cli</li> <li>Control from python node</li> </ul>"},{"location":"blog/ROS2/gazebo/moving_object/#project","title":"project","text":""},{"location":"blog/ROS2/gazebo/moving_object/#world","title":"world","text":"<pre><code>&lt;sdf version=\"1.6\"&gt;\n&lt;world name=\"default\"&gt;\n&lt;include&gt;\n&lt;uri&gt;model://ground_plane&lt;/uri&gt;\n&lt;/include&gt;\n&lt;include&gt;\n&lt;uri&gt;model://sun&lt;/uri&gt;\n&lt;/include&gt;\n&lt;!-- models--&gt;\n&lt;model name=\"cube\"&gt;\n&lt;static&gt;true&lt;/static&gt;\n&lt;link name=\"link\"&gt;\n&lt;pose&gt;0 0 2.5 0 0 0&lt;/pose&gt;\n&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;2 1 1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n&lt;/model&gt;\n&lt;!-- plugins --&gt;\n&lt;plugin name=\"gazebo_ros_state\" filename=\"libgazebo_ros_state.so\"&gt;\n&lt;ros&gt;\n&lt;namespace&gt;/demo&lt;/namespace&gt;\n&lt;argument&gt;model_states:=model_states_demo&lt;/argument&gt;\n&lt;/ros&gt;\n&lt;update_rate&gt;1.0&lt;/update_rate&gt;\n&lt;/plugin&gt;\n&lt;/world&gt;\n&lt;/sdf&gt;\n</code></pre>"},{"location":"blog/ROS2/gazebo/moving_object/#launch","title":"launch","text":"<p>gazebo environment variables</p> <p>Don\u2019t forget to source The launch file append path to <code>GAZEBO_RESOURCE_PATH</code> variable for <code>world</code> file location</p> <pre><code>source /usr/share/gazebo/setup.sh\n</code></pre> <pre><code>import os\nfrom launch import LaunchDescription\nfrom launch.actions import AppendEnvironmentVariable, IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch_ros.actions import Node\n\nPACKAGE_NAME = \"camera_calibration_gazebo\"\nWORLD = \"demo.world\"\n\ndef generate_launch_description():\n    pkg_share = get_package_share_directory(PACKAGE_NAME)\n    gazebo_pkg = get_package_share_directory(\"gazebo_ros\")\n\n    # source /usr/share/gazebo/setup.sh\n    resources = [os.path.join(pkg_share, \"worlds\")]\n\n    resource_env = AppendEnvironmentVariable(\n        name=\"GAZEBO_RESOURCE_PATH\", value=\":\".join(resources)\n    )\n\n    gazebo = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            [os.path.join(gazebo_pkg, \"launch\", \"gazebo.launch.py\")]\n        ),\n        launch_arguments={\"verbose\": \"true\", \"world\": WORLD}.items(),\n    )\n\n    ld = LaunchDescription()\n    ld.add_action(resource_env)\n    ld.add_action(gazebo)\n\n    return ld\n</code></pre>"},{"location":"blog/ROS2/gazebo/moving_object/#cli","title":"cli","text":""},{"location":"blog/ROS2/gazebo/moving_object/#get_entity_state","title":"get_entity_state","text":"<pre><code>ros2 service call /demo/get_entity_state gazebo_msgs/srv/GetEntityState \"{name: cube::link,reference_frame: world}\"\n</code></pre>"},{"location":"blog/ROS2/gazebo/moving_object/#set_entity_state","title":"set_entity_state","text":"<pre><code>ros2 service call /demo/set_entity_state gazebo_msgs/srv/SetEntityState \"state: {name: cube::link, pose: {position:{x: 2.0, y: 2.0, z: 5.0}}, reference_frame: world}\"\n</code></pre> <pre><code>ros2 service call /demo/set_entity_state gazebo_msgs/srv/SetEntityState \\\n\"state: {name: cube::link, pose: \\\n{position:{x: 0.0, y: 0.0, z: 2.5},\norientation:{x: 0.7071, y: 0.0, z: 0.7071, w: 0.0}}, \\\nreference_frame: world}\"\n</code></pre>"},{"location":"blog/ROS2/gazebo/moving_object/#reference","title":"Reference","text":"<ul> <li>ROS 2 Migration: Entity states</li> </ul>"},{"location":"blog/ROS2/gazebo/plugins/model_plugin_demo/","title":"Model plugin demo","text":"<p>Plugins allow complete access to the physical properties of models and their underlying elements (links, joints, collision objects). The following plugin will apply a linear velocity to its parent model.</p> <p>The following tutorial build and test gazebo module plugin in ROS2 package context</p> <p>The package include <code>world</code> file and <code>plugin</code> from <code>Model plugins</code> tutorial check reference for links</p>","tags":["gazebo","plugin","model","ros2"]},{"location":"blog/ROS2/gazebo/plugins/model_plugin_demo/#lab","title":"Lab","text":"<p>Run gazebo world with model that include custom plugin from ROS launch file</p> <ul> <li>Create <code>ament_cmake</code> package</li> <li>Add <code>launch</code>,  <code>plugins</code>, <code>worlds</code> sub folders</li> <li>Add <code>add_subdirectory(plugins)</code> to root <code>CMakeLists.txt</code> file</li> <li>Add <code>install</code> insruction</li> </ul> install launch and worlds folder<pre><code>install(DIRECTORY launch\nworlds\nDESTINATION share/${PROJECT_NAME} )\n</code></pre> project structure<pre><code>gazebo_tutorial_pkg\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 CMakeLists.txt\n    \u251c\u2500 gazebo_tutorial_pkg\n    \u251c\u2500 launch\n    \u2502       \u251c\u2500\u2500 push.launch.py\n    \u251c\u2500\u2500 plugins\n    \u2502       \u251c\u2500\u2500 CMakeLists.txt\n    \u2502       \u2514\u2500\u2500 push\n    \u2502           \u2514\u2500\u2500 model_push.cc\n    \u2514\u2500\u2500 worlds\n            \u2514\u2500\u2500 model_push.world\n</code></pre>","tags":["gazebo","plugin","model","ros2"]},{"location":"blog/ROS2/gazebo/plugins/model_plugin_demo/#plugin","title":"plugin","text":"plugin/CMakeLists.txt<pre><code>find_package(gazebo REQUIRED)\ninclude_directories(${GAZEBO_INCLUDE_DIRS})\nlink_directories(${GAZEBO_LIBRARY_DIRS})\nlist(APPEND CMAKE_CXX_FLAGS \"${GAZEBO_CXX_FLAGS}\")\n\nadd_library(model_push SHARED push/model_push.cc)\ntarget_link_libraries(model_push ${GAZEBO_LIBRARIES})\n\ninstall(TARGETS\nmodel_push\nDESTINATION lib/${PROJECT_NAME}\n)\n</code></pre> plugin/push/model_push.cc<pre><code>#include &lt;functional&gt;\n#include &lt;gazebo/gazebo.hh&gt;\n#include &lt;gazebo/physics/physics.hh&gt;\n#include &lt;gazebo/common/common.hh&gt;\n#include &lt;ignition/math/Vector3.hh&gt;\n\nnamespace gazebo\n{\nclass ModelPush : public ModelPlugin\n{\npublic: void Load(physics::ModelPtr _parent, sdf::ElementPtr /*_sdf*/)\n{\n// Store the pointer to the model\nthis-&gt;model = _parent;\n\n// Listen to the update event. This event is broadcast every\n// simulation iteration.\nthis-&gt;updateConnection = event::Events::ConnectWorldUpdateBegin(\nstd::bind(&amp;ModelPush::OnUpdate, this));\n}\n\n// Called by the world update start event\npublic: void OnUpdate()\n{\n// Apply a small linear velocity to the model.\nthis-&gt;model-&gt;SetLinearVel(ignition::math::Vector3d(.3, 0, 0));\n}\n\n// Pointer to the model\nprivate: physics::ModelPtr model;\n\n// Pointer to the update event connection\nprivate: event::ConnectionPtr updateConnection;\n};\n\n// Register this plugin with the simulator\nGZ_REGISTER_MODEL_PLUGIN(ModelPush)\n}\n</code></pre>","tags":["gazebo","plugin","model","ros2"]},{"location":"blog/ROS2/gazebo/plugins/model_plugin_demo/#worlds","title":"Worlds","text":"model_push.world<pre><code>&lt;?xml version=\"1.0\"?&gt; &lt;sdf version=\"1.4\"&gt;\n&lt;world name=\"default\"&gt;\n\n&lt;!-- Ground Plane --&gt;\n&lt;include&gt;\n&lt;uri&gt;model://ground_plane&lt;/uri&gt;\n&lt;/include&gt;\n\n&lt;include&gt;\n&lt;uri&gt;model://sun&lt;/uri&gt;\n&lt;/include&gt;\n\n&lt;model name=\"box\"&gt;\n&lt;pose&gt;0 0 0.5 0 0 0&lt;/pose&gt;\n&lt;link name=\"link\"&gt;\n&lt;collision name=\"collision\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;1 1 1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n\n&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;1 1 1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n\n&lt;plugin name=\"model_push\" filename=\"libmodel_push.so\"/&gt;\n&lt;/model&gt;        &lt;/world&gt;\n&lt;/sdf&gt;\n</code></pre>","tags":["gazebo","plugin","model","ros2"]},{"location":"blog/ROS2/gazebo/plugins/model_plugin_demo/#launch","title":"launch","text":"<ul> <li>Set <code>GAZEBO_RESOURCE_PATH</code> to share/worlds sub folder</li> <li>Set <code>GAZEBO_PLUGIN_PATH</code> to lib/ sub folder push.launch.py<pre><code>import os\n\nfrom ament_index_python.packages import (get_package_prefix,\n                                         get_package_share_directory)\nfrom launch import LaunchDescription\nfrom launch.actions import (AppendEnvironmentVariable, DeclareLaunchArgument,\n                            IncludeLaunchDescription)\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch.substitutions import LaunchConfiguration\n\nPACKAGE = \"gazebo_tutorial_pkg\"\nWORLD = \"model_push.world\"\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg = get_package_share_directory(PACKAGE)\n    pkg_root = get_package_prefix(PACKAGE)\n    gazebo_pkg = get_package_share_directory(\"gazebo_ros\")\n\n    verbose = LaunchConfiguration(\"verbose\")\n    arg_gazebo_verbose = DeclareLaunchArgument(\"verbose\", default_value=\"true\")\n    world = LaunchConfiguration(\"world\")\n    arg_gazebo_world = DeclareLaunchArgument(\"world\", default_value=WORLD)\n\n    resources = [os.path.join(pkg, \"worlds\")]\n    resource_env = AppendEnvironmentVariable(\n        name=\"GAZEBO_RESOURCE_PATH\", value=\":\".join(resources)\n    )\n\n    plugins = [os.path.join(pkg_root, \"lib\", PACKAGE), os.path.join(pkg, \"plugins\")]\n\n    plugins_env = AppendEnvironmentVariable(\n        name=\"GAZEBO_PLUGIN_PATH\", value=\":\".join(plugins)\n    )\n\n    gazebo = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            [os.path.join(gazebo_pkg, \"launch\", \"gazebo.launch.py\")]\n        ),\n        launch_arguments={\"verbose\": verbose, \"world\": world}.items(),\n    )\n\n    ld.add_action(resource_env)\n    ld.add_action(arg_gazebo_verbose)\n    ld.add_action(arg_gazebo_world)\n    ld.add_action(plugins_env)\n    ld.add_action(gazebo)\n    return ld\n</code></pre>","tags":["gazebo","plugin","model","ros2"]},{"location":"blog/ROS2/gazebo/plugins/model_plugin_demo/#reference","title":"Reference","text":"<ul> <li>gazebo Model plugins</li> </ul>","tags":["gazebo","plugin","model","ros2"]},{"location":"blog/ROS2/gazebo/sensors/","title":"Gazebo (classic) sensors tutorials","text":"","tags":["gazebo","ros2","cook"]},{"location":"blog/ROS2/gazebo/sensors/#project","title":"Project","text":"<pre><code>gazebo\n    \u251c\u2500\u2500 worlds\n    \u2502   \u2514\u2500\u2500 gazebo.world\n    \u251c\u2500\u2500 models\n    \u2502   \u2514\u2500\u2500 simple\n    \u251c\u2500\u2500 launch\n    \u2502   \u2514\u2500\u2500 gazebo.launch.py\n</code></pre>","tags":["gazebo","ros2","cook"]},{"location":"blog/ROS2/gazebo/sensors/#reference","title":"Reference","text":"<ul> <li>A Review of the ROS2 URDF Gazebo Sensor</li> </ul>","tags":["gazebo","ros2","cook"]},{"location":"blog/ROS2/gazebo/sensors/camera/","title":"ROS2 gazebo camera sensor and plugin","text":"<p>Gazebo camera sensor with ROS2 plugin Tutorial Using SDF, </p> <ul> <li>Spawn camera SDF model into gazebo</li> <li>View Camera with correct TF in rviz</li> <li>set plugin camera coordinate system (x:right, y:down, z:into the plan)</li> </ul> <p></p>","tags":["ros2","gazebo","camera"]},{"location":"blog/ROS2/gazebo/sensors/camera/#image-coordinate-frame","title":"Image Coordinate Frame","text":"","tags":["ros2","gazebo","camera"]},{"location":"blog/ROS2/gazebo/sensors/camera/#camera-coordinate-frame","title":"Camera Coordinate Frame","text":"","tags":["ros2","gazebo","camera"]},{"location":"blog/ROS2/gazebo/sensors/camera/#robot-coordinate-frmae","title":"Robot Coordinate Frmae","text":"","tags":["ros2","gazebo","camera"]},{"location":"blog/ROS2/gazebo/sensors/camera/#demo","title":"Demo","text":"<ul> <li>camera.world: Gazebo world sdf file </li> <li>camera2.sdf: camera model, SDF file with ros2 plugin</li> <li>camera.launch.py: ROS2 launch file <ul> <li>Launch gazebo</li> <li>Run Rviz</li> <li>spawn ROBOT (camera)</li> <li>Set static TF\u2019s</li> </ul> </li> </ul>","tags":["ros2","gazebo","camera"]},{"location":"blog/ROS2/gazebo/sensors/camera/#world","title":"world","text":"<p>Basic gazebo world  - Add simple object viewed by the camera</p> worlds/camera.world","tags":["ros2","gazebo","camera"]},{"location":"blog/ROS2/gazebo/sensors/camera/#model","title":"model","text":"models/camera2/model.sdf","tags":["ros2","gazebo","camera"]},{"location":"blog/ROS2/gazebo/sensors/camera/#launch","title":"launch","text":"launch/camera.launch.py","tags":["ros2","gazebo","camera"]},{"location":"blog/ROS2/gazebo/sensors/camera/#reference","title":"Reference","text":"<ul> <li>Projec@on</li> <li>image copywrite</li> </ul>","tags":["ros2","gazebo","camera"]},{"location":"blog/ROS2/gazebo/sensors/depth_camera/","title":"sdf","text":"","tags":["gazebo","ros2","sensors","cook"]},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#modelxml-version10sdf-version15----model-namedepth_camera--------pose0-0-05-0-0-0pose--------statictruestatic--------link-namecamera_depth_frame------------pose0-0-0--15708-0--15708pose----------link--------link-namelink------------collision-namecollision----------------geometry--------------------box------------------------size01-01-01size--------------------box----------------geometry------------collision------------visual-namevisual----------------geometry--------------------box------------------------size01-01-01size--------------------box----------------geometry------------visual------------sensor-typedepth-namedepth_camera----------------always_on0always_on----------------update_rate10update_rate----------------camera-namecamera_name----------------camera----------------plugin-nameplugin_name-filenamelibgazebo_ros_cameraso--------------------ros------------------------namespacecustom_nsnamespace------------------------remappingcustom_cameraimage_rawcustom_cameracustom_imageremapping------------------------remappingcustom_cameraimage_depthcustom_cameracustom_image_depthremapping------------------------remappingcustom_cameracamera_infocustom_cameracustom_info_rawremapping------------------------remappingcustom_cameracamera_info_depthcustom_cameracustom_info_depthremapping------------------------remappingcustom_camerapointscustom_cameracustom_pointsremapping--------------------ros--------------------camera_namecustom_cameracamera_name--------------------frame_namecamera_depth_frameframe_name----------------plugin------------sensor--------link----modelsdf","title":"model<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;sdf version=\"1.5\"&gt;\n    &lt;model name=\"depth_camera\"&gt;\n        &lt;pose&gt;0 0 0.5 0 0 0&lt;/pose&gt;\n        &lt;static&gt;true&lt;/static&gt;\n        &lt;link name=\"camera_depth_frame\"&gt;\n            &lt;pose&gt;0 0 0 -1.5708 0 -1.5708&lt;/pose&gt;\n          &lt;/link&gt;\n        &lt;link name=\"link\"&gt;\n            &lt;collision name=\"collision\"&gt;\n                &lt;geometry&gt;\n                    &lt;box&gt;\n                        &lt;size&gt;0.1 0.1 0.1&lt;/size&gt;\n                    &lt;/box&gt;\n                &lt;/geometry&gt;\n            &lt;/collision&gt;\n            &lt;visual name=\"visual\"&gt;\n                &lt;geometry&gt;\n                    &lt;box&gt;\n                        &lt;size&gt;0.1 0.1 0.1&lt;/size&gt;\n                    &lt;/box&gt;\n                &lt;/geometry&gt;\n            &lt;/visual&gt;\n            &lt;sensor type=\"depth\" name=\"depth_camera\"&gt;\n                &lt;always_on&gt;0&lt;/always_on&gt;\n                &lt;update_rate&gt;10&lt;/update_rate&gt;\n                &lt;camera name=\"camera_name\"&gt;\n                &lt;/camera&gt;\n                &lt;plugin name=\"plugin_name\" filename=\"libgazebo_ros_camera.so\"&gt;\n                    &lt;ros&gt;\n                        &lt;namespace&gt;custom_ns&lt;/namespace&gt;\n                        &lt;remapping&gt;custom_camera/image_raw:=custom_camera/custom_image&lt;/remapping&gt;\n                        &lt;remapping&gt;custom_camera/image_depth:=custom_camera/custom_image_depth&lt;/remapping&gt;\n                        &lt;remapping&gt;custom_camera/camera_info:=custom_camera/custom_info_raw&lt;/remapping&gt;\n                        &lt;remapping&gt;custom_camera/camera_info_depth:=custom_camera/custom_info_depth&lt;/remapping&gt;\n                        &lt;remapping&gt;custom_camera/points:=custom_camera/custom_points&lt;/remapping&gt;\n                    &lt;/ros&gt;\n                    &lt;camera_name&gt;custom_camera&lt;/camera_name&gt;\n                    &lt;frame_name&gt;camera_depth_frame&lt;/frame_name&gt;\n                &lt;/plugin&gt;\n            &lt;/sensor&gt;\n        &lt;/link&gt;\n    &lt;/model&gt;\n&lt;/sdf&gt;\n</code></pre>","text":"","tags":["gazebo","ros2","sensors","cook"]},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#launch","title":"launch","text":"","tags":["gazebo","ros2","sensors","cook"]},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#launchimport-osfrom-launch-import-launchdescriptionfrom-launchactions-import-appendenvironmentvariable-includelaunchdescriptionfrom-launchlaunch_description_sources-import-pythonlaunchdescriptionsourcefrom-ament_index_pythonpackages-import-get_package_share_directoryfrom-launch_rosactions-import-nodepackage_name--sam_bot_descriptionworld--gazeboworldmodel--depth_cameradef-generate_launch_description----pkg_share--get_package_share_directorypackage_name----pkg_gazebo_ros--get_package_share_directorygazebo_ros----model_sdf_full_path--ospathjoinpkg_share-models-model-modelsdf----resources----------ospathjoinpkg_share-worlds------------resource_env--appendenvironmentvariablenamegazebo_resource_path-valuejoinresources----start_gazebo_server_cmd--includelaunchdescription--------pythonlaunchdescriptionsourceospathjoinpkg_gazebo_ros-launch-gzserverlaunchpy--------launch_arguments------------verbose-true-------------world-worlditems----start_gazebo_client_cmd--includelaunchdescription--------pythonlaunchdescriptionsourceospathjoinpkg_gazebo_ros-launch-gzclientlaunchpy----spawn_entity_cmd--node--------packagegazebo_ros---------executablespawn_entitypy--------arguments-entity-robot_name_in_model----------file-model_sdf_full_path---------x-0---------y-0---------z-05--------outputscreen----ld--launchdescription----rviz--node--------packagerviz2--------executablerviz2--------arguments-d-ospathjoinpkg_share-config-model--rviz--------link_tf--node--------packagetf2_ros--------executablestatic_transform_publisher--------namelink2world--------arguments--0-0-05--15708-0--15708-link-camera_depth_frame--------ld--launchdescription----ldadd_actionresource_env----ldadd_actionstart_gazebo_server_cmd----ldadd_actionstart_gazebo_client_cmd----ldadd_actionspawn_entity_cmd----ldadd_actionrviz----ldadd_actionlink_tf----return-ld","title":"launch<pre><code>import os\nfrom launch import LaunchDescription\nfrom launch.actions import AppendEnvironmentVariable, IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch_ros.actions import Node\n\nPACKAGE_NAME = \"sam_bot_description\"\nWORLD = \"gazebo.world\"\nMODEL = \"depth_camera\"\n\ndef generate_launch_description():\n    pkg_share = get_package_share_directory(PACKAGE_NAME)\n    pkg_gazebo_ros = get_package_share_directory('gazebo_ros')\n    model_sdf_full_path = os.path.join(pkg_share, \"models\", MODEL, \"model.sdf\")\n\n\n    resources = [\n        os.path.join(pkg_share, \"worlds\")    \n    ]\n\n    resource_env = AppendEnvironmentVariable(name=\"GAZEBO_RESOURCE_PATH\", value=\":\".join(resources))\n\n    start_gazebo_server_cmd = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(os.path.join(pkg_gazebo_ros, 'launch', 'gzserver.launch.py')),\n        launch_arguments={\n            \"verbose\": \"true\", \n            'world': WORLD}.items())\n\n    start_gazebo_client_cmd = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(os.path.join(pkg_gazebo_ros, 'launch', 'gzclient.launch.py')))\n\n    spawn_entity_cmd = Node(\n        package=\"gazebo_ros\", \n        executable=\"spawn_entity.py\",\n        arguments=['-entity', \"robot_name_in_model\", \n        '-file', model_sdf_full_path,\n        '-x', \"0\",\n        '-y', \"0\",\n        '-z', \"0.5\"],\n        output='screen')\n\n    ld = LaunchDescription()\n    rviz = Node(\n        package=\"rviz2\",\n        executable=\"rviz2\",\n        arguments=[\"-d\", os.path.join(pkg_share, \"config\", MODEL + \".rviz\")],\n    )\n\n    link_tf = Node(\n        package='tf2_ros',\n        executable='static_transform_publisher',\n        name=\"link2world\",\n        arguments = [\"0\", \"0\", \"0.5\", \"-1.5708\", \"0\", \"-1.5708\", \"link\", \"camera_depth_frame\"]\n    )\n\n    ld = LaunchDescription()\n    ld.add_action(resource_env)\n    ld.add_action(start_gazebo_server_cmd)\n    ld.add_action(start_gazebo_client_cmd)\n    ld.add_action(spawn_entity_cmd)\n    ld.add_action(rviz)\n    ld.add_action(link_tf)\n    return ld\n</code></pre>","text":"","tags":["gazebo","ros2","sensors","cook"]},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#run","title":"Run","text":"","tags":["gazebo","ros2","sensors","cook"]},{"location":"blog/ROS2/gazebo/sensors/depth_camera/#reference","title":"Reference","text":"<ul> <li>ROS2 migration</li> </ul>","tags":["gazebo","ros2","sensors","cook"]},{"location":"blog/ROS2/gazebo/sensors/gps/","title":"Gazebo GPS Sensor","text":"<p>Add GPS sensor and ROS2 plugin</p> <p>Note</p> <p>GPS gazebo is a sensor plugin</p>","tags":["ros2","gazebo","gps","sensors"]},{"location":"blog/ROS2/gazebo/sensors/gps/#demo-project","title":"Demo project","text":"<pre><code>sdf_lab\n\u251c\u2500\u2500 launch\n\u2502   \u2514\u2500\u2500 gps_world.launch.py\n\u251c\u2500\u2500 models\n\u2502   \u2514\u2500\u2500 gps_box\n\u2502      \u251c\u2500\u2500 model.config\n\u2502      \u2514\u2500\u2500 model.sdf\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 worlds\n    \u2514\u2500\u2500 empty_gps.world\n</code></pre> <p>Project files: </p> <ul> <li>model: Simple link with gps sensor and ros2 plugin  </li> <li>world: Init gps coordinates  </li> <li>launch: Run gazebo with world and spawn model</li> </ul>","tags":["ros2","gazebo","gps","sensors"]},{"location":"blog/ROS2/gazebo/sensors/gps/#model","title":"model","text":"<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;sdf version=\"1.5\"&gt;\n&lt;model name=\"gps_box\"&gt;\n&lt;pose&gt;0 0 0 0 0 0&lt;/pose&gt;\n\n&lt;link name='gps_link'&gt;\n&lt;pose&gt;0 0 0.2 0 0 0&lt;/pose&gt;\n&lt;inertial&gt;\n&lt;mass&gt;1&lt;/mass&gt;\n&lt;inertia&gt;\n&lt;ixx&gt;0.026666666666666672&lt;/ixx&gt;\n&lt;ixy&gt;0&lt;/ixy&gt;\n&lt;ixz&gt;0&lt;/ixz&gt;\n&lt;iyy&gt;0.026666666666666672&lt;/iyy&gt;\n&lt;iyz&gt;0&lt;/iyz&gt;\n&lt;izz&gt;0.026666666666666672&lt;/izz&gt;\n&lt;/inertia&gt;\n&lt;/inertial&gt;\n&lt;visual name='box_visual'&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;0.4 0.4 0.4&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;material&gt;\n&lt;script&gt;\n&lt;uri&gt;file://media/materials/scripts/gazebo.material&lt;/uri&gt;\n&lt;name&gt;Gazebo/Red&lt;/name&gt;\n&lt;/script&gt;\n&lt;/material&gt;\n\n&lt;/visual&gt;\n&lt;collision name='box_collision'&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;0.4 0.4 0.4&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;sensor name=\"gps_sensor\" type=\"gps\"&gt;\n&lt;always_on&gt;true&lt;/always_on&gt;\n&lt;update_rate&gt;10&lt;/update_rate&gt;\n&lt;plugin name=\"gps_controller\" filename=\"libgazebo_ros_gps_sensor.so\"&gt;\n&lt;ros&gt;\n&lt;!-- &lt;namespace&gt;/br&lt;/namespace&gt; --&gt;\n&lt;remapping&gt;gps_controller/out:=gps_pos&lt;/remapping&gt;\n&lt;remapping&gt;gps_controller/vel:=gps_vel&lt;/remapping&gt;\n\n&lt;/ros&gt;\n&lt;frame_name&gt;gps_link&lt;/frame_name&gt;\n&lt;/plugin&gt;\n&lt;/sensor&gt;\n&lt;/link&gt;\n\n\n\n&lt;/model&gt;\n&lt;/sdf&gt;\n</code></pre>","tags":["ros2","gazebo","gps","sensors"]},{"location":"blog/ROS2/gazebo/sensors/gps/#world","title":"world","text":"<pre><code>&lt;sdf version=\"1.6\"&gt;\n&lt;world name=\"gazebo_ros_gps_sensor_world\"&gt;\n&lt;include&gt;\n&lt;uri&gt;model://ground_plane&lt;/uri&gt;\n&lt;/include&gt;\n&lt;include&gt;\n&lt;uri&gt;model://sun&lt;/uri&gt;\n&lt;/include&gt;\n&lt;spherical_coordinates&gt;\n&lt;latitude_deg&gt;31.0461&lt;/latitude_deg&gt;\n&lt;longitude_deg&gt;34.8516&lt;/longitude_deg&gt;\n&lt;elevation&gt;0&lt;/elevation&gt;\n&lt;!-- currently gazebo has a bug: instead of outputing lat, long, altitude in ENU\n          (x = East, y = North and z = Up) as the default configurations, it's outputting (-E)(-N)U,\n          therefore we rotate the default frame 180 so that it would go back to ENU --&gt;\n&lt;heading_deg&gt;180&lt;/heading_deg&gt;\n&lt;/spherical_coordinates&gt;\n&lt;/world&gt;\n&lt;/sdf&gt;\n</code></pre>","tags":["ros2","gazebo","gps","sensors"]},{"location":"blog/ROS2/gazebo/sensors/gps/#launch","title":"launch","text":"<pre><code>from launch import LaunchDescription\nimport os\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch.actions import AppendEnvironmentVariable, DeclareLaunchArgument\nfrom launch.substitutions import LaunchConfiguration\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch_ros.actions import Node\n\nPACKAGE = \"sdf_lab\"\nWORLD = \"empty_gps.world\"\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg = get_package_share_directory(PACKAGE)\n    gazebo_pkg = get_package_share_directory('gazebo_ros')\n\n    verbose = LaunchConfiguration(\"verbose\")\n    arg_gazebo_verbose = DeclareLaunchArgument(\"verbose\", default_value=\"true\")\n    world = LaunchConfiguration(\"world\")\n    arg_gazebo_world = DeclareLaunchArgument(\"world\", default_value=WORLD)\n\n\n    resources = [\"/usr/share/gazebo-11\", os.path.join(pkg, \"worlds\")]\n\n    resource_env = AppendEnvironmentVariable(\n        name=\"GAZEBO_RESOURCE_PATH\", value=\":\".join(resources)\n    )\n\n    models = [os.path.join(pkg, \"models\")]\n\n    models_env = AppendEnvironmentVariable(\n        name=\"GAZEBO_MODEL_PATH\", value=\":\".join(models)\n    )\n\n    gazebo = IncludeLaunchDescription(\n                PythonLaunchDescriptionSource([os.path.join(\n                    gazebo_pkg, 'launch', 'gazebo.launch.py')]),\n                    launch_arguments={'verbose': verbose, \"world\": world}.items()\n             )\n\n    spawn_entity = Node(\n        package=\"gazebo_ros\",\n        executable=\"spawn_entity.py\",\n        arguments=[\"-entity\", \"demo\", \"-database\", \"gps_box\"],\n        output=\"screen\",\n    )\n\n    ld.add_action(models_env)\n    ld.add_action(resource_env)\n    ld.add_action(arg_gazebo_verbose)\n    ld.add_action(arg_gazebo_world)\n    ld.add_action(gazebo)\n    ld.add_action(spawn_entity)\n    return ld\n</code></pre> <p>Tip</p> <p>set model name and set GAZEBO_MODEL_PATH path this attribute lock for model by name in this paths</p>","tags":["ros2","gazebo","gps","sensors"]},{"location":"blog/ROS2/gazebo/sensors/imu/","title":"Reference","text":"<ul> <li>rep-145</li> </ul>","tags":["ros2","gazebo","imu","sensors"]},{"location":"blog/ROS2/gazebo/sensors/lidar/","title":"ROS2 gazebo (classic) LIDAR sensor","text":"<p>ROS2 using new plug <code>gazebo_ros_ray_sensor</code> to simulate <code>PointCloud</code>, <code>LaserScan</code> and <code>Range</code> output message control by <code>&lt;output_type&gt;</code> tag</p> <ul> <li>sensor_msgs/PointCloud2: 3D cloud of points (default)</li> <li>sensor_msgs/PointCloud: 3D cloud of points</li> <li>sensor_msgs/LaserScan: 2D scan, uses center vertical ray if there are multiple</li> <li>sensor_msgs/Range: Single distance value, minimum of all ray ranges of parent sensor</li> </ul>","tags":["gazebo","ros2","sensors","ray","gazebo_ros_ray_sensor","lidar","ultrsonic","range"]},{"location":"blog/ROS2/gazebo/sensors/lidar/#demo","title":"Demo","text":"","tags":["gazebo","ros2","sensors","ray","gazebo_ros_ray_sensor","lidar","ultrsonic","range"]},{"location":"blog/ROS2/gazebo/sensors/lidar/#sdf","title":"SDF","text":"<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;sdf version=\"1.5\"&gt;\n&lt;model name=\"lidar_demo\"&gt;\n&lt;pose&gt;0 0 0.5 0 0 0&lt;/pose&gt;\n&lt;static&gt;true&lt;/static&gt;\n&lt;link name=\"link\"&gt;\n&lt;collision name=\"collision\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;0.1 0.1 0.1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;0.1 0.1 0.1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/visual&gt;\n&lt;sensor name=\"lidar\" type=\"ray\"&gt;\n&lt;always_on&gt;true&lt;/always_on&gt;\n&lt;visualize&gt;true&lt;/visualize&gt;\n&lt;update_rate&gt;5&lt;/update_rate&gt;\n&lt;ray&gt;\n&lt;scan&gt;\n&lt;horizontal&gt;\n&lt;samples&gt;180&lt;/samples&gt;\n&lt;resolution&gt;1.00000&lt;/resolution&gt;\n&lt;min_angle&gt;-1.57&lt;/min_angle&gt;\n&lt;max_angle&gt;1.57&lt;/max_angle&gt;\n&lt;/horizontal&gt;\n&lt;/scan&gt;\n&lt;range&gt;\n&lt;min&gt;0.5&lt;/min&gt;\n&lt;max&gt;3.5&lt;/max&gt;\n&lt;resolution&gt;0.1&lt;/resolution&gt;\n&lt;/range&gt;\n&lt;/ray&gt;\n&lt;plugin name=\"scan\" filename=\"libgazebo_ros_ray_sensor.so\"&gt;\n&lt;ros&gt;\n&lt;remapping&gt;~/out:=scan&lt;/remapping&gt;\n&lt;/ros&gt;\n&lt;output_type&gt;sensor_msgs/LaserScan&lt;/output_type&gt;\n&lt;frame_name&gt;link&lt;/frame_name&gt;\n&lt;/plugin&gt;\n&lt;/sensor&gt;\n&lt;/link&gt;\n&lt;/model&gt;\n&lt;/sdf&gt;\n</code></pre>","tags":["gazebo","ros2","sensors","ray","gazebo_ros_ray_sensor","lidar","ultrsonic","range"]},{"location":"blog/ROS2/gazebo/sensors/lidar/#run","title":"Run","text":"","tags":["gazebo","ros2","sensors","ray","gazebo_ros_ray_sensor","lidar","ultrsonic","range"]},{"location":"blog/ROS2/gazebo/sensors/lidar/#sensor_msgsrange","title":"sensor_msgs/Range","text":"<pre><code>&lt;plugin name=\"ultrasonic_sensor\" filename=\"libgazebo_ros_ray_sensor.so\"&gt;\n&lt;ros&gt;\n&lt;remapping&gt;~/out:=range&lt;/remapping&gt;\n&lt;/ros&gt;\n&lt;output_type&gt;sensor_msgs/Range&lt;/output_type&gt;\n&lt;frame_name&gt;link&lt;/frame_name&gt;\n&lt;/plugin&gt;\n</code></pre> <pre><code>ros2 topic info /range\n#\nType: sensor_msgs/msg/Range\nPublisher count: 1\n</code></pre> <pre><code>header:\n  stamp:\n    sec: 2978\nnanosec: 715000000\nframe_id: link\nradiation_type: 1\nfield_of_view: 0.23999999463558197\nmin_range: 0.5\nmax_range: 2.5\nrange: 2.013324022293091\n</code></pre> <p>This type of message raise exception when reading is out of range</p> <pre><code>ros2 topic echo /range #\nUnable to convert call argument to Python object (compile in debug mode for details)\n</code></pre> <p>I Open an issue for this exception</p>","tags":["gazebo","ros2","sensors","ray","gazebo_ros_ray_sensor","lidar","ultrsonic","range"]},{"location":"blog/ROS2/gazebo/sensors/lidar/#sensor_msgslaserscan","title":"sensor_msgs/LaserScan","text":"<pre><code>&lt;plugin name=\"ultrasonic_sensor\" filename=\"libgazebo_ros_ray_sensor.so\"&gt;\n&lt;output_type&gt;sensor_msgs/LaserScan&lt;/output_type&gt;\n&lt;frame_name&gt;link&lt;/frame_name&gt;\n&lt;/plugin&gt;\n</code></pre> <pre><code>ros2 topic info /ultrasonic_sensor/out\n# \nType: sensor_msgs/msg/LaserScan\n</code></pre> <pre><code>header:\n  stamp:\n    sec: 109\nnanosec: 415000000\nframe_id: link\nangle_min: -0.11999999731779099\nangle_max: 0.11999999731779099\nangle_increment: 0.05999999865889549\ntime_increment: 0.0\nscan_time: 0.0\nrange_min: 0.5\nrange_max: 2.5\nranges:\n- .inf\n- 1.8191075325012207\n- 1.7666829824447632\n- 1.8185886144638062\n- .inf\nintensities:\n- 0.0\n- 0.0\n- 0.0\n- 0.0\n- 0.0\n</code></pre> <p>.inf</p> <p>When a beam is out of range (min/max) it\u2019s return <code>.inf</code></p>","tags":["gazebo","ros2","sensors","ray","gazebo_ros_ray_sensor","lidar","ultrsonic","range"]},{"location":"blog/ROS2/gazebo/sensors/lidar/#reference","title":"Reference","text":"<ul> <li>ROS 2 Migration: Ray sensors</li> </ul>","tags":["gazebo","ros2","sensors","ray","gazebo_ros_ray_sensor","lidar","ultrsonic","range"]},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/","title":"ROS2 gazebo (classic) ultrasonic sensor","text":"<ul> <li>Create simple model with ultrasonic sensor</li> <li>Spawn the model into gazebo world</li> <li>View sensor output in RVIZ</li> </ul>","tags":["gazebo","ros2","sensors","ultrasonic"]},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#sdf--sensor","title":"sdf / sensor","text":"ultrasonic/model.sdf","tags":["gazebo","ros2","sensors","ultrasonic"]},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#launch","title":"launch","text":"launch/ultrasonic.launch.py","tags":["gazebo","ros2","sensors","ultrasonic"]},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#tf","title":"tf","text":"<ul> <li>Add static tf between world to link (model)</li> </ul> <pre><code>link_tf = Node(\n        package='tf2_ros',\n        executable='static_transform_publisher',\n        name=\"link2world\",\n        arguments = [\"0\", \"0\", \"0.05\", \"0\", \"0\", \"0\", \"world\", \"link\"]\n    )\n</code></pre>","tags":["gazebo","ros2","sensors","ultrasonic"]},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#test-sensor-read","title":"Test sensor read","text":"ultrasonic_demo_.py","tags":["gazebo","ros2","sensors","ultrasonic"]},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#run","title":"run","text":"","tags":["gazebo","ros2","sensors","ultrasonic"]},{"location":"blog/ROS2/gazebo/sensors/ultrasonic/#run-again","title":"run again","text":"<p>out of range reading</p> <p>When sensor reading is out of range: - The visual marker turn brighter - Rviz stop show marker - BUG: subscriber stop read data from   topic (for output_type <code>sensor_msgs/Range</code>)</p> echo topic<pre><code>ros2 topic echo /ultrasonic_sensor_1 \nUnable to convert call argument to Python object (compile in debug mode for details)\n</code></pre> <p></p>","tags":["gazebo","ros2","sensors","ultrasonic"]},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/","title":"Body wrench and Joint Effort","text":"<p>ROS 2 Migration</p>","tags":["gazebo classic","tutorial","ros2","wrench","effort"]},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#link-wrench","title":"Link Wrench","text":"<p>model plugin: libgazebo_ros_force.so system plugin: libgazebo_ros_force_system.so</p>","tags":["gazebo classic","tutorial","ros2","wrench","effort"]},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#lab-","title":"LAB :","text":"","tags":["gazebo classic","tutorial","ros2","wrench","effort"]},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#libgazebo_ros_force","title":"libgazebo_ros_force","text":"world gazebo_ros_force_demo.world model force<pre><code>&lt;plugin name=\"gazebo_ros_force\" filename=\"libgazebo_ros_force.so\"&gt;\n&lt;ros&gt;\n&lt;namespace&gt;/demo/world&lt;/namespace&gt;\n&lt;remapping&gt;gazebo_ros_force:=force_demo&lt;/remapping&gt;\n&lt;/ros&gt;\n&lt;link_name&gt;link&lt;/link_name&gt;\n&lt;force_frame&gt;world&lt;/force_frame&gt;\n&lt;/plugin&gt;\n</code></pre> <pre><code># Apply force relative to force_frame\nros2 topic pub -1 /demo/world/force_demo geometry_msgs/Wrench \"force: {x: 10.0}\"\n</code></pre>","tags":["gazebo classic","tutorial","ros2","wrench","effort"]},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#libgazebo_ros_force_systemso","title":"libgazebo_ros_force_system.so","text":"<ul> <li>Run gazebo with system pligin</li> </ul> <pre><code>gazebo --verbose -s libgazebo_ros_force_system.so force_demo.world\n</code></pre> <pre><code>ros2 service list\n#\n/apply_joint_effort\n/apply_link_wrench\n/clear_joint_efforts\n/clear_link_wrenches\n</code></pre> <pre><code>ros2 service call /apply_link_wrench gazebo_msgs/srv/ApplyLinkWrench '{link_name: \"force_on_world_frame::link\", reference_frame: \"\", reference_point: { x: 0, y: 0, z: 0 }, wrench: { force: { x: 10, y: 0, z: 0 }, torque: { x: 0, y: 0, z: 0 } }, start_time: {sec: 0, nanosec: 0}, duration: {sec: -1, nanosec: 0} }'\n\nros2 service call /apply_link_wrench gazebo_msgs/srv/ApplyLinkWrench '{link_name: \"force_on_world_frame::link\", reference_frame: \"force_on_world_frame::link\", reference_point: { x: 0, y: 0, z: 0 }, wrench: { force: { x: 10, y: 0, z: 0 }, torque: { x: 0, y: 0, z: 0 } }, start_time: {sec: 0, nanosec: 0}, duration: {sec: -1, nanosec: 0} }'\n</code></pre> <pre><code>ros2 service call /clear_link_wrenches gazebo_msgs/srv/LinkRequest '{link_name: \"force_on_world_frame::link\"}' \n</code></pre> <p>TODO:  - usage of this service - reference name ? - reference point - force units - why the box move only when we apply 10 and above - what is the different between the system and the model plugin</p>","tags":["gazebo classic","tutorial","ros2","wrench","effort"]},{"location":"blog/ROS2/gazebo/tutorials/body_wrench_and_joint_effort/#reference","title":"Reference","text":"<ul> <li>gazebo plugin worlds</li> <li>ROS Communication</li> </ul>","tags":["gazebo classic","tutorial","ros2","wrench","effort"]},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/","title":"Basic two diff robot 101","text":"<p>The robot base on <code>Josh Newans</code> series Making a Mobile Robot with ROS - Full list of tutorials Basic code from josh template github My code locate in github</p> <ul> <li>Project and basic launch</li> <li>Odom and baselink</li> <li>Add Lidar</li> <li></li> </ul>","tags":["ros2","gazebo",101]},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/add_lidar/","title":"Add lidar","text":""},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/localization/","title":"Localization","text":"<pre><code>sudo apt install ros-humble-robot-localization\n</code></pre>"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/localization/#reference","title":"Reference","text":"<ul> <li>Sensor Fusion Using the Robot Localization Package \u2013 ROS 2</li> </ul>"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/odom_frame/","title":"Odom frame","text":"","tags":["gazebo classic","tutorial","odom"]},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/odom_frame/#diff-drive","title":"diff drive","text":"<p>using odom tf from diff drive plugin</p> <ul> <li>change <code>publish_odom_tf</code> from false to true</li> </ul> <pre><code>&lt;publish_odom_tf&gt;true&lt;/publish_odom_tf&gt;\n</code></pre> <p></p>","tags":["gazebo classic","tutorial","odom"]},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/slam_toolbox/","title":"slam_toolbox","text":"<pre><code>sudo apt install ros-humble-slam-toolbox\n</code></pre>"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/slam_toolbox/#mapping","title":"mapping","text":"<pre><code>ros2 launch slam_toolbox online_async_launch.py\n</code></pre>"},{"location":"blog/ROS2/gazebo/tutorials/basic_mobile_robot/slam_toolbox/#save-map","title":"save map","text":"<pre><code>ros2 run nav2_map_server map_saver_cli -f my_map\n</code></pre>"},{"location":"blog/ROS2/ignition/","title":"ROS2 Gazebo","text":"","tags":["ign","gz","ros2"]},{"location":"blog/ROS2/ignition/#gz-environment-variables","title":"gz environment variables","text":"IGN_GAZEBO_RESOURCE_PATH IGN_GAZEBO_SYSTEM_PLUGIN_PATH","tags":["ign","gz","ros2"]},{"location":"blog/ROS2/ignition/#ros2","title":"ROS2","text":"","tags":["ign","gz","ros2"]},{"location":"blog/ROS2/ignition/#ros2-copy-folder-to-install-folder","title":"ROS2 copy folder to install folder","text":"<pre><code>install(DIRECTORY\nlaunch\nmodels\nworld\nDESTINATION share/${PROJECT_NAME}\n)\n</code></pre>","tags":["ign","gz","ros2"]},{"location":"blog/ROS2/ignition/#minimum-launch","title":"minimum launch","text":"<pre><code>import os\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.actions import IncludeLaunchDescription, SetEnvironmentVariable\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg_ros_gz_sim = get_package_share_directory('ros_gz_sim')\n    pkg = get_package_share_directory('ign_tutorial')\n\n    resources = [\n        os.path.join(pkg, \"worlds\"),\n        os.path.join(pkg, \"models\")\n    ]\n    resource_env = SetEnvironmentVariable(name=\"IGN_GAZEBO_RESOURCE_PATH\", value=\":\".join(resources))\n\n    gazebo = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            os.path.join(pkg_ros_gz_sim, 'launch', 'gz_sim.launch.py')),\n            launch_arguments={'gz_args': '-r -v 2 empty.sdf'}.items(),\n    )\n\n    ld.add_action(resource_env)\n    ld.add_action(gazebo)\n    return ld\n</code></pre>","tags":["ign","gz","ros2"]},{"location":"blog/ROS2/ignition/jointstate/","title":"JointStatePublisher","text":"","tags":["ignition","ros2","bridge"]},{"location":"blog/ROS2/ignition/jointstate/#robot_state_publisher","title":"Robot_State_Publisher","text":"<p>robot_state_publisher uses the URDF specified by the parameter <code>robot_description</code> and the joint positions from the topic <code>joint_states</code> to calculate the forward kinematics of the robot and publish the results via tf.</p>","tags":["ignition","ros2","bridge"]},{"location":"blog/ROS2/ignition/jointstate/#joint_state_publisher","title":"Joint_State_Publisher","text":"<p>The JointStatePub system publishes state information for a model. The published message type is ignition::msgs::Model, and the publication topic is <code>/world/&lt;world_name&gt;/model/&lt;model_name&gt;/joint_state</code>.</p> <pre><code>&lt;plugin\nfilename=\"ignition-gazebo-joint-state-publisher-system\"\nname=\"ignition::gazebo::systems::JointStatePublisher\"&gt;\n&lt;/plugin&gt;\n</code></pre>","tags":["ignition","ros2","bridge"]},{"location":"blog/ROS2/ignition/jointstate/#demo","title":"Demo","text":"<ul> <li>Create 2 wheel robot urdf(xacro)</li> <li>Run ignition spawn the robot</li> <li>Bridge ign and ROS2 msgs</li> <li>Run rviz2</li> </ul>","tags":["ignition","ros2","bridge"]},{"location":"blog/ROS2/ignition/jointstate/#project","title":"project","text":"<pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 config\n\u2502   \u2514\u2500\u2500 rviz.rviz\n\u251c\u2500\u2500 launch\n\u2502   \u2514\u2500\u2500 mobile.launch.py\n\u251c\u2500\u2500 models\n\u2502   \u2514\u2500\u2500 basic_mobile_robot\n\u2502       \u251c\u2500\u2500 meshes\n\u2502       \u2502   \u2514\u2500\u2500 robot_base.stl\n\u2502       \u2514\u2500\u2500 mobile_bot.xacro\n\u251c\u2500\u2500 package.xml\n\u2514\u2500\u2500 worlds\n    \u2514\u2500\u2500 empty.sdf\n</code></pre>","tags":["ignition","ros2","bridge"]},{"location":"blog/ROS2/ignition/jointstate/#launch","title":"launch","text":"mobile.launch.py<pre><code>import os\nimport xacro\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nPACKAGE_NAME = \"ign_tutorial\"\ndef generate_launch_description():\npkg_ros_gz_sim = get_package_share_directory('ros_gz_sim')\npkg_demo = get_package_share_directory(PACKAGE_NAME)\n# Parse robot description from xacro\nrobot_description_file = os.path.join(pkg_demo, 'models', \"basic_mobile_robot\", 'mobile_bot.xacro')\nrobot_description_config = xacro.process_file(\nrobot_description_file\n)\nrobot_description = robot_description_config.toxml()\nparams = {'use_sim_time': True, 'robot_description': robot_description}\n# Robot state publisher\nrobot_state_publisher = Node(\npackage='robot_state_publisher',\nexecutable='robot_state_publisher',\nname='robot_state_publisher',\noutput='both',\nparameters=[params],\n)\n# Gazebo Sim\ngazebo = IncludeLaunchDescription(\nPythonLaunchDescriptionSource(\nos.path.join(pkg_ros_gz_sim, 'launch', 'gz_sim.launch.py')\n),\nlaunch_arguments={'gz_args': '-r empty.sdf'}.items(),\n)\n# Spawn\nspawn = Node(\npackage='ros_gz_sim',\nexecutable='create',\narguments=[\n'-name', 'basic',\n'-topic', 'robot_description',\n],\noutput='screen',\n)\n# Bridge\nbridge = Node(\npackage='ros_gz_bridge',\nexecutable='parameter_bridge',\narguments=[\n'/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock',\n# Joint states (IGN -&gt; ROS2)\n'/world/empty/model/basic/joint_state@sensor_msgs/msg/JointState[gz.msgs.Model',\n],\nremappings=[\n('/world/empty/model/basic/joint_state', 'joint_states'),\n],\noutput='screen'\n)\nrviz_node = Node(\npackage='rviz2',\nnamespace='',\nexecutable='rviz2',\nname='rviz2',\narguments=['-d' + os.path.join(pkg_demo, 'config', 'rviz.rviz')]\n)\nreturn LaunchDescription(\n[\ngazebo,\nspawn,\nbridge,\nrobot_state_publisher,\nrviz_node\n]\n)\n</code></pre> <pre><code>ign topic --list\n/clock\n/gazebo/resource_paths\n/gui/camera/pose\n/stats\n/world/empty/clock\n/world/empty/dynamic_pose/info\n/world/empty/model/basic/joint_state\n/world/empty/pose/info\n/world/empty/scene/deletion\n/world/empty/scene/info\n/world/empty/state\n/world/empty/stats\n\n# info\nign topic --info -t /world/empty/model/basic/joint_state\nPublishers [Address, Message Type]:\n  tcp://172.18.0.1:46571, ignition.msgs.Model\n</code></pre>","tags":["ignition","ros2","bridge"]},{"location":"blog/ROS2/ignition/jointstate/#urdf","title":"urdf","text":"basic_mobile_robot.urdf.xacro<pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;robot name=\"basic_mobile_bot\" xmlns:xacro=\"http://ros.org/wiki/xacro\"&gt;\n&lt;!-- ****************** ROBOT CONSTANTS *******************************  --&gt;\n&lt;!-- Define the size of the robot's main chassis in meters --&gt;\n&lt;xacro:property name=\"base_width\" value=\"0.39\"/&gt;\n&lt;xacro:property name=\"base_length\" value=\"0.70\"/&gt;\n&lt;xacro:property name=\"base_height\" value=\"0.20\"/&gt;\n&lt;!-- Define the shape of the robot's two back wheels in meters --&gt;\n&lt;xacro:property name=\"wheel_radius\" value=\"0.14\"/&gt;\n&lt;xacro:property name=\"wheel_width\" value=\"0.06\"/&gt;\n&lt;!-- x-axis points forward, y-axis points to left, z-axis points upwards --&gt;\n&lt;!-- Define the gap between the wheel and chassis along y-axis in meters --&gt;\n&lt;xacro:property name=\"wheel_ygap\" value=\"0.035\"/&gt;\n&lt;!-- Position the wheels along the z-axis --&gt;\n&lt;xacro:property name=\"wheel_zoff\" value=\"0.05\"/&gt;\n&lt;!-- Position the wheels along the x-axis --&gt;\n&lt;xacro:property name=\"wheel_xoff\" value=\"0.221\"/&gt;\n&lt;!-- Position the caster wheel along the x-axis --&gt;\n&lt;xacro:property name=\"caster_xoff\" value=\"0.217\"/&gt;\n&lt;!-- Define intertial property macros  --&gt;\n&lt;xacro:macro name=\"box_inertia\" params=\"m w h d\"&gt;\n&lt;inertial&gt;\n&lt;origin xyz=\"0 0 0\" rpy=\"${pi/2} 0 ${pi/2}\"/&gt;\n&lt;mass value=\"${m}\"/&gt;\n&lt;inertia ixx=\"${(m/12) * (h*h + d*d)}\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"${(m/12) * (w*w + d*d)}\" iyz=\"0.0\" izz=\"${(m/12) * (w*w + h*h)}\"/&gt;\n&lt;/inertial&gt;\n&lt;/xacro:macro&gt;\n&lt;xacro:macro name=\"cylinder_inertia\" params=\"m r h\"&gt;\n&lt;inertial&gt;\n&lt;origin xyz=\"0 0 0\" rpy=\"${pi/2} 0 0\" /&gt;\n&lt;mass value=\"${m}\"/&gt;\n&lt;inertia ixx=\"${(m/12) * (3*r*r + h*h)}\" ixy = \"0\" ixz = \"0\" iyy=\"${(m/12) * (3*r*r + h*h)}\" iyz = \"0\" izz=\"${(m/2) * (r*r)}\"/&gt;\n&lt;/inertial&gt;\n&lt;/xacro:macro&gt;\n&lt;xacro:macro name=\"sphere_inertia\" params=\"m r\"&gt;\n&lt;inertial&gt;\n&lt;mass value=\"${m}\"/&gt;\n&lt;inertia ixx=\"${(2/5) * m * (r*r)}\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"${(2/5) * m * (r*r)}\" iyz=\"0.0\" izz=\"${(2/5) * m * (r*r)}\"/&gt;\n&lt;/inertial&gt;\n&lt;/xacro:macro&gt;\n&lt;!-- ****************** ROBOT BASE FOOTPRINT ***************************  --&gt;\n&lt;!-- Define the center of the main robot chassis projected on the ground --&gt;  &lt;link name=\"world\"/&gt;\n&lt;!-- The base footprint of the robot is located underneath the chassis --&gt;\n&lt;joint name=\"base_joint\" type=\"fixed\"&gt;\n&lt;parent link=\"world\"/&gt;\n&lt;child link=\"base_link\" /&gt;\n&lt;origin xyz=\"0.0 0.0 ${(wheel_radius+wheel_zoff)}\" rpy=\"0 0 0\"/&gt;\n&lt;/joint&gt;\n&lt;!-- ********************** ROBOT BASE *********************************  --&gt;\n&lt;link name=\"base_link\"&gt;\n&lt;visual&gt;\n&lt;origin xyz=\"0 0 -0.05\" rpy=\"1.5707963267949 0 3.141592654\"/&gt;\n&lt;geometry&gt;\n&lt;mesh filename=\"file:///home/user/wasp_ws/src/tutorials/ign_tutorial/models/basic_mobile_robot/meshes/robot_base.stl\" /&gt;\n&lt;/geometry&gt;\n&lt;material name=\"Red\"&gt;\n&lt;color rgba=\"${255/255} ${0/255} ${0/255} 1.0\"/&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n&lt;collision&gt;\n&lt;geometry&gt;\n&lt;box size=\"${base_length} ${base_width} ${base_height}\"/&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;xacro:box_inertia m=\"40.0\" w=\"${base_width}\" d=\"${base_length}\" h=\"${base_height}\"/&gt;\n&lt;/link&gt;\n&lt;gazebo reference=\"base_link\"&gt;\n&lt;material&gt;Gazebo/Red&lt;/material&gt;\n&lt;/gazebo&gt;\n&lt;!-- *********************** DRIVE WHEELS ******************************  --&gt;\n&lt;xacro:macro name=\"wheel\" params=\"prefix x_reflect y_reflect\"&gt;\n&lt;link name=\"${prefix}_link\"&gt;\n&lt;visual&gt;\n&lt;origin xyz=\"0 0 0\" rpy=\"1.5707963267949 0 0\"/&gt;\n&lt;geometry&gt;\n&lt;cylinder radius=\"${wheel_radius}\" length=\"${wheel_width}\"/&gt;\n&lt;/geometry&gt;\n&lt;material name=\"White\"&gt;\n&lt;color rgba=\"${255/255} ${255/255} ${255/255} 1.0\"/&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n&lt;collision&gt;\n&lt;origin xyz=\"0 0 0\" rpy=\"${pi/2} 0 0\"/&gt;\n&lt;geometry&gt;\n&lt;cylinder radius=\"${wheel_radius}\" length=\"${wheel_width}\"/&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;xacro:cylinder_inertia m=\"110.5\" r=\"${wheel_radius}\" h=\"${wheel_width}\"/&gt;\n&lt;/link&gt;\n&lt;!-- Connect the wheels to the base_link at the appropriate location, and \n         define a continuous joint to allow the wheels to freely rotate about\n         an axis --&gt;\n&lt;joint name=\"${prefix}_joint\" type=\"revolute\"&gt;\n&lt;parent link=\"base_link\"/&gt;\n&lt;child link=\"${prefix}_link\"/&gt;\n&lt;origin xyz=\"${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}\" rpy=\"0 0 0\"/&gt;\n&lt;limit upper=\"3.1415\" lower=\"-3.1415\" effort=\"30\" velocity=\"5.0\"/&gt;\n&lt;axis xyz=\"0 1 0\"/&gt;\n&lt;/joint&gt;\n&lt;/xacro:macro&gt;\n&lt;!-- Instantiate two wheels using the macro we just made through the \n       xacro:wheel tags. We also define the parameters to have one wheel\n       on both sides at the back of our robot (i.e. x_reflect=-1). --&gt;\n&lt;xacro:wheel prefix=\"drivewhl_l\" x_reflect=\"-1\" y_reflect=\"1\" /&gt;\n&lt;xacro:wheel prefix=\"drivewhl_r\" x_reflect=\"-1\" y_reflect=\"-1\" /&gt;\n&lt;!-- *********************** CASTER WHEEL ******************************  --&gt;\n&lt;!-- We add a caster wheel. It will be modeled as sphere.\n       We define the wheel\u2019s geometry, material and the joint to connect it to \n       base_link at the appropriate location. --&gt;\n&lt;link name=\"front_caster\"&gt;\n&lt;visual&gt;\n&lt;geometry&gt;\n&lt;sphere radius=\"${(wheel_radius+wheel_zoff-(base_height/2))}\"/&gt;\n&lt;/geometry&gt;\n&lt;material name=\"White\"&gt;\n&lt;color rgba=\"${255/255} ${255/255} ${255/255} 1.0\"/&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n&lt;collision&gt;\n&lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\"/&gt;\n&lt;geometry&gt;\n&lt;sphere radius=\"${(wheel_radius+wheel_zoff-(base_height/2))}\"/&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;xacro:sphere_inertia m=\"10.05\" r=\"${(wheel_radius+wheel_zoff-(base_height/2))}\"/&gt;\n&lt;/link&gt;\n&lt;gazebo reference=\"front_caster\"&gt;\n&lt;mu1&gt;0.01&lt;/mu1&gt;\n&lt;mu2&gt;0.01&lt;/mu2&gt;\n&lt;material&gt;Gazebo/White&lt;/material&gt;\n&lt;/gazebo&gt;\n&lt;joint name=\"caster_joint\" type=\"fixed\"&gt;\n&lt;parent link=\"base_link\"/&gt;\n&lt;child link=\"front_caster\"/&gt;\n&lt;origin xyz=\"${caster_xoff} 0.0 ${-(base_height/2)}\" rpy=\"0 0 0\"/&gt;\n&lt;/joint&gt;\n&lt;!-- *********************** IMU SETUP *********************************  --&gt;\n&lt;!-- Each sensor must be attached to a link.                              --&gt; &lt;joint name=\"imu_joint\" type=\"fixed\"&gt;\n&lt;parent link=\"base_link\"/&gt;\n&lt;child link=\"imu_link\"/&gt;\n&lt;origin xyz=\"-0.10 0 0.05\" rpy=\"0 0 0\"/&gt;\n&lt;/joint&gt;\n&lt;link name=\"imu_link\"/&gt;\n&lt;!-- *********************** GPS SETUP **********************************  --&gt;\n&lt;joint name=\"gps_joint\" type=\"fixed\"&gt;\n&lt;parent link=\"base_link\"/&gt;\n&lt;child link=\"gps_link\"/&gt;\n&lt;origin xyz=\"0.10 0 0.05\" rpy=\"0 0 0\"/&gt;\n&lt;/joint&gt;\n&lt;link name=\"gps_link\"/&gt;\n&lt;gazebo&gt;\n&lt;plugin\nfilename=\"libignition-gazebo-joint-state-publisher-system.so\"\nname=\"ignition::gazebo::systems::JointStatePublisher\"&gt;\n&lt;/plugin&gt;\n&lt;/gazebo&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["ignition","ros2","bridge"]},{"location":"blog/ROS2/ignition/jointstate/#world","title":"world","text":"<pre><code>&lt;sdf version=\"1.6\"&gt;\n&lt;world name=\"my-empty\"&gt;\n&lt;physics name=\"1ms\" type=\"ignored\"&gt;\n&lt;max_step_size&gt;0.001&lt;/max_step_size&gt;\n&lt;real_time_factor&gt;1.0&lt;/real_time_factor&gt;\n&lt;/physics&gt;\n&lt;plugin filename=\"ignition-gazebo-physics-system\" name=\"ignition::gazebo::systems::Physics\"&gt;\n&lt;/plugin&gt;\n&lt;plugin filename=\"ignition-gazebo-scene-broadcaster-system\" name=\"ignition::gazebo::systems::SceneBroadcaster\"&gt;\n&lt;/plugin&gt;\n\n&lt;light type=\"directional\" name=\"sun\"&gt;\n&lt;cast_shadows&gt;true&lt;/cast_shadows&gt;\n&lt;pose&gt;0 0 10 0 0 0&lt;/pose&gt;\n&lt;diffuse&gt;0.8 0.8 0.8 1&lt;/diffuse&gt;\n&lt;specular&gt;0.2 0.2 0.2 1&lt;/specular&gt;\n&lt;attenuation&gt;\n&lt;range&gt;1000&lt;/range&gt;\n&lt;constant&gt;0.9&lt;/constant&gt;\n&lt;linear&gt;0.01&lt;/linear&gt;\n&lt;quadratic&gt;0.001&lt;/quadratic&gt;\n&lt;/attenuation&gt;\n&lt;direction&gt;-0.5 0.1 -0.9&lt;/direction&gt;\n&lt;/light&gt;\n\n&lt;model name=\"ground_plane\"&gt;\n&lt;static&gt;true&lt;/static&gt;\n&lt;link name=\"link\"&gt;\n&lt;collision name=\"collision\"&gt;\n&lt;geometry&gt;\n&lt;plane&gt;\n&lt;normal&gt;0 0 1&lt;/normal&gt;\n&lt;size&gt;100 100&lt;/size&gt;\n&lt;/plane&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;plane&gt;\n&lt;normal&gt;0 0 1&lt;/normal&gt;\n&lt;size&gt;100 100&lt;/size&gt;\n&lt;/plane&gt;\n&lt;/geometry&gt;\n&lt;material&gt;\n&lt;ambient&gt;0.8 0.8 0.8 1&lt;/ambient&gt;\n&lt;diffuse&gt;0.8 0.8 0.8 1&lt;/diffuse&gt;\n&lt;specular&gt;0.8 0.8 0.8 1&lt;/specular&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n&lt;/model&gt;\n\n&lt;/world&gt;\n&lt;/sdf&gt;\n</code></pre>","tags":["ignition","ros2","bridge"]},{"location":"blog/ROS2/ignition/jointstate/#reference","title":"Reference","text":"<ul> <li>double_pendulum_model</li> <li>launch demo</li> <li>ros_gz_sim_demos</li> <li>JointStatePublisher Class Reference</li> <li>joint state publisher and robot state publisher</li> <li>RVIZ2 Tutorials Episode1: Learn TF</li> </ul>","tags":["ignition","ros2","bridge"]},{"location":"blog/ROS2/ignition/spawn_xacro/","title":"LAB","text":"<ul> <li>Spawn xacro model into ign gazebo world</li> <li>View in rviz</li> <li></li> </ul>","tags":["ign","xacro"]},{"location":"blog/ROS2/ignition/spawn_xacro/#project","title":"project","text":"<pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 config\n\u2502   \u2514\u2500\u2500 rviz.rviz\n\u251c\u2500\u2500 launch\n\u2502   \u2514\u2500\u2500 xacro_demo.launch.py\n\u251c\u2500\u2500 models\n\u2502   \u2514\u2500\u2500 basic.xacro\n\u2514\u2500\u2500 package.xml\n</code></pre>","tags":["ign","xacro"]},{"location":"blog/ROS2/ignition/spawn_xacro/#cmakelists","title":"CMakeLists","text":"<ul> <li>Copy launch, models and config file to workspace <code>install</code> folder</li> </ul> CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(ign_tutorial)\n\nfind_package(ament_cmake REQUIRED)\n\ninstall(DIRECTORY\nlaunch\nmodels\nconfig\nDESTINATION share/${PROJECT_NAME}\n)\n\nament_package()\n</code></pre>","tags":["ign","xacro"]},{"location":"blog/ROS2/ignition/spawn_xacro/#launch-file","title":"launch file","text":"<ul> <li>Use <code>gz_sim.launch.py</code> launch from <code>ros_gz_sim</code> package to launch ignition with  <code>empty.world</code></li> <li>Use <code>xacro</code> node from xacro package to parse the <code>urdf.xacro</code> file</li> <li>Use <code>create</code> node from <code>ros_gz_sim</code> package to spawn the urdf</li> </ul> xacro_demo.launch.py<pre><code>import os\nimport xacro\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\n\nPACKAGE_NAME = \"ign_tutorial\"\n\ndef generate_launch_description():\n    pkg_ros_gz_sim = get_package_share_directory('ros_gz_sim')\n    pkg_demo = get_package_share_directory(PACKAGE_NAME)\n\n    # Parse robot description from xacro\n    robot_description_file = os.path.join(pkg_demo, 'models', 'basic.xacro')\n    robot_description_config = xacro.process_file(\n        robot_description_file\n    )\n    robot_description = robot_description_config.toxml()\n    params = {'use_sim_time': True, 'robot_description': robot_description}\n\n    # Robot state publisher\n    robot_state_publisher = Node(\n        package='robot_state_publisher',\n        executable='robot_state_publisher',\n        name='robot_state_publisher',\n        output='both',\n        parameters=[params],\n    )\n\n    # Gazebo Sim\n    gazebo = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            os.path.join(pkg_ros_gz_sim, 'launch', 'gz_sim.launch.py')\n        ),\n        launch_arguments={'gz_args': '-r empty.sdf'}.items(),\n    )\n\n     # Spawn\n    spawn = Node(\n        package='ros_gz_sim',\n        executable='create',\n        arguments=[\n            '-name', 'basic',\n            '-topic', 'robot_description',\n        ],\n        output='screen',\n    )\n\n    rviz_node = Node(\n            package='rviz2',\n            namespace='',\n            executable='rviz2',\n            name='rviz2',\n            arguments=['-d' + os.path.join(get_package_share_directory(PACKAGE_NAME), 'config', 'rviz.rviz')]\n        )\n\n    return LaunchDescription(\n        [\n            gazebo,\n            spawn,\n            robot_state_publisher,\n            rviz_node\n        ]\n    )\n</code></pre>","tags":["ign","xacro"]},{"location":"blog/ROS2/ignition/spawn_xacro/#urdf","title":"urdf","text":"<ul> <li>Declare <code>world</code> link and <code>fixed</code> join for <code>tf</code></li> </ul> basic.xacro<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"basic_xacro\"\nxmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n\n&lt;xacro:property name=\"height1\" value=\"2\" /&gt;\n&lt;xacro:property name=\"mass\" value=\"1\" /&gt;\n&lt;xacro:property name=\"width\" value=\"0.1\" /&gt;\n\n&lt;material name=\"orange\"&gt;\n&lt;color rgba=\"${255/255} ${108/255} ${10/255} 1.0\"/&gt;\n&lt;/material&gt;\n\n&lt;link name=\"world\"/&gt;\n\n&lt;joint name=\"fixed\" type=\"fixed\"&gt;\n&lt;parent link=\"world\"/&gt;\n&lt;child link=\"link1\"/&gt;\n&lt;/joint&gt;\n\n&lt;!-- Base Link --&gt;\n&lt;link name=\"link1\"&gt;\n&lt;collision&gt;\n&lt;origin xyz=\"0 0 ${height1/2}\" rpy=\"0 0 0\"/&gt;\n&lt;geometry&gt;\n&lt;box size=\"${width} ${width} ${height1}\"/&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n\n&lt;visual&gt;\n&lt;origin xyz=\"0 0 ${height1/2}\" rpy=\"0 0 0\"/&gt;\n&lt;geometry&gt;\n&lt;box size=\"${width} ${width} ${height1}\"/&gt;\n&lt;/geometry&gt;\n&lt;material name=\"orange\"/&gt;\n&lt;/visual&gt;\n\n&lt;inertial&gt;\n&lt;origin xyz=\"0 0 ${height1/2}\" rpy=\"0 0 0\"/&gt;\n&lt;mass value=\"${mass}\"/&gt;\n&lt;inertia ixx=\"${mass / 12.0 * (width*width + height1*height1)}\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"${mass / 12.0 * (height1*height1 + width*width)}\" iyz=\"0.0\" izz=\"${mass / 12.0 * (width*width + width*width)}\"/&gt;\n&lt;/inertial&gt;\n&lt;/link&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["ign","xacro"]},{"location":"blog/ROS2/ignition/spawn_xacro/#dependencies","title":"Dependencies","text":"<ul> <li>rviz2</li> <li>ros_gz_sim</li> <li>xacro</li> <li>robot_state_publisher</li> </ul>","tags":["ign","xacro"]},{"location":"blog/ROS2/ignition/spawn_xacro/#packagexml","title":"package.xml","text":"<ul> <li>Add the following dependencies</li> </ul> <pre><code>&lt;exec_depend&gt;xacro&lt;/exec_depend&gt;\n&lt;exec_depend&gt;robot_state_publisher&lt;/exec_depend&gt;\n&lt;exec_depend&gt;ros_gz_sim&lt;/exec_depend&gt;\n&lt;exec_depend&gt;rviz2&lt;/exec_depend&gt;\n</code></pre>","tags":["ign","xacro"]},{"location":"blog/ROS2/ignition/spawn_xacro/#rosdep","title":"rosdep","text":"<pre><code># from package root\nrosdep install --from-paths . --ignore-src --rosdistro=humble\n</code></pre>","tags":["ign","xacro"]},{"location":"blog/ROS2/ignition/spawn_xacro/#apt","title":"apt","text":"<pre><code>sudo apt install ros-humble-ros-gz-sim\nsudo apt install ros-humble-xacro\nsudo apt install ros-humble-robot-state-publisher\nsudo apt install ros-humble-rviz2\n</code></pre>","tags":["ign","xacro"]},{"location":"blog/ROS2/ignition/tips/","title":"Ignition gazebo tips","text":"","tags":["gazebo","tips"]},{"location":"blog/ROS2/ignition/tips/#dashboard","title":"dashboard","text":"<p> gazebo dashboard</p>","tags":["gazebo","tips"]},{"location":"blog/ROS2/ignition/tips/#include-same-model-multiple-times","title":"include same model multiple times","text":"<pre><code>&lt;include&gt;\n&lt;uri&gt;model://coke_can&lt;/uri&gt;\n&lt;name&gt;coke1&lt;/name&gt;\n&lt;pose&gt;0 2 0 0 0 0&lt;/pose&gt;\n&lt;/include&gt;\n\n&lt;include&gt;\n&lt;uri&gt;model://coke_can&lt;/uri&gt;\n&lt;name&gt;coke2&lt;/name&gt;\n&lt;pose&gt;0 -5 1 0 0 0&lt;/pose&gt;\n&lt;/include&gt;\n</code></pre>","tags":["gazebo","tips"]},{"location":"blog/ROS2/ignition/tips/#include-from-fuel","title":"include from fuel","text":"<pre><code>&lt;include&gt;\n&lt;name&gt;j1&lt;/name&gt;\n&lt;pose frame=''&gt;0 0 0 0 0 0&lt;/pose&gt;\n&lt;uri&gt;https://fuel.gazebosim.org/1.0/OpenRobotics/models/Jersey Barrier&lt;/uri&gt;\n&lt;/include&gt;\n</code></pre>","tags":["gazebo","tips"]},{"location":"blog/ROS2/ignition/bridge/","title":"Ignition ROS2","text":"","tags":["ros_ign"]},{"location":"blog/ROS2/ignition/bridge/#ros-ign-bridge","title":"ros ign bridge","text":"<p>ros_ign contains packages that provide integration between ROS2 and Ignition:</p> <ul> <li>ros_ign: Metapackage that provides all other software packages;</li> <li>ros_ign_image: Use image_transport to transfer the image from Ignition to the one-way transmission bridge of ROS;</li> <li>ros_ign_bridge: Two-way transmission bridge between Ignition and ROS;</li> <li>ros_ign_gazebo: It is convenient to use the startup files and executable files of Ignition Gazebo and ROS;</li> <li>ros_ign_gazebo_demos: Demos using ROS-Ignition integration;</li> <li>ros_ign_point_cloud: A plug-in used to simulate publishing point clouds to ROS from Ignition Gazebo</li> </ul>","tags":["ros_ign"]},{"location":"blog/ROS2/ignition/bridge/#install","title":"install","text":"<pre><code>sudo apt install ros-humble-ros-gz\n</code></pre>","tags":["ros_ign"]},{"location":"blog/ROS2/ignition/bridge/#usage","title":"usage","text":"<ul> <li>launch file that run node for each mapping</li> <li>The launch file included by parent launch file that run ignition and spawn the robot</li> </ul> project<pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ekf.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nav2_params.yaml\n\u251c\u2500\u2500 launch\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 display.launch.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sam_bridge.launch.py\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 rviz\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 urdf_config.rviz\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 description\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 sam_bot_description.urdf\n\u2514\u2500\u2500 world\n    \u251c\u2500\u2500 ign_world.sdf\n    \u2514\u2500\u2500 my_world.sdf\n</code></pre> gazebo, spawn, bridge<pre><code># Gazebo Sim\ngazebo = IncludeLaunchDescription(\n    PythonLaunchDescriptionSource(\n        os.path.join(pkg_ros_gz_sim, 'launch', 'gz_sim.launch.py')\n    ),\n    launch_arguments={'gz_args': f'-r {world_path}'}.items(),\n)\n\n#spawn\nspawn_entity = Node(\n    package='ros_gz_sim',\n    executable='create',\n    arguments=[\n        '-name', 'sam_bot',\n        '-topic', 'robot_description',\n        '-z', '0.5'\n    ],\n    output='screen',\n)\n\n#bridge\nign_bridge = IncludeLaunchDescription(\n    PythonLaunchDescriptionSource(\n        os.path.join(pkg_share, 'launch', BRIDGE_FILE_NAME),\n    ),\n    launch_arguments={\n        'use_sim_time': \"True\"}.items()\n)\n</code></pre>","tags":["ros_ign"]},{"location":"blog/ROS2/ignition/bridge/#reference","title":"Reference","text":"<ul> <li>ROS + Gazebo Sim demos</li> </ul>","tags":["ros_ign"]},{"location":"blog/ROS2/ignition/bridge/camera/","title":"Ignition ROS2 camera bridge","text":"<ul> <li>IGNITION: fortress</li> <li>ROS2: humble</li> </ul>","tags":["ignition","ros2","camera","bridge"]},{"location":"blog/ROS2/ignition/bridge/camera/#objective","title":"Objective","text":"<ul> <li>Create simulation with camera</li> <li>Publish camera using ros_ign bridge</li> <li>Write launch file</li> <li>View camera image in RVIZ</li> </ul>","tags":["ignition","ros2","camera","bridge"]},{"location":"blog/ROS2/ignition/bridge/camera/#model-with-camera","title":"model with camera","text":"<ul> <li>Based on vehicle model from this post</li> <li>Add this lines to exists model</li> </ul> <p>don\u2019t forget</p> <p>World sdf must contain <code>sensors</code> plugin</p> <pre><code> &lt;plugin filename=\"ignition-gazebo-sensors-system\" name=\"ignition::gazebo::systems::Sensors\"&gt;\n&lt;render_engine&gt;ogre&lt;/render_engine&gt;\n&lt;/plugin&gt;\n</code></pre>","tags":["ignition","ros2","camera","bridge"]},{"location":"blog/ROS2/ignition/bridge/camera/#camera-link-and-sensor","title":"camera link and sensor","text":"<pre><code>&lt;frame name=\"camera_frame\" attached_to='chassis'&gt;\n&lt;pose&gt;-0.8 0 1.5 0 0 0&lt;/pose&gt;\n&lt;/frame&gt;\n\n&lt;link name=\"camera_link\"&gt;\n&lt;pose relative_to='camera_frame'&gt;0 0 0 0 0 0&lt;/pose&gt;\n&lt;inertial&gt;\n&lt;mass&gt;0.1&lt;/mass&gt;\n&lt;inertia&gt;\n&lt;ixx&gt;0.000166667&lt;/ixx&gt;\n&lt;iyy&gt;0.000166667&lt;/iyy&gt;\n&lt;izz&gt;0.000166667&lt;/izz&gt;\n&lt;/inertia&gt;\n&lt;/inertial&gt;\n&lt;collision name=\"collision\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;0.1 0.1 0.1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;0.1 0.1 0.1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/visual&gt;\n&lt;sensor name=\"camera\" type=\"camera\"&gt;\n&lt;camera&gt;\n&lt;horizontal_fov&gt;1.047&lt;/horizontal_fov&gt;\n&lt;image&gt;\n&lt;width&gt;320&lt;/width&gt;\n&lt;height&gt;240&lt;/height&gt;\n&lt;/image&gt;\n&lt;clip&gt;\n&lt;near&gt;0.1&lt;/near&gt;\n&lt;far&gt;100&lt;/far&gt;\n&lt;/clip&gt;\n&lt;/camera&gt;\n&lt;always_on&gt;1&lt;/always_on&gt;\n&lt;update_rate&gt;30&lt;/update_rate&gt;\n&lt;visualize&gt;true&lt;/visualize&gt;\n&lt;topic&gt;camera&lt;/topic&gt;\n&lt;/sensor&gt;\n&lt;/link&gt;\n\n&lt;joint name='camera_joint' type='fixed'&gt;\n&lt;parent&gt;chassis&lt;/parent&gt;\n&lt;child&gt;camera_link&lt;/child&gt;\n&lt;/joint&gt;\n</code></pre>","tags":["ignition","ros2","camera","bridge"]},{"location":"blog/ROS2/ignition/bridge/camera/#cli","title":"Cli","text":"terminal2<pre><code>ros2 run ros_gz_bridge parameter_bridge /gimbal/camera@sensor_msgs/msg/Image@ignition.msgs.Image\n</code></pre> terminal3<pre><code>ros2 run rqt_image_view rqt_image_view\n</code></pre>","tags":["ignition","ros2","camera","bridge"]},{"location":"blog/ROS2/ignition/bridge/camera/#launch","title":"launch","text":"<pre><code>import os\n\nfrom ament_index_python.packages import get_package_share_directory\n\nfrom launch import LaunchDescription\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch.actions import SetEnvironmentVariable\nfrom launch_ros.actions import Node\n\nPACKAGE_NAME = \"ign_tutorial\"\n\ndef generate_launch_description():\n    pkg = get_package_share_directory(PACKAGE_NAME)\n    pkg_ros_gz_sim = get_package_share_directory('ros_gz_sim')\n\n    paths = [\n     os.path.join(pkg, \"worlds\"),\n     \"/home/user/wasp_ws/src/tutorials/ign_tutorial/models\"\n    ]\n    env = SetEnvironmentVariable(name='IGN_GAZEBO_RESOURCE_PATH', value=[\":\".join(paths)])\n\n    sdf_file = os.path.join(pkg, 'models', 'vehicle', 'model.sdf')\n\n    with open(sdf_file, 'r') as infp:\n        robot_desc = infp.read()\n\n    gz_sim = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            os.path.join(pkg_ros_gz_sim, 'launch', 'gz_sim.launch.py')),\n        launch_arguments={\n            'gz_args': '-r -v 4 my_cart.sdf'\n        }.items(),\n    )\n\n    robot_state_publisher = Node(\n        package='robot_state_publisher',\n        executable='robot_state_publisher',\n        name='robot_state_publisher',\n        output='both',\n        parameters=[\n            {'use_sim_time': True},\n            {'robot_description': robot_desc},\n        ]\n    )\n\n    bridge = Node(\n        package='ros_gz_bridge',\n        executable='parameter_bridge',\n        arguments=[\n            '/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock',\n            '/world/Moving_robot/model/vehicle/model/vehicle_blue/joint_state@sensor_msgs/msg/JointState[gz.msgs.Model',\n            '/camera@sensor_msgs/msg/Image@gz.msgs.Image',\n            '/camera_info@sensor_msgs/msg/CameraInfo@gz.msgs.CameraInfo'\n        ],\n        remappings=[\n            ('/world/Moving_robot/model/vehicle/model/vehicle_blue/joint_state', 'joint_states'),\n        ],\n        output='screen'\n    )\n\n    rviz_node = Node(\n            package='rviz2',\n            namespace='',\n            executable='rviz2',\n            name='rviz2',\n            arguments=['-d' + os.path.join(pkg, 'config', 'rviz.rviz')]\n        )\n\n    world_tf = Node(\n        package='tf2_ros',\n        executable='static_transform_publisher',\n        name=\"world2chassis\",\n        arguments = [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"world\", \"chassis\"]\n    )\n\n    return LaunchDescription([\n        env,\n        gz_sim,\n        bridge,\n        world_tf,\n        robot_state_publisher,\n        rviz_node  \n    ])\n</code></pre>","tags":["ignition","ros2","camera","bridge"]},{"location":"blog/ROS2/ignition/bridge/camera/#rviz","title":"Rviz","text":"<ul> <li>Rviz types</li> </ul> type Desc Camera use <code>CameraInfo</code> to create window in show the image Image display image without <code>CameraInfo</code> data","tags":["ignition","ros2","camera","bridge"]},{"location":"blog/ROS2/ignition/bridge/camera/#ign","title":"ign","text":"","tags":["ignition","ros2","camera","bridge"]},{"location":"blog/ROS2/ignition/spawn/","title":"LAB","text":"<p>Spawn sdf/xacro model into simulation using launch files</p> <ul> <li>Manual spawn</li> <li>Minimal spawn<ul> <li>file</li> <li>topic</li> <li>param</li> </ul> </li> <li>Spawn model with rviz<ul> <li>joint_state</li> </ul> </li> <li>Spawn with xacro</li> </ul>","tags":["ignition","gazebo","spawn"]},{"location":"blog/ROS2/ignition/spawn/#project","title":"Project","text":"<pre><code>sam_bot_description\n    \u251c\u2500\u2500 CMakeLists.txt\n    \u251c\u2500\u2500 config\n    \u2502   \u2514\u2500\u2500 rviz.rviz\n    \u251c\u2500\u2500 launch\n    \u2502   \u251c\u2500\u2500 minimal.launch.py\n    \u2502   \u251c\u2500\u2500 from_topic.launch.py\n    \u2502   \u251c\u2500\u2500 from_param.launch.py\n    \u2502   \u251c\u2500\u2500 spawn_with_rviz_and_bridge.launch.py\n    \u2502   \u251c\u2500\u2500 xacro.launch.py (todo)\n    \u251c\u2500\u2500 models\n    \u2502   \u2514\u2500\u2500 sam\n    \u2502       \u251c\u2500\u2500 model.config\n    \u2502       \u251c\u2500\u2500 model.sdf\n    \u2502       \u2514\u2500\u2500 model.sdf.xacro\n    \u251c\u2500\u2500 package.xml\n    \u2514\u2500\u2500 worlds\n        \u2514\u2500\u2500 demo.sdf\n</code></pre>","tags":["ignition","gazebo","spawn"]},{"location":"blog/ROS2/ignition/spawn/#manual-spawn","title":"Manual spawn","text":"","tags":["ignition","gazebo","spawn"]},{"location":"blog/ROS2/ignition/spawn/#minimal","title":"Minimal","text":"<p>Spawn sdf model using <code>-file</code> argument</p> <p></p>","tags":["ignition","gazebo","spawn"]},{"location":"blog/ROS2/ignition/spawn/#world","title":"world","text":"worlds/demo.sdf<pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;sdf version=\"1.6\"&gt;\n&lt;world name=\"demo\"&gt;\n&lt;physics name=\"1ms\" type=\"ignored\"&gt;\n&lt;max_step_size&gt;0.001&lt;/max_step_size&gt;\n&lt;real_time_factor&gt;1.0&lt;/real_time_factor&gt;\n&lt;/physics&gt;\n&lt;plugin filename=\"libignition-gazebo-physics-system.so\" name=\"ignition::gazebo::systems::Physics\"&gt;\n&lt;/plugin&gt;\n&lt;plugin filename=\"libignition-gazebo-sensors-system.so\" name=\"ignition::gazebo::systems::Sensors\"&gt;\n&lt;render_engine&gt;ogre2&lt;/render_engine&gt;\n&lt;/plugin&gt;\n&lt;plugin filename=\"libignition-gazebo-scene-broadcaster-system.so\" name=\"ignition::gazebo::systems::SceneBroadcaster\"&gt;\n&lt;/plugin&gt;\n&lt;plugin filename=\"ignition-gazebo-user-commands-system\" name=\"ignition::gazebo::systems::UserCommands\"&gt;\n&lt;/plugin&gt;\n&lt;gui fullscreen=\"0\"&gt;\n&lt;!-- 3D scene --&gt;\n&lt;plugin filename=\"MinimalScene\" name=\"3D View\"&gt;\n&lt;ignition-gui&gt;\n&lt;title&gt;3D View&lt;/title&gt;\n&lt;property type=\"bool\" key=\"showTitleBar\"&gt;false&lt;/property&gt;\n&lt;property type=\"string\" key=\"state\"&gt;docked&lt;/property&gt;\n&lt;/ignition-gui&gt;\n\n&lt;engine&gt;ogre2&lt;/engine&gt;\n&lt;scene&gt;scene&lt;/scene&gt;\n&lt;ambient_light&gt;0.4 0.4 0.4&lt;/ambient_light&gt;\n&lt;background_color&gt;0.8 0.8 0.8&lt;/background_color&gt;\n&lt;camera_pose&gt;-6 0 6 0 0.5 0&lt;/camera_pose&gt;\n&lt;/plugin&gt;\n\n&lt;!-- Plugins that add functionality to the scene --&gt;\n&lt;plugin filename=\"EntityContextMenuPlugin\" name=\"Entity context menu\"&gt;\n&lt;ignition-gui&gt;\n&lt;property key=\"state\" type=\"string\"&gt;floating&lt;/property&gt;\n&lt;property key=\"width\" type=\"double\"&gt;5&lt;/property&gt;\n&lt;property key=\"height\" type=\"double\"&gt;5&lt;/property&gt;\n&lt;property key=\"showTitleBar\" type=\"bool\"&gt;false&lt;/property&gt;\n&lt;/ignition-gui&gt;\n&lt;/plugin&gt;\n&lt;plugin filename=\"GzSceneManager\" name=\"Scene Manager\"&gt;\n&lt;ignition-gui&gt;\n&lt;property key=\"resizable\" type=\"bool\"&gt;false&lt;/property&gt;\n&lt;property key=\"width\" type=\"double\"&gt;5&lt;/property&gt;\n&lt;property key=\"height\" type=\"double\"&gt;5&lt;/property&gt;\n&lt;property key=\"state\" type=\"string\"&gt;floating&lt;/property&gt;\n&lt;property key=\"showTitleBar\" type=\"bool\"&gt;false&lt;/property&gt;\n&lt;/ignition-gui&gt;\n&lt;/plugin&gt;\n&lt;plugin filename=\"InteractiveViewControl\" name=\"Interactive view control\"&gt;\n&lt;ignition-gui&gt;\n&lt;property key=\"resizable\" type=\"bool\"&gt;false&lt;/property&gt;\n&lt;property key=\"width\" type=\"double\"&gt;5&lt;/property&gt;\n&lt;property key=\"height\" type=\"double\"&gt;5&lt;/property&gt;\n&lt;property key=\"state\" type=\"string\"&gt;floating&lt;/property&gt;\n&lt;property key=\"showTitleBar\" type=\"bool\"&gt;false&lt;/property&gt;\n&lt;/ignition-gui&gt;\n&lt;/plugin&gt;\n&lt;plugin filename=\"CameraTracking\" name=\"Camera Tracking\"&gt;\n&lt;ignition-gui&gt;\n&lt;property key=\"resizable\" type=\"bool\"&gt;false&lt;/property&gt;\n&lt;property key=\"width\" type=\"double\"&gt;5&lt;/property&gt;\n&lt;property key=\"height\" type=\"double\"&gt;5&lt;/property&gt;\n&lt;property key=\"state\" type=\"string\"&gt;floating&lt;/property&gt;\n&lt;property key=\"showTitleBar\" type=\"bool\"&gt;false&lt;/property&gt;\n&lt;/ignition-gui&gt;\n&lt;/plugin&gt;\n&lt;!-- World control --&gt;\n&lt;plugin filename=\"WorldControl\" name=\"World control\"&gt;\n&lt;ignition-gui&gt;\n&lt;title&gt;World control&lt;/title&gt;\n&lt;property type=\"bool\" key=\"showTitleBar\"&gt;false&lt;/property&gt;\n&lt;property type=\"bool\" key=\"resizable\"&gt;false&lt;/property&gt;\n&lt;property type=\"double\" key=\"height\"&gt;72&lt;/property&gt;\n&lt;property type=\"double\" key=\"width\"&gt;121&lt;/property&gt;\n&lt;property type=\"double\" key=\"z\"&gt;1&lt;/property&gt;\n\n&lt;property type=\"string\" key=\"state\"&gt;floating&lt;/property&gt;\n&lt;anchors target=\"3D View\"&gt;\n&lt;line own=\"left\" target=\"left\"/&gt;\n&lt;line own=\"bottom\" target=\"bottom\"/&gt;\n&lt;/anchors&gt;\n&lt;/ignition-gui&gt;\n\n&lt;play_pause&gt;true&lt;/play_pause&gt;\n&lt;step&gt;true&lt;/step&gt;\n&lt;start_paused&gt;true&lt;/start_paused&gt;\n&lt;use_event&gt;true&lt;/use_event&gt;\n\n&lt;/plugin&gt;\n\n&lt;!-- World statistics --&gt;\n&lt;plugin filename=\"WorldStats\" name=\"World stats\"&gt;\n&lt;ignition-gui&gt;\n&lt;title&gt;World stats&lt;/title&gt;\n&lt;property type=\"bool\" key=\"showTitleBar\"&gt;false&lt;/property&gt;\n&lt;property type=\"bool\" key=\"resizable\"&gt;false&lt;/property&gt;\n&lt;property type=\"double\" key=\"height\"&gt;110&lt;/property&gt;\n&lt;property type=\"double\" key=\"width\"&gt;290&lt;/property&gt;\n&lt;property type=\"double\" key=\"z\"&gt;1&lt;/property&gt;\n\n&lt;property type=\"string\" key=\"state\"&gt;floating&lt;/property&gt;\n&lt;anchors target=\"3D View\"&gt;\n&lt;line own=\"right\" target=\"right\"/&gt;\n&lt;line own=\"bottom\" target=\"bottom\"/&gt;\n&lt;/anchors&gt;\n&lt;/ignition-gui&gt;\n\n&lt;sim_time&gt;true&lt;/sim_time&gt;\n&lt;real_time&gt;true&lt;/real_time&gt;\n&lt;real_time_factor&gt;true&lt;/real_time_factor&gt;\n&lt;iterations&gt;true&lt;/iterations&gt;\n&lt;/plugin&gt;\n\n&lt;plugin filename=\"VisualizeLidar\" name=\"Visualize Lidar\"&gt;\n&lt;/plugin&gt;\n\n&lt;!-- Inspector --&gt;\n&lt;plugin filename=\"ComponentInspector\" name=\"Component inspector\"&gt;\n&lt;ignition-gui&gt;\n&lt;property type=\"string\" key=\"state\"&gt;docked&lt;/property&gt;\n&lt;/ignition-gui&gt;\n&lt;/plugin&gt;\n\n&lt;!-- Entity tree --&gt;\n&lt;plugin filename=\"EntityTree\" name=\"Entity tree\"&gt;\n&lt;ignition-gui&gt;\n&lt;property type=\"string\" key=\"state\"&gt;docked&lt;/property&gt;\n&lt;/ignition-gui&gt;\n&lt;/plugin&gt;\n&lt;/gui&gt;\n\n&lt;light type=\"directional\" name=\"sun\"&gt;\n&lt;cast_shadows&gt;true&lt;/cast_shadows&gt;\n&lt;pose&gt;0 0 10 0 0 0&lt;/pose&gt;\n&lt;diffuse&gt;0.8 0.8 0.8 1&lt;/diffuse&gt;\n&lt;specular&gt;0.2 0.2 0.2 1&lt;/specular&gt;\n&lt;attenuation&gt;\n&lt;range&gt;1000&lt;/range&gt;\n&lt;constant&gt;0.9&lt;/constant&gt;\n&lt;linear&gt;0.01&lt;/linear&gt;\n&lt;quadratic&gt;0.001&lt;/quadratic&gt;\n&lt;/attenuation&gt;\n&lt;direction&gt;-0.5 0.1 -0.9&lt;/direction&gt;\n&lt;/light&gt;\n\n&lt;model name=\"ground_plane\"&gt;\n&lt;static&gt;true&lt;/static&gt;\n&lt;link name=\"link\"&gt;\n&lt;collision name=\"collision\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;20 20 0.1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;20 20 0.1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;material&gt;\n&lt;ambient&gt;0.8 0.8 0.8 1&lt;/ambient&gt;\n&lt;diffuse&gt;0.8 0.8 0.8 1&lt;/diffuse&gt;\n&lt;specular&gt;0.8 0.8 0.8 1&lt;/specular&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n&lt;/model&gt;\n\n&lt;include&gt;\n&lt;uri&gt;https://fuel.gazebosim.org/1.0/chapulina/models/Test box&lt;/uri&gt;\n&lt;name&gt;b1&lt;/name&gt;\n&lt;pose&gt;2 2 0.5 0 0 0&lt;/pose&gt;\n&lt;/include&gt;\n\n&lt;include&gt;\n&lt;uri&gt;https://fuel.gazebosim.org/1.0/chapulina/models/Test box&lt;/uri&gt;\n&lt;name&gt;b2&lt;/name&gt;\n&lt;pose&gt;2 0 0.5 0 0 0&lt;/pose&gt;\n&lt;/include&gt;\n\n&lt;include&gt;\n&lt;uri&gt;https://fuel.gazebosim.org/1.0/chapulina/models/Test box&lt;/uri&gt;\n&lt;name&gt;b3&lt;/name&gt;\n&lt;pose&gt;2 -2 0.5 0 0 0&lt;/pose&gt;\n&lt;/include&gt;\n&lt;/world&gt;\n&lt;/sdf&gt;\n</code></pre>","tags":["ignition","gazebo","spawn"]},{"location":"blog/ROS2/ignition/spawn/#launch","title":"launch","text":"launch/minimal.launch.py<pre><code>import os\nfrom launch import LaunchDescription\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    package_name = \"sam_bot_description\"\n    sdf_model_path = \"sam/model.sdf\"\n    world_file_path = \"demo.sdf\"\n\n    # Pose where we want to spawn the robot\n    spawn_x_val = \"-2.0\"\n    spawn_y_val = \"0.0\"\n    spawn_z_val = \"0.5\"\n    spawn_yaw_val = \"0.0\"\n\n    pkg_ros_gz_sim = get_package_share_directory(\"ros_gz_sim\")\n    pkg_share = get_package_share_directory(package_name)\n    world_path = os.path.join(pkg_share, \"worlds\", world_file_path)\n    sdf_models_path = os.path.join(pkg_share, \"models\", sdf_model_path)\n\n    gazebo = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            os.path.join(pkg_ros_gz_sim, \"launch\", \"gz_sim.launch.py\")\n        ),\n        launch_arguments={\"gz_args\": f\"-r {world_path}\"}.items(),\n    )\n    # Launch the robot\n    spawn_entity_cmd = Node(\n        package=\"ros_gz_sim\",\n        executable=\"create\",\n        arguments=[\n            \"-world\",\n            \"default\",\n            \"-file\",\n            sdf_models_path,\n            \"-x\",\n            spawn_x_val,\n            \"-y\",\n            spawn_y_val,\n            \"-z\",\n            spawn_z_val,\n            \"-Y\",\n            spawn_yaw_val,\n        ],\n        output=\"screen\",\n    )\n\n    ld = LaunchDescription()\n    ld.add_action(gazebo)\n    ld.add_action(spawn_entity_cmd)\n    return ld\n</code></pre>","tags":["ignition","gazebo","spawn"]},{"location":"blog/ROS2/ignition/spawn/spawn_fom_param/","title":"LAB","text":"<p>Spawn sdf/xacro model into simulation using <code>param</code> argument</p> launch/from_param.launch.py<pre><code>import os\nfrom launch import LaunchDescription\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch_ros.actions import Node\nWORLD_NAME = \"demo\"\nMODEL_NAME = \"sam\"\ndef generate_launch_description():\npackage_name = \"sam_bot_description\"\nsdf_model_path = MODEL_NAME + \"/model.sdf\"\nworld_file_path = WORLD_NAME + \".sdf\"\n# Pose where we want to spawn the robot\nspawn_x_val = \"-2.0\"\nspawn_y_val = \"0.0\"\nspawn_z_val = \"0.5\"\nspawn_yaw_val = \"0.0\"\npkg_ros_gz_sim = get_package_share_directory(\"ros_gz_sim\")\npkg_share = get_package_share_directory(package_name)\nworld_path = os.path.join(pkg_share, \"worlds\", world_file_path)\nsdf_models_path = os.path.join(pkg_share, \"models\", sdf_model_path)\nrobot_description = open(sdf_models_path).read()\ngazebo = IncludeLaunchDescription(\nPythonLaunchDescriptionSource(\nos.path.join(pkg_ros_gz_sim, \"launch\", \"gz_sim.launch.py\")\n),\nlaunch_arguments={\"gz_args\": f\"-r {world_path}\"}.items(),\n)\n# Launch the robot\nspawn_entity_cmd = Node(\npackage=\"ros_gz_sim\",\nexecutable=\"create\",\narguments=[\n\"-world\",\nWORLD_NAME,\n\"-param\",\n\"robot_description\",\n\"-x\",\nspawn_x_val,\n\"-y\",\nspawn_y_val,\n\"-z\",\nspawn_z_val,\n\"-Y\",\nspawn_yaw_val,\n],\nparameters=[\n{\"robot_description\": robot_description},\n],\noutput=\"screen\",\n)\nld = LaunchDescription()\nld.add_action(gazebo)\nld.add_action(spawn_entity_cmd)\nreturn ld\n</code></pre>","tags":["gazebo","ign","spawn"]},{"location":"blog/ROS2/ignition/spawn/spawn_from_topic/","title":"LAB","text":"<p>Spawn sdf/xacro model into simulation using <code>topic</code> argument</p> <ul> <li>using <code>robot_description_publisher</code></li> </ul> launch/minimal_topic.launch.py<pre><code>import os\nfrom launch import LaunchDescription\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch.actions import IncludeLaunchDescription, TimerAction, LogInfo\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch_ros.actions import Node\nWORLD_NAME = \"demo\"\nMODEL_NAME = \"sam\"\ndef generate_launch_description():\npackage_name = \"sam_bot_description\"\nsdf_model_path = MODEL_NAME + \"/model.sdf\"\nworld_file_path = WORLD_NAME + \".sdf\"\n# Pose where we want to spawn the robot\nspawn_x_val = \"-2.0\"\nspawn_y_val = \"0.0\"\nspawn_z_val = \"0.5\"\nspawn_yaw_val = \"0.0\"\npkg_ros_gz_sim = get_package_share_directory(\"ros_gz_sim\")\npkg_share = get_package_share_directory(package_name)\nworld_path = os.path.join(pkg_share, \"worlds\", world_file_path)\nsdf_models_path = os.path.join(pkg_share, \"models\", sdf_model_path)\nrobot_state_publisher = Node(\npackage=\"robot_state_publisher\",\nexecutable=\"robot_state_publisher\",\noutput=\"screen\",\nparameters=[\n{\"use_sim_time\": True},\n{\"robot_description\": open(sdf_models_path).read()},\n],\n)\ngazebo = IncludeLaunchDescription(\nPythonLaunchDescriptionSource(\nos.path.join(pkg_ros_gz_sim, \"launch\", \"gz_sim.launch.py\")\n),\nlaunch_arguments={\"gz_args\": f\"-r {world_path}\"}.items(),\n)\nspawn_entity_cmd = Node(\npackage=\"ros_gz_sim\",\nexecutable=\"create\",\narguments=[\n\"-world\",\nWORLD_NAME,\n\"-topic\",\n\"robot_description\",\n\"-x\",\nspawn_x_val,\n\"-y\",\nspawn_y_val,\n\"-z\",\nspawn_z_val,\n\"-Y\",\nspawn_yaw_val,\n],\noutput=\"screen\",\n)\ntimer = TimerAction(period=1.0,\nactions=[\nspawn_entity_cmd,\nLogInfo(msg=\"------- Spawn ------------\")\n])\nld = LaunchDescription()\nld.add_action(robot_state_publisher)\nld.add_action(gazebo)\nld.add_action(timer)\nreturn ld\n</code></pre> <p>LogInfo</p> <p>Log to </p> <pre><code>from launch.actions import LogInfo\n\nLogInfo(msg=\"------- message ------------\")\n</code></pre> <p>TimerAction</p> <p>Start Node after period</p> <pre><code>from launch.actions import TimerAction\n\ntimer = TimerAction(period=1.0,\n        actions=[\n            Node\n            LogInfo(msg=\"------- Spawn ------------\")\n            ])\n</code></pre>","tags":["gazebo","ign","spawn"]},{"location":"blog/ROS2/ignition/spawn/spawn_with_rviz_and_bridge/","title":"LAB","text":"<ul> <li>Spawn sdf/xacro model </li> <li>Run Bridge (bridge clock, joint_states)</li> <li>Run Rviz </li> </ul> <pre><code>import os\nfrom launch import LaunchDescription\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch_ros.actions import Node\nimport xacro\nWORLD_NAME = \"demo\"\nMODEL_NAME = \"sam\"\ndef generate_launch_description():\npackage_name = \"sam_bot_description\"\nsdf_model_path = MODEL_NAME + \"/model.sdf\"\nworld_file_path = WORLD_NAME + \".sdf\"\nprefix = f\"/world/{WORLD_NAME}/model/{MODEL_NAME}\"\n# Pose where we want to spawn the robot\nspawn_x_val = \"-2.0\"\nspawn_y_val = \"0.0\"\nspawn_z_val = \"0.5\"\nspawn_yaw_val = \"0.0\"\npkg_ros_gz_sim = get_package_share_directory(\"ros_gz_sim\")\npkg_share = get_package_share_directory(package_name)\nworld_path = os.path.join(pkg_share, \"worlds\", world_file_path)\nsdf_models_path = os.path.join(pkg_share, \"models\", sdf_model_path)\nsdf_file_content = xacro.process_file(sdf_models_path)\nrobot_description = sdf_file_content.toxml()\nrobot_state_publisher = Node(\npackage=\"robot_state_publisher\",\nexecutable=\"robot_state_publisher\",\noutput=\"screen\",\nparameters=[\n{\"use_sim_time\": True},\n{\"robot_description\": robot_description},\n],\n)\ngazebo = IncludeLaunchDescription(\nPythonLaunchDescriptionSource(\nos.path.join(pkg_ros_gz_sim, \"launch\", \"gz_sim.launch.py\")\n),\nlaunch_arguments={\"gz_args\": f\"-r {world_path}\"}.items(),\n)\n# Launch the robot\nspawn_entity_cmd = Node(\npackage=\"ros_gz_sim\",\nexecutable=\"create\",\narguments=[\n\"-world\",\nWORLD_NAME,\n\"-param\",\n\"robot_description\",\n\"-x\",\nspawn_x_val,\n\"-y\",\nspawn_y_val,\n\"-z\",\nspawn_z_val,\n\"-Y\",\nspawn_yaw_val,\n],\nparameters=[\n{\"robot_description\": robot_description},\n],\noutput=\"screen\",\n)\nrviz = Node(\npackage=\"rviz2\",\nexecutable=\"rviz2\",\narguments=[\"-d\", os.path.join(pkg_share, \"config\", \"rviz.rviz\")],\nparameters=[{\"robot_description\": robot_description}],\n)\n# Ign Bridge\nbridge = Node(\npackage=\"ros_gz_bridge\",\nexecutable=\"parameter_bridge\",\narguments=[\nprefix + \"/joint_state@sensor_msgs/msg/JointState@ignition.msgs.Model\",\n\"/clock@rosgraph_msgs/msg/Clock@ignition.msgs.Clock\",\n],\nremappings=[(prefix + \"/joint_state\", \"joint_states\")],\noutput=\"screen\",\n)\nld = LaunchDescription()\nld.add_action(robot_state_publisher)\nld.add_action(gazebo)\nld.add_action(spawn_entity_cmd)\nld.add_action(rviz)\nld.add_action(bridge)\nreturn ld\n</code></pre> <p>remapping</p> <p>map ignition model <code>joint state</code> to <code>joint_states</code> ros2 topic</p> <pre><code>    bridge = Node(\n    package=\"ros_gz_bridge\",\n    executable=\"parameter_bridge\",\n    arguments=[\n        prefix + \"/joint_state@sensor_msgs/msg/JointState@ignition.msgs.Model\",\n        \"/clock@rosgraph_msgs/msg/Clock@ignition.msgs.Clock\",\n    ],\n    remappings=[(prefix + \"/joint_state\", \"joint_states\")],\n    output=\"screen\",\n)\n</code></pre>","tags":["ignition","gazebo","spawn"]},{"location":"blog/ROS2/ignition/tutorial/","title":"Ignition ROS2 tutorials","text":"<ul> <li>joint state</li> <li>diff drive and basic odometry</li> <li>imu</li> <li>lidar</li> </ul>","tags":["ros2","ignition","gz"]},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/","title":"LAB","text":"<ul> <li>Add diff drive plugin</li> <li>publish <code>odometry</code>, <code>odometry tf</code> and <code>cmd_vel</code> from ignition to ros2 using bridge</li> </ul> <p>Note</p> <p>check joint state post for project structure and files</p> <p>Note</p> <p>Install rqt_robotic_steering for GUI cmd_vel control</p> <pre><code>sudo apt install ros-humble-rqt-robot-steering\n</code></pre> <p></p>","tags":["diff_drive","odom","odometry","ros2","ignition"]},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/#bridge","title":"bridge","text":"<p><pre><code>ign topic --list\n#\n/clock\n/gazebo/resource_paths\n/gui/camera/pose\n/model/basic_mobile_bot/cmd_vel\n/model/basic_mobile_bot/odometry\n/model/basic_mobile_bot/tf\n/stats\n/world/demo/clock\n/world/demo/dynamic_pose/info\n/world/demo/model/basic_mobile_bot/joint_state\n/world/demo/pose/info\n/world/demo/scene/deletion\n/world/demo/scene/info\n/world/demo/state\n/world/demo/stats\n</code></pre> - bridge cmd_vel (/model/basic_mobile_bot/cmd_vel) - bridge odometry (/model/basic_mobile_bot/odometry) - bridge tf (/model/basic_mobile_bot/tf)</p> <pre><code># cmd_vel bridge \n    cmd_vel_bridge = Node(package='ros_gz_bridge', executable='parameter_bridge',\n            namespace = namespace,\n            name = 'cmd_vel_bridge',\n            output='screen',\n            parameters=[{\n                'use_sim_time': use_sim_time\n            }],\n            arguments = [\n                ign_model_prefix + '/cmd_vel' + '@geometry_msgs/msg/Twist' + ']ignition.msgs.Twist'\n            ],\n            remappings = [\n                (ign_model_prefix + '/cmd_vel', '/cmd_vel')\n            ])\n\n    # odometry bridge \n    odometry_bridge = Node(package='ros_gz_bridge', executable='parameter_bridge',\n            namespace = namespace,\n            name = 'odometry_bridge',\n            output='screen',\n            parameters=[{\n                'use_sim_time': use_sim_time\n            }],\n            arguments = [\n                    ign_model_prefix + '/odometry' + '@nav_msgs/msg/Odometry' + '[ignition.msgs.Odometry'\n            ],\n            remappings = [\n                (ign_model_prefix + '/odometry', '/odom')\n            ])\n\n    # odom to base_link transform bridge\n    odom_base_tf_bridge = Node(package='ros_gz_bridge', executable='parameter_bridge',\n            namespace = namespace,\n            name = 'odom_base_tf_bridge',\n            output = 'screen',\n            parameters=[{\n            'use_sim_time': use_sim_time\n            }],\n            arguments = [\n                ign_model_prefix + '/tf' + '@tf2_msgs/msg/TFMessage' + '[ignition.msgs.Pose_V'\n            ],\n            remappings = [\n                (ign_model_prefix + '/tf', '/tf')\n            ])\n</code></pre>","tags":["diff_drive","odom","odometry","ros2","ignition"]},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/#get-bridge-source","title":"get bridge source","text":"","tags":["diff_drive","odom","odometry","ros2","ignition"]},{"location":"blog/ROS2/ignition/tutorial/diff_drive_and_odometry/#tf","title":"tf","text":"","tags":["diff_drive","odom","odometry","ros2","ignition"]},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/","title":"LAB","text":"<ul> <li>Add IMU sensor to sdf</li> <li>Bridge to ROS2</li> <li>Show in RVIZ</li> </ul>","tags":["imu","ros2","ignition"]},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#sdf","title":"sdf","text":"<ul> <li>Add sensor sdf under <code>link</code></li> <li>Add imu plugin </li> </ul> <p>Add plugin tag under <code>world</code> tag <pre><code>&lt;plugin filename=\"libignition-gazebo-imu-system.so\"\nname=\"ignition::gazebo::systems::Imu\"&gt;\n&lt;/plugin&gt;\n</code></pre></p> <p>Add sensor to <code>imu_link</code> tag <pre><code>&lt;sensor name=\"imu_sensor\" type=\"imu\"&gt;\n&lt;always_on&gt;1&lt;/always_on&gt;\n&lt;update_rate&gt;1&lt;/update_rate&gt;\n&lt;visualize&gt;true&lt;/visualize&gt;\n&lt;topic&gt;imu&lt;/topic&gt;\n&lt;/sensor&gt;\n</code></pre></p>","tags":["imu","ros2","ignition"]},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#check-this-link-for-more-info","title":"Check this link for more info","text":"","tags":["imu","ros2","ignition"]},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#tf","title":"tf","text":"<ul> <li>Add static tf between sensor frame to link frame</li> </ul> <p>static tf</p> <p>Sensor has fix frame_id, set from it\u2019s location We need to set static tf form link frame to sensor frame_id</p> <pre><code>imu_tf = Node(\n    package='tf2_ros',\n    executable='static_transform_publisher',\n    name=\"imu2imu_link\",\n    arguments = [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"imu_link\", \"basic_mobile_bot/imu_link/imu\"]\n)\n</code></pre> <p></p>","tags":["imu","ros2","ignition"]},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#bridge","title":"bridge","text":"<p>bridge source code </p> <ul> <li>Add imu msg bridge</li> <li>Set QoS to best_effort</li> <li>Add tf static transform from <code>imu_link</code> to sensor frame_id <code>basic_mobile_bot/imu_link/imu</code></li> </ul> bridge<pre><code>imu_bridge = Node(\npackage='ros_gz_bridge',\nexecutable='parameter_bridge',\narguments=['/imu@sensor_msgs/msg/Imu@gz.msgs.IMU'],\noutput='screen',\nparameters=[{\n'use_sim_time': use_sim_time,\n'qos_overrides./imu.publisher.reliability': 'best_effort'\n}]\n)\n</code></pre> before qos convert<pre><code>ros2 topic info /imu --verbose\nType: sensor_msgs/msg/Imu\n\nPublisher count: 1\n\nNode name: ros_gz_bridge\nNode namespace: /\nTopic type: sensor_msgs/msg/Imu\nEndpoint type: PUBLISHER\nGID: 01.0f.64.c6.90.63.0b.31.01.00.00.00.00.00.14.03.00.00.00.00.00.00.00.00\nQoS profile:\n  Reliability: RELIABLE\n  History (Depth): UNKNOWN\n  Durability: VOLATILE\n  Lifespan: Infinite\n  Deadline: Infinite\n  Liveliness: AUTOMATIC\n  Liveliness lease duration: Infinite\n</code></pre> imu message after qos convert<pre><code>ros2 topic info /imu --verbose\n#\nType: sensor_msgs/msg/Imu\n\nPublisher count: 1\n\nNode name: ros_gz_bridge\nNode namespace: /\nTopic type: sensor_msgs/msg/Imu\nEndpoint type: PUBLISHER\nGID: 01.0f.64.c6.fb.16.9f.99.01.00.00.00.00.00.14.03.00.00.00.00.00.00.00.00\nQoS profile:\n  Reliability: BEST_EFFORT\n  History (Depth): UNKNOWN\n  Durability: VOLATILE\n  Lifespan: Infinite\n  Deadline: Infinite\n  Liveliness: AUTOMATIC\n  Liveliness lease duration: Infinite\n</code></pre>","tags":["imu","ros2","ignition"]},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#usage","title":"usage","text":"terminal1<pre><code>ros2 launch ign_tutorial ign.launch.py with_bridge:=true\n</code></pre> terminal2<pre><code>ros2 run rqt_robot_steering rqt_robot_steering\n</code></pre> terminal3<pre><code>rviz\n</code></pre>","tags":["imu","ros2","ignition"]},{"location":"blog/ROS2/ignition/tutorial/imu_and_magnetometer/#reference","title":"Reference","text":"<ul> <li>ros_gz_sim_demos</li> <li>IMU tools for ROS</li> <li>ignition sensors</li> <li>rviz imu marker</li> </ul>","tags":["imu","ros2","ignition"]},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/","title":"LAB","text":"<ul> <li>load model SDF into ignition and rviz</li> <li>publish <code>JointState</code> from ignition to ros2 using bridge</li> </ul> <pre><code>\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 config\n\u2502   \u2514\u2500\u2500 rviz.rviz\n\u251c\u2500\u2500 launch\n\u2502   \u2514\u2500\u2500 ign.launch.launch.py\n\u2502   \u2514\u2500\u2500 ign_bridge.launch.py\n\u251c\u2500\u2500 models\n\u2502   \u2514\u2500\u2500 vehicle_2\n\u2502       \u2502   \u2514\u2500\u2500 meshes\n\u2502       \u2502       \u2514\u2500\u2500 robot_base.stl\n\u2502       \u2514\u2500\u2500 model.config\n\u2502       \u2514\u2500\u2500 model.sdf\n\u251c\u2500\u2500 worlds\n\u2502   \u2514\u2500\u2500 vehicle.sdf\n\u2514\u2500\u2500 package.xml\n</code></pre>","tags":["joint_state"]},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#launch","title":"launch","text":"","tags":["joint_state"]},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#ign","title":"ign","text":"<pre><code>import os\n\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.actions import IncludeLaunchDescription, SetEnvironmentVariable\nfrom launch.conditions import IfCondition\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch.substitutions import LaunchConfiguration\nfrom launch_ros.actions import Node\n\nPACKAGE_NAME = \"ign_tutorial\"\nSDF_MODEL_NAME = \"vehicle_2\"\nWORLD_NAME = \"vehicle.sdf\"\n\ndef generate_launch_description():\n    sim_time_arg = DeclareLaunchArgument(\n        \"use_sim_time\",\n        default_value=[\"true\"],\n        description=\"Enable sim time from /clock\",\n    )\n    with_bridge_arg = DeclareLaunchArgument(\n        \"with_bridge\",\n        default_value=[\"false\"],\n        description=\"Launch simulation with ros ign bridge\",\n    )\n\n    pkg_ros_gz_sim = get_package_share_directory(\"ros_gz_sim\")\n    pkg = get_package_share_directory(PACKAGE_NAME)\n\n    sdf_path = f\"{pkg}/models/{SDF_MODEL_NAME}/model.sdf\"\n    use_sim_time = LaunchConfiguration(\"use_sim_time\")\n\n    resources = [os.path.join(pkg, \"worlds\"), os.path.join(pkg, \"models\")]\n    resource_env = SetEnvironmentVariable(\n        name=\"IGN_GAZEBO_RESOURCE_PATH\", value=\":\".join(resources)\n    )\n\n    gazebo = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            os.path.join(pkg_ros_gz_sim, \"launch\", \"gz_sim.launch.py\")\n        ),\n        launch_arguments={\"gz_args\": f\"-r -v 2 {WORLD_NAME}\"}.items(),\n    )\n\n    # launch ign_bridge if with_bridge is true\n    ign_bridge = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            os.path.join(pkg, \"launch\", \"ign_bridge.launch.py\"),\n        ),\n        launch_arguments={\"use_sim_time\": use_sim_time}.items(),\n        condition=IfCondition(LaunchConfiguration(\"with_bridge\"))\n    )\n\n    # robot state publisher node\n    robot_state_publisher = Node(\n        package=\"robot_state_publisher\",\n        executable=\"robot_state_publisher\",\n        output=\"screen\",\n        parameters=[\n            {\"use_sim_time\": use_sim_time},\n            {\"robot_description\": open(sdf_path).read()},\n        ],\n    )\n\n    ld = LaunchDescription()\n    ld.add_action(sim_time_arg)\n    ld.add_action(with_bridge_arg)\n\n    ld.add_action(resource_env)\n    ld.add_action(gazebo)\n    ld.add_action(ign_bridge)\n    ld.add_action(robot_state_publisher)\n    return ld\n</code></pre>","tags":["joint_state"]},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#bridge","title":"bridge","text":"<pre><code>from launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.conditions import IfCondition\nfrom launch.substitutions import LaunchConfiguration\nfrom launch_ros.actions import Node\n\nROBOT_NAME = \"basic_mobile_bot\"\n\ndef generate_launch_description():\n    use_sim_time_arg = DeclareLaunchArgument(\n        \"use_sim_time\", default_value=[\"false\"], description=\"use sim time from /clock\"\n    )\n\n    namespace = \"\"\n    use_sim_time = LaunchConfiguration(\"use_sim_time\")\n    ign_model_prefix = \"/world/demo/model/\" + ROBOT_NAME\n\n    # clock bridge\n    clock_bridge = Node(\n        package=\"ros_gz_bridge\",\n        executable=\"parameter_bridge\",\n        namespace=namespace,\n        name=\"clock_bridge\",\n        output=\"screen\",\n        arguments=[\"/clock@rosgraph_msgs/msg/Clock[ignition.msgs.Clock\"],\n        condition=IfCondition(use_sim_time),\n    )\n\n    # joint state bridge\n    # /world/demo/model/v2/model/basic_mobile_bot/joint_state\n    joint_state_bridge = Node(\n        package=\"ros_gz_bridge\",\n        executable=\"parameter_bridge\",\n        namespace=namespace,\n        name=\"joint_state_bridge\",\n        output=\"screen\",\n        parameters=[{\"use_sim_time\": use_sim_time}],\n        arguments=[\n            ign_model_prefix + \"/joint_state\"\n            + \"@sensor_msgs/msg/JointState\"\n            + \"[ignition.msgs.Model\"\n        ],\n        remappings=[(ign_model_prefix + \"/joint_state\", \"/joint_states\")],\n    )\n\n    ld = LaunchDescription()\n    ld.add_action(use_sim_time_arg)\n    ld.add_action(clock_bridge)\n    ld.add_action(joint_state_bridge)\n    return ld\n</code></pre>","tags":["joint_state"]},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#tf-tree","title":"tf tree","text":"<pre><code>ros2 run rqt_tf_tree rqt_tf_tree\n</code></pre>","tags":["joint_state"]},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#sdf","title":"sdf","text":"","tags":["joint_state"]},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#model","title":"model","text":"<p>model</p>","tags":["joint_state"]},{"location":"blog/ROS2/ignition/tutorial/joint_state_sdf_model/#world","title":"world","text":"<p>world</p> <pre><code>&lt;include&gt;\n&lt;pose&gt;0 0 1 0 0 0&lt;/pose&gt;\n&lt;uri&gt;model://vehicle_2&lt;/uri&gt;\n&lt;/include&gt;\n</code></pre>","tags":["joint_state"]},{"location":"blog/ROS2/ignition/tutorial/lidar/","title":"LAB","text":"<ul> <li>Add lidar sensor</li> <li>Bridge to ROS2</li> <li>Show in RVIZ</li> </ul>","tags":["ignition","lidar","ros2"]},{"location":"blog/ROS2/ignition/tutorial/lidar/#sdf","title":"sdf","text":"<ul> <li>World</li> <li>Add <code>sensor</code> plugin under <code>word</code> tag</li> <li>model</li> <li>Add lidar link</li> <li>Add sensor</li> </ul> <pre><code>&lt;plugin filename=\"ignition-gazebo-sensors-system\" name=\"ignition::gazebo::systems::Sensors\"&gt;\n&lt;render_engine&gt;ogre2&lt;/render_engine&gt;\n&lt;/plugin&gt;\n</code></pre> lidar sensor<pre><code>&lt;sensor name='gpu_lidar' type='gpu_lidar'&gt;\n&lt;topic&gt;lidar&lt;/topic&gt;\n&lt;update_rate&gt;10&lt;/update_rate&gt;\n&lt;lidar&gt;\n&lt;scan&gt;\n&lt;horizontal&gt;\n&lt;samples&gt;640&lt;/samples&gt;\n&lt;resolution&gt;1&lt;/resolution&gt;\n&lt;min_angle&gt;-1.396263&lt;/min_angle&gt;\n&lt;max_angle&gt;1.396263&lt;/max_angle&gt;\n&lt;/horizontal&gt;\n&lt;vertical&gt;\n&lt;samples&gt;16&lt;/samples&gt;\n&lt;resolution&gt;1&lt;/resolution&gt;\n&lt;min_angle&gt;-0.261799&lt;/min_angle&gt;\n&lt;max_angle&gt;0.261799&lt;/max_angle&gt;\n&lt;/vertical&gt;\n&lt;/scan&gt;\n&lt;range&gt;\n&lt;min&gt;0.08&lt;/min&gt;\n&lt;max&gt;10.0&lt;/max&gt;\n&lt;resolution&gt;0.01&lt;/resolution&gt;\n&lt;/range&gt;\n&lt;/lidar&gt;\n&lt;alwaysOn&gt;1&lt;/alwaysOn&gt;\n&lt;visualize&gt;true&lt;/visualize&gt;\n&lt;/sensor&gt;\n</code></pre> <p>model source code</p>","tags":["ignition","lidar","ros2"]},{"location":"blog/ROS2/ignition/tutorial/lidar/#tf","title":"tf","text":"","tags":["ignition","lidar","ros2"]},{"location":"blog/ROS2/ignition/tutorial/lidar/#bridge","title":"bridge","text":"<pre><code>lidar_bridge = Node(\n    package='ros_gz_bridge',                executable='parameter_bridge',\n        namespace = namespace,\n        name = 'lidar_bridge',\n        output='screen',\n        parameters=[{\n            'use_sim_time': use_sim_time\n        }],\n        arguments = [\n                '/lidar@sensor_msgs/msg/LaserScan' + '[ignition.msgs.LaserScan',\n                '/lidar/points' + '@sensor_msgs/msg/PointCloud2' + '[ignition.msgs.PointCloudPacked'\n        ],\n        remappings = [\n            ('/lidar/points', '/scan/points'),\n            ('/lidar', '/scan')\n        ])\n\nlidar_tf = Node(\n    package='tf2_ros',\n    executable='static_transform_publisher',\n    name=\"imu2imu_link\",\n    arguments = [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"lidar_link\", \"basic_mobile_bot/lidar_link/gpu_lidar\"]\n)\n</code></pre>","tags":["ignition","lidar","ros2"]},{"location":"blog/ROS2/ignition/tutorial/lidar/#usage","title":"Usage","text":"","tags":["ignition","lidar","ros2"]},{"location":"blog/ROS2/ignition/tutorial/lidar/#point-cloud","title":"Point cloud","text":"","tags":["ignition","lidar","ros2"]},{"location":"blog/ROS2/ignition/tutorial/lidar/#laser-scan","title":"laser scan","text":"","tags":["ignition","lidar","ros2"]},{"location":"blog/ROS2/launch/","title":"ROS2 launch","text":"<p>ROS2 launch file run/launch multiple nodes and allow to add logic to our startup sequence.</p> <p>Launch file has many features to control the launch sequence </p> <ul> <li>Actions</li> <li>Event handlers</li> <li>substitutions</li> <li>conditions</li> </ul>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/#demo-minimal-launch-file","title":"Demo: Minimal launch file","text":"<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    sim_node =  Node(\n            package='turtlesim',\n            namespace='turtlesim1',\n            executable='turtlesim_node',\n            name='sim'\n        )\n\n    ld.add_action(sim_node)\n    return ld\n</code></pre>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/#copy-launch-folder","title":"copy launch folder","text":"","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/#cmake","title":"cmake","text":"<pre><code>install(DIRECTORY\nlaunch\nDESTINATION share/${PROJECT_NAME}\n)\n</code></pre>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/#python","title":"python","text":"<pre><code>import os\nfrom glob import glob\nfrom setuptools import setup\n\npackage_name = 'py_launch_example'\n\nsetup(\n    # Other parameters ...\n    data_files=[\n        # ... Other data files\n        # Include all launch files.\n        (os.path.join('share', package_name, 'launch'), glob('launch/*launch.[pxy][yma]*'))\n    ]\n)\n</code></pre>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/#examples-and-more","title":"Examples and more","text":"<ul> <li>launch with arguments</li> </ul>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/#resources","title":"Resources","text":"<ul> <li>Design ROS 2 Launch System</li> <li>ROS2 launch files \u2013 All you need to know</li> <li>Architecture of launch</li> <li>launch source github</li> <li>Creating a launch file tutorial</li> </ul>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/launch_node_respawn/","title":"LAB","text":"<ul> <li>Ros restart process and file or exit</li> </ul>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/launch_node_respawn/#demo","title":"Demo","text":"<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    sim_node = Node(\n            package='turtlesim',\n            namespace='turtlesim1',\n            executable='turtlesim_node',\n            name='sim',\n            respawn=True,\n            respawn_delay=4\n        )\n\n    ld.add_action(sim_node)\n    return ld\n</code></pre> <p>You can run launch file without the package relation</p> <pre><code>ros2 launch &lt;launch file&gt;\n</code></pre>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/launch_node_respawn/#usage","title":"usage","text":"<pre><code>ros2 launch launch_node_respawn.launch.py\n</code></pre> <ul> <li>Close the window</li> <li>After 4 sec ROS2 launch the node</li> </ul>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/launch_node_respawn_event/","title":"LAB","text":"<ul> <li> <p>Launch file events</p> </li> <li> <p>OnProcessStart</p> </li> <li>OnProcessExit</li> </ul>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/launch_node_respawn_event/#demo","title":"Demo","text":"launch_node_event.launch.py<pre><code>from launch import LaunchDescription\nfrom launch.substitutions import EnvironmentVariable, FindExecutable\nfrom launch_ros.actions import Node\nfrom launch.actions import ExecuteProcess, RegisterEventHandler, LogInfo\nfrom launch.event_handlers import OnProcessStart, OnProcessExit\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    sim_node = Node(\n            package='turtlesim',\n            namespace='turtlesim1',\n            executable='turtlesim_node',\n            name='sim',\n            respawn=True,\n            respawn_delay=4\n        )\n\n    # ros2 service call /turtlesim1/spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2}\"\n\n    spawn_turtle = ExecuteProcess(\n        cmd=[[\n            FindExecutable(name='ros2'),\n            ' service call ',\n            \"/turtlesim1\",\n            '/spawn ',\n            'turtlesim/srv/Spawn ',\n            '\"{x: 2, y: 2, theta: 0.2}\"'\n        ]],\n        shell=True\n    )\n\n    event_end_action = RegisterEventHandler(\n            OnProcessExit(\n                target_action=sim_node,\n                on_exit=[\n                    LogInfo(msg=(\"event --------\" , \n                        EnvironmentVariable(name='USER'),\n                        ' closed the turtlesim window'))\n                ]\n            )\n        )\n\n    event_start_action = RegisterEventHandler(\n            OnProcessStart(\n                target_action=sim_node,\n                on_start=[\n                    LogInfo(msg='event ------- Turtlesim started, spawning turtle -------'),\n                    spawn_turtle\n                ]\n            )\n        )\n\n    ld.add_action(sim_node)\n    ld.add_action(event_end_action)\n    ld.add_action(event_start_action)\n\n    return ld\n</code></pre> <p>Tip</p> <p>You can run launch file without the package relation</p> <pre><code>ros2 launch &lt;launch file&gt;\n</code></pre>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/launch_node_respawn_event/#reference","title":"Reference","text":"<ul> <li>Using event handlers</li> </ul>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/launch_node_with_arguments/","title":"launch with node arguments","text":"param_hello.hpp<pre><code>#ifndef PARAM_HELLO_HPP\n#define PARAM_HELLO_HPP\n#include \"rclcpp/rclcpp.hpp\"\n\nclass ParamHelloNode final : public rclcpp::Node\n{\npublic:\nParamHelloNode();\n\nprivate:\nstd::string param_str_;\n};\n\n#endif  // PARAM_HELLO_HPP\n</code></pre> param_hello.cpp<pre><code>#include \"param_hello.hpp\"\n#include \"rclcpp/rclcpp.hpp\"\n\nParamHelloNode::ParamHelloNode() : Node(\"hello_param\")\n{\nRCLCPP_INFO(this-&gt;get_logger(), \"hello param\");\nthis-&gt;declare_parameter(\"param_name\", \"hello_default\");\nthis-&gt;param_str_ = this-&gt;get_parameter(\"param_name\").as_string();\nRCLCPP_INFO(this-&gt;get_logger(), \"%s\", this-&gt;param_str_.c_str());\n};\n</code></pre> launch node with arguments<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    node=Node(\n        name=\"simple_param\",\n        package = 'cpp_tutrial_pkg',\n        executable = 'param_hello',\n        parameters = [\n            {\"param_name\": \"param value from launch\"}\n        ]\n    )\n    ld.add_action(node)\n    return ld\n</code></pre> launch with arguments from cli<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.substitutions import LaunchConfiguration\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n    param_name = LaunchConfiguration('param_name')\n\n    arg_cmd = DeclareLaunchArgument(\"param_name\", default_value=\"hello world\", description=\"msg simple description\")\n\n    node=Node(\n        name=\"simple_param\",\n        package = 'cpp_tutrial_pkg',\n        executable = 'param_hello',\n        parameters = [\n            {\"param_name\": param_name}\n        ]\n    )\n\n    ld.add_action(arg_cmd)\n    ld.add_action(node)\n    return ld\n</code></pre>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/launch_opaquefunction/","title":"OpaqueFunction","text":"<p>Action that executes a Python function.</p>","tags":["launch","argument","ros2","OpaqueFunction"]},{"location":"blog/ROS2/launch/launch_opaquefunction/#demo","title":"demo","text":"<ul> <li>Execute shell script using <code>ExecuteProcess</code> action</li> <li>Using <code>OpaqueFunction</code> to build shell script arguments</li> <li>Convert <code>LaunchConfiguration</code> to string using <code>context.perform_substitution</code></li> </ul>","tags":["launch","argument","ros2","OpaqueFunction"]},{"location":"blog/ROS2/launch/launch_opaquefunction/#shell-script-to-execute","title":"shell script to execute","text":"hello.zsh<pre><code>#!/bin/zsh\n\necho $1 &gt; /tmp/1\n</code></pre>","tags":["launch","argument","ros2","OpaqueFunction"]},{"location":"blog/ROS2/launch/launch_opaquefunction/#launch-file","title":"launch file","text":"opa<pre><code>from launch import LaunchDescription, LaunchContext\nfrom launch.actions import ExecuteProcess, DeclareLaunchArgument\nfrom launch.substitutions import LaunchConfiguration\nfrom launch.actions import OpaqueFunction\nSCRIPT_PATH = \"/home/user/ros2_ws/src/pkg_launch_tutorial/scripts/hello.zsh\"\nARG1=\"arg1\"\ndef func_demo(context: LaunchContext, arg1: LaunchConfiguration):\nvalue = context.perform_substitution(arg1)\nif not value:\nvalue = \"default value\"\nrun_script = ExecuteProcess(\ncmd=[[SCRIPT_PATH, \" \", f\"'{value}'\"]],\nshell=True\n)\nreturn [run_script]\ndef generate_launch_description():\nld = LaunchDescription()\narg1 = LaunchConfiguration(ARG1)\narg1_arg = DeclareLaunchArgument(\nARG1, default_value=\"\", description=\"arg1\"\n)\nfunc_action = OpaqueFunction(function=func_demo, args=[arg1])\nld.add_action(arg1_arg)\nld.add_action(func_action)\nreturn ld\n</code></pre>","tags":["launch","argument","ros2","OpaqueFunction"]},{"location":"blog/ROS2/launch/launch_with_arguments/","title":"launch with arguments","text":"<p>Control launch with argument from outside  </p> <p>DeclareLaunchArgument is used to define the launch argument that can be passed from the above launch file or from the console.</p> <p>LaunchConfiguration substitutions allow us to acquire the value of the launch argument in any part of the launch description.</p> <pre><code>from launch import LaunchDescription\nfrom launch.actions import LogInfo, DeclareLaunchArgument\nfrom launch.substitutions import LaunchConfiguration\n\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n    arg1 = LaunchConfiguration(\"arg1\")\n    arg1_arg = DeclareLaunchArgument(\n        name = \"arg1\",\n        default_value=\"arg1 default value\", \n        description=\"arg1 description\"\n    )\n\n    log_action = LogInfo(msg=arg1)\n    ld.add_action(arg1_arg)\n    ld.add_action(log_action)\n    return ld\n</code></pre>","tags":["launch","argument","ros2","DeclareLaunchArgument","LaunchConfiguration"]},{"location":"blog/ROS2/launch/launch_with_arguments/#usage","title":"usage","text":"","tags":["launch","argument","ros2","DeclareLaunchArgument","LaunchConfiguration"]},{"location":"blog/ROS2/launch/launch_with_arguments/#launch-without-arguments","title":"launch without arguments","text":"<pre><code>ros2 launch pkg_launch_tutorial minimal_arg.launch.py \n\n...\n[INFO] [launch.user]: arg1 default value\n</code></pre>","tags":["launch","argument","ros2","DeclareLaunchArgument","LaunchConfiguration"]},{"location":"blog/ROS2/launch/launch_with_arguments/#check-for-arguments","title":"check for arguments","text":"<pre><code>ros2 launch pkg_launch_tutorial minimal_arg.launch.py -s\nArguments (pass arguments as '&lt;name&gt;:=&lt;value&gt;'):\n\n    'arg1':\n        arg1 description\n        (default: 'arg1 default value')\n</code></pre>","tags":["launch","argument","ros2","DeclareLaunchArgument","LaunchConfiguration"]},{"location":"blog/ROS2/launch/launch_with_arguments/#launch-with-arguments_1","title":"launch with arguments","text":"show arguments<pre><code>ros2 launch pkg_launch_tutorial minimal_arg.launch.py arg1:=\"new arg from cli\"\n...\n[INFO] [launch.user]: new arg from cli\n</code></pre>","tags":["launch","argument","ros2","DeclareLaunchArgument","LaunchConfiguration"]},{"location":"blog/ROS2/launch/launch_with_include/","title":"LAB","text":"<ul> <li>Run/Include sub launch file</li> <li>Pass argument and substitute</li> </ul>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/launch_with_include/#child-launch-file","title":"Child launch file","text":"<ul> <li>Run turtlesim node</li> <li>Change background color (red channel)</li> </ul> <p>Run child with argument from cli</p> <pre><code>ros2 launch launch_tutorial child.launch.py new_background_r:=0\n</code></pre>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/launch_with_include/#parent-launch-file","title":"Parent launch file","text":"<ul> <li>Include childe launch</li> <li>Pass arguments</li> </ul>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/launch_with_include/#parent","title":"Parent","text":"<pre><code>from launch_ros.substitutions import FindPackageShare\n\nfrom launch import LaunchDescription\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch.substitutions import PathJoinSubstitution, TextSubstitution\n\n\ndef generate_launch_description():\n    colors = {\n        'background_r': '0'\n    }\n\n    ld =  LaunchDescription()\n\n    include = IncludeLaunchDescription(\n            PythonLaunchDescriptionSource([\n                PathJoinSubstitution([\n                    FindPackageShare('launch_tutorial'),\n                    'child.launch.py'\n                ])\n            ]),\n            launch_arguments={\n                'new_background_r': TextSubstitution(text=str(colors['background_r']))\n            }.items()\n        )\n\n    ld.add_action(include)\n    return ld\n</code></pre>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/launch_with_include/#child","title":"Child","text":"child.launch.py<pre><code>from launch_ros.actions import Node\n\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument, ExecuteProcess, TimerAction\nfrom launch.substitutions import LaunchConfiguration\n\ndef generate_launch_description():\n    new_background_r = LaunchConfiguration('new_background_r')\n\n    new_background_r_launch_arg = DeclareLaunchArgument(\n        'new_background_r',\n        default_value='255'\n    )\n\n\n    turtlesim_node = Node(\n        package='turtlesim',\n        executable='turtlesim_node',\n        name='sim'\n    )\n\n    change_background_r = ExecuteProcess(\n        cmd=[[\n            'ros2 param set '\n            '/sim background_r ',\n            new_background_r\n        ]],\n        shell=True\n    )\n\n    return LaunchDescription([\n        new_background_r_launch_arg,\n        turtlesim_node,\n        change_background_r\n    ])\n</code></pre>","tags":["ros2","launch"]},{"location":"blog/ROS2/launch/catmux/","title":"catmux","text":"<p>A python package that wraps launching applications with a tmux script </p>","tags":["tmux","launch"]},{"location":"blog/ROS2/launch/catmux/#install","title":"install","text":"<pre><code>pip3 install --user catmux\n</code></pre>","tags":["tmux","launch"]},{"location":"blog/ROS2/launch/catmux/#usage","title":"usage","text":"config_demo.yaml<pre><code>---\nparameters:\nenabled_mavproxy: true\nwindows:\n- name: sitl\nlayout: tiled\nsplits:\n- commands:\n- echo \"1\"\n- commands:\n- echo \"2\"\n\n- name: mavproxy\nif: enabled_mavproxy\nlayout: tiled\nsplits:\n- commands:\n- echo \"1\"\n</code></pre> run<pre><code>catmux_create_session config_demo.yaml\n</code></pre>","tags":["tmux","launch"]},{"location":"blog/ROS2/nav2/","title":"NAV2","text":"","tags":["nav","slam"]},{"location":"blog/ROS2/nav2/#coordinate-frames","title":"Coordinate frames","text":"<ul> <li>base_link</li> <li>odom: world origin</li> <li>map</li> <li>base_footprint: like base_link but keep in 2D</li> </ul> <p>Note</p> <p>Measure robot velocity Velocity integrated to estimate position (dead reckoning)</p> <p></p>","tags":["nav","slam"]},{"location":"blog/ROS2/nav2/#tfs","title":"TF\u2019s","text":"<p>odom: Odometry Origin map: World origin</p>","tags":["nav","slam"]},{"location":"blog/ROS2/nav2/#topics","title":"Topics","text":"<p>/odom: nav_msgs/msg/Odometry /map: nav_msgs/msg/OccupancyGrid</p>","tags":["nav","slam"]},{"location":"blog/ROS2/nav2/#install","title":"install","text":"<pre><code>sudo apt install ros-humble-slam-toolbox\nsudo apt install ros-humble-navigation2\nsudo apt install ros-humble-nav2-bringup\n</code></pre>","tags":["nav","slam"]},{"location":"blog/ROS2/nav2/#slam-toolbox","title":"slam-toolbox","text":"<p>Online: Working in a live data (not recorded) Asynchronous: Always process the most recent scan , avoid lagging (skip scan if lagging)</p> <pre><code>ros2 launch slam_toolbox online_async_launch.py params_file:=./src/basic_mobile_robot/config/slam_async.yaml use_sim_time:=true\n</code></pre> <p></p> <ul> <li>Save map: Old format, create pgm and yaml files</li> <li>Serialize map: New format , create posegraph and data file</li> </ul> <p>slam_toolbox high cpu</p> <p>change param <code>do_loop_closing</code> to false </p>","tags":["nav","slam"]},{"location":"blog/ROS2/nav2/#amcl","title":"AMCL","text":"","tags":["nav","slam"]},{"location":"blog/ROS2/nav2/#map-server","title":"map server","text":"<pre><code>ros2 run \\\nnav2_map_server \\\nmap_server --ros-args \\\n-p yaml_filename:=my_map.yaml \n-p use_sim_time:=true\n\n# Activate\nros2 run nav2_util \\\nlifecycle_bringup map_server\n\n# test\nros2 service call /map_server/load_map nav2_msgs/srv/LoadMap \"{map_url: /home/user/nav2_ws/new_map2.yaml }\"\n</code></pre>","tags":["nav","slam"]},{"location":"blog/ROS2/nav2/#amcl_1","title":"amcl","text":"<pre><code>ros2 run nav2_amcl amcl --ros-args -p use_sim_time:=true\n\n# Activate\nros2 run nav2_util lifecycle_bringup amcl\n</code></pre> <pre><code>[WARN] [1676219701.288565313] [amcl]: AMCL cannot publish a pose or update the transform. Please set the initial pose...\n</code></pre>","tags":["nav","slam"]},{"location":"blog/ROS2/nav2/#launch-file","title":"launch file","text":"","tags":["nav","slam"]},{"location":"blog/ROS2/nav2/#map-server_1","title":"map server","text":"<pre><code>Node(\n    package='nav2_map_server',\n    executable='map_server',\n    name='map_server',\n    output='screen',\n    parameters=[\n        {'use_sim_time': True},\n        {'yaml_filename':map_file}]\n    )\n</code></pre>","tags":["nav","slam"]},{"location":"blog/ROS2/nav2/#lifecycle_manager","title":"lifecycle_manager","text":"<pre><code>Node(\n    package='nav2_lifecycle_manager',\n    executable='lifecycle_manager',\n    name='lifecycle_manager',\n    output='screen',\n    parameters=[\n        {'autostart': True},\n        {'node_names': [\n            'map_server',\n            'amcl']\n        }\n    ]\n)\n</code></pre>","tags":["nav","slam"]},{"location":"blog/ROS2/nav2/#reference","title":"Reference","text":"<ul> <li> Easy SLAM with ROS using slam_toolbox</li> <li>articubot_one source code</li> </ul>","tags":["nav","slam"]},{"location":"blog/ROS2/nav2/odometry/","title":"Odometry","text":"<p>odometry using data from sensors to estimate the change in a robot\u2019s position, orientation, and velocity over time relative to some point (e.g. x=0, y=0, z=0). Odometry usually used sensors like - Wheel Encoder - IMU - LIDAR</p> <p>ROS used <code>odom</code> frame to mark the point in the world where the robot first start to moving.</p>","tags":["ros2"]},{"location":"blog/ROS2/nav2/slam/","title":"SLAM","text":"","tags":["slam"]},{"location":"blog/ROS2/nav2/slam/#lidar","title":"LIDAR","text":"<p>Light Detection And Ranging</p> <ul> <li>simulating SLAM from scratch using python | introduction</li> </ul>","tags":["slam"]},{"location":"blog/ROS2/python/","title":"ROS2 Python","text":"","tags":["ros2","python"]},{"location":"blog/ROS2/python/#minimal-node","title":"Minimal Node","text":"<p>Minimal python node Template</p> <pre><code>import rclpy\nfrom rclpy.node import Node\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"minimal\"\n        super().__init__(node_name)\n        self.get_logger().info(\"Hello ROS2\")\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    try:\n        rclpy.spin(node)\n    except KeyboardInterrupt:\n        print(\"User exit\")\n    finally:\n        node.destroy_node()\n        rclpy.try_shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre>","tags":["ros2","python"]},{"location":"blog/ROS2/python/#setup-tips","title":"Setup tips","text":"<ul> <li>Copy none python files to <code>share</code> folders</li> <li>Map entry points to python modules</li> </ul>","tags":["ros2","python"]},{"location":"blog/ROS2/python/#copy-none-python-files","title":"copy none python files","text":"<pre><code>data_files=[\n        ('share/ament_index/resource_index/packages',['resource/' + package_name]),\n        ('share/' + package_name, ['package.xml']),\n    ]\n\ndef package_files(data_files, directory_list):\n    paths_dict = {}\n    for directory in directory_list:\n        for (path, directories, filenames) in os.walk(directory):\n            for filename in filenames:\n                file_path = os.path.join(path, filename)\n                install_path = os.path.join('share', package_name, path)\n                if install_path in paths_dict.keys():\n                    paths_dict[install_path].append(file_path)\n                else:\n                    paths_dict[install_path] = [file_path]\n\n    for key in paths_dict.keys():\n        data_files.append((key, paths_dict[key]))\n\n    return data_files\n\nsetup(\n    name=package_name,\n    version='0.0.0',\n    packages=[package_name],\n    data_files=package_files(data_files, [\n        'models/',\n        'launch/',\n        'worlds/',\n        \"config\",\n        \"urdf\"\n    ]),\n)\n</code></pre>","tags":["ros2","python"]},{"location":"blog/ROS2/python/#entry-points","title":"Entry points","text":"map entry points<pre><code># entry points\nentry_points={\n        'console_scripts': [\n            \"minimal_node=py_tutorial_pkg.minimal_node:main\",\n        ]\n</code></pre>","tags":["ros2","python"]},{"location":"blog/ROS2/python/#tutorials","title":"Tutorials","text":"<ul> <li>pub sub namespace and remapping</li> </ul>","tags":["ros2","python"]},{"location":"blog/ROS2/python/pub_sub_ns_remapping/","title":"LAB","text":"<ul> <li>Create minimal Pub/Sub with different topic</li> <li>remapping topic from command line</li> <li>remapping from launch</li> <li>add namespace</li> <li>change node name</li> </ul>","tags":["python","ros2"]},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#minimal-nodes","title":"Minimal nodes","text":"minimal_pub.py<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\n\nTOPIC = \"simple\"\nPERIOD = 1\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"minimal_pub\"\n        super().__init__(node_name)\n        self.__pub = self.create_publisher(String, TOPIC, 10)\n        self.__timer = self.create_timer(PERIOD, self.__timer_handler)\n        self.__timer\n        self.__counter = 0\n        self.get_logger().info(\"run simple pub\")\n\n    def __timer_handler(self):\n        self.__counter += 1\n        msg = String(data=\"pub counter: {}\".format(self.__counter))\n        self.__pub.publish(msg)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> minimal_sub.py<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\n\nTOPIC = \"simple1\"\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"minimal_sub\"\n        super().__init__(node_name)\n        self.__sub = self.create_subscription(String, TOPIC, self.__sub_handler, 10)\n        self.__sub\n        self.get_logger().info(\"start minimal sub\")\n\n    def __sub_handler(self, msg: String):\n        self.get_logger().info(msg.data)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> setup.py<pre><code># Add entry points\nentry_points={\n        'console_scripts': [\n            \"minimal_pub=py_tutorial_pkg.minimal_pub:main\",\n            \"minimal_sub=py_tutorial_pkg.minimal_sub:main\"\n        ],\n    }\n</code></pre>","tags":["python","ros2"]},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#first-run","title":"first run","text":"terminal1<pre><code>ros2 run py_tutorial_pkg minimal_pub\n</code></pre> terminal2<pre><code>ros2 run py_tutorial_pkg minimal_sub\n</code></pre> terminal3<pre><code># nodes\nros2 node list\n/minimal_pub\n/minimal_sub\n\n# topics\nros2 topic list\n/parameter_events\n/rosout\n/simple\n/simple1\n\n# info topic /simple\nros2 topic info /simple\nType: std_msgs/msg/String\nPublisher count: 1\nSubscription count: 0\n\n# info topic /simple1\nros2 topic info /simple1\nType: std_msgs/msg/String\nPublisher count: 0\nSubscription count: 1\n</code></pre>","tags":["python","ros2"]},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#usage-remapping-sub-topic","title":"usage remapping sub topic","text":"terminal2<pre><code>ros2 run py_tutorial_pkg minimal_sub --ros-args -r simple1:=simple\n</code></pre> terminal3<pre><code>ros2 topic list\n/parameter_events\n/rosout\n/simple\n</code></pre>","tags":["python","ros2"]},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#launch-with-remapping","title":"launch with remapping","text":"run_minimal_1.launch.py<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pub_node =  Node(\n            package='py_tutorial_pkg',\n            executable='minimal_pub'\n        )\n\n    sub_node =  Node(\n            package='py_tutorial_pkg',\n            executable='minimal_sub',\n            remappings=[\n                ('/simple1', '/simple'),\n            ]\n        )\n\n    ld.add_action(pub_node)\n    ld.add_action(sub_node)\n    return ld\n</code></pre> terminal1<pre><code>ros2 launch py_tutorial_pkg run_minimal1.launch.py\n</code></pre> terminal2<pre><code># nodes\nros2 node list\n/minimal_pub\n/minimal_sub\n\n# topics\nros2 topic list\n/parameter_events\n/rosout\n/simple\n</code></pre>","tags":["python","ros2"]},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#add-namespace","title":"Add namespace","text":"terminal1<pre><code>ros2 run py_tutorial_pkg minimal_pub --ros-args -r __ns:=/demo\n</code></pre> terminal2<pre><code>ros2 run py_tutorial_pkg minimal_sub --ros-args -r __ns:=/other_demo\n</code></pre> terminal3<pre><code># nodes\nros2 node list\n/demo/minimal_pub\n/other_demo/minimal_sub\n\n# topics\nros2 topic list\n/demo/simple\n/other_demo/simple1\n</code></pre>","tags":["python","ros2"]},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#remap-pub-this-time","title":"remap pub this time","text":"terminal1<pre><code>ros2 run py_tutorial_pkg minimal_pub --ros-args -r __ns:=/demo -r /demo/simple:=/other_demo/simple1\n</code></pre> terminal3<pre><code># nodes\nros2 topic list\n/demo/other_demo/simple1\n/other_demo/simple1\n\n# topics\nros2 topic list\n/other_demo/simple1\n</code></pre>","tags":["python","ros2"]},{"location":"blog/ROS2/python/pub_sub_ns_remapping/#with-launch-file","title":"with launch file","text":"<ul> <li>Add namespace</li> <li>Remap topic with full namespace</li> </ul> run_minimal_2.launch.py<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pub_node =  Node(\n            package='py_tutorial_pkg',\n            executable='minimal_pub',\n            namespace=\"/demo\",\n            remappings=[\n                ('/demo/simple', '/other_demo/simple1'),\n            ]\n        )\n\n    sub_node =  Node(\n            package='py_tutorial_pkg',\n            executable='minimal_sub',\n            namespace=\"/other_demo\"\n\n        )\n\n    ld.add_action(pub_node)\n    ld.add_action(sub_node)\n    return ld\n</code></pre>","tags":["python","ros2"]},{"location":"blog/ROS2/python/test_demo/","title":"Add test to your package","text":"<p>unit test without ROS: unittest/pytest unit test with ROS: launch_test + unittest Integration Testing:  launch_test + unittest</p> <p>Tip</p> <p>All test run with <code>colcon test</code></p>","tags":["pytest","test","ros2","rclpy"]},{"location":"blog/ROS2/python/test_demo/#minimal-project-structure","title":"Minimal project structure","text":"<pre><code>py_tutorial_pkg/\n  py_tutorial_pkg/\n      __init__.py\n      demo.py\n  package.xml\n  setup.cfg\n  setup.py\n  tests/\n      test_demo.py\n</code></pre> setup.py<pre><code># Add line to setup.py\ntests_require=['pytest'],\n</code></pre> <p>```python title=\u201dpy_tutorial_pkg/demo.py def func_under_test(a, b):     return a+b <pre><code>```python title=\"tests/test_demo.py\"\nfrom py_tutorial_pkg import demo\n\ndef test_math():\n    result = demo.func_under_test(2, 2)\n    assert result == 4\n</code></pre></p>","tags":["pytest","test","ros2","rclpy"]},{"location":"blog/ROS2/python/test_demo/#usage","title":"usage","text":"<pre><code># Run test in verbose mode\n\ncolcon test --packages-select py_tutorial_pkg \\\n--event-handler=console_direct+ </code></pre> <ul> <li>Run specific test</li> </ul> <pre><code># colcon test --packages-select &lt;name-of-pkg&gt; --pytest-args -k name_of_the_test_function\n\ncolcon test --packages-select py_tutorial_pkg \\\n--pytest-args -k test_math \\\n--event-handler=console_direct+ </code></pre> <p>colcon event-handler</p> <p>The event handler used to generate any kind of output base on the progress of the invocation  </p> <p>use <code>+</code> sign to enable handler and <code>-</code> to disabled</p> <p>event-handler</p> <ul> <li>console_direct: Pass output directly to <code>stdout</code>, <code>stderror</code> </li> <li>console_cohesion: Pass job output at once after it has finish</li> </ul>","tags":["pytest","test","ros2","rclpy"]},{"location":"blog/ROS2/python/test_demo/#check-result","title":"check result","text":"<pre><code>colcon test-result --all\n</code></pre>","tags":["pytest","test","ros2","rclpy"]},{"location":"blog/ROS2/python/action/","title":"Index","text":"<ul> <li>Create custom action msg</li> <li>Create minimal action server</li> <li>Action server more api</li> </ul>","tags":["ros2","action"]},{"location":"blog/ROS2/python/action/#demos","title":"Demos","text":"<ul> <li>Goal Cancel: Client send goal and after 2 sec send cancel request</li> <li>Goal aborted: Client send multiple goal (two goals) the last one aborted the first and run instated</li> </ul>","tags":["ros2","action"]},{"location":"blog/ROS2/python/action/action_abort_goal/","title":"Action abort goal","text":"<ul> <li>Each client goal request abort the previous one</li> <li>When new accepted goal received, the server check for previous goal (36) if exists it\u2019s abort it.</li> <li>The execute callback check if the goal_handle still active , is aborted the goal not active and the loop ended</li> </ul>","tags":["ros2","rclpy","action","goal abort"]},{"location":"blog/ROS2/python/action/action_abort_goal/#server","title":"Server","text":"server<pre><code>import threading\nimport rclpy\nfrom custom_interfaces.action._counter import Counter_Goal, Counter_Result\nfrom rclpy.action import ActionServer, CancelResponse, GoalResponse\nfrom rclpy.action.server import ServerGoalHandle\nfrom rclpy.callback_groups import ReentrantCallbackGroup\nfrom rclpy.clock import Duration\nfrom rclpy.executors import MultiThreadedExecutor\nfrom rclpy.node import Node\nfrom custom_interfaces.action import Counter  # pylint: disable=E0401\nTOPIC = \"my_action_demo\"\nclass MyNode(Node):\ndef __init__(self):\nnode_name = \"action_server\"\nsuper().__init__(node_name)\nself._goal_handle = None\nself._goal_lock = threading.Lock()\nself._action_server = ActionServer(\nself,\nCounter,\nTOPIC,\nself.execute_callback,\nhandle_accepted_callback=self.__accepted_handler,\ncallback_group=ReentrantCallbackGroup(),\n)\nself.get_logger().info(\"Hello ROS2\")\ndef __accepted_handler(self, goal_handle: ServerGoalHandle) -&gt; None:\nwith self._goal_lock:\n# This server only allows one goal at a time\nif self._goal_handle is not None and self._goal_handle.is_active:\nself.get_logger().info(\"Aborting previous goal\")\n# Abort the existing goal\nself._goal_handle.abort()\nself._goal_handle = goal_handle\ngoal_handle.execute()\ndef execute_callback(self, goal_handle: ServerGoalHandle) -&gt; Counter_Result:\ngoal: Counter_Goal\nfeedback_msg = Counter.Feedback()\ngoal = goal_handle.request\nself.get_logger().info(\nf\"execute method thread: {threading.current_thread().name}\"\n)\nfor i in range(goal.count):\nif not goal_handle.is_active:\nself.get_logger().info(\"Goal aborted\")\nreturn Counter.Result()\nself.get_logger().info(f\"publish feedback: {i}\")\nfeedback_msg.current = i\ngoal_handle.publish_feedback(feedback_msg)\nself.get_clock().sleep_for(rel_time=Duration(seconds=1))\nself.get_logger().info(\"Action ended\")\ngoal_handle.succeed()\nresult = Counter.Result()\nresult.total = i\nreturn result\ndef main():\nrclpy.init()\nexecutor = MultiThreadedExecutor()\nnode = MyNode()\nnode.get_logger().info(f\"main method thread: {threading.current_thread().name}\")\ntry:\nrclpy.spin(node, executor)\nexcept KeyboardInterrupt:\nprint(\"User exit\")\nfinally:\nnode.destroy_node()\nrclpy.try_shutdown()\nif __name__ == \"__main__\":\nmain()\n</code></pre>","tags":["ros2","rclpy","action","goal abort"]},{"location":"blog/ROS2/python/action/action_abort_goal/#client","title":"client","text":"client<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom rclpy.action.client import ActionClient, ClientGoalHandle\nfrom custom_interfaces.action import Counter\nACTION_NAME = \"my_action_demo\"\nclass SimpleClient(Node):\ndef __init__(self):\nnode_name=\"action_client_demo\"\nsuper().__init__(node_name)\nself.action_client = ActionClient(self, Counter, ACTION_NAME)\nself.action_client.wait_for_server(1.0)\nself.get_logger().info(\"Hello ROS2\")\nself.__timer = None\nself.__goal_handler = None\nself.goal_request(request_counter=10)\ndef goal_request(self, request_counter: int) -&gt; None:\ngoal = Counter.Goal()\ngoal.count = request_counter\nfuture = self.action_client.send_goal_async(goal)\nfuture.add_done_callback(self.goal_handler)\ndef goal_handler(self, future):\nself.__goal_handler: ClientGoalHandle\nself.__goal_handler = future.result()\nif self.__goal_handler.accepted:\nself.__timer = self.create_timer(2.0, self.__handler_timer)\ndef __handler_timer(self):\n# Send again\nself.__timer.cancel()\ngoal = Counter.Goal()\ngoal.count = 5\nself.action_client.send_goal_async(goal)\ndef main(args=None):\nrclpy.init(args=args)\nnode = SimpleClient()\ntry:\nrclpy.spin(node)\nexcept KeyboardInterrupt:\nprint(\"User exit\")\nfinally:\nnode.destroy_node()\nrclpy.try_shutdown()\nif __name__ == '__main__':\nmain()\n</code></pre>","tags":["ros2","rclpy","action","goal abort"]},{"location":"blog/ROS2/python/action/action_cancel_goal/","title":"ROS2 Action with cancel request","text":"<p>base on example form ros2 examples:</p> <ul> <li>server</li> <li>client</li> </ul> <p></p>","tags":["ros2","rclpy","action","cancel goal"]},{"location":"blog/ROS2/python/action/action_cancel_goal/#server","title":"Server","text":"<ul> <li> <p>Register to <code>cancel_callback</code> and return <code>CancelResponse.ACCEPT</code> if accept the request</p> </li> <li> <p>Ask if <code>goal_handle.is_cancel_requested</code> in the execute callback</p> </li> </ul> server<pre><code>import rclpy\nfrom rclpy.action import ActionServer, GoalResponse, CancelResponse\nfrom rclpy.action.server import ServerGoalHandle\nfrom rclpy.node import Node\nimport threading\nfrom rclpy.clock import Clock, Duration\nfrom rclpy.callback_groups import ReentrantCallbackGroup\nfrom rclpy.executors import MultiThreadedExecutor\nfrom custom_interfaces.action import Counter  # pylint: disable=E0401\nfrom custom_interfaces.action._counter import Counter_Goal\nfrom custom_interfaces.action._counter import Counter_Result\nTOPIC = \"my_action_demo\"\nclass MyNode(Node):\ndef __init__(self):\nnode_name = \"action_server\"\nsuper().__init__(node_name)\nself._action_server = ActionServer(\nself,\nCounter,\nTOPIC,\nself.execute_callback,\ncallback_group=ReentrantCallbackGroup(),\ncancel_callback=self.__cancel_handler,\n)\nself.get_logger().info(\"Hello ROS2\")\ndef __cancel_handler(self, goal_handle: ServerGoalHandle) -&gt; CancelResponse:\nreturn CancelResponse.ACCEPT\ndef execute_callback(self, goal_handle: ServerGoalHandle) -&gt; Counter_Result:\ngoal: Counter_Goal\nfeedback_msg = Counter.Feedback()\ngoal = goal_handle.request\nself.get_logger().info(\nf\"execute method thread: {threading.current_thread().name}\"\n)\nfor i in range(goal.count):\nif not goal_handle.is_active:\nself.get_logger().info('Goal aborted')\nreturn Counter.Result()\nif goal_handle.is_cancel_requested:\ngoal_handle.canceled()\nself.get_logger().info(\"Goal canceled\")\nreturn Counter.Result()\nself.get_logger().info(f\"publish feedback: {i}\")\nfeedback_msg.current = i\ngoal_handle.publish_feedback(feedback_msg)\nself.get_clock().sleep_for(rel_time=Duration(seconds=1))\nself.get_logger().info(\"Action ended\")\ngoal_handle.succeed()\nresult = Counter.Result()\nresult.total = i\nreturn result\ndef main():\nrclpy.init()\nexecutor = MultiThreadedExecutor()\nnode = MyNode()\nnode.get_logger().info(f\"main method thread: {threading.current_thread().name}\")\ntry:\nrclpy.spin(node, executor)\nexcept KeyboardInterrupt:\nprint(\"User exit\")\nfinally:\nnode.destroy_node()\nrclpy.try_shutdown()\nif __name__ == \"__main__\":\nmain()\n</code></pre>","tags":["ros2","rclpy","action","cancel goal"]},{"location":"blog/ROS2/python/action/action_cancel_goal/#client","title":"Client","text":"client<pre><code>import rclpy\nfrom rclpy.action.client import ActionClient, ClientGoalHandle\nfrom rclpy.node import Node\nfrom rclpy.task import Future\nfrom custom_interfaces.action import Counter\nACTION_NAME = \"my_action_demo\"\nclass SimpleClient(Node):\ndef __init__(self):\nnode_name = \"action_client_demo\"\nsuper().__init__(node_name)\nself.action_client = ActionClient(self, Counter, ACTION_NAME)\nself.action_client.wait_for_server(1.0)\ngoal = Counter.Goal()\ngoal.count = 10\nfuture = self.action_client.send_goal_async(goal)\nfuture.add_done_callback(self.goal_handler)\nself.get_logger().info(\"Hello ROS2\")\nself.__timer = None\nself.__goal_handler = None\nself.first = True\ndef goal_handler(self, future):\nself.__goal_handler: ClientGoalHandle\nself.__goal_handler = future.result()\nif self.__goal_handler.accepted and self.first:\nself.__timer = self.create_timer(2.0, self.__handler_timer)\ndef __handler_timer(self):\nself.get_logger().info(\"timer handler\")\nself.__timer.cancel()\nfuture: Future\nfuture = self.__goal_handler.cancel_goal_async()\nfuture.add_done_callback(self.__cancel_request_handler)\nself.get_logger().info(\"cancel sended\")\ndef __cancel_request_handler(self, future: Future):\nprint(future.result())\ndef main(args=None):\nrclpy.init(args=args)\nnode = SimpleClient()\ntry:\nrclpy.spin(node)\nexcept KeyboardInterrupt:\nprint(\"User exit\")\nfinally:\nnode.destroy_node()\nrclpy.try_shutdown()\nif __name__ == \"__main__\":\nmain()\n</code></pre>","tags":["ros2","rclpy","action","cancel goal"]},{"location":"blog/ROS2/python/action/action_cancel_goal/#reference","title":"Reference","text":"<ul> <li>Action design</li> </ul>","tags":["ros2","rclpy","action","cancel goal"]},{"location":"blog/ROS2/python/action/action_client/","title":"Action client","text":"<p>Call/Run action on action server </p> <ul> <li>Run callback for each <code>feedback</code></li> <li>Run callback when server return <code>response</code></li> </ul> <pre><code>import rclpy\nfrom rclpy.action import ActionClient\nfrom rclpy.node import Node\nimport threading\nfrom custom_interfaces.action import Counter  # pylint: disable=E0401\nTOPIC = \"my_action_demo\"\nclass MyActionClient(Node):\ndef __init__(self):\nsuper().__init__('action_client')\nself._action_client = ActionClient(self,\nMyAction,\nTOPIC)\ndef send_goal(self, count):\ngoal_msg = MyAction.Goal()\ngoal_msg.count = count\nself._action_client.wait_for_server()\nself._send_goal_future = self._action_client.send_goal_async(\ngoal_msg, \nfeedback_callback=self.feedback_callback)\nself._send_goal_future.add_done_callback(self.goal_response_callback)\ndef feedback_callback(self, feedback_msg):\nself.get_logger().info(\"feedback thread {}\".format(threading.current_thread().ident))\ndef goal_response_callback(self, future):\nself.get_logger().info(\"response thread {}\".format(threading.current_thread().ident))\ngoal_handle = future.result()\nif not goal_handle.accepted:\nself.get_logger().info('Goal rejected :(')\nreturn\nself.get_logger().info('Goal accepted :)')\nself._get_result_future = goal_handle.get_result_async()\nself._get_result_future.add_done_callback(self.get_result_callback)\ndef get_result_callback(self, future):\nself.get_logger().info(\"result thread {}\".format(threading.current_thread().ident))\nresult = future.result().result\nself.get_logger().info('Result: {0}'.format(result.total))\nrclpy.shutdown()\ndef main(args=None):\nrclpy.init(args=args)\naction_client = MyActionClient()\naction_client.send_goal(10)\nrclpy.spin(action_client)\nif __name__ == '__main__':\nmain()\n</code></pre>","tags":["ros2","python","action","action client"]},{"location":"blog/ROS2/python/action/action_server/","title":"Action server","text":"<p>Create <code>action server</code> that use <code>Counter.action</code> custom message declare at custom_interfaces </p> <p>Action server create 3 service and 2 topics</p> <p></p> <p>Action topics and services</p> <p>use <code>--include-hidden-topics</code> arg</p> <pre><code>ros2 topic list --include-hidden-topics #\n/action_demo/_action/feedback\n/action_demo/_action/status\n/parameter_events\n/rosout\n</code></pre> <p>use <code>include-hidden-services</code> on service list</p> <pre><code>ros2 service  list --include-hidden-services \n/action_demo/_action/cancel_goal\n/action_demo/_action/get_result\n/action_demo/_action/send_goal\n</code></pre>","tags":["ros2","python","action"]},{"location":"blog/ROS2/python/action/action_server/#action-sequence","title":"Action sequence","text":"","tags":["ros2","python","action"]},{"location":"blog/ROS2/python/action/action_server/#code-time","title":"Code time","text":"<p>VSCode action intellisense</p> <p>Add path to search to <code>python.analysis.extraPaths</code> list in settings.json</p> <pre><code>{\n\"python.analysis.extraPaths\": [\n\"/home/user/ros2_ws/install/action_tutorial_interfaces/local/lib/python3.10/dist-packages\"\n]\n}\n</code></pre>","tags":["ros2","python","action"]},{"location":"blog/ROS2/python/action/action_server/#demo","title":"demo","text":"action_tutorial/my_server.py<pre><code>import rclpy\nfrom rclpy.action import ActionServer\nfrom rclpy.action.server import ServerGoalHandle\nfrom rclpy.node import Node\n\nfrom custom_interfaces.action import Counter  # pylint: disable=E0401\n\nTOPIC = \"my_action_demo\"\n\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name = \"action_server\"\n        super().__init__(node_name)\n        self._action_server = ActionServer(self, Counter, TOPIC, self.execute_callback)\n        self.get_logger().info(\"Hello ROS2\")\n\n    def execute_callback(self, goal_handle: ServerGoalHandle):\n        feedback_msg = Counter.Feedback()\n        for i in range(goal_handle.request.count):\n            self.get_logger().info(f\"current: {i}\")\n            feedback_msg.current = i\n            goal_handle.publish_feedback(feedback_msg)\n\n        self.get_logger().info(\"Action ended\")\n        goal_handle.succeed()\n\n        result = Counter.Result()\n        result.total = i\n        return result\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    try:\n        rclpy.spin(node)\n    except KeyboardInterrupt:\n        print(\"User exit\")\n    finally:\n        node.destroy_node()\n        rclpy.try_shutdown()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["ros2","python","action"]},{"location":"blog/ROS2/python/action/action_server/#packagexml","title":"package.xml","text":"<pre><code>&lt;!-- Add dependency to custom_interfaces package --&gt;\n&lt;depend&gt;custom_interfaces&lt;/depend&gt;\n</code></pre>","tags":["ros2","python","action"]},{"location":"blog/ROS2/python/action/action_server/#test","title":"Test","text":"<p>Use ROS cli to run action <pre><code>ros2 interface show custom_interfaces/action/Counter \nint32 count\n---\nint32 total\n---\nint32 current\n</code></pre></p> check for actions<pre><code>ros2 action list\n#\n/my_action_demo\n</code></pre> <pre><code>ros2 action send_goal -f &lt;action_topic&gt; &lt;action messegae&gt; &lt;request part&gt;\n\nros2 action send_goal -f /my_action_demo custom_interfaces/action/Counter \"{count: 5}\"\n</code></pre> <p>feedback</p> <p><code>-f</code> show feedback from server </p> send_goal<pre><code>ros2 action send_goal -f /my_action_demo custom_interfaces/action/Counter \"{count: 5}\"\n#\nWaiting for an action server to become available...\nSending goal:\n     count: 5\nGoal accepted with ID: c1129edf0f894012921b849b7948703a\n\nFeedback:\n    current: 0\nFeedback:\n    current: 1\nFeedback:\n    current: 2\nFeedback:\n    current: 3\nFeedback:\n    current: 4\nResult:\n    total: 4\nGoal finished with status: SUCCEEDED\n</code></pre>","tags":["ros2","python","action"]},{"location":"blog/ROS2/python/action/action_server/#goal-states","title":"Goal States","text":"<ul> <li>ACCEPTED (1): The goal has been accepted and wait for execute.</li> <li>EXECUTING (2): The goal is currently running by action server</li> <li>CANCELING (3): The client request the server to cancel current goal (cancel accepted)</li> <li>SUCCEEDED (4): The goal was successfully by the action server</li> <li>CANCELED (5): The goal canceled by the client or external event</li> <li>ABORTED (6): The goal terminated by the action server</li> </ul>","tags":["ros2","python","action"]},{"location":"blog/ROS2/python/action/action_server/#action-server-state-service","title":"action server state service","text":"<ul> <li>send_goal: New goal request send to the server, if <code>accepted</code> start the server state machine</li> <li>cancel_goal: Request server to stop processing current goal.</li> </ul>","tags":["ros2","python","action"]},{"location":"blog/ROS2/python/action/action_server_api/","title":"Action server examples and API","text":"<p>API (foxy)</p> <p>Warning</p> <p>humble document can found in humble api but there are no reference to rclpy</p> <p>goal_callback: callback function to handle new client goal request, return <code>GoalResponse.REJECT</code> or <code>GoalResponse.ACCEPT</code></p> <pre><code>def __init__(self):\nnode_name = \"action_server\"\nsuper().__init__(node_name)\nself._action_server = ActionServer(\nself,\nCounter,\nTOPIC,\nself.execute_callback,\ngoal_callback=self.__handle_goal_callback,\n)\nself.get_logger().info(\"Hello ROS2\")\ndef __handle_goal_callback(self, goal: Counter_Goal) -&gt; GoalResponse:\nif goal.count &lt; 5:\nreturn GoalResponse.REJECT\nreturn GoalResponse.ACCEPT\n</code></pre> <pre><code>ros2 service type /my_action_demo/_action/cancel_goal action_msgs/srv/CancelGoal\n</code></pre>","tags":["ros2","python","action server"]},{"location":"blog/ROS2/python/action/action_server_multiple_executer/","title":"Create Action server with multithread executer","text":"","tags":["ros2","python","action"]},{"location":"blog/ROS2/python/action/action_server_multiple_executer/#demo","title":"Demo","text":"action server with multithread<pre><code>import rclpy\nimport threading\nimport time\nfrom rclpy.executors import MultiThreadedExecutor\nfrom rclpy.action import ActionServer\nfrom rclpy.node import Node\nfrom rclpy.action.server import ServerGoalHandle\nfrom action_tutorial_interfaces.action import MyAction\nTOPIC = \"my_action_demo\"\nPERIOD = 1\nclass MyActionServer(Node):\ndef __init__(self):\nsuper().__init__('my_action_server')\nself._action_server = ActionServer(\nself,\nMyAction,\nTOPIC,\nself.execute_callback)\nself.__timer = self.create_timer(PERIOD, self.__timer_handler)\nself.__timer\nself.get_logger().info('Start my_action_server version')\ndef __timer_handler(self):\nself.get_logger().info(\"timer thread -&gt;: {}\".format(threading.current_thread().ident))\ndef execute_callback(self, goal_handle: ServerGoalHandle):\nself.get_logger().info(\"action thread -&gt;: {}\".format(threading.current_thread().ident))\nfeedback_msg = MyAction.Feedback()\nfor i in range(goal_handle.request.count):\ntime.sleep(1)\nself.get_logger().info('current: {}'.format(i))\nfeedback_msg.current = i\ngoal_handle.publish_feedback(feedback_msg)\nself.get_logger().info('Action ended')\ngoal_handle.succeed()\nresult = MyAction.Result()\nresult.total = i\nreturn result\ndef main(args=None):\nrclpy.init(args=args)\naction_server = MyActionServer()\nexec = MultiThreadedExecutor()\nexec.add_node(action_server)\nexec.spin()\nrclpy.spin(action_server)\nif __name__ == '__main__':\nmain()\n</code></pre>","tags":["ros2","python","action"]},{"location":"blog/ROS2/python/action/action_server_multiple_executer/#run","title":"Run","text":"run action<pre><code>ros2 action send_goal -f /my_action_demo action_tutorial_interfaces/action/MyAction \"{count: 3}\"\n</code></pre> server output<pre><code>[INFO] [1670248402.659192149] [my_action_server]: timer thread -&gt;: 140488007521856\n[INFO] [1670248403.657669396] [my_action_server]: timer thread -&gt;: 140487998469696\n[INFO] [1670248404.005261426] [my_action_server]: action thread -&gt;: 140487998469696\n[INFO] [1670248404.658963720] [my_action_server]: timer thread -&gt;: 140488007521856\n[INFO] [1670248405.006998918] [my_action_server]: current: 0\n[INFO] [1670248405.658867664] [my_action_server]: timer thread -&gt;: 140487990076992\n[INFO] [1670248406.009163793] [my_action_server]: current: 1\n[INFO] [1670248406.658945210] [my_action_server]: timer thread -&gt;: 140488015914560\n[INFO] [1670248407.011518224] [my_action_server]: current: 2\n[INFO] [1670248407.012507114] [my_action_server]: Action ended\n[INFO] [1670248407.658774598] [my_action_server]: timer thread -&gt;: 140488015914560\n</code></pre>","tags":["ros2","python","action"]},{"location":"blog/ROS2/python/action/create_custom_action_msg/","title":"Create custom action msg","text":"<p>Actions are defined as <code>.action</code> file locate in <code>action</code> sub folder The best practice is to create a package dedicated to ROS2 custom messages. The package type is <code>cmake_ament</code> and  naming the package with <code>_interface</code> suffix so it\u2019 clear that the package is an interface package.</p> <pre><code>ros2 pkg create custom_interfaces\nrm -rf include\nrm -rf src\nmkdir msg srv action\n</code></pre> <ul> <li>Remove from the package the <code>src</code> and <code>include</code> folders</li> <li>Create folders for <code>msg</code>, <code>srv</code>, <code>action</code> sub folders/</li> <li>Add <code>action file</code> for example name it <code>Counter.action</code></li> <li>Action files defined in this structure</li> </ul> <pre><code># Goal\n---\n# Result\n---\n# Feedback\n</code></pre> <ol> <li>Goal: Describe what the action should achieve, It send to the action server when client requested to execute an action</li> <li>Result: Describe the outcome of an action</li> <li>Feedback: Describe the progress towards completing an action.</li> </ol>","tags":["ros2","python","action","custom messages"]},{"location":"blog/ROS2/python/action/create_custom_action_msg/#action-definition","title":"Action Definition","text":"action/Counter.action<pre><code>int32 count\n---\nint32 total\n---\nint32 current\n</code></pre>","tags":["ros2","python","action","custom messages"]},{"location":"blog/ROS2/python/action/create_custom_action_msg/#cmakelists","title":"CMakeLists","text":"CMakeList.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(action_tutorial_interfaces)\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\nadd_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(rosidl_default_generators REQUIRED)\nrosidl_generate_interfaces(${PROJECT_NAME}\n\"action/MyAction.action\"\n)\nament_export_dependencies(rosidl_default_runtime)\nament_package()\n</code></pre> <p>CMakeLists</p> <p>Keep each action,srv or msg in new line</p>","tags":["ros2","python","action","custom messages"]},{"location":"blog/ROS2/python/action/create_custom_action_msg/#packagexml","title":"Package.xml","text":"Add to package.xml<pre><code>  &lt;buildtool_depend&gt;rosidl_default_generators&lt;/buildtool_depend&gt;\n&lt;exec_depend&gt;rosidl_default_runtime&lt;/exec_depend&gt;\n&lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt;\n</code></pre>","tags":["ros2","python","action","custom messages"]},{"location":"blog/ROS2/python/action/create_custom_action_msg/#build-and-test","title":"build and test","text":"","tags":["ros2","python","action","custom messages"]},{"location":"blog/ROS2/python/action/create_custom_action_msg/#build","title":"build","text":"<pre><code>colcon build --packages-select action_tutorial_interfaces </code></pre>","tags":["ros2","python","action","custom messages"]},{"location":"blog/ROS2/python/action/create_custom_action_msg/#test","title":"test","text":"<pre><code>ros2 interface list | grep Counter\n</code></pre> check<pre><code>ros2 interface show custom_interfaces/action/Counter\n\n#\n\nint32 count\n---\nint32 total\n---\nint32 current\n</code></pre>","tags":["ros2","python","action","custom messages"]},{"location":"blog/ROS2/python/action/create_custom_action_msg/#resources","title":"Resources","text":"<ul> <li>Creating an action</li> </ul>","tags":["ros2","python","action","custom messages"]},{"location":"blog/ROS2/python/executor/","title":"ROS2 rclpy executor","text":"<p>By default, rclpy offers two different executors for the user to choose from:</p> <ul> <li>SingleThreadedExecutor (default)</li> <li>MultiThreadedExecutor</li> </ul> <p>SingleThreadedExecutor:  executes callbacks in a single thread, one at a time, and thus the previous callback must always finish before a new one can begin execution.</p> <p>MultiThreadedExecutor: executing several callbacks simultaneously.</p>","tags":["ros2","python","executor","MultiThreadedExecutor","SingleThreadedExecutor"]},{"location":"blog/ROS2/python/executor/#callback-groups","title":"Callback groups","text":"<p>ROS 2 allows organizing the callbacks of a node in groups.</p> <ul> <li>MutuallyExclusiveCallbackGroup</li> <li>ReentrantCallbackGroup</li> </ul> <p>MutuallyExclusiveCallbackGroup: Callbacks of this group must not be executed in parallel.</p> <p>ReentrantCallbackGroup: Callbacks of this group may be executed in parallel.</p> <p>callback examples - subscription callback - timer callback - service callback (request on server) - action server and client callback - Future done callback</p>","tags":["ros2","python","executor","MultiThreadedExecutor","SingleThreadedExecutor"]},{"location":"blog/ROS2/python/executor/#demo","title":"demo","text":"<p>Node with timer that handle long time work, the demo assign timer callback to each type of group with MultiThreadedExecutor</p>","tags":["ros2","python","executor","MultiThreadedExecutor","SingleThreadedExecutor"]},{"location":"blog/ROS2/python/executor/#reentrantcallbackgroup","title":"ReentrantCallbackGroup","text":"ReentrantCallbackGroup<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom rclpy.executors import MultiThreadedExecutor\nfrom rclpy.callback_groups import ReentrantCallbackGroup\nimport time\nimport threading\n\nWORKER_THREAD = 10\nWORKER_10HZ = 1/10\nPAYLOAD_TIME = 1/2\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"executer_demo\"\n        super().__init__(node_name)\n        g = ReentrantCallbackGroup()\n        self.create_timer(WORKER_10HZ, self.__timer_handler, callback_group=g)\n        self.get_logger().info(\"Hello ROS2\")\n\n    def __timer_handler(self):\n        self.get_logger().info(f\"work: {threading.current_thread().name}\")\n        time.sleep(PAYLOAD_TIME)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    try:\n        exec = MultiThreadedExecutor(WORKER_THREAD)\n        exec.add_node(node)\n        exec.spin()\n    except KeyboardInterrupt:\n        print(\"User exit\")\n    finally:\n        node.destroy_node()\n        rclpy.try_shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <pre><code>[INFO] [1680619887.064644971] [keyboard]: work: ThreadPoolExecutor-0_2\n[INFO] [1680619887.163538444] [keyboard]: work: ThreadPoolExecutor-0_3\n[INFO] [1680619887.264196196] [keyboard]: work: ThreadPoolExecutor-0_4\n[INFO] [1680619887.364816744] [keyboard]: work: ThreadPoolExecutor-0_5\n[INFO] [1680619887.464378506] [keyboard]: work: ThreadPoolExecutor-0_0\n[INFO] [1680619887.564040306] [keyboard]: work: ThreadPoolExecutor-0_6\n[INFO] [1680619887.665020484] [keyboard]: work: ThreadPoolExecutor-0_1\n[INFO] [1680619887.764469847] [keyboard]: work: ThreadPoolExecutor-0_2\n[INFO] [1680619887.864734746] [keyboard]: work: ThreadPoolExecutor-0_3\n[INFO] [1680619887.964096619] [keyboard]: work: ThreadPoolExecutor-0_4\n</code></pre> <p>The executer success to run payload in time interval 10hz</p>","tags":["ros2","python","executor","MultiThreadedExecutor","SingleThreadedExecutor"]},{"location":"blog/ROS2/python/executor/#mutuallyexclusivecallbackgroup","title":"MutuallyExclusiveCallbackGroup","text":"MutuallyExclusiveCallbackGroup<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom rclpy.executors import MultiThreadedExecutor\nfrom rclpy.callback_groups import MutuallyExclusiveCallbackGroup\nimport time\nimport threading\n\nWORKER_THREAD = 10\nWORKER_10HZ = 1/10\nPAYLOAD_TIME = 1/2\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"executer_demo\"\n        super().__init__(node_name)\n        g = MutuallyExclusiveCallbackGroup()\n        self.create_timer(WORKER_10HZ, self.__timer_handler, callback_group=g)\n        self.get_logger().info(\"Hello ROS2\")\n\n    def __timer_handler(self):\n        self.get_logger().info(f\"work: {threading.current_thread().name}\")\n        time.sleep(PAYLOAD_TIME)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    try:\n        exec = MultiThreadedExecutor(WORKER_THREAD)\n        exec.add_node(node)\n        exec.spin()\n    except KeyboardInterrupt:\n        print(\"User exit\")\n    finally:\n        node.destroy_node()\n        rclpy.try_shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <pre><code>[INFO] [1680619992.063696171] [executer_demo]: work: ThreadPoolExecutor-0_0\n[INFO] [1680619992.565431058] [executer_demo]: work: ThreadPoolExecutor-0_1\n[INFO] [1680619993.068422713] [executer_demo]: work: ThreadPoolExecutor-0_0\n[INFO] [1680619993.571697147] [executer_demo]: work: ThreadPoolExecutor-0_1\n[INFO] [1680619994.073350571] [executer_demo]: work: ThreadPoolExecutor-0_0\n[INFO] [1680619994.576600477] [executer_demo]: work: ThreadPoolExecutor-0_1\n</code></pre>","tags":["ros2","python","executor","MultiThreadedExecutor","SingleThreadedExecutor"]},{"location":"blog/ROS2/python/executor/#the-timer-success-to-run-the-payload-only-in-serial-one-ofter-anther","title":"The timer success to run the payload only in serial one ofter anther","text":"","tags":["ros2","python","executor","MultiThreadedExecutor","SingleThreadedExecutor"]},{"location":"blog/ROS2/python/executor/#reference","title":"Reference","text":"<ul> <li>Deadlocks in rclpy and how to prevent them with use of callback groups</li> <li>Executors\uf0c1</li> </ul>","tags":["ros2","python","executor","MultiThreadedExecutor","SingleThreadedExecutor"]},{"location":"blog/ROS2/python/parameters/","title":"ROS2 Parameters","text":"<ul> <li>Parameters basic examples</li> <li>Parameter management using topic and services</li> <li>Parameter validation using Descriptors and add_on_set_parameters_callback</li> <li>Update node parameter from code using service</li> <li>dynamic_reconfigure</li> </ul>","tags":["param","ros2","rclpy"]},{"location":"blog/ROS2/python/parameters/#my-examples","title":"my examples","text":"<p>ros2 python tutorial params</p>","tags":["param","ros2","rclpy"]},{"location":"blog/ROS2/python/parameters/#cli","title":"cli","text":"<p>Using the ros2 param command-line tool</p>","tags":["param","ros2","rclpy"]},{"location":"blog/ROS2/python/parameters/basic_example/","title":"Basic example","text":"","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/basic_example/#ros2-params-basic-example","title":"ROS2 Params basic example","text":"<p>Simple node with params, run the node from cli and launch file, control the parameters from cli or yaml file  </p>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/basic_example/#node","title":"node","text":"<pre><code>import rclpy\nfrom rclpy.node import Node\n\nclass BasicParams(Node):\n    def __init__(self):\n        super().__init__('basic_param')\n        self.get_logger().info(\"start basic param\")\n        self.declare_parameter('my_str', value=\"string data\")\n        self.declare_parameter('my_int', value=10)\n\n        self.my_str = self.get_parameter(\"my_str\").value\n        self.my_int = self.get_parameter(\"my_int\").value\n\n        self.get_logger().info(f\"my_str: {self.my_str}\")\n        self.get_logger().info(f\"my_int: {self.my_int}\")\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = BasicParams()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/basic_example/#usage","title":"usage","text":"","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/basic_example/#cli","title":"cli","text":"","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/basic_example/#use-default","title":"use default","text":"simple run<pre><code>ros2 run pkg_python_tutorial param_basic [INFO] [1674810902.438001696] [basic_param]: start basic param\n[INFO] [1674810902.438464027] [basic_param]: my_str: string data\n[INFO] [1674810902.438649552] [basic_param]: my_int: 10\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/basic_example/#init-from-cli","title":"init from cli","text":"init from params from cli<pre><code>ros2 run pkg_python_tutorial param_basic --ros-args -p my_int:=20 -p my_str:=\"hello world\"\n[INFO] [1674811321.921565297] [basic_param]: start basic param\n[INFO] [1674811321.921986535] [basic_param]: my_str: hello world\n[INFO] [1674811321.922149889] [basic_param]: my_int: 20\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/basic_example/#load-from-yaml-file","title":"load from yaml file","text":"basic.yaml<pre><code>basic_param:\nros__parameters:\nmy_int: 100\nmy_str: hello yaml\n</code></pre> <p>Tip</p> <p>Add copy instruction to <code>data_files</code> section</p> <pre><code>data_files=[\n    (os.path.join('share', package_name, \"config\"), glob('config/*.yaml'))\n]\n</code></pre> init from yaml file<pre><code>ros2 run pkg_python_tutorial param_basic --ros-args  --params-file  config/basic.yaml\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/basic_example/#launch","title":"launch","text":"","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/basic_example/#set-param-in-launch-file","title":"set param in launch file","text":"node_with_param.launch.py<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\ndef generate_launch_description():\nld = LaunchDescription()\nsim_node =  Node(\npackage='pkg_python_tutorial',\nnamespace='',\nexecutable='param_basic',\nname='basic',\nparameters=[\n{\n\"my_str\": \"data from launch\",\n\"my_int\": 100\n}\n]\n)\nld.add_action(sim_node)\nreturn ld\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/basic_example/#load-param-from-yaml-in-launch-file","title":"load param from yaml in launch file","text":"node_with_param_file.launch.py<pre><code>import os\nfrom launch import LaunchDescription\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch_ros.actions import Node\ndef generate_launch_description():\nld = LaunchDescription()\nconfig = os.path.join(\nget_package_share_directory('pkg_python_tutorial'),\n'config',\n'params.yaml'\n)\nsim_node =  Node(\npackage='pkg_python_tutorial',\nnamespace='',\nexecutable='param_basic',\nname='basic',\nparameters=[config]\n)\nld.add_action(sim_node)\nreturn ld\n</code></pre> params.yaml<pre><code>basic:\nros__parameters:\nmy_str: \"launch and load from yaml\"\nmy_int: 100\n</code></pre> <p>node /yaml name</p> <p>The node name in yaml file need to be the same name we set in the launch file <code>Node.name</code> property</p>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/basic_example/#rqt","title":"rqt","text":"<p><pre><code>ros2 run rqt_reconfigure rqt_reconfigure\n# or\n# run rqt_gui and load th dynamic_reconfiguration plugin\n</code></pre> </p>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/dynamic_reconfigure/","title":"Reference","text":"<ul> <li>dynamic-reconfigure ros2</li> <li>rcl_interfaces</li> </ul>","tags":["ros2","param","dynamic-reconfigure"]},{"location":"blog/ROS2/python/parameters/parameter_client/","title":"ROS2 update node parameter from client","text":"<p>Update parameter from other node, using <code>set_parameters</code> service</p>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameter_client/#demo","title":"demo","text":"<ul> <li>set <code>my_int</code> param from <code>param basic</code> node</li> </ul> terminal1: run node<pre><code>ros2 run pkg_python_tutorial param_control\n</code></pre> terminal2: list node params<pre><code>ros2 param list\n/basic_param:\n  my_int\n  use_sim_time\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameter_client/#know-your-environment","title":"Know your environment","text":"terminal2: list node services<pre><code>ros2 service list\n/basic_param/describe_parameters\n/basic_param/get_parameter_types\n/basic_param/get_parameters\n/basic_param/list_parameters\n/basic_param/set_parameters\n/basic_param/set_parameters_atomically\n</code></pre> terminal2: get service interface<pre><code># get service interface\nros2 service type /basic_param/set_parameters\n#\nrcl_interfaces/srv/SetParameters\n</code></pre> terminal2: show interface details<pre><code>Parameter[] parameters\nstring name\nParameterValue value\nuint8 type\nbool bool_value\nint64 integer_value\nfloat64 double_value\nstring string_value\nbyte[] byte_array_value\nbool[] bool_array_value\nint64[] integer_array_value\nfloat64[] double_array_value\nstring[] string_array_value\n---\n# Indicates whether setting each parameter succeeded or not and why.\nSetParametersResult[] results\nbool successful\nstring reason\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameter_client/#code","title":"code","text":"param_update_cllient.py<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom rcl_interfaces.srv import SetParameters\nfrom rcl_interfaces.msg import Parameter, ParameterValue, ParameterType\nfrom rcl_interfaces.srv._set_parameters import SetParameters_Response\nfrom rcl_interfaces.msg import SetParametersResult\nfrom rclpy.parameter_service import SetParameters\nTOPIC = \"/basic_param/set_parameters\"\nclass MinimalClientAsync(Node):\ndef __init__(self):\nsuper().__init__('update')\nself.cli = self.create_client(SetParameters, TOPIC)\nwhile not self.cli.wait_for_service(timeout_sec=1.0):\nself.get_logger().info('service not available, waiting again...')\nself.send_request()\ndef service_call_handler(self, future):\nresponse: SetParameters_Response\nresult: SetParametersResult\nresponse = future.result()\nresult = response.results[0]\nself.get_logger().info(f\"{result.successful}\")\nself.get_logger().info(result.reason)\ndef send_request(self):\nself.req = SetParameters.Request()\nparam_value = ParameterValue(integer_value=150)\nparam_value.type = ParameterType.PARAMETER_INTEGER\nparam = Parameter(name=\"my_int\", value=param_value)\nparams = [param]\nself.req.parameters = params\nself.future = self.cli.call_async(self.req)\nself.future.add_done_callback(self.service_call_handler)\ndef main(args=None):\nrclpy.init(args=args)\nminimal_client = MinimalClientAsync()\nrclpy.spin(minimal_client)\nminimal_client.destroy_node()\nrclpy.shutdown()\nif __name__ == \"__main__\":\nmain()\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameter_client/#usage","title":"usage","text":"<p>IntRange</p> <p><code>my_int</code> param has limit between 10-110</p> terminal2<pre><code># send value 150\nros2 run pkg_python_tutorial param_update\n#\n[INFO] [1674974296.640533953] [update]: False\n[INFO] [1674974296.640736818] [update]: Parameter my_int out of range. Min: 10, Max: 110, value: 150\n\n# send value 100\nros2 run pkg_python_tutorial param_update\n[INFO] [1674974352.207990957] [update]: True\n[INFO] [1674974352.208230578] [update]\n</code></pre> <p>reason</p> <p><code>set_parameters</code> service response return  <code>SetParametersResult</code> object for each updated parameter, the Object has two fields - bool successful - string reason When update failed <code>reason</code> field contain the error msg</p>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/","title":"ROS2 Params node control","text":"","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#parameterdescriptor","title":"ParameterDescriptor","text":"","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#code","title":"Code","text":"<ul> <li>Add parameter descriptor<ul> <li>Add range validator</li> </ul> </li> <li>Add <code>add_on_set_parameter_callback</code></li> </ul> param_control.py<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom rcl_interfaces.msg import SetParametersResult\nfrom rcl_interfaces.msg import ParameterDescriptor, IntegerRange, ParameterType\nfrom rclpy.parameter import Parameter\nfrom typing import List\nclass BasicParams(Node):\ndef __init__(self):\nsuper().__init__('basic_param')\nself.get_logger().info(\"param control\")\nmy_int_descriptor = ParameterDescriptor(\ndescription=\"my int param\",\ntype=ParameterType.PARAMETER_INTEGER\n)\nrange = IntegerRange(from_value=10, to_value=110)\nmy_int_descriptor.integer_range.append(range)\nself.declare_parameter('my_int', value=100, descriptor=my_int_descriptor)\nself.my_int = self.get_parameter(\"my_int\").value\nself.add_on_set_parameters_callback(self.__parameters_handler)\ndef __parameters_handler(self, params: List[Parameter]):\nsuccess = True\nfor param in params:\nself.get_logger().info(param.name)\nself.get_logger().info(str(param.value))\nreturn SetParametersResult(successful=success)\ndef main(args=None):\nrclpy.init(args=args)\nnode = BasicParams()\nrclpy.spin(node)\nnode.destroy_node()\nrclpy.shutdown()\nif __name__ == \"__main__\":\nmain()\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#usage","title":"usage","text":"<pre><code>ros2 param set /basic_param my_int 100\n#\nSet parameter successful\n\nros2 param set /basic_param my_int 120\n#\nSetting parameter failed: Parameter my_int out of range. Min: 10, Max: 110, value: 120\n\nros2 param set /basic_param my_int 1\n#\nSetting parameter failed: Parameter my_int out of range. Min: 10, Max: 110, value: 1\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#rqt_reconfigure","title":"rqt_reconfigure","text":"<pre><code>ros2 run rqt_reconfigure rqt_reconfigure\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#add_on_set_parameters_callback","title":"add_on_set_parameters_callback","text":"<p>The function that is called whenever parameters are set for the node</p>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#demo","title":"Demo","text":"<p>Using <code>add_on_set_parameters_callback</code> to run validation</p> <pre><code>import rclpy\nfrom rclpy.node import Node\nfrom rcl_interfaces.msg import SetParametersResult\nfrom rcl_interfaces.msg import ParameterDescriptor, IntegerRange, ParameterType\nfrom rclpy.parameter import Parameter\nfrom typing import List\nclass BasicParams(Node):\ndef __init__(self):\nsuper().__init__('basic_param')\nself.get_logger().info(\"param control\")\nmy_int_descriptor = ParameterDescriptor(\ndescription=\"my int param\",\ntype=ParameterType.PARAMETER_INTEGER\n)\nself.declare_parameter('my_int', value=100, descriptor=my_int_descriptor)\nself.my_int = self.get_parameter(\"my_int\").value\nself.add_on_set_parameters_callback(self.__parameters_handler)\ndef __parameters_handler(self, params: List[Parameter]):\nsuccess = True\nfor param in params:\nif param.name == \"my_int\":\nif param.value &gt; 50:\nsuccess = False\nreturn SetParametersResult(successful=success)\ndef main(args=None):\nrclpy.init(args=args)\nnode = BasicParams()\nrclpy.spin(node)\nnode.destroy_node()\nrclpy.shutdown()\nif __name__ == \"__main__\":\nmain()\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#usage_1","title":"usage","text":"<pre><code># Set successful\nros2 param set /basic_param my_int 1\nSet parameter successful\n\n# Set Failed\nros2 param set /basic_param my_int 100\nSetting parameter failed\n\n# Read again\nros2 param get /basic_param my_int\nInteger value is: 1\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameter_update_node_event/#rqt_reconfigure_1","title":"rqt_reconfigure","text":"<pre><code>ros2 run rqt_reconfigure rqt_reconfigure\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameters_control/","title":"ROS2 Params more control","text":"<p>Base on  previous let do more investigation on ROS2 params </p>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameters_control/#demo-global-parameter-event","title":"Demo (global parameter event)","text":"<ul> <li>Subscribe to <code>parameter_events</code> topic</li> </ul> terminal1<pre><code>ros2 run pkg_python_tutorial param_basic\n</code></pre> terminal2<pre><code>ros2 topic list\n#\n/parameter_events\n/rosout\n\n# echo/subscribe topic\nros2 topic echo /parameter_events\n</code></pre> terminal3<pre><code># change my_int param value\nros2 param set /basic my_int 20\n</code></pre> terminal2<pre><code>stamp:\n  sec: 1674824296\nnanosec: 912765941\nnode: /basic\nnew_parameters: []\nchanged_parameters:\n- name: my_int\n  value:\n    type: 2\nbool_value: false\ninteger_value: 20\ndouble_value: 0.0\n    string_value: ''\nbyte_array_value: []\nbool_array_value: []\ninteger_array_value: []\ndouble_array_value: []\nstring_array_value: []\ndeleted_parameters: []\n---\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameters_control/#demo2-control-parameter-from-service","title":"Demo2 (control parameter from service)","text":"<p>Ros2 Node implement build in service to control Node parameters</p> terminal1<pre><code>ros2 service list\n#\n/basic/describe_parameters\n/basic/get_parameter_types\n/basic/get_parameters\n/basic/list_parameters\n/basic/set_parameters\n/basic/set_parameters_atomically\n</code></pre> terminal2<pre><code>ros2 service call /basic/list_parameters \nrcl_interfaces/srv/ListParameters\n#\nrequester: making request: rcl_interfaces.srv.ListParameters_Request(prefixes=[], depth=0)\n\nresponse:\nrcl_interfaces.srv.ListParameters_Response(result=rcl_interfaces.msg.ListParametersResult(names=['use_sim_time', 'my_str', 'my_int'], prefixes=[]))\n\n#\n\nros2 service call /basic/list_parameters rcl_interfaces/srv/ListParameters \"{ prefixes: [\"my\"] }\"\n#\nrequester: making request: rcl_interfaces.srv.ListParameters_Request(prefixes=['my'], depth=0)\n\nresponse:\nrcl_interfaces.srv.ListParameters_Response(result=rcl_interfaces.msg.ListParametersResult(names=['my_str', 'my_int'], prefixes=[]))\n</code></pre> <p>call service tips</p> <ul> <li>The request data must be inside  <code>\"</code></li> <li>Key, Value must have space between them <code>prefixes: [\"my\"]</code></li> </ul>","tags":["ros2","param"]},{"location":"blog/ROS2/python/parameters/parameters_control/#get_parameters","title":"get_parameters","text":"<pre><code>ros2 service call /basic/get_parameters rcl_interfaces/srv/GetParameters \"{ names: [my_int] }\"\n#\nrequester: making request: rcl_interfaces.srv.GetParameters_Request(names=['my_int'])\n\nresponse:\nrcl_interfaces.srv.GetParameters_Response(values=[rcl_interfaces.msg.ParameterValue(type=2, bool_value=False, integer_value=20, double_value=0.0, string_value='', byte_array_value=[], bool_array_value=[], integer_array_value=[], double_array_value=[], string_array_value=[])])\n</code></pre>","tags":["ros2","param"]},{"location":"blog/ROS2/python/services/","title":"Simple Server","text":"simple_service.py<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom std_srvs.srv import SetBool\nclass MinimalService(Node):\ndef __init__(self):\nsuper().__init__('minimal_service')\nself.srv = self.create_service(SetBool, 'echo_service', self.echo_callback)\ndef echo_callback(self, request: SetBool.Request, response: SetBool.Response):\nresponse.success = request.data\nresponse.message = \"success\"\nreturn response\ndef main(args=None):\nrclpy.init(args=args)\nminimal_service = MinimalService()\nrclpy.spin(minimal_service)\nrclpy.shutdown()\nif __name__ == '__main__':\nmain()\n</code></pre> <pre><code>ros2 service call /echo_service std_srvs/srv/SetBool \"{data: True}\"\nrequester: making request: std_srvs.srv.SetBool_Request(data=True)\n\nresponse:\nstd_srvs.srv.SetBool_Response(success=True, message='success')\n</code></pre>","tags":["ros2","service"]},{"location":"blog/ROS2/python/services/sync_client/","title":"Reference","text":"<ul> <li>Synchronous vs. asynchronous service clients</li> <li>service from service</li> </ul>","tags":["ros2","service","client"]},{"location":"blog/ROS2/python/setup/copy_folder_with_subfolders_to_package_insall/","title":"ROS2 Python package, copy folder and sub folders to package install","text":"setup.py<pre><code>import os\nfrom glob import glob\nfrom setuptools import setup\npackage_name = 'myrobot_gazebo'\ndata_files=[\n('share/ament_index/resource_index/packages',['resource/' + package_name]),\n('share/' + package_name, ['package.xml']),\n]\ndef package_files(data_files, directory_list):\npaths_dict = {}\nfor directory in directory_list:\nfor (path, directories, filenames) in os.walk(directory):\nfor filename in filenames:\nfile_path = os.path.join(path, filename)\ninstall_path = os.path.join('share', package_name, path)\nif install_path in paths_dict.keys():\npaths_dict[install_path].append(file_path)\nelse:\npaths_dict[install_path] = [file_path]\nfor key in paths_dict.keys():\ndata_files.append((key, paths_dict[key]))\nreturn data_files\nsetup(\nname=package_name,\nversion='0.0.0',\npackages=[package_name],\ndata_files=package_files(data_files, ['models/', 'launch/', 'worlds/']),\ninstall_requires=['setuptools'],\nzip_safe=True,\nmaintainer='ros',\nmaintainer_email='ros@todo.todo',\ndescription='TODO: Package description',\nlicense='TODO: License declaration',\ntests_require=['pytest'],\nentry_points={\n'console_scripts': [\n],\n},\n)\n</code></pre>","tags":["ros2","setup.py","python"]},{"location":"blog/ROS2/python/setup/copy_folder_with_subfolders_to_package_insall/#reference","title":"Reference","text":"<ul> <li>How to copy folders with subfolders to package installation path?</li> </ul>","tags":["ros2","setup.py","python"]},{"location":"blog/ROS2/python/tutorials/","title":"ROS2 Python tutorials","text":"<ul> <li>minimal pub and sub node and cli demos</li> <li>Simple launch file to launch the pub sub node</li> <li>Add namespace with launch file</li> <li>Node params hello</li> <li>Node params handle</li> </ul>","tags":["ros2"]},{"location":"blog/ROS2/python/tutorials/launch_hello/","title":"Part2 - Launch file","text":"","tags":["ros2","launch",101]},{"location":"blog/ROS2/python/tutorials/launch_hello/#launch-source-code","title":"launch source code","text":"hello.launch.py<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    talker_node = Node(\n        package=\"basic\",\n        executable=\"simple_pub\",\n    )\n\n    listener_node = Node(\n        package=\"basic\",\n        executable=\"simple_sub\"\n    )\n\n    ld.add_action(talker_node)\n    ld.add_action(listener_node)\n\n    return ld\n</code></pre> <p>Note</p> <p>Your launch file must contain this function: generate_launch_description(), and must return a LaunchDescription object.</p>","tags":["ros2","launch",101]},{"location":"blog/ROS2/python/tutorials/launch_hello/#setuppy","title":"setup.py","text":"<ul> <li>Add entry to <code>data_files</code> copy the launch folder to package install folder</li> </ul> setup.py<pre><code>    data_files=[\n('share/ament_index/resource_index/packages', ['resource/' + package_name]),\n('share/' + package_name, ['package.xml']),\n(os.path.join(\"share\", package_name), glob(\"launch/*.launch.py\"))\n],\n</code></pre> <p>Note</p> <p>copy launch files using CMakeLists.txt <pre><code>...\n\ninstall(DIRECTORY\nlaunch\nDESTINATION share/${PROJECT_NAME}\n)\n</code></pre></p>","tags":["ros2","launch",101]},{"location":"blog/ROS2/python/tutorials/launch_hello/#usage","title":"usage","text":"terminal1<pre><code>ros2 launch basic hello.launch.py # Result\n[INFO] [launch]: All log files can be found below /home/user/.ros/log/2022-04-06-08-52-59-435522-lap2-73549\n[INFO] [launch]: Default logging verbosity is set to INFO\n[INFO] [simple_pub-1]: process started with pid [73551]\n[INFO] [simple_sub-2]: process started with pid [73553]\n[simple_pub-1] [INFO] [1649224380.693329543] [minimal_publisher]: Publishing: \"pub simple: 0\"\n[simple_sub-2] [INFO] [1649224380.693398516] [minimal_subscriber]: I heard: pub simple: 0\n[simple_pub-1] [INFO] [1649224381.683970139] [minimal_publisher]: Publishing: \"pub simple: 1\"\n[simple_sub-2] [INFO] [1649224381.684546630] [minimal_subscriber]: I heard: pub simple: 1\n</code></pre>","tags":["ros2","launch",101]},{"location":"blog/ROS2/python/tutorials/launch_hello/#references","title":"References","text":"<ul> <li>ROS2 Launch File Example \u2013 How to Start All Your Nodes at Once</li> </ul>","tags":["ros2","launch",101]},{"location":"blog/ROS2/python/tutorials/package_xml_hello/","title":"Package.xml hello","text":"package.xml<pre><code>&lt;exec_depend&gt;rclpy&lt;/exec_depend&gt;\n&lt;exec_depend&gt;std_msgs&lt;/exec_depend&gt;\n&lt;depend&gt;example_interfaces&lt;/depend&gt;\n&lt;test_depend&gt;ament_copyright&lt;/test_depend&gt;\n...\n</code></pre>","tags":["ros2","package.xml",101]},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#rosdep","title":"rosdep","text":"install<pre><code>sudo apt install python3-rosdep\n</code></pre> init<pre><code>sudo rosdep init\nrosdep update\n</code></pre>","tags":["ros2","package.xml",101]},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#command","title":"command","text":"","tags":["ros2","package.xml",101]},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#resolve","title":"resolve","text":"<pre><code>rosdep resolve example_interfaces\n#apt\nros-foxy-example-interfaces\n</code></pre>","tags":["ros2","package.xml",101]},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#install","title":"install","text":"install package dependencies<pre><code># from w.s root run\nrosdep install --from-paths src/basic --ignore-src -r -y\n# Command result\nexecuting command [sudo -H apt-get install -y ros-foxy-example-interfaces]\n</code></pre>","tags":["ros2","package.xml",101]},{"location":"blog/ROS2/python/tutorials/package_xml_hello/#resources","title":"Resources","text":"<ul> <li>rep-149 Package Manifest Format Three Specification</li> </ul>","tags":["ros2","package.xml",101]},{"location":"blog/ROS2/python/tutorials/part10_managed_nodes/","title":"ROS2 Managed Nodes","text":"<ul> <li>unconfigured</li> <li>inactive</li> <li>active</li> <li>finalized</li> </ul> <p>Warning</p> <p>In foxy work only in CPP , from rolling work with python</p>","tags":["ros2","node"]},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/","title":"Part2a - Launch file part II","text":"","tags":["ros2","launch"]},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#launch-source-code","title":"launch source code","text":"hello.launch.py<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\ndef generate_launch_description():\nld = LaunchDescription()\ntalker_node = Node(\npackage=\"basic\",\nnamespace=\"my_ns\",\nname=\"my_pub\",\nexecutable=\"simple_pub\",\n)\nlistener_node = Node(\npackage=\"basic\",\nnamespace=\"my_ns\",\nname=\"my_sub\",\nexecutable=\"simple_sub\"\n)\nld.add_action(talker_node)\nld.add_action(listener_node)\nreturn ld\n</code></pre>","tags":["ros2","launch"]},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#usage","title":"Usage","text":"<ul> <li>launch</li> <li>node list</li> <li>topic list</li> <li>rqt_graph</li> </ul>","tags":["ros2","launch"]},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#launch","title":"launch","text":"<ul> <li>log output note ns.node_name</li> </ul> <pre><code>ros2 launch basic hello.launch.py \n...\n[simple_pub-1] [INFO] [1651090792.927189288] [my_ns.my_pub]: Publishing: \"pub simple: 1\"\n[simple_sub-2] [INFO] [1651090792.927732100] [my_ns.my_sub]: I heard: pub simple: 1\n</code></pre>","tags":["ros2","launch"]},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#node-list","title":"node list","text":"<pre><code>ros2 node list\n# Result\n/my_ns/my_pub\n/my_ns/my_sub\n</code></pre>","tags":["ros2","launch"]},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#topic-list","title":"topic list","text":"<pre><code>ros2 topic list\n/my_ns/minimal\n/parameter_events\n/rosout\n</code></pre>","tags":["ros2","launch"]},{"location":"blog/ROS2/python/tutorials/part2a-launch_name_ns/#rqt_graph","title":"rqt_graph","text":"","tags":["ros2","launch"]},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/","title":"Objective","text":"<ul> <li>Declare parameter</li> <li>Manage params from cli</li> <li>Set node params with launch file</li> </ul>","tags":["ros2","param","parameter"]},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#code-example","title":"Code example","text":"<pre><code>import rclpy\nfrom rclpy.node import Node\n\nclass TestParams(Node):\n\n    def __init__(self):\n        super().__init__('test_params_rclpy')\n\n        self.declare_parameter('my_str')\n        self.declare_parameter('my_int', value=10)\n        self.declare_parameter('my_double_array')\n\n        timer_period = 2\n        self.timer = self.create_timer(timer_period, self.timer_callback)\n\n    def timer_callback(self):\n        my_param = self.get_parameter('my_str').get_parameter_value().string_value\n        my_param_int = self.get_parameter(\"my_int\").get_parameter_value().integer_value\n        self.get_logger().info(f\"Hello {my_param}! with int data: {my_param_int}\")\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = TestParams()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["ros2","param","parameter"]},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#manage-params-from-cli","title":"Manage params from cli","text":"","tags":["ros2","param","parameter"]},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#run-node-with-param","title":"Run node with param","text":"<p>Note</p> <p>Run node with arguments from CLI <code>--ros-args -p &lt;param_name&gt;:=&lt;param_value&gt;</code></p> <pre><code>ros2 run basic simple_param --ros-args -p my_str:=world\n# Result\n[INFO] [1649226981.611616597] [test_params_rclpy]: Hello world! with int data: 10\n[INFO] [1649226983.604038327] [test_params_rclpy]: Hello world! with int data: 10\n</code></pre>","tags":["ros2","param","parameter"]},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#manage-params-from-cli_1","title":"Manage params from cli","text":"<pre><code># list params from all running nodes\nros2 param list\n# Result \n/simple_params:\n  my_double_array\n  my_int\n  my_str\n  use_sim_time\n</code></pre>","tags":["ros2","param","parameter"]},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#yaml-file","title":"YAML file","text":"simple.yaml<pre><code>simple_params:\nros__parameters:\nmy_str: \"world from yaml\"\nmy_int: 100\nmy_double_array: [1.0, 2.0, 3.0]\n</code></pre> <p>Warning</p> <p><code>ros__parameters</code> with double underline</p>","tags":["ros2","param","parameter"]},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#run-with-yaml","title":"Run with yaml","text":"terminal1<pre><code>ros2 run basic simple_param --ros-args --params-file /home/user/dev_ws/src/basic/config/simple.yaml\n[INFO] [1649227913.033306747] [simple_params]: Hello world from yaml! with int data: 100\n[INFO] [1649227915.025466940] [simple_params]: Hello world from yaml! with int data: 100\n</code></pre>","tags":["ros2","param","parameter"]},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#params-yaml-and-launch-file","title":"Params yaml and launch file","text":"<ul> <li>place <code>yaml</code> file in <code>config</code> syb folder</li> <li>copy <code>config</code> folder to output folder using <code>setup.py</code></li> </ul> <p>yaml copy<pre><code>data_files=[\n('share/ament_index/resource_index/packages', ['resource/' + package_name]),\n('share/' + package_name, ['package.xml']),\n(os.path.join(\"share\", package_name), glob(\"launch/*.launch.py\")),\n(os.path.join(\"share\", package_name, \"config\"), glob(\"config/*\")),\n],\n</code></pre> simple_param_yaml.launch.py<pre><code># with yaml file\nimport os\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\ndef generate_launch_description():\nld = LaunchDescription()\nconfig = os.path.join(\nget_package_share_directory('basic'),\n'config',\n'simple.yaml'\n)\nnode=Node(\nname=\"simple_params\",\npackage = 'basic',\nexecutable = 'simple_param',\nparameters = [config]\n)\nld.add_action(node)\nreturn ld\n</code></pre></p> <p>Warning</p> <p>The name argument in the <code>launch</code> Node object must be the same in the param yaml file</p> simple_param.launch.py<pre><code>import os\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\ndef generate_launch_description():\nld = LaunchDescription()\nnode=Node(\nname=\"simple_params\",\npackage = 'basic',\nexecutable = 'simple_param',\nparameters = [\n{\"my_str\": \"hello from launch\"},\n{\"my_int\": 1000},\n{\"my_double_array\": [1.0, 10.0]}\n]\n)\nld.add_action(node)\nreturn ld\n</code></pre>","tags":["ros2","param","parameter"]},{"location":"blog/ROS2/python/tutorials/part3-py_node_with_param/#references","title":"References","text":"<ul> <li>rclpy Params Tutorial \u2013 Get and Set ROS2 Params with Python</li> <li>ROS2 YAML For Parameters</li> </ul>","tags":["ros2","param","parameter"]},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/","title":"Part4 - Launch with arguments","text":"<ul> <li>LaunchConfiguration is local to the launch file and scoped.</li> <li>DeclareLaunchArgument allows you to expose the argument outside of your launch file. Allowing them to be listed, set, or marked as required when a user launches it from the command line (using ros2 launch) or when including it from another launch file (using IncludeLaunchDescription).</li> </ul> basic_demo_args.launch.py<pre><code>import launch\n\ndef generate_launch_description():\n    return launch.LaunchDescription([\n        launch.actions.DeclareLaunchArgument('msg', default_value='hello world'),\n        launch.actions.DeclareLaunchArgument('other'),\n        launch.actions.LogInfo(msg=launch.substitutions.LaunchConfiguration('msg')),\n        launch.actions.LogInfo(msg=launch.substitutions.LaunchConfiguration('other')),\n    ])\n</code></pre> <pre><code>ros2 launch basic demo_args.launch.py other:=\"other message\"\n# Result\n[INFO] [launch]: All log files can be found below /home/user/.ros/log/2022-04-06-11-27-22-383934-lap2-90291\n[INFO] [launch]: Default logging verbosity is set to INFO\n[INFO] [launch.user]: hello world\n[INFO] [launch.user]: other message\n</code></pre> <p>Warning</p> <p><code>other</code> argument is mandatory because has no <code>default value</code></p>","tags":["ros2","param","parameter","launch",101]},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/#run-launch","title":"Run launch","text":"<pre><code>ros2 launch -s basic demo_args.launch.py\n# Result\nArguments (pass arguments as '&lt;name&gt;:=&lt;value&gt;'):\n\n    'msg':\n        no description given\n        (default: 'hello world')\n\n'other':\n        no description given\n</code></pre>","tags":["ros2","param","parameter","launch",101]},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/#demo","title":"Demo","text":"<p>launch with arguments</p> simple_param_args.launch.py<pre><code>from launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument, LogInfo\nfrom launch.substitutions import LaunchConfiguration\nfrom launch_ros.actions import Node\ndef generate_launch_description():\nld = LaunchDescription()\nmy_str_arg = DeclareLaunchArgument(\"my_str\", default_value=\"world\")\nmy_str = LaunchConfiguration(\"my_str\")    \nnode=Node(\nname=\"simple_params\",\npackage = 'basic',\nexecutable = 'simple_param',\nparameters = [\n{\"my_str\": my_str},\n{\"my_int\": 1000},\n{\"my_double_array\": [1.0, 10.0]}\n]\n)\nld.add_action(my_str_arg)\nld.add_action(node)\nreturn ld\n</code></pre>","tags":["ros2","param","parameter","launch",101]},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/#run-and-output","title":"Run and output","text":"<p>Show launch file output <pre><code>ros2 launch basic simple_param_args.launch.py my_str:=worlddddddddddddd\n# result\n[INFO] [launch]: All log files can be found below /home/user/.ros/log/2022-04-06-14-10-00-346206-lap2-93999\n[INFO] [launch]: Default logging verbosity is set to INFO\n[INFO] [simple_param-1]: process started with pid [94001]\n[simple_param-1] [INFO] [1649243402.580006387] [simple_params]: Hello worlddddddddddddd! with int data: 1000\n[simple_param-1] [INFO] [1649243402.580249948] [simple_params]: array('d', [1.0, 10.0])\n</code></pre></p>","tags":["ros2","param","parameter","launch",101]},{"location":"blog/ROS2/python/tutorials/part4-launch_with_arguments/#references","title":"References","text":"<ul> <li>what is different between DeclareLaunchArgument and LaunchConfiguration</li> </ul>","tags":["ros2","param","parameter","launch",101]},{"location":"blog/ROS2/python/tutorials/part5_simple_service/","title":"Service","text":"simple_service<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom std_srvs.srv import SetBool\nfrom std_srvs.srv._set_bool import SetBool_Request, SetBool_Response\nclass MinimalService(Node):\ndef __init__(self):\nsuper().__init__('minimal_service')\nself.srv = self.create_service(SetBool, 'echo_service', self.echo_callback)\ndef echo_callback(self, request: SetBool_Request, response: SetBool_Response) -&gt; SetBool_Response:\nself.get_logger().info(\"Service callback\")\nresponse.success = request.data\nresponse.message = \"success\"\nreturn response\ndef main(args=None):\nrclpy.init(args=args)\nminimal_service = MinimalService()\nrclpy.spin(minimal_service)\nminimal_service.destroy_node()\nrclpy.shutdown()\nif __name__ == '__main__':\nmain()\n</code></pre>","tags":["ros2","service",101]},{"location":"blog/ROS2/python/tutorials/part5_simple_service/#usage","title":"Usage","text":"list<pre><code>ros2 service list\n# Result\n/echo_service\n/minimal_service/describe_parameters\n/minimal_service/get_parameter_types\n/minimal_service/get_parameters\n/minimal_service/list_parameters\n/minimal_service/set_parameters\n/minimal_service/set_parameters_atomically\n</code></pre> <pre><code>ros2 service type /echo_service\n# Result\nstd_srvs/srv/SetBool\n</code></pre> show interface<pre><code>ros2 interface show std_srvs/srv/SetBool # Result\nbool data # e.g. for hardware enabling / disabling\n---\nbool success   # indicate successful run of triggered service\nstring message # informational, e.g. for error messages\n</code></pre>","tags":["ros2","service",101]},{"location":"blog/ROS2/python/tutorials/part5_simple_service/#call","title":"call","text":"service call<pre><code>ros2 service call /echo_service std_srvs/srv/SetBool \"{data: True}\"\n\n# Result\nrequester: making request: std_srvs.srv.SetBool_Request(data=True)\n\nresponse:\nstd_srvs.srv.SetBool_Response(success=True, message='success')\n</code></pre> <p>Warning</p> <p>Space are mandatory between <code>data</code> and the <code>value</code> Example:  <code>{data: True}</code> from service call</p>","tags":["ros2","service",101]},{"location":"blog/ROS2/python/tutorials/part5_simple_service/#reference","title":"Reference","text":"<ul> <li>ros2 service Command Line Tool </li> </ul>","tags":["ros2","service",101]},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/","title":"Objective","text":"<ul> <li>Update node param</li> <li>from cli</li> <li>from code</li> </ul>","tags":["ros2","parameters"]},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#code","title":"Code","text":"<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom rcl_interfaces.msg import SetParametersResult\n\nclass TestParams(Node):\n\n    def __init__(self):\n        super().__init__('simple_params')\n\n        self.declare_parameter('my_str')\n        self.declare_parameter('my_int', value=10)\n        self.declare_parameter('my_double_array')\n        self.add_on_set_parameters_callback(self.parameter_callback)\n        timer_period = 2\n        self.timer = self.create_timer(timer_period, self.timer_callback)\n\n    def parameter_callback(self, params):\n        print(type(params))\n        for param in params:\n            self.get_logger().info(param.name)\n            self.get_logger().info(str(param.value))\n            self.get_logger().info(str(param.type_))\n        return SetParametersResult(successful=True)\n\n    def timer_callback(self):\n        my_param = self.get_parameter('my_str').get_parameter_value().string_value\n        my_param_int = self.get_parameter(\"my_int\").get_parameter_value().integer_value\n        my_param_array = self.get_parameter(\"my_double_array\").get_parameter_value().double_array_value\n        self.get_logger().info(f\"Hello {my_param}! with int data: {my_param_int}\")\n        self.get_logger().info(str(my_param_array))\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = TestParams()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["ros2","parameters"]},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#run","title":"Run","text":"","tags":["ros2","parameters"]},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#list","title":"List","text":"<pre><code>ros2 param list\n/simple_params:\n  my_double_array\n  my_int\n  my_str\n  use_sim_time\n</code></pre>","tags":["ros2","parameters"]},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#get--set","title":"get / set","text":"get<pre><code># my_str\nros2 param get /simple_params my_str\nParameter not set.\n\n# my_int\nros2 param get /simple_params my_int\nInteger value is: 10\n</code></pre> set<pre><code># my_int\nros2 param set /simple_params my_int 20\n# result\nSet parameter successful\n\n# output log from node callback param function (name, value, type)\n[INFO] [1649395615.004278881] [simple_params]: my_int\n[INFO] [1649395615.004490765] [simple_params]: 20\n[INFO] [1649395615.004679396] [simple_params]: Type.INTEGER\n\n# my_str\nros2 param set /simple_params my_str \"world world\"\n# result\nSet parameter successful\n\n# output log from node callback param function (name, value, type)\n[INFO] [1649395751.117007430] [simple_params]: my_str\n[INFO] [1649395751.117735309] [simple_params]: world world\n[INFO] [1649395751.118404909] [simple_params]: Type.STRING\n\n# my_double_array\nros2 param set /simple_params my_double_array \"[1.0, 2.0, 3.0]\"\n# result\nSet parameter successful\n\n# output log from node callback param function (name, value, type)\n[INFO] [1649396032.647319212] [simple_params]: my_double_array\n[INFO] [1649396032.648079309] [simple_params]: array('d', [1.0, 2.0, 3.0])\n[INFO] [1649396032.648748882] [simple_params]: Type.DOUBLE_ARRAY\n</code></pre>","tags":["ros2","parameters"]},{"location":"blog/ROS2/python/tutorials/part6_parameter_handler/#dump--load","title":"Dump / Load","text":"dump<pre><code>#ros2 param dump /simple_params --output-dir /tmp\n# ros2 param dump /simple_params --print\nros2 param dump /simple_params\n# Result\nSaving to:  ./simple_params.yaml\n</code></pre> load<pre><code>ros2 param load /simple_params simple_params.yaml\n# Result \nSet parameter my_double_array successful\nSet parameter my_int successful\nSet parameter my_str successful\nSet parameter use_sim_time successful\n</code></pre> <p>Note</p> <p><code>ros2 param load</code> run the same <code>param callback</code> function like <code>param set</code></p>","tags":["ros2","parameters"]},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/","title":"Part7 - Custom msgs and srvs","text":"<p>Note</p> <p>End/Suffix package name with <code>_interfaces</code> or <code>_msgs</code></p>","tags":["ros2","custom","msgs",101]},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#create-pkg","title":"Create pkg","text":"<ul> <li>Create cpp package</li> </ul> <pre><code># Default build type ament cmake\nros pkg create rosmav_msgs\n</code></pre>","tags":["ros2","custom","msgs",101]},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#packagexml","title":"package.xml","text":"<ul> <li>Add lines</li> </ul> <pre><code>&lt;build_depend&gt;rosidl_default_generators&lt;/build_depend&gt;\n&lt;exec_depend&gt;rosidl_default_runtime&lt;/exec_depend&gt;\n&lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt;\n</code></pre>","tags":["ros2","custom","msgs",101]},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#cmakeliststxt","title":"CMakeLists.txt","text":"CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.5)\nproject(my_robot_interfaces)\n# Default to C++14\nif(NOT CMAKE_CXX_STANDARD)\nset(CMAKE_CXX_STANDARD 14)\nendif()\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\nadd_compile_options(-Wall -Wextra -Wpedantic)\nendif()\nfind_package(ament_cmake REQUIRED)\nfind_package(rosidl_default_generators REQUIRED)\nrosidl_generate_interfaces(${PROJECT_NAME}\n\"your custom interfaces will be here\"\nmsgs/Attitude.msg\n)\nament_package()\n</code></pre>","tags":["ros2","custom","msgs",101]},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#vscode-tips","title":"VSCode tips","text":"<ul> <li>Add <code>msgs</code> path to <code>python.analysis.extraPaths</code></li> </ul> pylance<pre><code>\"python.analysis.extraPaths\": [\n\"/home/user/dev_ws/install/rosmav_msgs/lib/python3.8/site-packages\"\n]\n</code></pre>","tags":["ros2","custom","msgs",101]},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#interface-cli","title":"interface cli","text":"<p>Show information about ROS interfaces</p> <ul> <li>list: List all interface types available</li> <li>package: Output a list of available interface types within one package</li> <li>show: Output the interface definition</li> </ul> <pre><code>ros2 interface  package rosmav_msgs # Result\nrosmav_msgs/msg/Attitude\n\n# Show \n# --- separate between request response\nros2 interface show std_srvs/srv/Trigger \n---\nbool success   # indicate successful run of triggered service\nstring message # informational, e.g. for error messages\n</code></pre>","tags":["ros2","custom","msgs",101]},{"location":"blog/ROS2/python/tutorials/part7_custom_msgs/#references","title":"References","text":"<ul> <li>ROS2 Create Custom Message (Msg/Srv)</li> </ul>","tags":["ros2","custom","msgs",101]},{"location":"blog/ROS2/python/tutorials/part8_qos/","title":"Part8 - QoS","text":"<p>Topics in ROS2 have three dimensions:</p> <ul> <li>Name: string</li> <li>Type: msg type like std_msgs/String</li> <li>QoS: Define extra promises about the pub/sub behavior</li> </ul>","tags":["ros2","qos",101]},{"location":"blog/ROS2/python/tutorials/part8_qos/#qos","title":"QoS","text":"<ul> <li>QoS Policy: QoS \u201ctype\u201d or \u201csetting\u201d</li> <li>QoS Profile: A complete group of all policies</li> <li>QoS Offer:</li> <li>QoS Request:</li> <li>Compatibility: </li> </ul> check topic qos settings<pre><code>ros2 topic info --verbose &lt;/topic name&gt;\n</code></pre>","tags":["ros2","qos",101]},{"location":"blog/ROS2/python/tutorials/part8_qos/#policy","title":"Policy","text":"Policy Description History Keep last: only store up to N samples, configurable via the queue depth option. Keep all: store all samples, subject to the configured resource limits of the underlying middleware. Depth Depth of history queue when specifying Keep last Reliability Best effort: attempt to deliver samples, but may lose them if the network is not robust.Reliable: guarantee that samples are delivered, may retry multiple times. Durability Transient local: the publisher becomes responsible for persisting samples for \u201clate-joining\u201d subscribers.Volatile: no attempt is made to persist samples. Deadline Duration: the expected maximum amount of time between subsequent messages being published to a topic Lifespan how long the sent message can live Liveliness Liveliness sets the Lease Duration, and the publisher is considered offline after a certain time AutomaticManual by topic","tags":["ros2","qos",101]},{"location":"blog/ROS2/python/tutorials/part8_qos/#profile","title":"Profile","text":"<p>A QoS profile defines a set of policies that are expected to go well together for a particular use case. for example:</p> <ul> <li>service_default</li> <li>sensor_data</li> <li>parameters</li> <li>system_default</li> </ul> <p>more info check ROS2 document</p>","tags":["ros2","qos",101]},{"location":"blog/ROS2/python/tutorials/part8_qos/#sensor-data","title":"Sensor data","text":"<p>For sensor data, in most cases it\u2019s more important to receive readings in a timely fashion, rather than ensuring that all of them arrive. That is, developers want the latest samples as soon as they are captured, at the expense of maybe losing some. For that reason the sensor data profile uses best effort reliability and a smaller queue size.</p> <p>profile define <code>rmw_qos_profile_t</code></p> sensor_data<pre><code>static const rmw_qos_profile_t rmw_qos_profile_sensor_data =\n{\nRMW_QOS_POLICY_HISTORY_KEEP_LAST,\n5,\nRMW_QOS_POLICY_RELIABILITY_BEST_EFFORT,\nRMW_QOS_POLICY_DURABILITY_VOLATILE,\nRMW_QOS_DEADLINE_DEFAULT,\nRMW_QOS_LIFESPAN_DEFAULT,\nRMW_QOS_POLICY_LIVELINESS_SYSTEM_DEFAULT,\nRMW_QOS_LIVELINESS_LEASE_DURATION_DEFAULT,\nfalse\n};\n</code></pre> <p>fields list</p> <ul> <li>history</li> <li>depth</li> <li>reliability</li> <li>durability</li> <li>deadline</li> <li>lifespan</li> <li>liveliness</li> <li>liveliness_lease_duration</li> <li>avoid_ros_namespace_conventions</li> </ul> <p>doc</p>","tags":["ros2","qos",101]},{"location":"blog/ROS2/python/tutorials/part8_qos/#demos","title":"Demos","text":"","tags":["ros2","qos",101]},{"location":"blog/ROS2/python/tutorials/part8_qos/#sub-code-pub-cli","title":"sub code pub cli","text":"<ul> <li>Subscriber Node defined with <code>sensor data</code> QoS</li> <li>Pub cli to publish message with compatibility QoS</li> </ul> subscriber<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom rclpy.qos import qos_profile_sensor_data\nfrom std_msgs.msg import String\n\nclass MinimalSubQoS(Node):\n    def __init__(self) -&gt; None:\n        super().__init__(\"minimal_sub_qos\")\n\n        self.__sub = self.create_subscription(\n            String,\n            \"topic\",\n            self.__cb,\n            qos_profile_sensor_data\n        )\n        self.__sub\n\n    def __cb(self, msg:String):\n        self.get_logger().info(msg.data)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    sub_node = MinimalSubQoS()\n    rclpy.spin(sub_node)\n    sub_node.destroy_node()\n    rclpy.shutdown()\n</code></pre> pub cli<pre><code>ros2 topic pub -1 --qos-profile sensor_data /topic std_msgs/msg/String \"data: hello\"\n</code></pre>","tags":["ros2","qos",101]},{"location":"blog/ROS2/python/tutorials/part8_qos/#pub-code-sub-cli","title":"pub code sub cli","text":"publisher<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom rclpy.qos import qos_profile_sensor_data\nfrom std_msgs.msg import String\n\nclass MinimalPubQos(Node):\n    def __init__(self) -&gt; None:\n        super().__init__(\"minimal_pub_qos\")\n\n        self.__pub = self.create_publisher(\n            String,\n            \"topic\",\n            qos_profile_sensor_data\n        )\n        self.__timer = self.create_timer(\n            timer_period_sec=0.5,\n            callback=self.__timer_cb)\n        self.__counter = 0\n\n    def __timer_cb(self):\n        msg = String()\n        msg.data = \"Hello QoS {}\".format(self.__counter)\n        self.__pub.publish(msg)\n        self.__counter += 1\n\ndef main(args=None):\n    rclpy.init(args=args)\n    pub_node = MinimalPubQos()\n    rclpy.spin(pub_node)\n    pub_node.destroy_node()\n    rclpy.shutdown()\n</code></pre> cli echo topic<pre><code># work\nros2 topic echo --qos-profile sensor_data /topic\n\n# work\nros2 topic echo  /topic\n\n# not work\nros2 topic echo --qos-profile services_default /topic\n\n# work\nros2 topic echo --qos-reliability best_effort /topic\n</code></pre>","tags":["ros2","qos",101]},{"location":"blog/ROS2/python/tutorials/part8_qos/#qos-compatibility","title":"QoS compatibility","text":"<p>In order for Publisher and Subscriber to establish a connection, the QoS set by the two must be compatible. DDS adopts the Request-Offer model. In short, the communication level provided by Publisher must be greater than or equal to that required by Subscriber. For detailed compatibility table, please refer to ROS2 official document</p>","tags":["ros2","qos",101]},{"location":"blog/ROS2/python/tutorials/part8_qos/#reference","title":"Reference","text":"<ul> <li>Profiling ROS2</li> </ul>","tags":["ros2","qos",101]},{"location":"blog/ROS2/python/tutorials/part9_executers/","title":"Part9 - executers","text":"minimal_timer<pre><code>import rclpy\nfrom rclpy.node import Node\n\nclass MinimalTimer(Node):\n    def __init__(self):\n        super().__init__(\"simple_timer\")\n        timer_period = 1  # seconds\n        self.timer = self.create_timer(timer_period, self.timer_callback)\n        self.i = 0\n\n    def timer_callback(self):\n        self.get_logger().info(f'timer tick: {self.i}')\n        self.i += 1\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    minimal_timer = MinimalTimer()\n    rclpy.spin(minimal_timer)\n    minimal_timer.destroy_node()\n    rclpy.shutdown()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> minimal_sta<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom rclpy.executors import SingleThreadedExecutor\n\nclass MinimalTimer(Node):\n    def __init__(self):\n        super().__init__(\"simple_timer\")\n        timer_period = 1  # seconds\n        self.timer = self.create_timer(timer_period, self.timer_callback)\n        self.i = 0\n\n    def timer_callback(self):\n        self.get_logger().info(f'timer tick: {self.i}')\n        self.i += 1\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    minimal_timer = MinimalTimer()\n    ste = SingleThreadedExecutor()\n    ste.add_node(minimal_timer)\n    ste.spin()\n    minimal_timer.destroy_node()\n    rclpy.shutdown()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["python","executers"]},{"location":"blog/ROS2/python/tutorials/part9_executers/#reference","title":"Reference","text":"<ul> <li>test_executor</li> <li>Execution and Callbacks\u00b6</li> </ul>","tags":["python","executers"]},{"location":"blog/ROS2/python/tutorials/pub_sub/","title":"Publisher","text":"","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/python/tutorials/pub_sub/#node-source-code","title":"node source code","text":"Node source code <pre><code>import rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\n\nclass MinimalPublisher(Node):\n    def __init__(self):\n        super().__init__(\"minimal_publisher\")\n        self.publisher_ = self.create_publisher(String, \"minimal\", 10)\n        timer_period = 1  # seconds\n        self.timer = self.create_timer(timer_period, self.timer_callback)\n        self.i = 0\n\n    def timer_callback(self):\n        msg = String()\n        msg.data = f\"pub simple: {self.i}\"\n        self.publisher_.publish(msg)\n        self.get_logger().info(f'Publishing: \"{msg.data}\"')\n        self.i += 1\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    minimal_publisher = MinimalPublisher()\n    # Spin the node so the callback function is called.\n    rclpy.spin(minimal_publisher)\n    minimal_publisher.destroy_node()\n    rclpy.shutdown()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/python/tutorials/pub_sub/#setuppy","title":"setup.py","text":"<ul> <li>Add entry point <code>&lt;node name&gt;.&lt;module name&gt;:&lt;entry func&gt;</code></li> </ul> <pre><code>entry_points={\n        'console_scripts': [\n            \"simple_pub = basic.simple_pub:main\"\n        ],\n    }\n</code></pre>","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/python/tutorials/pub_sub/#packagexml","title":"package.xml","text":"<ul> <li>Add this lines before <code>&lt;export&gt;</code> tag</li> </ul> <pre><code>  &lt;exec_depend&gt;rclpy&lt;/exec_depend&gt;\n&lt;exec_depend&gt;std_msgs&lt;/exec_depend&gt;\n</code></pre> <p>Note</p> <p><code>exec_depend</code> Declares a rosdep key or ROS package name that this package needs at execution-time</p>","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/python/tutorials/pub_sub/#build-and-run","title":"build and run","text":"Build<pre><code>colcon build --symlink-install --packages-select basic\n</code></pre> Source it<pre><code>source install/setup.bash\n</code></pre> Run<pre><code>ros2 run basic simple_pub\n</code></pre> output<pre><code>[INFO] [1649181441.732282742] [minimal_publisher]: Publishing: \"pub simple: 0\"\n[INFO] [1649181442.713229723] [minimal_publisher]: Publishing: \"pub simple: 1\"\n[INFO] [1649181443.713351778] [minimal_publisher]: Publishing: \"pub simple: 2\"\n</code></pre>","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/python/tutorials/pub_sub/#cli","title":"cli","text":"","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/python/tutorials/pub_sub/#ros2-topic","title":"ros2 topic","text":"<pre><code># list\nros2 topic list\n#result\n/parameter_events\n/rosout\n/minimal\n\n# info\nros2 topic info /minimal\n# Result\nType: std_msgs/msg/String\nPublisher count: 1\nSubscription count: 0\n\n# Echo\nros2 topic echo /minimal\n# Result\ndata: 'pub simple: 110'\n---\ndata: 'pub simple: 111'\n---\n</code></pre>","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/python/tutorials/pub_sub/#topic-verbose-info","title":"topic verbose info","text":"verbose info<pre><code>ros2 topic info -v /minimal\n# Result\nType: std_msgs/msg/String\n\nPublisher count: 1\nNode name: minimal_publisher\nNode namespace: /\nTopic type: std_msgs/msg/String\nEndpoint type: PUBLISHER\nGID: 01.0f.d1.c7.10.ba.23.e1.01.00.00.00.00.00.11.03.00.00.00.00.00.00.00.00\nQoS profile:\n  Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE\n  Durability: RMW_QOS_POLICY_DURABILITY_VOLATILE\n  Lifespan: 2147483651294967295 nanoseconds\n  Deadline: 2147483651294967295 nanoseconds\n  Liveliness: RMW_QOS_POLICY_LIVELINESS_AUTOMATIC\n  Liveliness lease duration: 2147483651294967295 nanoseconds\n\nSubscription count: 0\n</code></pre>","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/python/tutorials/pub_sub/#subscriber","title":"Subscriber","text":"","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/python/tutorials/pub_sub/#node-source-code_1","title":"node source code","text":"MinimalSubscriber Node source code <pre><code>import rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\n\n\nclass MinimalSubscriber(Node):\n    def __init__(self):\n        super().__init__(\"minimal_subscriber\")\n\n        # The node subscribes to messages of type std_msgs/String,\n        # over a topic named: /minimal\n        # The callback function is called as soon as a message is received.\n        # The maximum number of queued messages is 10.\n        self.subscription = self.create_subscription(\n            String, \"minimal\", self.__sub_callback, 10\n        )\n\n    def __sub_callback(self, msg):\n        self.get_logger().info(f\"I heard: {msg.data}\")\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    minimal_subscriber = MinimalSubscriber()\n    rclpy.spin(minimal_subscriber)\n    minimal_subscriber.destroy_node()\n    rclpy.shutdown()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/python/tutorials/pub_sub/#setuppy_1","title":"setup.py","text":"<ul> <li>Add entry point</li> </ul> <pre><code>entry_points={\n        'console_scripts': [\n            \"simple_sub = basic.simple_sub:main\"\n        ],\n    }\n</code></pre>","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/python/tutorials/pub_sub/#build-and-run_1","title":"build and run","text":"Build<pre><code>colcon build --symlink-install --packages-select basic\n</code></pre>","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/python/tutorials/pub_sub/#cli_1","title":"cli","text":"<ul> <li>Run subscriber node</li> </ul> Terminal1<pre><code>ros2 run basic simple_sub\n# Result after pub from terminal 2\n[INFO] [1649213924.055190916] [minimal_subscriber]: I heard: hello\n[INFO] [1649213925.036938799] [minimal_subscriber]: I heard: hello\n</code></pre> Terminal2<pre><code># pub message\nros2 topic pub /minimal std_msgs/msg/String \"{data: 'hello'}\"\n\n# pub only one message\nros2 topic pub -1 /minimal std_msgs/msg/String \"{data: 'hello'}\"\n</code></pre>","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/python/tutorials/pub_sub/#references","title":"References","text":"<ul> <li>package.xml specification</li> <li>ros2 topic Command Line Tool \u2013 Debug ROS2 Topics From the Terminal</li> <li>Create a Basic Publisher and Subscriber (Python) | ROS2 Foxy</li> </ul>","tags":["ros2","pub","sub",101]},{"location":"blog/ROS2/rqt/custom_plugin/step1/","title":"ROS2 custom RQT plugin","text":"<pre><code>ros2 pkg create rqt_mypkg --build-type ament_python --dependencies rclpy rqt_gui rqt_gui_py \n</code></pre> <pre><code>src/rqt_mypkg/\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 plugin.xml\n\u251c\u2500\u2500 resource\n\u2502   \u251c\u2500\u2500 MyPlugin.ui\n\u2502   \u2514\u2500\u2500 rqt_mypkg\n\u251c\u2500\u2500 rqt_mypkg\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 my_module.py\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 setup.cfg\n\u2514\u2500\u2500 setup.py\n</code></pre>","tags":["rqt","plugin"]},{"location":"blog/ROS2/rqt/custom_plugin/step1/#packagexml","title":"package.xml","text":"<ul> <li>Add line to export section</li> </ul> package.xml<pre><code>&lt;export&gt;\n&lt;build_type&gt;ament_python&lt;/build_type&gt;\n&lt;rqt_gui plugin=\"${prefix}/plugin.xml\"/&gt;\n&lt;/export&gt;\n</code></pre>","tags":["rqt","plugin"]},{"location":"blog/ROS2/rqt/custom_plugin/step1/#pluginxml","title":"plugin.xml","text":"<ul> <li>Place file in package root folder</li> </ul> package.xml<pre><code>&lt;library path=\"src\"&gt;\n&lt;class name=\"My Plugin\" type=\"rqt_mypkg.my_module.MyPlugin\" base_class_type=\"rqt_gui_py::Plugin\"&gt;\n&lt;description&gt;\nAn example Python GUI plugin to create a great user interface.\n    &lt;/description&gt;\n&lt;qtgui&gt;\n&lt;group&gt;\n&lt;label&gt;Visualization&lt;/label&gt;\n&lt;/group&gt;\n&lt;!--&lt;group&gt;\n          &lt;label&gt;Subgroup&lt;/label&gt;\n        &lt;/group&gt;\n        --&gt;\n&lt;label&gt;My first Python Plugin&lt;/label&gt;\n&lt;icon type=\"theme\"&gt;system-help&lt;/icon&gt;\n&lt;statustip&gt;Great user interface to provide real value.&lt;/statustip&gt;\n&lt;/qtgui&gt;\n&lt;/class&gt;\n&lt;/library&gt;\n</code></pre>","tags":["rqt","plugin"]},{"location":"blog/ROS2/rqt/custom_plugin/step1/#simple-plugin-file","title":"simple plugin file","text":"","tags":["rqt","plugin"]},{"location":"blog/ROS2/rqt/custom_plugin/step1/#resources","title":"Resources","text":"<ul> <li>rqt_tf_tree</li> <li>rqt python plugin</li> </ul>","tags":["rqt","plugin"]},{"location":"blog/ROS2/rviz/","title":"ROS2 RVIZ2","text":"","tags":["rviz","rviz2"]},{"location":"blog/ROS2/rviz/#tips","title":"Tips","text":"","tags":["rviz","rviz2"]},{"location":"blog/ROS2/rviz/#launch-rviz-node-with-config","title":"Launch rviz node with config","text":"setup.py<pre><code>(os.path.join('share', package_name, \"config\"), glob('config/*.rviz'))  \n</code></pre> launch.py<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\nfrom ament_index_python.packages import get_package_share_directory\nimport os\n\nPACKAGE_NAME = \"py_tutorial_pkg\"\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    rviz_node = Node(\n            package='rviz2',\n            namespace='',\n            executable='rviz2',\n            name='rviz2',\n            arguments=['-d' + os.path.join(get_package_share_directory(PACKAGE_NAME), 'config', 'rviz_turtlesim_tf.rviz')]\n        )\n\n    ld.add_action(rviz_node)\n    return ld\n</code></pre>","tags":["rviz","rviz2"]},{"location":"blog/ROS2/rviz/#reference","title":"Reference","text":"<ul> <li>rviz marker</li> <li>rviz tutorials</li> </ul>","tags":["rviz","rviz2"]},{"location":"blog/ROS2/rviz/2d_goal_pose/","title":"2D goal pose","text":"<pre><code>ros2 topic list\n#\n/goal_pose\n\nros2 topic info /goal_pose\n#\nType: geometry_msgs/msg/PoseStamped\nPublisher count: 1\n</code></pre> <pre><code>ros2 interface show geometry_msgs/msg/PoseStamped\n\n# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\n    builtin_interfaces/Time stamp\n        int32 sec\n        uint32 nanosec\n    string frame_id\nPose pose\n    Point position\n        float64 x\n        float64 y\n        float64 z\n    Quaternion orientation\n        float64 x 0\n        float64 y 0\n        float64 z 0\n        float64 w 1\n</code></pre>","tags":["rviz","pose"]},{"location":"blog/ROS2/rviz/marker_hello/","title":"Add Marker to RVIZ","text":"<p>ROS Doc markers</p> <p>The Markers display allows programmatic addition of various primitive shapes to the RViz 3D view by sending a <code>visualization_msgs/Marker</code> or <code>visualization_msgs/MarkerArray</code> message</p> basic_marker.py<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom visualization_msgs.msg import Marker\nfrom geometry_msgs.msg import Quaternion, Pose, Point, Vector3\nfrom std_msgs.msg import Header, ColorRGBA\nfrom builtin_interfaces.msg import Duration\n\nclass MyNode(Node):\n    def __init__(self):\n        node_name=\"basic_rviz_marker\"\n        super().__init__(node_name)\n        self.get_logger().info(\"Hello rviz marker\")\n        self.__marker_publisher = self.create_publisher(Marker, \"visualization_marker\", 5)\n        self.__timer = self.create_timer(2, self.__timer_handler)\n        self.__timer\n        self.__counter = 0\n\n\n    def __timer_handler(self):\n        self.__counter += 1\n        self.__show_text_in_rviz(\"Hello marker: {}\".format(self.__counter))\n\n    def __show_text_in_rviz(self, text):\n        pose = Pose(position=Point(x=0.5, y=0.5, z=1.45), orientation=Quaternion(x=0.0, y=0.0, z=0.0, w=1.0))\n        marker = Marker(\n                type=Marker.TEXT_VIEW_FACING,\n                id=0,\n                lifetime=Duration(sec=1),\n                pose=pose,\n                scale=Vector3(x=0.6, y=0.6, z=0.6),\n                header=Header(frame_id='world'),\n                color=ColorRGBA(r=0.0, g=1.0, b=0.0, a=0.8),\n                text=text)\n        self.__marker_publisher.publish(marker)\n\ndef main(args=None):\n    rclpy.init(args=args)\n    node = MyNode()\n    rclpy.spin(node)\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p></p>","tags":["rviz","marker"]},{"location":"blog/ROS2/rviz/marker_hello/#reference","title":"Reference","text":"<ul> <li>markers</li> </ul>","tags":["rviz","marker"]},{"location":"blog/ROS2/sdf/meshes/","title":"Load meshes","text":"<pre><code>&lt;visual name='base_link_visual'&gt;\n&lt;pose&gt;0 0 0 0 0 0&lt;/pose&gt;\n&lt;geometry&gt;\n&lt;mesh&gt;\n&lt;scale&gt;1 1 1&lt;/scale&gt;\n&lt;uri&gt;model://model_name/meshes/textured.dae&lt;/uri&gt;\n&lt;/mesh&gt;\n&lt;/geometry&gt;\n&lt;/visual&gt;\n</code></pre> <pre><code>&lt;visual name='base_link_visual'&gt;\n&lt;pose&gt;0 0 0 0 0 0&lt;/pose&gt;\n&lt;geometry&gt;\n&lt;mesh&gt;\n&lt;scale&gt;1 1 1&lt;/scale&gt;\n&lt;uri&gt;file://path_to_dae/textured.dae&lt;/uri&gt;\n&lt;/mesh&gt;\n&lt;/geometry&gt;\n&lt;/visual&gt;\n</code></pre> <p>Warning</p> <p>SDF uses file instead of package</p> <p>Warning</p> <p>RVIZ not support <code>model</code> uri</p>","tags":["sdf"]},{"location":"blog/ROS2/sdf/tips/","title":"SDF specification and tools","text":"","tags":["sdf","tips"]},{"location":"blog/ROS2/sdf/tips/#validate--check-sdf-file","title":"validate / check sdf file","text":"<pre><code>ign sdf -k &lt;sdf.file&gt;\n</code></pre>","tags":["sdf","tips"]},{"location":"blog/ROS2/tf2/","title":"tf2","text":"","tags":["ros2"]},{"location":"blog/ROS2/tf2/#transformations","title":"transformations","text":"<p>A transform specifies how data expressed in a frame can be transformed into a different frame</p>","tags":["ros2"]},{"location":"blog/ROS2/tf2/#tf","title":"tf","text":"<p>Any node can use the tf2 libraries to broadcast a transform from one frame to another</p> <p>each frame is defined by one (and only one) transform from another frame, but can have any number of frames dependent on it, this create a tree structure of <code>frames</code> the library can calculat any transformation between tow frames (nodes)</p> <p><code>tf2</code> library using topics <code>/tf</code> and <code>/tf_static</code> th handle communication, because the tf2 library pub/sub the messages we call it <code>broadcasting</code> and <code>listening</code></p>","tags":["ros2"]},{"location":"blog/ROS2/tf2/#tf_echo--returns-the-transforms-between-any-connected-frames","title":"tf_echo:  returns the transforms between any connected frames","text":"","tags":["ros2"]},{"location":"blog/ROS2/tf2/#install-tf2-tools-and-helper-libraries","title":"install tf2 tools and helper libraries","text":"<pre><code>sudo apt-get install \\\nros-humble-tf2-tools \\\nros-humble-tf-transformations \\\nros-humble-rqt-tf-tree\n</code></pre>","tags":["ros2"]},{"location":"blog/ROS2/tf2/#tutorials","title":"tutorials","text":"<ul> <li>cpp broadcaster</li> </ul>","tags":["ros2"]},{"location":"blog/ROS2/tf2/#reference","title":"Reference","text":"<ul> <li>Getting Ready for ROS Part 6: The Transform System (TF)</li> <li>ROS Transformations and frames</li> </ul>","tags":["ros2"]},{"location":"blog/ROS2/tf2/static_tf/","title":"tf2 static tf","text":"","tags":["tf2","ros2"]},{"location":"blog/ROS2/tf2/static_tf/#static-tf-broadcast","title":"static tf broadcast","text":"<pre><code>ros2 run tf2_ros static_transform_publisher \\\nx y z \\\nyaw pitch roll \\\nparent_frame \\\nchild_frame\n</code></pre>","tags":["tf2","ros2"]},{"location":"blog/ROS2/tf2/static_tf/#demo","title":"Demo","text":"<ul> <li>Broadcast two robot tf frame relative to world frame</li> </ul> <pre><code># world robot1\nros2 run tf2_ros static_transform_publisher 2 1 0 0 0 0 world robot_1\n\n# world robot2\nros2 run tf2_ros static_transform_publisher 4 -2 0 0 0 0 world robot_2\n</code></pre>","tags":["tf2","ros2"]},{"location":"blog/ROS2/tf2/static_tf/#echo","title":"echo","text":"<ul> <li>check the matrix between two frames</li> </ul> <pre><code>ros2 run tf2_ros tf2_echo robot_1 robot_2\n\nAt time 0.0\n- Translation: [2.000, -3.000, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.000, 1.000]\n- Rotation: in RPY (radian) [0.000, -0.000, 0.000]\n- Rotation: in RPY (degree) [0.000, -0.000, 0.000]\n- Matrix:\n  1.000  0.000  0.000  2.000\n  0.000  1.000  0.000 -3.000\n  0.000  0.000  1.000  0.000\n  0.000  0.000  0.000  1.000\n</code></pre>","tags":["tf2","ros2"]},{"location":"blog/ROS2/tf2/static_tf/#tf-tree","title":"tf tree","text":"<pre><code>ros2 run rqt_tf_tree rqt_tf_tree\n</code></pre>","tags":["tf2","ros2"]},{"location":"blog/ROS2/tf2/static_tf/#rviz","title":"rviz","text":"","tags":["tf2","ros2"]},{"location":"blog/ROS2/tf2/static_tf/#topic","title":"topic","text":"<pre><code>ros2 topic list\n#\n/parameter_events\n/rosout\n/tf_static\n</code></pre> <pre><code>ros2 topic echo /tf_static\n# publish one message because it's static tf\n#ros2 topic info /tf_static\n#Type: tf2_msgs/msg/TFMessage\n\ntransforms:\n- header:\n    stamp:\n      sec: 1665725225\nnanosec: 204816367\nframe_id: world\n  child_frame_id: robot_1\n  transform:\n    translation:\n      x: 2.0\n      y: 1.0\n      z: 0.0\n    rotation:\n      x: 0.0\n      y: 0.0\n      z: 0.0\n      w: 1.0\n---\ntransforms:\n- header:\n    stamp:\n      sec: 1665725576\nnanosec: 941586267\nframe_id: world\n  child_frame_id: robot_2\n  transform:\n    translation:\n      x: 4.0\n      y: -2.0\n      z: 0.0\n    rotation:\n      x: 0.0\n      y: 0.0\n      z: 0.0\n      w: 1.0\n</code></pre>","tags":["tf2","ros2"]},{"location":"blog/ROS2/tf2/static_tf/#reference","title":"Reference","text":"<ul> <li>Getting Ready for ROS Part 6: The Transform System (TF)</li> </ul>","tags":["tf2","ros2"]},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/","title":"tf2 cpp broadcaster","text":"<p>code from : https://docs.ros.org/en/humble/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.html</p> <p>```bash terminal1</p>","tags":["tf2","cpp"]},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/#turtlesim","title":"turtlesim","text":"<p>ros2 run turtlesim turtlesim_node <pre><code>```bash terminal2\n# turtlesim teleop\nros2 run turtlesim turtle_teleop_key\n</code></pre></p> <p>```bash terminal3</p>","tags":["tf2","cpp"]},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/#our-node-translate-turtle-pose-to-tf-message","title":"our node translate turtle pose to tf message","text":"<p>ros2 run learning_tf2 tf2_broadcaster <pre><code>```bash terminal4\n# tf echo tool\nros2 run tf2_ros tf2_echo world turtle\n</code></pre></p> <p>```bash terminal5</p>","tags":["tf2","cpp"]},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/#tf-tree-using-rqt","title":"tf tree using rqt","text":"<p>ros2 run rqt_tf_tree rqt_tf_tree \u2013force-discover <pre><code>```bash terminal6\n# rviz\nros2 run rviz2 rviz2\n</code></pre></p> <p></p>","tags":["tf2","cpp"]},{"location":"blog/ROS2/tf2/tf2_cpp_broadcaster/#reference","title":"Reference","text":"<ul> <li>Learn TF2 \u2013 ROS2 Concepts in Practice</li> </ul>","tags":["tf2","cpp"]},{"location":"blog/ROS2/tf2/tutorials/","title":"tf tutorial","text":"<ul> <li>turtlesim tf2 python demo</li> </ul>","tags":["tag"]},{"location":"blog/ROS2/tf2/tutorials/turtlesim_tf2/","title":"tf2 turtle sim python demo","text":"<pre><code>sudo apt install ros-humble-turtle-tf2-py\n</code></pre>","tags":["tf2","python"]},{"location":"blog/ROS2/tf2/tutorials/turtlesim_tf2/#reference","title":"Reference","text":"<ul> <li>geometry_tutorials</li> </ul>","tags":["tf2","python"]},{"location":"blog/ROS2/tutorials/custom_debian_package/","title":"Building ROS2 custom debian package","text":"<p>Build debian deb file from ROS2 package</p>","tags":["ros2","deb","package"]},{"location":"blog/ROS2/tutorials/custom_debian_package/#install","title":"install","text":"<pre><code>sudo apt install python3-bloom python3-rosdep fakeroot debhelper dh-python\n</code></pre>","tags":["ros2","deb","package"]},{"location":"blog/ROS2/tutorials/custom_debian_package/#prerequisites","title":"prerequisites","text":"<ul> <li>Package dependencies must be install</li> <li>All dependencies must be declared in <code>package.xml</code> package file</li> </ul>","tags":["ros2","deb","package"]},{"location":"blog/ROS2/tutorials/custom_debian_package/#bloom","title":"bloom","text":"<p>Bloom is a build automation tool</p>","tags":["ros2","deb","package"]},{"location":"blog/ROS2/tutorials/custom_debian_package/#changelog","title":"Changelog","text":"<p>A changelog is a file that contains a condensed list of all important changes made to a project </p> <p>The changelog is a list of commits</p> <pre><code>git log --oneline\n</code></pre> <p>catkin_generate_changelog</p> <pre><code>catkin_generate_changelog --all\n</code></pre>","tags":["ros2","deb","package"]},{"location":"blog/ROS2/tutorials/custom_debian_package/#package-version","title":"package version","text":"<p>ROS2 python package has two files with version fields - package.xml - setup.py</p> <p>To maintain version use <code>catkin_prepare_release</code> that maintain both files and create tag and change log</p> <p>Run from workspace root</p> <pre><code>catkin_prepare_release --version 0.0.2 -y --no-push\n</code></pre> <p>version semantic</p> <p>Version number has three parts <pre><code>Major.Minor.Path\n</code></pre></p>","tags":["ros2","deb","package"]},{"location":"blog/ROS2/tutorials/custom_debian_package/#create-package","title":"create package","text":"<p>from package root folder (not workspace)</p> <pre><code>bloom-generate rosdebian\n</code></pre> <pre><code>fakeroot debian/rules binary\n</code></pre> <p>deb file</p> <p>create package in the parent folder</p>","tags":["ros2","deb","package"]},{"location":"blog/ROS2/tutorials/custom_debian_package/#reference","title":"Reference","text":"<ul> <li>Building a custom Debian package</li> <li>How to release a ROS 2 binary package \u2013 Part 3</li> </ul>","tags":["ros2","deb","package"]},{"location":"blog/ROS2/tutorials/local_setup_vs_setup/","title":"ROS2 workspace","text":"<p>Workspace is a ROS term for the location on your system where you\u2019re developing with ROS 2 The core ROS 2 workspace is called the underlay. Subsequent local workspaces are called overlays.</p> <p>underlay workspace contain all binary package that install by <code>apt</code> or <code>rosdep</code> (that run apt)</p> <p>overlays workspace contain source packages get download/clone or develop when we use <code>colcon</code> to build the workspace, it run on the source from <code>src</code> folder build into <code>build</code> folder and install the result into <code>install</code> folder. colcon create <code>setup</code> and <code>local_setup</code> files with all the information need to find workspace packages in ROS environment</p>","tags":["ros2","setup","local_setup"]},{"location":"blog/ROS2/tutorials/local_setup_vs_setup/#overlaying-ros-workspaces","title":"Overlaying ROS Workspaces","text":"<p>Difference between local_setup. and setup. ROS answers - The <code>local_setup</code> script sets up environment for all packages in the script prefix path The <code>setup</code> source the local and other workspace","tags":["ros2","setup","local_setup"]},{"location":"blog/ROS2/tutorials/local_setup_vs_setup/#reference","title":"Reference","text":"<ul> <li>ROS Overview (10 concepts you need to know)</li> <li>ROS 2 workshop</li> </ul>","tags":["ros2","setup","local_setup"]},{"location":"blog/ROS2/tutorials/logging/","title":"ROS2 logging","text":"<p>ROS2 logging control and config</p>","tags":["ros2","tutorial","logging"]},{"location":"blog/ROS2/tutorials/logging/#config","title":"config","text":"<p>ros2 wiki logging</p>","tags":["ros2","tutorial","logging"]},{"location":"blog/ROS2/tutorials/logging/#environment-variables","title":"environment variables","text":"<ul> <li>RCUTILS_COLORIZED_OUTPUT</li> <li>ROS_LOG_DIR</li> <li>RCUTILS_LOGGING_USE_STDOUT</li> <li>RCUTILS_LOGGING_BUFFERED_STREAM</li> <li>RCUTILS_CONSOLE_OUTPUT_FORMAT</li> </ul>","tags":["ros2","tutorial","logging"]},{"location":"blog/ROS2/tutorials/logging/#rcutils_console_output_format","title":"RCUTILS_CONSOLE_OUTPUT_FORMAT","text":"<pre><code>export RCUTILS_CONSOLE_OUTPUT_FORMAT=\"[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})\"\n</code></pre>","tags":["ros2","tutorial","logging"]},{"location":"blog/ROS2/tutorials/logging/#rcutils_colorized_output","title":"RCUTILS_COLORIZED_OUTPUT","text":"<p>colorize logging</p> <p>Add environment variable to <code>.bashrc</code> <pre><code>export RCUTILS_COLORIZED_OUTPUT=1\n</code></pre></p>","tags":["ros2","tutorial","logging"]},{"location":"blog/ROS2/tutorials/logging/#control","title":"Control","text":"","tags":["ros2","tutorial","logging"]},{"location":"blog/ROS2/tutorials/logging/#throttled","title":"throttled","text":"throttled<pre><code>node.get_logger().error(\"log every sec\", throttle_duration_sec=1)\n</code></pre>","tags":["ros2","tutorial","logging"]},{"location":"blog/ROS2/tutorials/logging/#one-time","title":"one time","text":"log only first time<pre><code>node.get_logger().info(f'log only once', once=True)\n</code></pre>","tags":["ros2","tutorial","logging"]},{"location":"blog/ROS2/tutorials/logging/#skip","title":"skip","text":"log, skip first time<pre><code>node.get_logger().info(f'log only once', skip_first=True)\n</code></pre>","tags":["ros2","tutorial","logging"]},{"location":"blog/ROS2/tutorials/logging/#logging-control-demo","title":"logging control demo","text":"<ul> <li>control node log level</li> <li>Set logging format</li> </ul> very simple node with logging node.launch.py <p>log external config</p> <p><pre><code>ros2 run some_package some_ros_executable --ros-args --log-config-file some_log.config\n</code></pre> ROS2 logging base on spdlog for know spdlog not support external config</p> <p>check humble code</p>","tags":["ros2","tutorial","logging"]},{"location":"blog/ROS2/tutorials/package_xml/","title":"Package.xml","text":"","tags":["ros2"]},{"location":"blog/ROS2/tutorials/package_xml/#depend","title":"depend","text":"<p>A package\u2019s package.xml file contains a set of dependencies. The dependencies in this file are generally referred to as \u201crosdep keys\u201d. These are represented in the tags , , , , and . They specify in what situation each of the dependencies are required in. <ul> <li>For dependencies only used in testing the code (e.g. gtest), use test_depend.</li> <li>For dependencies only used in building the code, use build_depend.</li> <li>For dependencies needed by headers the code exports, use build_export_depend.</li> <li>For dependencies only used when running the code, use exec_depend.</li> <li>For mixed purposes, use depend, which covers build, export, and execution time dependencies.</li> </ul> <p>These dependencies are manually populated in the package.xml file by the package\u2019s creators and should be an exhaustive list of any non-builtin libraries and packages it requires.</p>","tags":["ros2"]},{"location":"blog/ROS2/tutorials/package_xml/#reference","title":"Reference","text":"<ul> <li>Managing Dependencies with rosdep</li> </ul>","tags":["ros2"]},{"location":"blog/ROS2/tutorials/rep/","title":"REP","text":"<ul> <li>REP-107 Diagnostic System for Robots Running ROS</li> </ul>","tags":["ros2"]},{"location":"blog/ROS2/tutorials/rosdep_tutorial/","title":"rosdep tutorial","text":"<p>rosdep is a command-line tool for installing system dependencies rosdep is ROS\u2019s dependency management utility that can work with ROS packages and external libraries.</p>","tags":["rosdep","ros2","package manager","project settings"]},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#usage","title":"usage","text":"","tags":["rosdep","ros2","package manager","project settings"]},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#first-use","title":"first use","text":"<pre><code>sudo rosdep init\nrosdep update\n</code></pre> <p>rosdep init create folder <code>rosdep</code> under <code>/etc/ros</code> rosdep update download index files to local cache  </p> <p>index file url set <code>/etc/ros/rosdep/sources.list.d</code> folder</p> <p>for example python packages from pip defined at <code>https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/python.yaml</code></p> <p>index file for ros distro download from distro location that config <code>https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml</code></p>","tags":["rosdep","ros2","package manager","project settings"]},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#run","title":"run","text":"<p>update</p> <p>run <code>rosdep update</code> to update cache index</p> <p>rosdep will check for <code>package.xml</code> files in its path or for a specific package and find the rosdep keys stored within</p> <pre><code>rosdep install --simulate --from-paths ~/workspaces/project/src --ignore-src\n</code></pre> <ul> <li>\u2013form-path: specifies the path to check for package.xml files to resolve keys for</li> <li>y: means to default yes to all prompts from the package manager to install without prompts</li> <li>\u2013ignore-src: means to ignore installing dependencies, even if a rosdep key exists, if the package itself is also in the workspace</li> </ul>","tags":["rosdep","ros2","package manager","project settings"]},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#demo","title":"demo","text":"<p>install python package using rosdep  </p> <ul> <li>add package name to <code>package.xml</code> depend tag  <ol> <li>check python.yaml for package correct name  </li> </ol> </li> <li>run rosdep <code>install</code> </li> </ul> package.xml<pre><code>&lt;depend&gt;pynput-pip&lt;/depend&gt;\n</code></pre> terminal<pre><code>rosdep install --from-paths ~/ros2_ws/src/camera_calibration_gazebo --ignore-src\n</code></pre> <p>check python package naming</p> <p>browse to <code>https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/python.yaml</code></p> <pre><code>pynput-pip:\ndebian:\npip:\npackages: [pynput]\nubuntu:\npip:\npackages: [pynput]\n</code></pre>","tags":["rosdep","ros2","package manager","project settings"]},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#resolve","title":"resolve","text":"<p>resolve  to system dependencies install from pip<pre><code>rosdep resolve pynput-pip\n#pip\npynput\n</code></pre> install from apt<pre><code>rosdep resolve python-opencv\n#apt\npython-opencv\n</code></pre>","tags":["rosdep","ros2","package manager","project settings"]},{"location":"blog/ROS2/tutorials/rosdep_tutorial/#reference","title":"Reference","text":"<ul> <li>Managing Dependencies with rosdep</li> <li>Using Python Packages with ROS 2</li> </ul>","tags":["rosdep","ros2","package manager","project settings"]},{"location":"blog/ROS2/tutorials/udp_domain_id/","title":"ROS2 domain_id and DDS ports","text":"<p>udp shm</p> <p>The last releases of Fast-DDS come with SharedMemory transport by default</p>","tags":["ros2","dds"]},{"location":"blog/ROS2/tutorials/udp_domain_id/#udp","title":"udp","text":"<ul> <li>Using custom profile to disabled <code>SHM</code></li> </ul> fastrtps-profile.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;profiles xmlns=\"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\" &gt;\n&lt;transport_descriptors&gt;\n&lt;transport_descriptor&gt;\n&lt;transport_id&gt;CustomUdpTransport&lt;/transport_id&gt;\n&lt;type&gt;UDPv4&lt;/type&gt;\n&lt;/transport_descriptor&gt;\n&lt;/transport_descriptors&gt;\n\n&lt;participant profile_name=\"participant_profile\" is_default_profile=\"true\"&gt;\n&lt;rtps&gt;\n&lt;userTransports&gt;\n&lt;transport_id&gt;CustomUdpTransport&lt;/transport_id&gt;\n&lt;/userTransports&gt;\n\n&lt;useBuiltinTransports&gt;false&lt;/useBuiltinTransports&gt;\n&lt;/rtps&gt;\n&lt;/participant&gt;\n&lt;/profiles&gt;\n</code></pre>","tags":["ros2","dds"]},{"location":"blog/ROS2/tutorials/udp_domain_id/#usage","title":"usage","text":"<pre><code>export FASTRTPS_DEFAULT_PROFILES_FILE=$(pwd)/fastrtps-profile.xml\n</code></pre> <p>domain_id port calc</p> <pre><code>7400 + (250 * Domain)\n</code></pre>","tags":["ros2","dds"]},{"location":"blog/ROS2/tutorials/udp_domain_id/#udp-demo","title":"Udp demo","text":"<ul> <li>domin_id 0</li> </ul> <p>Domain ID to UDP Port Calculator</p> terminal1<pre><code>export FASTRTPS_DEFAULT_PROFILES_FILE=$(pwd)/fastrtps-profile.xml\nros2 run demo_nodes_cpp talker\n</code></pre> terminal2<pre><code>export FASTRTPS_DEFAULT_PROFILES_FILE=$(pwd)/fastrtps-profile.xml\nros2 run demo_nodes_cpp listener\n</code></pre> ss output<pre><code>ss -lup\n#\n0.0.0.0:45800                                   0.0.0.0:*                   users:((\"listener\",pid=945597,fd=11))               192.168.1.221:54487                                   0.0.0.0:*                   users:((\"python3\",pid=848435,fd=15))                0.0.0.0:mdns                                    0.0.0.0:*                                                                       0.0.0.0:39489                                   0.0.0.0:*                   users:((\"python3\",pid=848435,fd=14))                192.168.1.221:39981                                   0.0.0.0:*                   users:((\"listener\",pid=945597,fd=12))               0.0.0.0:7400                                    0.0.0.0:*                   users:((\"listener\",pid=945597,fd=8))                0.0.0.0:7400                                    0.0.0.0:*                   users:((\"talker\",pid=945585,fd=8))                  0.0.0.0:7400                                    0.0.0.0:*                   users:((\"python3\",pid=848435,fd=9))                 0.0.0.0:7412                                    0.0.0.0:*                   users:((\"talker\",pid=945585,fd=9))                  0.0.0.0:7413                                    0.0.0.0:*                   users:((\"talker\",pid=945585,fd=10))                 0.0.0.0:7414                                    0.0.0.0:*                   users:((\"listener\",pid=945597,fd=9))                0.0.0.0:7415                                    0.0.0.0:*                   users:((\"listener\",pid=945597,fd=10))               0.0.0.0:7418                                    0.0.0.0:*                   users:((\"python3\",pid=848435,fd=10))                0.0.0.0:7419                                    0.0.0.0:*                   users:((\"python3\",pid=848435,fd=12))                127.0.0.53%lo:domain                                  0.0.0.0:*                                                                       192.168.1.221:32836                                   0.0.0.0:*                   users:((\"talker\",pid=945585,fd=12))                 0.0.0.0:631                                     0.0.0.0:*                                                                       0.0.0.0:58699                                   0.0.0.0:*                   users:((\"talker\",pid=945585,fd=11))  </code></pre> <p>All applications:</p> <p>DiscoveryMulticastPort  = 7400 UserMulticastPort       = 7401</p> <p>First application:</p> <p>DiscoveryUnicastPort    = 7410 UserUnicastPort         = 7411</p> <p>Second application:</p> <p>DiscoveryUnicastPort    = 7412 UserUnicastPort         = 7413</p>","tags":["ros2","dds"]},{"location":"blog/ROS2/tutorials/udp_domain_id/#reference","title":"Reference","text":"<ul> <li>The ROS_DOMAIN_ID</li> <li>ROS2-foxy nodes can\u2019t communicate through docker container border</li> <li>What does the \u201cdiscovery multicast port\u201d do?</li> <li>Statically configure a Firewall to let OMG DDS Traffic through </li> </ul>","tags":["ros2","dds"]},{"location":"blog/ROS2/tutorials/vcstool/","title":"vcstool hello","text":"<p>vcstool is a version control system tool designed to make working with multiple repositories easier. It is most commonly used for getting open source repositories from GitHub, without having to maintain them yourselves in your project.</p> <pre><code>sudo apt install python3-vcstool\n</code></pre>","tags":["vcstool","ros2","package manager","project settings"]},{"location":"blog/ROS2/tutorials/vcstool/#usage","title":"usage","text":"","tags":["vcstool","ros2","package manager","project settings"]},{"location":"blog/ROS2/tutorials/vcstool/#repos","title":".repos","text":"<ul> <li>create file <code>project.repos</code> for example</li> </ul> <pre><code>repositories:\nturtlebot3/turtlebot3:\ntype: git\nurl: https://github.com/ROBOTIS-GIT/turtlebot3.git\nversion: galactic-devel\n</code></pre>","tags":["vcstool","ros2","package manager","project settings"]},{"location":"blog/ROS2/tutorials/vcstool/#clone--import","title":"clone / import","text":"<ul> <li>from workspace folder</li> </ul> <pre><code>vcs import src &lt; project.repos\n</code></pre>","tags":["vcstool","ros2","package manager","project settings"]},{"location":"blog/ROS2/tutorials/what_is_ros2_daemon/","title":"Reference","text":"<ul> <li>What is ROS2 daemon?</li> </ul>","tags":["ros2","tutorial"]},{"location":"blog/ROS2/urdf/","title":"URDF","text":"<p>Unified Robot Description Format URDF is xml specification that describe robot physical as links and joints elements</p> <ul> <li>robot: The root element in a robot description file must be a robot</li> <li>link: The link element describes a rigid body with an inertia, visual features, and collision properties. </li> <li>joint: The joint element describes the kinematics and dynamics of the joint between two links</li> <li>gazebo: The gazebo element is an extension to the URDF robot description format, used for simulation purposes in the Gazebo simulator. </li> </ul> minimal urdf<pre><code>&lt;robot name=\"robot_name\"&gt;\n&lt;!--  robot links joints --&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["urdf","robot_state_publisher","urdf_to_graphiz"]},{"location":"blog/ROS2/urdf/#elements","title":"elements","text":"<ul> <li>link</li> <li>joint</li> <li>gazebo</li> <li>more elements</li> </ul>","tags":["urdf","robot_state_publisher","urdf_to_graphiz"]},{"location":"blog/ROS2/urdf/#tools-to-view-and-debug-urdf","title":"Tools to view and debug urdf","text":"<ul> <li>rviz</li> <li>gazebo</li> <li>online urdf preview</li> <li>verification and Visualization</li> </ul>","tags":["urdf","robot_state_publisher","urdf_to_graphiz"]},{"location":"blog/ROS2/urdf/#install","title":"Install","text":"<pre><code>sudo apt install ros-humble-urdf\n</code></pre>","tags":["urdf","robot_state_publisher","urdf_to_graphiz"]},{"location":"blog/ROS2/urdf/#demo","title":"Demo","text":"demo.urdf<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;robot name=\"my_robot\"&gt;\n&lt;link name=\"base_link\"&gt;\n&lt;visual&gt;\n&lt;geometry&gt;\n&lt;cylinder length=\"0.6\" radius=\"0.2\" /&gt;\n&lt;/geometry&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n&lt;link name=\"link1\"&gt;\n&lt;visual&gt;\n&lt;geometry&gt;\n&lt;cylinder length=\"0.6\" radius=\"0.2\" /&gt;\n&lt;/geometry&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n&lt;joint type=\"fixed\" name=\"base2link_joint\"&gt;\n&lt;origin xyz=\"1 0 0\" rpy=\"0 0 0\"/&gt;\n&lt;parent link=\"base_link\"/&gt;\n&lt;child link=\"link1\"/&gt;\n&lt;/joint&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["urdf","robot_state_publisher","urdf_to_graphiz"]},{"location":"blog/ROS2/urdf/#gazebo-cli","title":"gazebo cli","text":"<p>check urdf validation with gazebo cli</p> check using gazebo<pre><code>gz sdf --check &lt;file&gt;\n</code></pre>","tags":["urdf","robot_state_publisher","urdf_to_graphiz"]},{"location":"blog/ROS2/urdf/#urdf_to_graphiz","title":"urdf_to_graphiz","text":"<pre><code>urdf_to_graphiz &lt;file&gt;\n\n# check the pdf output\nevince my_robot.pdf\n</code></pre>","tags":["urdf","robot_state_publisher","urdf_to_graphiz"]},{"location":"blog/ROS2/urdf/#online-preview","title":"online preview","text":"<p>urdf</p> <p></p>","tags":["urdf","robot_state_publisher","urdf_to_graphiz"]},{"location":"blog/ROS2/urdf/#rviz","title":"rviz","text":"<pre><code>import os\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\nURDF = \"basic_joint.urdf\"\nPACKAGE = \"gazebo_tutorial_pkg\"\ndef generate_launch_description():\nld = LaunchDescription()\npkg = get_package_share_directory(PACKAGE)\nurdf = os.path.join(pkg, \"urdf\", URDF)\nwith open(urdf, \"r\", encoding=\"utf-8\") as f:\nrobot_description = f.read()\nrobot_state_publisher = Node(\npackage=\"robot_state_publisher\",\nexecutable=\"robot_state_publisher\",\nname=\"robot_state_publisher\",\noutput=\"screen\",\nparameters=[{\"robot_description\": robot_description}]\n)\njoint_state_publisher_node = Node(\npackage=\"joint_state_publisher_gui\",\nexecutable=\"joint_state_publisher_gui\",\nname=\"joint_state_publisher_gui\",\n)\nrviz_node = Node(\npackage='rviz2',\nnamespace='',\nexecutable='rviz2',\nname='rviz2',\narguments=['-d' + os.path.join(pkg, 'config', 'rviz.rviz')]\n)\nld.add_action(robot_state_publisher)\nld.add_action(joint_state_publisher_node)\nld.add_action(rviz_node)\nreturn ld\n</code></pre>","tags":["urdf","robot_state_publisher","urdf_to_graphiz"]},{"location":"blog/ROS2/urdf/#vscode","title":"VSCode","text":"<p>Add urdf snippets with urdf extension </p>","tags":["urdf","robot_state_publisher","urdf_to_graphiz"]},{"location":"blog/ROS2/urdf/#reference","title":"Reference","text":"<ul> <li>urdf</li> </ul>","tags":["urdf","robot_state_publisher","urdf_to_graphiz"]},{"location":"blog/ROS2/urdf/gazebo/","title":"URDF gazebo element","text":"<p>The gazebo element is an extension to the URDF robot description format, used for simulation purposes in the Gazebo simulator.</p>","tags":["urdf","gazebo"]},{"location":"blog/ROS2/urdf/gazebo/#demo","title":"Demo","text":"<p>Add gazebo tag to urdf file to control color in gazebo simulator</p>","tags":["urdf","gazebo"]},{"location":"blog/ROS2/urdf/gazebo/#urdf","title":"urdf","text":"basic_gazebo.urdf<pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;robot name='material_example'&gt;\n&lt;link name=\"world\" /&gt;\n&lt;joint name=\"world2link\" type=\"fixed\"&gt;\n&lt;origin xyz=\"0.0 0.0 0.5\" rpy=\"0.0 0.0 0.0\"/&gt;\n&lt;parent link=\"world\"/&gt;\n&lt;child link=\"base_link\"/&gt;\n&lt;/joint&gt;\n&lt;link name='base_link'&gt;\n&lt;inertial&gt;\n&lt;mass value='0.1' /&gt;\n&lt;inertia ixx='0.01' ixy='0' ixz='0' iyy='0.01' iyz='0' izz='0.01' /&gt;\n&lt;/inertial&gt;\n&lt;visual&gt;\n&lt;geometry&gt;\n&lt;sphere radius=\"2\"/&gt;\n&lt;/geometry&gt;\n&lt;material name=\"Cyan\"&gt;\n&lt;color rgba=\"0 1.0 1.0 1.0\" /&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n&lt;gazebo reference='base_link'&gt;\n&lt;material&gt;Gazebo/Orange&lt;/material&gt;\n&lt;/gazebo&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["urdf","gazebo"]},{"location":"blog/ROS2/urdf/gazebo/#launch","title":"launch","text":"urdf_gazebo.launch.py<pre><code>import os\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\n\nURDF = \"basic_gazebo.urdf\"\nPACKAGE = \"gazebo_tutorial_pkg\"\n\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg = get_package_share_directory(PACKAGE)\n    urdf = os.path.join(pkg, \"urdf\", URDF)\n    with open(urdf, \"r\", encoding=\"utf-8\") as f:\n        robot_description = f.read()\n\n    robot_state_publisher = Node(\n        package=\"robot_state_publisher\",\n        executable=\"robot_state_publisher\",\n        name=\"robot_state_publisher\",\n        output=\"screen\",\n        parameters=[{\"robot_description\": robot_description}]\n    )\n\n    ld.add_action(robot_state_publisher)\n    return ld\n</code></pre>","tags":["urdf","gazebo"]},{"location":"blog/ROS2/urdf/gazebo/#rviz","title":"rviz","text":"","tags":["urdf","gazebo"]},{"location":"blog/ROS2/urdf/gazebo/#launch-include-gazebo","title":"launch include gazebo","text":"urdf_gazebo_include.launch.py<pre><code>import os\n\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nimport xacro\nfrom launch_ros.actions import Node\n\nPACKAGE = \"gazebo_tutorial_pkg\"\nURDF = \"basic_gazebo.urdf\"\n\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg = get_package_share_directory(PACKAGE)\n    gazebo_pkg = get_package_share_directory(\"gazebo_ros\")\n\n    gazebo = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(\n            [os.path.join(gazebo_pkg, \"launch\", \"gazebo.launch.py\")]\n        ),\n        launch_arguments={\"verbose\": \"true\"}.items(),\n    )\n\n    robot_description_path = os.path.join(pkg, \"urdf\", URDF)\n    doc = xacro.parse(inp=None, filename=robot_description_path)\n    xacro.process_doc(doc)\n\n    robot_state_publisher = Node(\n        package=\"robot_state_publisher\",\n        executable=\"robot_state_publisher\",\n        parameters=[{\"robot_description\": doc.toxml()}],\n    )\n\n    spawn_entity = Node(\n        package=\"gazebo_ros\",\n        executable=\"spawn_entity.py\",\n        arguments=[\"-entity\", \"demo\", \"-topic\", \"robot_description\", \"-z\", \"0.0\"],\n        output=\"screen\",\n    )\n\n    ld.add_action(gazebo)\n    ld.add_action(robot_state_publisher)\n    ld.add_action(spawn_entity)\n\n    return ld\n</code></pre>","tags":["urdf","gazebo"]},{"location":"blog/ROS2/urdf/joint/","title":"URDF joint element","text":"<p>joint element</p> <p></p>","tags":["urdf","joint"]},{"location":"blog/ROS2/urdf/joint/#joint-types","title":"Joint types","text":"<ul> <li>fixed: All degrees of freedom are locked.</li> <li>continuous: a continuous hinge joint that rotates around the axis and has no upper and lower limits. </li> <li>revolute: a hinge joint that rotates along the axis and has a limited range specified by the upper and lower limits. </li> <li>prismatic: a sliding joint that slides along the axis, and has a limited range specified by the upper and lower limits. </li> <li>floating: this joint allows motion for all 6 degrees of freedom. </li> <li>planar: this joint allows motion in a plane perpendicular to the axis. </li> </ul>","tags":["urdf","joint"]},{"location":"blog/ROS2/urdf/joint/#demo","title":"Demo","text":"<ul> <li>Simulate <code>/joint_state</code> topic with <code>joint_state_publisher_gui</code></li> <li>Launch and show it in <code>rviz</code></li> </ul>","tags":["urdf","joint"]},{"location":"blog/ROS2/urdf/joint/#urdf","title":"urdf","text":"basic_joint.urdf<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;robot name=\"my_robot\"&gt;\n&lt;link name=\"world\" /&gt;\n\n&lt;joint name=\"fixed\" type=\"fixed\"&gt;\n&lt;parent link=\"world\" /&gt;\n&lt;child link=\"link1\" /&gt;\n&lt;/joint&gt;\n\n&lt;!-- Base Link --&gt;\n&lt;link name=\"link1\"&gt;\n&lt;visual&gt;\n&lt;origin xyz=\"0 0 0.5\" rpy=\"0 0 0\" /&gt;\n&lt;geometry&gt;\n&lt;box size=\"0.1 0.1 1\" /&gt;\n&lt;/geometry&gt;\n&lt;material name=\"Green\"&gt;\n&lt;color rgba=\"0 1.0 0 1.0\" /&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n\n&lt;joint name=\"link12link2_joint\" type=\"continuous\"&gt;\n&lt;parent link=\"link1\" /&gt;\n&lt;child link=\"link2\" /&gt;\n&lt;origin xyz=\"0 0.05 1\" rpy=\"0 0 0\" /&gt;\n&lt;axis xyz=\"0 1 0\" /&gt;\n&lt;/joint&gt;\n\n&lt;!-- Middle Link --&gt;\n&lt;link name=\"link2\"&gt;\n&lt;visual&gt;\n&lt;origin xyz=\"0 0.05 0.5\" rpy=\"0 0 0\" /&gt;\n&lt;geometry&gt;\n&lt;box size=\"0.1 0.1 1\" /&gt;\n&lt;/geometry&gt;\n&lt;material name=\"Red\"&gt;\n&lt;color rgba=\"1.0 0 0 1.0\" /&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n\n&lt;/robot&gt;\n</code></pre>","tags":["urdf","joint"]},{"location":"blog/ROS2/urdf/joint/#launch","title":"launch","text":"<ul> <li>Run <code>robot_state_publisher</code></li> <li>Run <code>joint_state_publisher_gui</code></li> </ul> urdf_link.launch.py<pre><code>import os\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\n\nURDF = \"basic_joint.urdf\"\nPACKAGE = \"gazebo_tutorial_pkg\"\n\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg = get_package_share_directory(PACKAGE)\n    urdf = os.path.join(pkg, \"urdf\", URDF)\n    with open(urdf, \"r\", encoding=\"utf-8\") as f:\n        robot_description = f.read()\n\n    robot_state_publisher = Node(\n        package=\"robot_state_publisher\",\n        executable=\"robot_state_publisher\",\n        name=\"robot_state_publisher\",\n        output=\"screen\",\n        parameters=[{\"robot_description\": robot_description}]\n    )\n\n    joint_state_publisher_node = Node(\n        package=\"joint_state_publisher_gui\",\n        executable=\"joint_state_publisher_gui\",\n        name=\"joint_state_publisher_gui\",\n    )\n\n    ld.add_action(robot_state_publisher)\n    ld.add_action(joint_state_publisher_node)\n    return ld\n</code></pre>","tags":["urdf","joint"]},{"location":"blog/ROS2/urdf/joint/#rviz","title":"rviz","text":"run rviz<pre><code>rviz2\n</code></pre>","tags":["urdf","joint"]},{"location":"blog/ROS2/urdf/link/","title":"URDF Link","text":"<p>link element</p> <p></p>","tags":["urdf","link"]},{"location":"blog/ROS2/urdf/link/#demo","title":"Demo","text":"","tags":["urdf","link"]},{"location":"blog/ROS2/urdf/link/#urdf","title":"urdf","text":"<ul> <li>box origin reference to world2link_joint</li> <li>Add link with</li> <li>visual</li> <li>collision</li> <li>inertial</li> <li>Add material to visual part</li> </ul> <p>Note</p> <p>The material definition relative only to RVIZ</p> basic_link.urdf<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;robot name=\"my_robot\"&gt;\n&lt;link name=\"world\" /&gt;\n&lt;joint name=\"world2link\" type=\"fixed\"&gt;\n&lt;origin xyz=\"0.0 0.0 0.0\" rpy=\"0.0 0.0 0.0\"/&gt;\n&lt;parent link=\"world\"/&gt;\n&lt;child link=\"link\"/&gt;\n&lt;/joint&gt;\n&lt;link name=\"link\"&gt;\n&lt;inertial&gt;\n&lt;origin xyz=\"0 0 0.5\" rpy=\"0 0 0\" /&gt;\n&lt;mass value=\"1\" /&gt;\n&lt;inertia ixx=\"100\" ixy=\"0\" ixz=\"0\" iyy=\"100\" iyz=\"0\" izz=\"100\" /&gt;\n&lt;/inertial&gt;\n&lt;visual&gt;\n&lt;origin xyz=\"0 0 0.5\" rpy=\"0 0 0\" /&gt;\n&lt;geometry&gt;\n&lt;box size=\"1 1 1\" /&gt;\n&lt;/geometry&gt;\n&lt;material name=\"Cyan\"&gt;\n&lt;color rgba=\"0 1.0 1.0 1.0\" /&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n&lt;collision&gt;\n&lt;origin xyz=\"0 0 0.5\" rpy=\"0 0 0\" /&gt;\n&lt;geometry&gt;\n&lt;cylinder radius=\"1\" length=\"0.5\" /&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;/link&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["urdf","link"]},{"location":"blog/ROS2/urdf/link/#launch","title":"launch","text":"urdf_link.launch.py<pre><code>import os\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\n\nURDF = \"basic_link.urdf\"\nPACKAGE = \"gazebo_tutorial_pkg\"\n\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg = get_package_share_directory(PACKAGE)\n    urdf = os.path.join(pkg, \"urdf\", URDF)\n    with open(urdf, \"r\", encoding=\"utf-8\") as f:\n        robot_description = f.read()\n\n    robot_state_publisher = Node(\n        package=\"robot_state_publisher\",\n        executable=\"robot_state_publisher\",\n        name=\"robot_state_publisher\",\n        output=\"screen\",\n        parameters=[{\"robot_description\": robot_description}]\n        # arguments=[urdf],\n    )\n\n    ld.add_action(robot_state_publisher)\n    return ld\n</code></pre>","tags":["urdf","link"]},{"location":"blog/ROS2/urdf/link/#rviz","title":"Rviz","text":"run rviz<pre><code>rviz2\n</code></pre>","tags":["urdf","link"]},{"location":"blog/ROS2/xacro/","title":"Tools","text":"<ul> <li>xacro4sdf</li> </ul>","tags":["xacro"]},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/","title":"LAB","text":"<ul> <li>Control xacro from outside with args</li> <li>Bind xacro args to launch args</li> </ul>","tags":["xacro","tutorial","launch"]},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#xacro","title":"xacro","text":"<ul> <li>Simple xacro file with <code>arg</code> and <code>if</code></li> </ul> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n&lt;xacro:arg name=\"with_gripper\" default=\"true\" /&gt;\n&lt;xacro:if value=\"$(arg with_gripper)\"&gt;\n&lt;!--with gripper--&gt;\n&lt;/xacro:if&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["xacro","tutorial","launch"]},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#launch","title":"launch","text":"<ul> <li>using <code>command</code></li> <li>using <code>OpaqueFunction</code> function to get <code>LaunchContext</code> for substitute</li> </ul>","tags":["xacro","tutorial","launch"]},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#command","title":"Command","text":"command<pre><code>import os\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.substitutions import LaunchConfiguration, Command\nfrom launch.actions import DeclareLaunchArgument, LogInfo\nPACKAGE = \"basic_mobile_robot\"\nSDF = \"arg.sdf.xacro\"\ndef generate_launch_description():\nwith_grip = LaunchConfiguration('with_gripper')\npkg = get_package_share_directory(PACKAGE)\nrobot_description_path = os.path.join(pkg, \"demos\", \"xacros\", SDF)\nrobot_description = Command(['xacro ', \\\n        robot_description_path, \" \", \"with_gripper:=\", with_grip])\nlog = LogInfo(msg=robot_description)\narg = DeclareLaunchArgument(\n'with_gripper',\ndefault_value='true',\ndescription='Use grip')\nreturn LaunchDescription([\narg,\nlog\n])\n</code></pre>","tags":["xacro","tutorial","launch"]},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#opaquefunction","title":"OpaqueFunction","text":"test_xacro.launch.py<pre><code>import os\nfrom ament_index_python import get_package_share_directory\nfrom launch import LaunchDescription, LaunchContext\nfrom launch.actions import DeclareLaunchArgument, OpaqueFunction\nfrom launch.substitutions import LaunchConfiguration\nimport xacro\nPACKAGE = \"basic_mobile_robot\"\nSDF = \"arg.sdf.xacro\"\ndef generate_launch_description():\npkg = get_package_share_directory(PACKAGE)\nrobot_description_path = os.path.join(pkg, \"demos\", \"xacros\")\nrobot_description_file = os.path.join(robot_description_path, SDF)\nrobot_description_file_out = os.path.join(robot_description_path, \"arg.sdf\")\nwith_gripper_arg = DeclareLaunchArgument(\n'with_gripper',\ndefault_value=\"true\",\ndescription=\"use with_gripper\"\n)\ndef render_xacro(context: LaunchContext, grip_arg):\ngrip_arg_str = context.perform_substitution(grip_arg)\ndoc = xacro.parse(open(robot_description_file))\nxacro.process_doc(doc, mappings={\"with_gripper\": grip_arg_str})\nout = xacro.open_output(robot_description_file_out)\nout.write(doc.toprettyxml(indent='  '))\nfunc = OpaqueFunction(function=render_xacro, args=[LaunchConfiguration('with_gripper')])\nld = LaunchDescription()\nld.add_action(with_gripper_arg)\nld.add_action(func)\nreturn ld\n</code></pre>","tags":["xacro","tutorial","launch"]},{"location":"blog/ROS2/xacro/tutorial/pass_arg_to_xacro/#usage","title":"usage","text":"<pre><code>ros2 launch basic_mobile_robot test_xacro.launch.py with_gripper:=\"true\"\n</code></pre>","tags":["xacro","tutorial","launch"]},{"location":"blog/embedded/cross-compiler/hello-cc/","title":"cross compiler hello","text":"<p>A cross compiler is a compiler capable of creating executable code for a platform other than the one on which the compiler is running (wikipedia)</p>","tags":["cross-compiler"]},{"location":"blog/embedded/cross-compiler/hello-cc/#install-cross-compiler","title":"install cross compiler","text":"install crosscompiler tools<pre><code>sudo apt install crossbuild-essential-arm64\n</code></pre>","tags":["cross-compiler"]},{"location":"blog/embedded/cross-compiler/hello-cc/#toolchain-setting-file","title":"toolchain setting file","text":"aarch64-linux-gnu-toolchain.cmake<pre><code>set(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR \"aarch64\")\nset(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)\nset(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)\nset(CMAKE_CUDA_COMPILER nvcc)\nset(CMAKE_CUDA_HOST_COMPILER aarch64-linux-gnu-gcc)\nset(CMAKE_FIND_ROOT_PATH \"/usr/aarch64-linux-gnu\")\n\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n</code></pre>","tags":["cross-compiler"]},{"location":"blog/embedded/cross-compiler/hello-cc/#demo","title":"demo","text":"<pre><code>\u251c\u2500\u2500 aarch64-linux-gnu-toolchain.cmake\n\u251c\u2500\u2500 build\n\u251c\u2500\u2500 CMakeLists.txt\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 hello.cpp\n</code></pre>","tags":["cross-compiler"]},{"location":"blog/embedded/cross-compiler/hello-cc/#code","title":"code","text":"<pre><code>#include &lt;iostream&gt;\n\nint main(){\nstd::cout &lt;&lt; \"hello cross compiler\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> <pre><code>cmake_minimum_required(VERSION 3.15)\n# Toolchain settings\nset(CMAKE_TOOLCHAIN_FILE aarch64-linux-gnu-toolchain.cmake)\n\nproject(CrossCompiler_demo)\n\nadd_executable(hello_cc src/hello.cpp)\n</code></pre> <p>Warning</p> <p>It is crucial to set the value of CMAKE_TOOLCHAIN_FILE before <code>project()</code> is invoked, because <code>project()</code> triggers toolchain detection and verification.</p>","tags":["cross-compiler"]},{"location":"blog/embedded/cross-compiler/hello-cc/#cmake-gui","title":"cmake gui","text":"<ul> <li>using cmake gui</li> <li>set cross compiler settings from file</li> <li></li> </ul>","tags":["cross-compiler"]},{"location":"blog/embedded/cross-compiler/hello-cc/#make-check-run","title":"make, check, run","text":"","tags":["cross-compiler"]},{"location":"blog/embedded/cross-compiler/hello-cc/#make","title":"make","text":"<ul> <li>Run <code>make</code> from <code>build</code> folder</li> <li>Check executable arch with <code>file</code> command</li> <li>Run with qemu or Copy to embedded device</li> </ul>","tags":["cross-compiler"]},{"location":"blog/embedded/cross-compiler/hello-cc/#check","title":"check","text":"<pre><code>cd build\n# Result\nfile hello_cc \nhello_cc: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID[sha1]=5425e3fd790ba1a6a07c4963f0606a58edf53aa7, for GNU/Linux 3.7.0, not stripped\n</code></pre>","tags":["cross-compiler"]},{"location":"blog/embedded/cross-compiler/hello-cc/#run","title":"run","text":"<p>Run ARM binary using <code>qemu</code></p> <pre><code>sudo apt-get install qemu-user-static\n</code></pre> <pre><code># from build folder\nqemu-arm-static -L /usr/arm-linux-gnueabihf ./hello_cc\n</code></pre>","tags":["cross-compiler"]},{"location":"blog/embedded/cross-compiler/hello-cc/#ref","title":"Ref","text":"<ul> <li>How to cross-compile for embedded with CMake like a champ</li> <li>How to Cross Compile OpenCV and MXNET for NVIDIA Jetson </li> </ul>","tags":["cross-compiler"]},{"location":"blog/embedded/jetson/nano/","title":"Jetson Nano","text":"/ansible/roles/jetson/defaults/main.yaml<pre><code>---\nubuntu_release: focal\n\nnew_user:\nname: user\nshell: /bin/bash\npassword: user\n</code></pre>","tags":["nvidia","nano"]},{"location":"blog/embedded/jetson/nano/#reference","title":"Reference","text":"<ul> <li>Create your own image for jetson nano board</li> </ul>","tags":["nvidia","nano"]},{"location":"blog/embedded/rpi/rpi_servo_pwm/","title":"Running servo motor from RPI","text":"<pre><code>pip install RPi.GPIO\n</code></pre>","tags":["rpi"]},{"location":"blog/embedded/rpi/rpi_servo_pwm/#reference","title":"Reference","text":"<ul> <li>https://www.iottechtrends.com/use-servo-motor-with-raspberry-pi/</li> </ul>","tags":["rpi"]},{"location":"blog/gazebo/color_and_texture/","title":"Gazebo color texture and meshes","text":"","tags":["gazebo","texture"]},{"location":"blog/gazebo/color_and_texture/#demo","title":"Demo","text":"","tags":["gazebo","texture"]},{"location":"blog/gazebo/color_and_texture/#basic-sdf","title":"basic sdf","text":"","tags":["gazebo","texture"]},{"location":"blog/gazebo/color_and_texture/#model-folder-struct","title":"model folder struct","text":"<pre><code>\u2514\u2500\u2500 simple_box\n    \u251c\u2500\u2500 model.config\n    \u2514\u2500\u2500 model.sdf\n</code></pre>","tags":["gazebo","texture"]},{"location":"blog/gazebo/color_and_texture/#files","title":"files","text":"model.config<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;model&gt;\n&lt;name&gt;simple_box&lt;/name&gt;\n&lt;version&gt;1.0&lt;/version&gt;\n&lt;sdf version=\"1.5\"&gt;model.sdf&lt;/sdf&gt;\n&lt;author&gt;\n&lt;name&gt;&lt;/name&gt;\n&lt;email&gt;&lt;/email&gt;\n&lt;/author&gt;\n&lt;description&gt;\n&lt;/description&gt;\n&lt;/model&gt; </code></pre> sdf<pre><code>&lt;?xml version='1.0'?&gt;\n&lt;sdf version=\"1.4\"&gt;\n&lt;model name=\"simple_box\"&gt;\n&lt;pose&gt;0 0 0.5 0 0 0&lt;/pose&gt;\n&lt;static&gt;true&lt;/static&gt;\n&lt;link name=\"link\"&gt;\n&lt;inertial&gt;\n&lt;mass&gt;1.0&lt;/mass&gt;\n&lt;inertia&gt; &lt;!-- inertias are tricky to compute --&gt;\n&lt;!-- http://gazebosim.org/tutorials?tut=inertia&amp;cat=build_robot --&gt;\n&lt;ixx&gt;0.083&lt;/ixx&gt;       &lt;!-- for a box: ixx = 0.083 * mass * (y*y + z*z) --&gt;\n&lt;ixy&gt;0.0&lt;/ixy&gt;         &lt;!-- for a box: ixy = 0 --&gt;\n&lt;ixz&gt;0.0&lt;/ixz&gt;         &lt;!-- for a box: ixz = 0 --&gt;\n&lt;iyy&gt;0.083&lt;/iyy&gt;       &lt;!-- for a box: iyy = 0.083 * mass * (x*x + z*z) --&gt;\n&lt;iyz&gt;0.0&lt;/iyz&gt;         &lt;!-- for a box: iyz = 0 --&gt;\n&lt;izz&gt;0.083&lt;/izz&gt;       &lt;!-- for a box: izz = 0.083 * mass * (x*x + y*y) --&gt;\n&lt;/inertia&gt;\n&lt;/inertial&gt;\n&lt;collision name=\"collision\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;1 1 1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;1 1 1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n&lt;/model&gt;\n&lt;/sdf&gt;\n</code></pre>","tags":["gazebo","texture"]},{"location":"blog/gazebo/color_and_texture/#predefine-color","title":"predefine color","text":"<ul> <li>using predefine script</li> </ul> <pre><code>&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;1 1 1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;material&gt;\n&lt;script&gt;\n&lt;uri&gt;file://media/materials/scripts/gazebo.material&lt;/uri&gt;\n&lt;name&gt;Gazebo/Red&lt;/name&gt;\n&lt;/script&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n</code></pre> <p>materials list</p> <p>list of materials define in gazebo file <code>/usr/share/gazebo-11/media/materials/scripts/gazebo.material</code> for example the RED definition </p> <pre><code>material Gazebo/Red\n{\ntechnique\n{\n    pass ambient\n    {\n    ambient 1 0 0\n    diffuse 1 0 0\n    specular 0.1 0.1 0.1 1 1\n    }\n}\n}\n</code></pre> <p></p>","tags":["gazebo","texture"]},{"location":"blog/gazebo/color_and_texture/#custom-color","title":"Custom color","text":"<pre><code>&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;1 1 1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;material&gt; &lt;!-- LED material --&gt;\n&lt;ambient&gt;0 0 0 1&lt;/ambient&gt;\n&lt;diffuse&gt;0 0 0 1&lt;/diffuse&gt;\n&lt;specular&gt;0 0 0 0&lt;/specular&gt;\n&lt;emissive&gt;0 1 0 1&lt;/emissive&gt;\n&lt;/material&gt; &lt;!-- End LED material --&gt;\n&lt;/visual&gt;\n</code></pre>","tags":["gazebo","texture"]},{"location":"blog/gazebo/color_and_texture/#texture","title":"Texture","text":"<pre><code>\u2514\u2500\u2500 simple_box\n    \u251c\u2500\u2500 materials\n    \u2502   \u251c\u2500\u2500 scripts\n    \u2502   \u2502   \u2514\u2500\u2500 simple_box.material\n    \u2502   \u2514\u2500\u2500 textures\n    \u2502       \u2514\u2500\u2500 seamless_texture.png\n    \u251c\u2500\u2500 model.config\n    \u2514\u2500\u2500 model.sdf\n</code></pre> simple_box.material<pre><code>material wood/light\n{\ntechnique\n{\npass\n{\ntexture_unit\n{\n// Relative to the location of the material script\ntexture ../textures/seamless_texture.png\n// Repeat the texture over the surface (4 per face)\nscale 0.5 0.5\n}\n}\n}\n}\n</code></pre> <pre><code>&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;1 1 1&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;material&gt;\n&lt;script&gt;\n&lt;uri&gt;file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/scripts&lt;/uri&gt;\n&lt;uri&gt;file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/textures&lt;/uri&gt;\n&lt;name&gt;wood/light&lt;/name&gt;\n&lt;/script&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n</code></pre> <p>uri</p> <p>use <code>model uri</code> and set <code>GAZEBO_MODEL_PATH</code> or use <code>file://</code> to set absolute path</p> <p></p>","tags":["gazebo","texture"]},{"location":"blog/gazebo/color_and_texture/#stl-mesh","title":"stl mesh","text":"<p>Warning</p> <ul> <li>STL: does not support colors and texturing</li> <li>Collada (.dae): support color and texture</li> </ul>","tags":["gazebo","texture"]},{"location":"blog/gazebo/color_and_texture/#stl-color","title":"stl color","text":"<pre><code>&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;mesh&gt;\n&lt;uri&gt;file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/meshes/cube_20k.stl&lt;/uri&gt;\n&lt;scale&gt;0.25 0.25 0.25&lt;/scale&gt;\n&lt;/mesh&gt;\n&lt;/geometry&gt;\n&lt;material&gt;\n&lt;script&gt;\n&lt;uri&gt;file://media/materials/scripts/gazebo.material&lt;/uri&gt;\n&lt;name&gt;Gazebo/Red&lt;/name&gt;\n&lt;/script&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n</code></pre>","tags":["gazebo","texture"]},{"location":"blog/gazebo/color_and_texture/#stl-with-texture","title":"stl with texture","text":"<pre><code>&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;mesh&gt;\n&lt;uri&gt;file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/meshes/cube_20k.stl&lt;/uri&gt;\n&lt;scale&gt;0.5 0.5 0.5&lt;/scale&gt;\n&lt;/mesh&gt;\n&lt;/geometry&gt;\n&lt;material&gt;\n&lt;script&gt;\n&lt;uri&gt;file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/scripts&lt;/uri&gt;\n&lt;uri&gt;file:///home/user/dev_ws/src/rrbot/rrbot_description/models/simple_box/materials/textures&lt;/uri&gt;\n&lt;name&gt;wood/light&lt;/name&gt;\n&lt;/script&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n</code></pre>","tags":["gazebo","texture"]},{"location":"blog/gazebo/color_and_texture/#collada--dea","title":"Collada / dea","text":"<p>Example from gazebo_models</p> <p>library_images<pre><code>&lt;library_images&gt;\n&lt;image id=\"start_pad_png\" name=\"start_pad_png\"&gt;\n&lt;init_from&gt;end_pad.png&lt;/init_from&gt;\n&lt;/image&gt;\n&lt;/library_images&gt;\n</code></pre> </p>","tags":["gazebo","texture"]},{"location":"blog/gazebo/color_and_texture/#reference","title":"Reference","text":"<ul> <li>Color And Texture Models</li> </ul>","tags":["gazebo","texture"]},{"location":"blog/gazebo/sdf/","title":"SDF","text":"<p>SDFormat (Simulation Description Format), sometimes abbreviated as SDF, is an XML format that describes objects and environments for robot simulators, visualization, and control. \u2026</p>","tags":["sdf","gazebo","xacro","vscode"]},{"location":"blog/gazebo/sdf/#using-xacro-to-generate-sdf","title":"Using XACRO to generate sdf","text":"<ul> <li>Using XACRO extension to generate SDF more easily and quickly </li> <li>Using VSCode extension to run xacro tool, every time we save the file.</li> <li>Source file with <code>sdf.xacro</code> extension generate <code>sdf</code> file</li> </ul>","tags":["sdf","gazebo","xacro","vscode"]},{"location":"blog/gazebo/sdf/#config","title":"config","text":"<pre><code>\"emeraldwalk.runonsave\": {\n\"commands\": [\n{\n\"match\": \".sdf.xacro\",\n\"cmd\": \"/opt/ros/humble/bin/xacro ${file} &gt; ${fileDirname}/${fileBasenameNoExt}\"\n}\n]\n}\n</code></pre>","tags":["sdf","gazebo","xacro","vscode"]},{"location":"blog/gazebo/sdf/#vscode-settings","title":"VSCode settings","text":"","tags":["sdf","gazebo","xacro","vscode"]},{"location":"blog/gazebo/sdf/#file-associations","title":"file associations","text":"<pre><code>\"files.associations\": {\n\"*.sdf\": \"xml\",\n\"*.model.config\": \"xml\"\n},\n</code></pre>","tags":["sdf","gazebo","xacro","vscode"]},{"location":"blog/gazebo/sdf/joints/","title":"SDF joins","text":"<p>A joint connects two links with kinematic and dynamic properties. By default, the pose of a joint is expressed in the child link frame.</p>","tags":["sdf","gazebo","joints"]},{"location":"blog/gazebo/sdf/joints/#joint-types","title":"Joint Types","text":"<ul> <li>Fixed</li> <li>Revolute</li> <li>Gearbox</li> <li>Revolute2</li> <li>Prismatic</li> <li>Ball</li> <li>Screw</li> <li>Universal</li> </ul>","tags":["sdf","gazebo","joints"]},{"location":"blog/gazebo/sdf/joints/#demo-demo_joint_types","title":"Demo: demo_joint_types","text":"<p>demo_joint_types github</p> <p></p>","tags":["sdf","gazebo","joints"]},{"location":"blog/gazebo/sdf/joints/#demo-frame-and-relative_to-pose-attribute","title":"Demo: Frame and Relative_to Pose attribute","text":"relative_to<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;sdf version=\"1.7\"&gt;\n&lt;model name='my_model'&gt;\n&lt;link name=\"link1\"&gt;\n&lt;pose &gt;0 0 0.25 0 0 0&lt;/pose&gt;\n&lt;collision name=\"collision1\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;0.5 0.5 0.5&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual name=\"visual1\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;0.5 0.5 0.5&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;material&gt;\n&lt;script&gt;\n&lt;uri&gt;file://media/materials/scripts/gazebo.material&lt;/uri&gt;\n&lt;name&gt;Gazebo/Red&lt;/name&gt;\n&lt;/script&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n&lt;joint name=\"l12l2_joint\" type=\"fixed\"&gt;\n&lt;parent&gt;link1&lt;/parent&gt;\n&lt;child&gt;link2&lt;/child&gt;\n&lt;pose relative_to=\"link1\"&gt;0.30 0 0 0 0 0&lt;/pose&gt;\n&lt;/joint&gt;\n&lt;link name=\"link2\"&gt;\n&lt;pose relative_to=\"l12l2_joint\"&gt;0.25 0 0 0 0 0&lt;/pose&gt;\n&lt;collision name=\"collision\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;0.5 0.5 0.5&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;0.5 0.5 0.5&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;material&gt;\n&lt;script&gt;\n&lt;uri&gt;file://media/materials/scripts/gazebo.material&lt;/uri&gt;\n&lt;name&gt;Gazebo/Green&lt;/name&gt;\n&lt;/script&gt;\n&lt;/material&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n&lt;/model&gt;\n&lt;/sdf&gt;\n</code></pre>","tags":["sdf","gazebo","joints"]},{"location":"blog/gazebo/xacro/","title":"xacro hello","text":"","tags":["xacro"]},{"location":"blog/gazebo/xacro/#install","title":"Install","text":"<pre><code>sudo apt install ros-&lt;version&gt;-xacro\n</code></pre>","tags":["xacro"]},{"location":"blog/gazebo/xacro/#usage","title":"usage","text":"<pre><code>xacro hello.xacro &gt; hello.xml\n</code></pre>","tags":["xacro"]},{"location":"blog/gazebo/xacro/#include","title":"include","text":"<p>include other xacro file</p>","tags":["xacro"]},{"location":"blog/gazebo/xacro/#xacroinclude-filenameother_filexacro-xacroinclude-filenamecwdother_filexacro-","title":"<pre><code>&lt;xacro:include filename=\"other_file.xacro\" /&gt;\n&lt;xacro:include filename=\"$(cwd)/other_file.xacro\" /&gt;\n</code></pre>","text":"","tags":["xacro"]},{"location":"blog/gazebo/xacro/#args","title":"args","text":"<ul> <li>decalre <code>arg</code></li> <li><code>arg</code> usage</li> </ul> demo<pre><code>\n</code></pre> <p>Note</p> <p>passing argument from cli :=","tags":["xacro"]},{"location":"blog/gazebo/xacro/#demo-result","title":"demo result","text":"<pre><code># run without argument\nxacro hello.xacro &gt; hello.xml\n\n# run with argument\nxacro hello.xacro &gt; hello.xml var:=10\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!-- =================================================================================== --&gt;\n&lt;!-- |    This document was autogenerated by xacro from /home/user/projects/blog/examples/gazebo/xacro/hello.xacro | --&gt;\n&lt;!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | --&gt;\n&lt;!-- =================================================================================== --&gt;\n&lt;robot name=\"\"&gt;\n&lt;data&gt;10&lt;/data&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["xacro"]},{"location":"blog/gazebo/xacro/#property","title":"property","text":"property<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"prop\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n&lt;xacro:property name=\"prop1\" value=\"0.1\" /&gt;\n\n&lt;data&gt;${prop1}&lt;/data&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["xacro"]},{"location":"blog/gazebo/xacro/#output","title":"output","text":"<pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;robot name=\"prop\"&gt;\n&lt;data&gt;0.1&lt;/data&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["xacro"]},{"location":"blog/gazebo/xacro/#condition","title":"condition","text":"macro<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"condition\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n&lt;xacro:property name=\"check\" value=\"2\" /&gt;\n&lt;xacro:if value=\"${check == 1}\"&gt;\ncode for create A &lt;/xacro:if&gt;\n&lt;!-- run if condition not true --&gt;\n&lt;xacro:unless value=\"${check == 1}\"&gt;\ncode for create B &lt;/xacro:unless&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["xacro"]},{"location":"blog/gazebo/xacro/#macros","title":"macros","text":"macro<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"macro\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n&lt;xacro:macro name=\"default_origin\" params=\"x y z\"&gt;\n&lt;origin xyz=\"${x} ${y} ${z}\" rpy=\"0 0 0\"/&gt;\n&lt;/xacro:macro&gt;\n&lt;xacro:default_origin x=\"1\" y=\"2\" z=\"3\"/&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["xacro"]},{"location":"blog/gazebo/xacro/#output_1","title":"output","text":"<pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;robot name=\"macro\"&gt;\n&lt;origin rpy=\"0 0 0\" xyz=\"1 2 3\"/&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["xacro"]},{"location":"blog/gazebo/xacro/#loops","title":"loops","text":"loops<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"loop\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\"&gt;\n&lt;xacro:property name=\"items\" value=\"${[1,2,3,4,5]}\" /&gt;\n\n&lt;xacro:macro name=\"loop\" params=\"items:=^\"&gt;\n&lt;xacro:if value=\"${items}\"&gt;\n&lt;!-- pop first item from list --&gt;\n&lt;xacro:property name=\"item\" value=\"${items.pop(0)}\"/&gt;\n\n&lt;item&gt;${item}&lt;/item&gt;\n\n&lt;!-- recursively call myself --&gt;\n&lt;xacro:loop/&gt;\n&lt;/xacro:if&gt;\n&lt;/xacro:macro&gt;\n&lt;xacro:loop items=\"${items}\" /&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["xacro"]},{"location":"blog/gazebo/xacro/#output_2","title":"output","text":"<pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;robot name=\"loop\"&gt;\n&lt;item&gt;1&lt;/item&gt;\n&lt;item&gt;2&lt;/item&gt;\n&lt;item&gt;3&lt;/item&gt;\n&lt;item&gt;4&lt;/item&gt;\n&lt;item&gt;5&lt;/item&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["xacro"]},{"location":"blog/linux/hello_tmux/","title":"tmux","text":"","tags":["tmux","tmuxp",101]},{"location":"blog/linux/hello_tmux/#install","title":"install","text":"<pre><code>sudo apt install tmux\n</code></pre>","tags":["tmux","tmuxp",101]},{"location":"blog/linux/hello_tmux/#config-file","title":"config file","text":"<p><code>~/.tmux.conf</code> or <code>/etc/tmux.conf</code></p> <p>```bash title=\u201dremap prefix from \u2018C-b\u2019 to \u2018C-a\u2019 unbind C-b set-option -g prefix C-a bind-key C-a send-prefix <pre><code>```bash title=\"close session\"\nbind C-c kill-session\n</code></pre></p> support mouse<pre><code>set -g mouse on\n</code></pre>","tags":["tmux","tmuxp",101]},{"location":"blog/linux/hello_tmux/#like-terminator","title":"like terminator","text":"<ul> <li>split windows to pane</li> <li>resize window</li> <li>navigate panes (need to resolve)</li> </ul> terminator short cuts<pre><code> # do like terminator\nbind -n C-E split-window -h\nbind -n C-S-Left resize-pane -L 3\nbind -n C-S-Right resize-pane -R 3\nbind -n C-S-Up resize-pane -U 3\nbind -n C-S-Down resize-pane -D 3\nbind -n C-O split-window -v\n\n# switch panes using Alt-arrow without prefix (not working)\nbind -n M-Left select-pane -L\nbind -n M-Right select-pane -R\nbind -n M-Up select-pane -U\nbind -n M-Down select-pane -D\n</code></pre>","tags":["tmux","tmuxp",101]},{"location":"blog/linux/hello_tmux/#tmuxp","title":"tmuxp","text":"<p>A session manager for tmux</p>","tags":["tmux","tmuxp",101]},{"location":"blog/linux/hello_tmux/#install_1","title":"install","text":"install<pre><code>sudo apt install tmuxp\n#or\npip install --user tmuxp\n</code></pre>","tags":["tmux","tmuxp",101]},{"location":"blog/linux/hello_tmux/#config-file_1","title":"config file","text":"<ul> <li>session_name</li> <li>list of <code>windows</code></li> <li>list of <code>panes</code> for every window in <code>windows</code></li> </ul> config.yaml<pre><code>session_name: 2-pane-vertical\nwindows:\n- window_name: my test window\npanes:\n- echo hello\n- echo hello\n</code></pre>","tags":["tmux","tmuxp",101]},{"location":"blog/linux/hello_tmux/#usage","title":"usage","text":"<pre><code>tmuxp load config.yaml\n</code></pre>","tags":["tmux","tmuxp",101]},{"location":"blog/linux/hello_tmux/#tmux-conf-example","title":"tmux conf example","text":"~/.tmux.conf<pre><code># unbind\nunbind C-b\nunbind '\"'\nunbind %\n\n# base1 numbering\nset -g base-index 1\nsetw -g pane-base-index 1\n\n#bind ctrl-a as a prefix\nset-option -g prefix C-a\nbind-key C-a send-prefix\n# kill session\nbind C-c kill-session\n\n# mouse\nset -g mouse on\n\n # do like terminator\nbind -n C-E split-window -h\nbind -n C-S-Left resize-pane -L 3\nbind -n C-S-Right resize-pane -R 3\nbind -n C-S-Up resize-pane -U 3\nbind -n C-S-Down resize-pane -D 3\nbind -n C-O split-window -v\n\n# switch panes using Alt-arrow without prefix (not working)\nbind -n M-Left select-pane -L\nbind -n M-Right select-pane -R\nbind -n M-Up select-pane -U\nbind -n M-Down select-pane -D\n\n# Shift arrow to switch windows\n\nbind n next-window\nbind p previous-window\n\nbind c new-window -c \"#{pane_current_path}\"\n\nbind r source-file ~/.tmux.conf\n</code></pre>","tags":["tmux","tmuxp",101]},{"location":"blog/linux/loop_device/","title":"loop devices","text":"<p>A loop device can take file and create pseudo block device</p> <p>using <code>losetup</code> command we can create and manage loop devices.</p>","tags":["loop device"]},{"location":"blog/linux/loop_device/#create-loop-device","title":"create loop device","text":"create file<pre><code># Create 50M file\ndd if=/dev/zero of=blockfile bs=1M count=50\n</code></pre> create loop device<pre><code>sudo losetup /dev/loop100 blockfile\n</code></pre> <p>Create device partition like any other block device</p> <pre><code>sudo parted -s /dev/loop100 mklabel msdos\nsudo parted -s /dev/loop100 mkpart primary 1MiB 100%\nsudo mkfs.ext4 /dev/loop100p1\n</code></pre> <pre><code># mount\nsudo mount /dev/loop100p1 /mnt/loop\n\n# umount\numount /mnt/loop\n</code></pre>","tags":["loop device"]},{"location":"blog/linux/loop_device/#mount-block-file","title":"mount block file","text":"<pre><code>sfdisk -d blockfile #\nlabel: dos\nlabel-id: 0x7f02b152\ndevice: blockfile\nunit: sectors\nsector-size: 512\nblockfile1 : start=        2048, size=      100352, type=83\n</code></pre> <pre><code>echo $((2048 * 512)) $((100352 * 512))\n#\n1048576 51380224\n</code></pre>","tags":["loop device"]},{"location":"blog/linux/loop_device/#mount-loop-devicesudo-mount--o-loopoffset1048576sizelimit51380224-blockfile-mnt","title":"mount loop device<pre><code>sudo mount -o loop,offset=1048576,sizelimit=51380224 ~/blockfile ~/mnt\n</code></pre>","text":"","tags":["loop device"]},{"location":"blog/linux/loop_device/#reference","title":"Reference","text":"<ul> <li>How to create loop devices on Linux</li> <li>Mounting a partition in a loop device</li> </ul>","tags":["loop device"]},{"location":"blog/linux/minimal_rootfs/","title":"Create minimal rootfs for embedded device like jetson nano and rpi","text":"","tags":["rootfs","embedded"]},{"location":"blog/linux/minimal_rootfs/#step-1---minimal-root","title":"step 1 - minimal root","text":"<pre><code># debootstrap --arch $ARCH $RELEASE  $DIR [$MIRROR]\n# debootstrap --arch=arm64 focal rootfs\ndebootstrap --arch=arm64 --foreign --verbose focal rootfs\n</code></pre> <p>ubuntu versions</p> Version code name 22.04 Jammy Jellyfish 20.04 Focal Fossa 1804 Bionic Beaver <p>\u2013foreign:     Do the initial unpack phase of bootstrapping only, for example if the target architecture does not match the host architecture.  The first stage downloads the needed .deb files and unpacks them into the directory you specify</p> <p>\u2013verbose     Produce more info about downloading.</p>","tags":["rootfs","embedded"]},{"location":"blog/linux/minimal_rootfs/#second-stage","title":"second-stage","text":"<p>The second stage runs all of the package configuration scripts, which must be done using the target architecture (or by using qemu-user-static to emulate the target architecture).</p> <p>qemu</p> install<pre><code>sudo apt install qemu-static-user binfmt-support\n</code></pre> copy into rootfs<pre><code>install -Dm755 $(which qemu-aarch64-static) rootfs/usr/bin/qemu-aarch64-static\n</code></pre>","tags":["rootfs","embedded"]},{"location":"blog/linux/minimal_rootfs/#mount","title":"mount","text":"<p>bind</p> <p>A bind mount takes an existing directory tree and replicates it under a different point. </p> <pre><code>mount --bind /some/where /else/where\n</code></pre>","tags":["rootfs","embedded"]},{"location":"blog/linux/minimal_rootfs/#reference","title":"Reference","text":"<ul> <li>nvidia minimal RootFS</li> <li>Jetson Linux</li> <li>Rolling your own minimal embedded Linux for the Raspberry Pi</li> </ul>","tags":["rootfs","embedded"]},{"location":"blog/linux/move_to_zsh/","title":"Reference","text":"<ul> <li>Install Oh My Zsh on Ubuntu For a Next Level Command-Line</li> </ul>","tags":["zah","linux"]},{"location":"blog/linux/safe-rm/","title":"Safe-rm","text":"<p>safe-rm prevents the accidental deletion of important files by replacing rm with a wrapper which checks the given arguments against a configurable blacklist of files and directories which should never be removed.</p> <pre><code>sudo apt install safe-rm\n</code></pre>","tags":["linux","rm","ubuntu"]},{"location":"blog/linux/safe-rm/#config","title":"config","text":"","tags":["linux","rm","ubuntu"]},{"location":"blog/linux/safe-rm/#path","title":"path","text":"<ul> <li>create soft link between safe-rm to <code>rm</code> in folder according to path priority</li> </ul> <pre><code># check rm location\nwhich rm\n\n# check safe-rm location\nwhich safe-rm\n\n# check path folder order\necho $PATH\n\n# crate soft link in the right location\n\n# set at user level\nln -s /usr/bin/safe-rm /home/user/.local/bin/rm\n</code></pre>","tags":["linux","rm","ubuntu"]},{"location":"blog/linux/safe-rm/#blacklist","title":"blacklist","text":"<pre><code># system level\n/etc/safe-rm.conf\n# user level\n~/.config/safe-rm\n</code></pre>","tags":["linux","rm","ubuntu"]},{"location":"blog/linux/safe-rm/#reference","title":"reference","text":"<ul> <li>safe-rm</li> <li>trash-cli</li> </ul>","tags":["linux","rm","ubuntu"]},{"location":"blog/linux/sudo_sudoers/","title":"sudo hello","text":"<p>Sudo is acronym for SuperUser DO Is allow user access restricted files and operations without logging as <code>root</code> user.</p> <p>sudo is a tool install by default on ubuntu system</p>","tags":["sudo","sudoers","nopasswd","visudo"]},{"location":"blog/linux/sudo_sudoers/#sudoers","title":"sudoers","text":"<p><code>/etc/sudoers</code> file contain sudo rule and configurations</p> <pre><code>[username] [any-hostname]=([run-as-username]:[run-as-groupname]) [commands-allowed]\n</code></pre> <p>Tip</p> <p>Add rule to group <code>sudo</code> and not to specific user</p>","tags":["sudo","sudoers","nopasswd","visudo"]},{"location":"blog/linux/sudo_sudoers/#edit","title":"edit","text":"<p>To edit <code>sudoers</code> file we use the <code>visudo</code> command, The command validate the file before saving, </p> <p>visudo prompt</p> <ul> <li>e: edit</li> </ul>","tags":["sudo","sudoers","nopasswd","visudo"]},{"location":"blog/linux/sudo_sudoers/#nopasswd","title":"nopasswd","text":"<p>To grant the permission to run commands as root users without the need of entering the password, set the following line <code>sudoers</code> file. </p> <pre><code>%sudo   ALL=(ALL:ALL) NOPASSWD: apt update\n</code></pre>","tags":["sudo","sudoers","nopasswd","visudo"]},{"location":"blog/linux/sudo_sudoers/#demo","title":"demo","text":"<p>Add rule for user that assign to <code>sudo</code> group to run <code>apt update</code> without password</p> before<pre><code>sudo -l\nMatching Defaults entries for user on lap2:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\n\nUser user may run the following commands on lap2:\n    (ALL : ALL) ALL\n</code></pre>","tags":["sudo","sudoers","nopasswd","visudo"]},{"location":"blog/linux/sudo_sudoers/#edit-sudoers","title":"edit sudoers","text":"<p>mk-!!! tip      Command must be in full path      <pre><code>which apt\n/usr/bin/apt\n</code></pre></p> <pre><code>sudo visudo\n</code></pre> <pre><code># Allow members of group sudo to execute any command\n%sudo   ALL=(ALL:ALL) ALL\n%sudo   ALL=(ALL:ALL) NOPASSWD: /usr/bin/apt\n</code></pre>","tags":["sudo","sudoers","nopasswd","visudo"]},{"location":"blog/linux/sudo_sudoers/#check-user-privilege","title":"check user privilege","text":"<pre><code>sudo -l\nMatching Defaults entries for user on lap2:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\n\nUser user may run the following commands on lap2:\n    (ALL : ALL) ALL\n    (ALL : ALL) NOPASSWD: /usr/bin/apt\n</code></pre>","tags":["sudo","sudoers","nopasswd","visudo"]},{"location":"blog/linux/sudo_sudoers/#test","title":"Test","text":"<ul> <li>kill current user session</li> <li>run apt update the command sitl need to run with sudo</li> </ul> <pre><code>sudo -k\nsudo apt update\n</code></pre>","tags":["sudo","sudoers","nopasswd","visudo"]},{"location":"blog/linux/sudo_sudoers/#demo-ii-using-etcsudoersd","title":"demo II (using /etc/sudoers.d)","text":"<p>The last line in <code>sudoers</code> file <code>@includedir /etc/sudoers.d</code> run rules defined in this folder</p> <p>echo \u201c%sudo   ALL=(ALL:ALL) NOPASSWD: /usr/bin/apt\u201d | sudo tee /etc/sudoers.d/apt</p> <p>Warning</p> <p>the visudo command is the recommended way to update sudoers content, since it protects against many failure modes</p>","tags":["sudo","sudoers","nopasswd","visudo"]},{"location":"blog/linux/sudo_sudoers/#demo_1","title":"demo","text":"<p>Add rule for user that assign to <code>sudo</code> group to <code>mount</code> tmpfs without switch to <code>root</code> and root password</p> <p>run <code>visudo</code> to edit <code>/etc/sudoers</code> file</p> <p>visudo tips</p> <p>Command if visudo found error in <code>sudoers</code> file - e: edit</p> <pre><code>%sudo   ALL=(ALL:ALL) NOPASSWD: /usr/bin/mount -t tmpfs -o size=10m tmpfs /mnt/ramfs \n</code></pre> <ul> <li>list user privileges<pre><code>sudo -l\n#\n...\n\nUser user may run the following commands on lap2:\n    (ALL : ALL) ALL\n    (ALL : ALL) NOPASSWD: /usr/bin/mount -t tmpfs -o size\\=10m tmpfs /mnt/ramfs\n</code></pre></li> </ul> kill current sudo session<pre><code>sudo -k\n</code></pre>","tags":["sudo","sudoers","nopasswd","visudo"]},{"location":"blog/linux/udev/","title":"UDEV custom rules","text":"<p>Udev (userspace /dev) is a Linux sub-system for dynamic device detection and management. Udev is based on rules Every received device event is matched against the set of rules read from files located in <code>/lib/udev/rules.d</code></p> <p>Application and custom rules place under <code>/etc/udev/rules.f</code> folder udev rule files must prefix with number and <code>.rules</code> extension.</p>","tags":["udev","linux","ubuntu"]},{"location":"blog/linux/udev/#device-info--udevadm-info","title":"device info / udevadm info","text":"<p>Query the udev database for device information.</p> <p><pre><code>udevadm info -a -n &lt;device name&gt;\nudevadm info -a -n /dev/sda\nudevadm info /dev/sda\n</code></pre> - -a: Print all sysfs properties of the specified device that can be used            in udev rules to match the specified device. It prints all devices            along the chain, up to the root of sysfs that can be used in udev            rules. - -n: The name of the device node or a symlink to query (/dev/sda)</p>","tags":["udev","linux","ubuntu"]},{"location":"blog/linux/udev/#custom-rule","title":"custom rule","text":"","tags":["udev","linux","ubuntu"]},{"location":"blog/linux/udev/#rule-info-query","title":"rule info query","text":"udevadm info<pre><code>udevadm info /dev/sda                \nP: /devices/pci0000:00/0000:00:14.0/usb3/3-1/3-1.3/3-1.3:1.0/host0/target0:0:0/0:0:0:0/block/sda\nN: sda\nL: 0\nS: disk/by-id/usb-LG_FlashDrive-0:0\nS: disk/by-uuid/63AC-7AA5\nS: disk/by-path/pci-0000:00:14.0-usb-0:1.3:1.0-scsi-0:0:0:0\nS: disk/by-label/my_data\nE: DEVPATH=/devices/pci0000:00/0000:00:14.0/usb3/3-1/3-1.3/3-1.3:1.0/host0/target0:0:0/0:0:0:0/block/sda\nE: DEVNAME=/dev/sda\nE: DEVTYPE=disk\nE: DISKSEQ=36\nE: MAJOR=8\nE: MINOR=0\nE: SUBSYSTEM=block\nE: USEC_INITIALIZED=3012112447\nE: ID_VENDOR=LG\nE: ID_VENDOR_ENC=LG\\x20\\x20\\x20\\x20\\x20\\x20\nE: ID_VENDOR_ID=0ea0\nE: ID_MODEL=FlashDrive\nE: ID_MODEL_ENC=FlashDrive\\x20\\x20\\x20\\x20\\x20\\x20\nE: ID_MODEL_ID=2168\nE: ID_REVISION=2.00\nE: ID_SERIAL=LG_FlashDrive-0:0\nE: ID_TYPE=disk\nE: ID_INSTANCE=0:0\nE: ID_BUS=usb\nE: ID_USB_INTERFACES=:080650:\nE: ID_USB_INTERFACE_NUM=00\nE: ID_USB_DRIVER=usb-storage\nE: ID_PATH=pci-0000:00:14.0-usb-0:1.3:1.0-scsi-0:0:0:0\nE: ID_PATH_TAG=pci-0000_00_14_0-usb-0_1_3_1_0-scsi-0_0_0_0\nE: ID_FS_LABEL=my_data\nE: ID_FS_LABEL_ENC=my_data\nE: ID_FS_UUID=63AC-7AA5\nE: ID_FS_UUID_ENC=63AC-7AA5\nE: ID_FS_VERSION=FAT16\nE: ID_FS_TYPE=vfat\nE: ID_FS_USAGE=filesystem\n</code></pre> \u201cP:\u201d Device path in /sys/ \u201cE:\u201d Device property \u201cS:\u201d Device node symlink <p>udevadm info output prefixes full list</p>","tags":["udev","linux","ubuntu"]},{"location":"blog/linux/udev/#write-custom-rule","title":"write custom rule","text":"<p><pre><code>SUBSYSTEM==\"usb\", ACTION==\"add\", ENV{DEVTYPE}==\"usb_device\",  RUN+=\"/usr/local.bin/trigger.sh\"\n</code></pre> - == : compare for equality - += : add value to a key that holds a list of entries. - ACTION - SUBSYSTEM - ENV{DEVTYPE} - RUN : execute a script - SYMLINK: create symlink for the device (under <code>/dev</code> folder)</p> <p>Note</p> <ul> <li>todo: check again Script must location <code>/usr/local/bin/</code>, <code>/bin</code>, </li> </ul>","tags":["udev","linux","ubuntu"]},{"location":"blog/linux/udev/#reload-rules","title":"reload rules","text":"<pre><code>udevadm control --reload\n</code></pre> <p>Tip</p> <p>Sometimes it\u2019s better to reboot</p>","tags":["udev","linux","ubuntu"]},{"location":"blog/linux/udev/#reference","title":"Reference","text":"<ul> <li>An introduction to Udev: The Linux subsystem for managing device events</li> <li>mounting usb automatically</li> </ul>","tags":["udev","linux","ubuntu"]},{"location":"blog/linux/apt/apt_key_open_gpg_sign_repository/","title":"deb Repository sign","text":"<p>The ubuntu repository sign is a GPG signature that is used to verify the integrity of the packages in the repository.</p>","tags":["apt","key","gpg","pgp","sign","repository"]},{"location":"blog/linux/apt/apt_key_open_gpg_sign_repository/#verbs","title":"verbs","text":"<p>GPG: GNU Privacy Guard PGP: Pretty Good Privacy ASC: it is an ASCII-armored format that used to encrypt and sign message with GPG</p>","tags":["apt","key","gpg","pgp","sign","repository"]},{"location":"blog/linux/apt/apt_key_open_gpg_sign_repository/#demo-repository-key","title":"Demo: repository key","text":"<p>Demo use ROS humble as repository to use</p>","tags":["apt","key","gpg","pgp","sign","repository"]},{"location":"blog/linux/apt/apt_key_open_gpg_sign_repository/#key","title":"key","text":"<p>First download and install key in <code>/usr/share/keyring</code> key name following the pattern -archive-keyring.gpg <p>keys</p> <p>apt key can be <code>gpg</code> or <code>asc</code></p> <pre><code>sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\n</code></pre>","tags":["apt","key","gpg","pgp","sign","repository"]},{"location":"blog/linux/apt/apt_key_open_gpg_sign_repository/#sourcelist","title":"source.list","text":"<ul> <li>Add deb url to <code>ros2.list</code> under <code>/etc/sources.list.d</code> folder</li> </ul> <pre><code>echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu jammy main\" | sudo tee /etc/apt/sources.list.d/ros2.list </code></pre> <p>signed-by</p> <p>Add key to deb url using <code>signed-by</code> attribute</p> <p>trusted.gpg</p> <p><code>/etc/apt/trusted/gpg</code> or <code>/etc/apt/trusted.gpg.d</code> are the deprecated location to save keys, move key from this files to <code>/etc/apt/keyrings</code> location</p>","tags":["apt","key","gpg","pgp","sign","repository"]},{"location":"blog/linux/apt/apt_key_open_gpg_sign_repository/#reference","title":"Reference","text":"<ul> <li>apt-key Is Deprecated. \u2026</li> <li>apt-key Is Deprecated MUST read </li> </ul>","tags":["apt","key","gpg","pgp","sign","repository"]},{"location":"blog/linux/deb/build_binary_deb_file/","title":"Build binary deb package","text":"<p>A deb is a standard Unix ar archive that contains your application and other utility files.</p> <p>Internally, a deb package contains a collection of folders that mimics a typical Linux file system, such as <code>/usr</code>, <code>/usr/bin</code>, <code>/opt</code> and so on. A file put in one of those directories will be copied to the same location in the actual file system during installation</p> <p>deb package files follow a specific naming convention</p> <pre><code>&lt;name&gt;_&lt;version&gt;-&lt;revision&gt;_&lt;architecture&gt;.deb\n</code></pre>","tags":["deb","ubuntu","package"]},{"location":"blog/linux/deb/build_binary_deb_file/#tutorial","title":"Tutorial","text":"<p>Build deb package for cpp application</p> app<pre><code>#include &lt;iostream&gt;\n\nint main(int argc, char** argv){\nstd::cout &lt;&lt; \"hello debian package\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> build<pre><code>g++ hello.cpp -o hello\n</code></pre>","tags":["deb","ubuntu","package"]},{"location":"blog/linux/deb/build_binary_deb_file/#create-temporary-working-directory","title":"Create temporary working directory","text":"<pre><code>mkdir hello_1.0_1_amd64\nmkdir -p hello_1.0_1_amd64/usr/local/bin\ncp hello hello_1.0_1_amd64/usr/local/bin/\n</code></pre>","tags":["deb","ubuntu","package"]},{"location":"blog/linux/deb/build_binary_deb_file/#control-file","title":"control file","text":"<pre><code>mkdir hello_1.0_1_amd64/DEBIAN\ntouch hello_1.0_1_amd64/DEBIAN/control\n</code></pre> DEBIAN/control<pre><code>Package: hello\nVersion: 1.0\nArchitecture: amd64\nMaintainer: Internal Pointers \nDescription: A program that greets you.\n</code></pre>","tags":["deb","ubuntu","package"]},{"location":"blog/linux/deb/build_binary_deb_file/#build","title":"Build","text":"<pre><code># dpkg-deb --build --root-owner-group &lt;package-dir&gt;\ndpkg-deb --build --root-owner-group hello hello_1.0_1_amd64\n</code></pre>","tags":["deb","ubuntu","package"]},{"location":"blog/linux/deb/build_binary_deb_file/#test","title":"Test","text":"<pre><code>sudo dpkg -i hello_1.0_1_amd64.deb \n</code></pre> <pre><code>dpkg -l | grep hello\n</code></pre> <pre><code>sudo dpkg -r hello\n</code></pre>","tags":["deb","ubuntu","package"]},{"location":"blog/linux/deb/build_binary_deb_file/#scripts","title":"scripts","text":"<p>Run scripts before or after package installation and removal script locate in <code>DEBIAN</code> sub folder</p> <p>permission</p> <p>Don\u2019t forget execute permission</p> <ul> <li>preinst: before install</li> <li>postinst: post install</li> <li>prerm: before remove</li> <li>postrm: after remove</li> </ul>","tags":["deb","ubuntu","package"]},{"location":"blog/linux/deb/build_binary_deb_file/#dependencies","title":"dependencies","text":"<p>Add dependencies to <code>Depends</code> section</p> <pre><code># from deb tmp folder\n# create empty debian/control file\n# use dpkg-shlibdeps to get binary dependencie\n# Add them to DEBIAN/control Depends section\n\ndpkg-shlibdeps -O path/to/binary/file\n</code></pre>","tags":["deb","ubuntu","package"]},{"location":"blog/linux/deb/build_binary_deb_file/#reference","title":"Reference","text":"<ul> <li>Building binary deb packages: a practical guide</li> <li>The Debian Archive</li> </ul>","tags":["deb","ubuntu","package"]},{"location":"blog/linux/network_utils/ip_tools/","title":"ip","text":"","tags":["ip","ss"]},{"location":"blog/linux/network_utils/ip_tools/#cheat-sheet","title":"cheat sheet","text":"<pre><code>ip --brief address show\n</code></pre>","tags":["ip","ss"]},{"location":"blog/linux/network_utils/ip_tools/#reference","title":"Reference","text":"<ul> <li>12 ss Command Examples to Monitor Network Connections</li> </ul>","tags":["ip","ss"]},{"location":"blog/linux/network_utils/ss_vs_netstat_cheat/","title":"ss vs netstat command cheat sheet","text":"<p>Netstat is a command-line network utility used to display network connections for the TCP/UDP and more. ss is a utility used to investigate sockets in Linux and Unix systems.</p> ss netstat List all listening\u00a0tcp ports and process name ss -tlp netstat -ltp List all listening udp ports and process name ss -tun netstat -lup filter by port number ss -a dst :22 <p>Note</p> <p>Run ss and netstat command with sudo to see process name for ports under 1024</p>","tags":["network","ss","netstat"]},{"location":"blog/linux/snap/","title":"Snap","text":"<p>Snap is a package management system</p> <p>Snap packages an application as an archive that contains the binary code, data and libraries required to run said application, including any external dependencies.</p> <p>snap vs apt</p> <p>Both enable application management via packages Snap includes everything required to run an application including its dependencies in a single package Apt expects user to deploy dependencies as separate packages.</p>","tags":["snap","linux","package"]},{"location":"blog/linux/snap/deploy_python_application_with_snap/","title":"Deploy a python application with snapcraft","text":"<p>Deploy python app as <code>snap</code> package</p>","tags":["snap","deploy","package","python"]},{"location":"blog/linux/snap/deploy_python_application_with_snap/#install","title":"install","text":"<p>snapcraft program is used to build snaps</p> <pre><code>sudo snap install snapcraft --classic\n</code></pre>","tags":["snap","deploy","package","python"]},{"location":"blog/linux/snap/deploy_python_application_with_snap/#demo","title":"demo","text":"<pre><code>\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 snapcraft.yaml\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 app.py\n    \u251c\u2500\u2500 data.txt\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p>download</p>","tags":["snap","deploy","package","python"]},{"location":"blog/linux/snap/deploy_python_application_with_snap/#build","title":"build","text":"<p>Run <code>snapcraft</code> from application root folder <pre><code>snapcraft\n</code></pre></p>","tags":["snap","deploy","package","python"]},{"location":"blog/linux/snap/deploy_python_application_with_snap/#install-local","title":"install local","text":"<p>Tip</p> <p>Any snap package that is not distributed through the Snap store has to be installed with the \u2013dangerous flag. Install without verifying</p> <pre><code>sudo snap install --dangerous ./testapp_0.1_amd64.snap </code></pre>","tags":["snap","deploy","package","python"]},{"location":"blog/linux/snap/deploy_python_application_with_snap/#snapcraftyaml","title":"snapcraft.yaml","text":"<pre><code>name: testapp\nversion: '0.1'\nsummary: python test package\ndescription: |\ntest app for python\nbase: core18\ngrade: stable\nconfinement: strict\n\napps:\ntestapp:\ncommand: bin/hello\nplugs: [home,network-bind]\nparts:\ntestapp:\nplugin: python\npython-version: python3\nsource: .\nstage-packages: [ncbi-blast+]\n</code></pre> <ul> <li>Name: Unique string define the snap name</li> <li>base:  A base snap is a special kind of snap that provides a run-time environment with a minimal set of libraries that are common to most applications</li> <li>core18: base on ubuntu 18:04</li> </ul>","tags":["snap","deploy","package","python"]},{"location":"blog/linux/snap/deploy_python_application_with_snap/#reference","title":"Reference","text":"<ul> <li>Deploy a Python application with snapcraft</li> <li>Basic snapcraft.yaml example</li> </ul>","tags":["snap","deploy","package","python"]},{"location":"blog/linux/ssh/ssh_config/","title":"Reference","text":"<ul> <li>Using the SSH Config File</li> </ul>","tags":["ssh"]},{"location":"blog/linux/systemd/minimal_service/","title":"Systemd minimal service","text":"","tags":["systemd","service"]},{"location":"blog/linux/systemd/minimal_service/#user-scope","title":"User Scope","text":"<p>How to run systemd service run by unprivileged user</p> <ul> <li>place the service script in <code>~/.config/systemd/user</code></li> <li>run systemctl command with <code>--user</code> argument</li> </ul>","tags":["systemd","service"]},{"location":"blog/linux/systemd/minimal_service/#demo","title":"demo","text":"<pre><code>mkdir -p  ~/.config/systemd/user\n</code></pre> <pre><code>[Unit]\nDescription=My new Service\n\n[Service]\nType=simple\nExecStart=/bin/sh -c  'echo \"hello service\" &gt;&gt; /tmp/my_service.log 2&gt;&amp;1'\n\n[Install]\nWantedBy=default.target\n</code></pre> <pre><code>systemctl --user enable minimal.service \nsystemctl --user daemon-reload\nsystemctl --user start minimal.service\n</code></pre> <p>system boot</p> <p>OS run the service at boot time only when we set the <code>WantedBy</code> to <code>default.target</code></p>","tags":["systemd","service"]},{"location":"blog/linux/systemd/minimal_service/#systemctl-with-sudo-oneliner","title":"systemctl with sudo oneliner","text":"","tags":["systemd","service"]},{"location":"blog/linux/systemd/minimal_service/#echo-pass--sudo--s-systemctl-command","title":"<pre><code>echo &lt;pass&gt; | sudo -S &lt;systemctl command&gt;\n</code></pre>","text":"","tags":["systemd","service"]},{"location":"blog/linux/systemd/minimal_service/#reference","title":"Reference","text":"<ul> <li>systemd user services and systemctl \u2013user</li> <li>Understanding systemd at startup on Linux</li> </ul>","tags":["systemd","service"]},{"location":"blog/networking/socat/","title":"SOCAT","text":"","tags":["socat","networking"]},{"location":"blog/networking/socat/#install","title":"install","text":"<pre><code>sudo apt install socat\n</code></pre>","tags":["socat","networking"]},{"location":"blog/networking/socat/#usage","title":"usage","text":"<pre><code>socat [options] &lt;address&gt; &lt;address&gt;\n</code></pre> <p>check this link for more info</p> <p>socat is a bidirectional stream protocol by default  connect two data sources and stream data between them</p>","tags":["socat","networking"]},{"location":"blog/networking/socat/#unidirectional-stream","title":"Unidirectional Stream","text":"<p>The <code>-u</code> flag means that the stream of data runs from the first argument to the second argument The <code>-U</code> flag reverse the stream</p> <pre><code>socat -u arg1 arg2 is the same as socat -U arg2 arg1.\n</code></pre>","tags":["socat","networking"]},{"location":"blog/networking/socat/#reference","title":"Reference","text":"<ul> <li>socat Cindy Sridharan</li> <li>The socat Command in Linux</li> </ul>","tags":["socat","networking"]},{"location":"blog/networking/socat/serial/","title":"demo","text":"<pre><code># server (udp-serial)\nsocat -d -d -d udp-listen:1234 open:/dev/ttyUSB0,raw,nonblock,waitlock=/tmp/s0.lock,echo=0,b115200,crnl\n\n# client\nsocat - UDP:127.0.0.1:1234\n\n\nsocat -d -d -d UDP-RECVFROM:1234,fork open:/dev/ttyUSB0,raw,nonblock,waitlock=/tmp/s0.lock,echo=0,b115200,crnl\n</code></pre> <p>Note</p> <p>TTY ports are direct connections to the computer such as a keyboard/mouse or a serial connection to the device. PTS connections are SSH connections or telnet connections Difference between /dev/tty and /dev/pts (tty vs pts) in Linux</p>","tags":["socat","serial"]},{"location":"blog/networking/socat/serial/#serial-echo-server","title":"serial echo server","text":"server<pre><code>socat -d -d pty,raw,echo=0  exec:'/bin/cat',pty,raw,echo=0\n# output\nN PTY is /dev/pts/6\nsocat[117907] N forking off child, using pty for reading and writing\nsocat[117907] N forked off child process 117908\nsocat[117907] N forked off child process 117908\nsocat[117907] N starting data transfer loop with FDs [5,5] and [7,7]\nsocat[117908] N execvp'ing \"/bin/cat\"\n</code></pre> client<pre><code>socat - /dev/pts/6\n</code></pre>","tags":["socat","serial"]},{"location":"blog/networking/socat/udp/","title":"Connected vs unconnected","text":"<p>UDP sockets can be \u201cconnected\u201d (or \u201cestablished\u201d) or \u201cunconnected\u201d. - Connected sockets have a full 4-tuple associated {source ip, source port, destination ip, destination port} - Unconnected sockets have 2-tuple {bind ip, bind port}.</p>","tags":["socat","udp"]},{"location":"blog/networking/socat/udp/#unconnected","title":"unconnected","text":"server<pre><code>socat UDP-RECV:1234 -\n</code></pre> client<pre><code>socat STDIO udp-sendto:127.0.0.1:1234\n</code></pre> <p>Connection established only when data send</p> <pre><code>ss -panu sport = :1234 or dport = :1234 | cat\nState    Recv-Q   Send-Q     Local Address:Port     Peer Address:Port  Process  \nUNCONN   0        0                0.0.0.0:1234          0.0.0.0:*      users:((\"socat\",pid=144971,fd=5))\n</code></pre>","tags":["socat","udp"]},{"location":"blog/networking/socat/udp/#demo-test-connected-server","title":"Demo: Test connected server","text":"server<pre><code>socat UDP-RECV:1234 -\n</code></pre> client 1<pre><code>socat STDIO udp-sendto:127.0.0.1:1234\n# send data\n</code></pre> client 2<pre><code>socat STDIO udp-sendto:127.0.0.1:1234\n# send data\n</code></pre>","tags":["socat","udp"]},{"location":"blog/networking/socat/udp/#connected","title":"connected","text":"server<pre><code>socat udp-l:1234 -\n</code></pre> client<pre><code>socat STDIO udp:127.0.0.1:1234\n</code></pre> <p>Connection established when call connect</p> <pre><code>ss -panu sport = :1234 or dport = :1234 | cat\nState     Recv-Q    Send-Q       Local Address:Port        Peer Address:Port    Process                                                                         \nESTAB     0         0                127.0.0.1:47917          127.0.0.1:1234     users:((\"socat\",pid=144636,fd=5))                                              \nUNCONN    0         0                  0.0.0.0:1234             0.0.0.0:*        users:((\"socat\",pid=144633,fd=5))  \n</code></pre>","tags":["socat","udp"]},{"location":"blog/networking/socat/udp/#demo-test-connected-server_1","title":"Demo: Test connected server","text":"<ul> <li>Establish server</li> <li>Client Connect </li> <li>Second client connect and try send data</li> </ul> server<pre><code>socat udp-l:1234 -\n</code></pre> client 1<pre><code>socat STDIO udp:127.0.0.1:1234\n# send data\n</code></pre> client 2<pre><code>socat STDIO udp:127.0.0.1:1234\n#\n2022/06/28 21:42:56 socat[145414] E read(5, 0x556853768010, 8192): Connection refused\n</code></pre>","tags":["socat","udp"]},{"location":"blog/networking/socat/udp/#echo-server","title":"echo server","text":"terminal1 - server<pre><code># udp server\nsocat -v udp-l:1234,fork exec:'/bin/cat'\n</code></pre> terminal1 - client<pre><code>nc -u 127.0.0.1 1234\n# or\nsocat - udp:127.0.0.1:1234\n</code></pre>","tags":["socat","udp"]},{"location":"blog/networking/socat/udp/#broadcasting--multicasting---unicasting","title":"Broadcasting / Multicasting  / Unicasting","text":"","tags":["socat","udp"]},{"location":"blog/networking/socat/udp/#broadcasting","title":"Broadcasting","text":"server / listener<pre><code>socat udp-recv:1234 -\n</code></pre> client<pre><code>socat - UDP-DATAGRAM:192.168.1.255:1234,broadcast,sp=11111\n\n# tcpdump\nsudo tcpdump -n -i &lt;eth_name&gt; udp\n192.168.1.207.11111 &gt; 192.168.1.255.1234: UDP, length 3\n</code></pre>","tags":["socat","udp"]},{"location":"blog/networking/socat/udp/#summary","title":"summary","text":"<pre><code># connected\n# server\nsocat STDIO UDP-LISTEN:11111\n# client\nsocat - UDP:localhost:11111\n\n# unconnected\n# server\nsocat UDP-RECV:11111 STDOUT\n# client\nsocat STDIN UDP-SENDTO:127.0.0.1:11111\n\n\n# Server\nsocat UDP-RECVFROM:11111,fork STDOUT\n</code></pre>","tags":["socat","udp"]},{"location":"blog/networking/socat/udp/#reference","title":"Reference","text":"<ul> <li>Everything you ever wanted to know about UDP sockets but were afraid to ask, part 1</li> <li>socat udp</li> <li> So much UDP that it is all over you screen </li> </ul>","tags":["socat","udp"]},{"location":"blog/networking/tc/adding_latency_and_limiting_bandwidth/","title":"Adding Latency and Limiting Bandwidth","text":"<p>HTB help you to control the use of the outbound bandwidth on a given link</p> <pre><code>ping 8.8.8.8\nPING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=115 time=67.2 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=115 time=67.6 ms\n</code></pre> <pre><code>INTERFACE=wlo1\nIP=8.8.8.8/32\n\nsudo tc qdisc add dev $INTERFACE root handle 1:0 htb default 10\n# class\nsudo tc class add dev $INTERFACE parent 1:0 classid 1:10 htb rate 1024mbit\n# latency\nsudo tc qdisc add dev $INTERFACE parent 1:10 handle 10:0 netem delay 200ms\n\n# filter\nsudo tc filter add dev $INTERFACE protocol ip parent 1:0 prio 1 u32 match ip dst $IP flowid 1:10\n</code></pre> result<pre><code># ping 8.8.8.8\nping 8.8.8.8\nPING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=115 time=267 ms\n64 bytes from 8.8.8.8: icmp_seq=2 ttl=115 time=267 ms\n64 bytes from 8.8.8.8: icmp_seq=3 ttl=115 time=268 ms\n\n# ping google.com\n# resolve domain with dig `dig google.com`\nping 142.250.186.46\nPING 142.250.186.46 (142.250.186.46) 56(84) bytes of data.\n64 bytes from 142.250.186.46: icmp_seq=1 ttl=114 time=84.4 ms\n64 bytes from 142.250.186.46: icmp_seq=2 ttl=114 time=80.7 ms\n64 bytes from 142.250.186.46: icmp_seq=3 ttl=114 time=82.6 ms\n</code></pre> remove<pre><code>sudo tc qdisc del dev $INTERFACE root\n</code></pre>","tags":["tc","networking","linux"]},{"location":"blog/networking/tc/adding_latency_and_limiting_bandwidth/#reference","title":"Reference","text":"<ul> <li>Adding Latency and Limiting Bandwidth</li> </ul>","tags":["tc","networking","linux"]},{"location":"blog/networking/udp/big_packet_and_mtu/","title":"udp big packet and MTU","text":"","tags":["udp","mtu"]},{"location":"blog/networking/udp/big_packet_and_mtu/#code-demo","title":"Code demo","text":"udp<pre><code>#!/usr/bin/env python3\nimport socket\n# Inlined constants, because Python 3.6 has dropped the IN module.\nclass IN:\nIP_MTU = 14\nIP_MTU_DISCOVER = 10\nIP_PMTUDISC_DO = 2\ndef send_big_datagram(host, port):\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n# sock.setsockopt(socket.IPPROTO_IP, IN.IP_MTU_DISCOVER, IN.IP_PMTUDISC_DO)\nsock.connect((host, port))\ntry:\nsock.send(b'#' * 1500)\nexcept socket.error as e:\nprint(e)\nprint('Alas, the datagram did not make it')\nmax_mtu = sock.getsockopt(socket.IPPROTO_IP, IN.IP_MTU)\nprint('Actual MTU: {}'.format(max_mtu))\nelse:\nprint('The big datagram was sent!')\nif __name__ == '__main__':\nsend_big_datagram(\"172.17.0.2\", 1060)\n</code></pre>","tags":["udp","mtu"]},{"location":"blog/networking/udp/big_packet_and_mtu/#test","title":"Test","text":"<ul> <li>Create ubuntu docker image with tcpdump and netcat</li> </ul> <pre><code>FROM ubuntu:20.04\nRUN apt-get update &amp;&amp; apt-get install --no-install-recommends --yes \\\n    tcpdump \\\n    net-tools \\ \n    netcat\nCMD [\"/bin/sh\"]\n</code></pre>","tags":["udp","mtu"]},{"location":"blog/networking/udp/big_packet_and_mtu/#test-1-test-123","title":"Test 1: Test 123","text":"<ul> <li>Run docker image</li> <li>Run tcpdump and sniff for <code>icmp</code></li> <li>Send ping from host machine</li> </ul> <pre><code>tcpdump -n -i eth0 icmp\n</code></pre>","tags":["udp","mtu"]},{"location":"blog/networking/udp/big_packet_and_mtu/#test-2-send-udp-packet-less-then-mtu","title":"Test 2: send udp packet less then MTU","text":"docker shell1<pre><code>tcpdump -n -i eth0 udp and port 1060 or icmp\n</code></pre> docker shell2<pre><code>nc -ul 1060\n</code></pre>","tags":["udp","mtu"]},{"location":"blog/networking/udp/big_packet_and_mtu/#test-3-send-udp-packet-bigger-then-mtu","title":"Test 3: send udp packet bigger then MTU","text":"<ul> <li>Run tcpdump and nc like in Test 2</li> <li>send with <code>sock.setsockopt(socket.IPPROTO_IP, IN.IP_MTU_DISCOVER, IN.IP_PMTUDISC_DO)</code></li> <li>comment the above line</li> </ul> with IP_PMTUDISC_DO<pre><code>python examples/python/networking/udp/big_Sender.py\n# result\n[Errno 90] Message too long\nAlas, the datagram did not make it\nActual MTU: 1500\n\n# packet not send at all\n</code></pre> without setsockopt<pre><code>python examples/python/networking/udp/big_Sender.py\n# Host Result\nThe big datagram was sent!\n# shell 1: tcpdump\n19:11:06.400842 IP 172.17.0.1.47327 &gt; 172.17.0.2.1060: UDP, bad length 1500 &gt; 1472\n\n# shell 2: nc\nshow 1500 char of '#'\n</code></pre> <pre><code>19:14:46.502573 IP 172.17.0.2.1060 &gt; 172.17.0.1.48321: UDP, length 1\n19:14:46.502686 IP 172.17.0.1 &gt; 172.17.0.2: ICMP 172.17.0.1 udp port 48321 unreachable, length 37\n19:14:51.960248 IP 172.17.0.1.58025 &gt; 172.17.0.2.1060: UDP, bad length 1500 &gt; 1472\n</code></pre>","tags":["udp","mtu"]},{"location":"blog/networking/udp/multi_port_udp_server/","title":"multi port udp server","text":"multiport<pre><code>import socket\nimport select\nsockets = []\nfor port in range(1234,1236):\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver_socket.bind(('0.0.0.0', port))\nsockets.append(server_socket)\nempty = []\nwhile True:\nreadable, writable, exceptional = select.select(sockets, empty, empty)\nfor s in readable:\n(client_data, client_address) = s.recvfrom(1024)\nprint(client_address, client_data)\ns.sendto(client_data, client_address)\nfor s in sockets:\ns.close()\n</code></pre>","tags":["udp","select"]},{"location":"blog/presentation/","title":"Presentation","text":"<ul> <li>ROS2 Why</li> </ul>","tags":["presentation"]},{"location":"blog/presentation/ros4manager/","title":"ROS2","text":"<p>What, Why and basic verbs and concept</p> <p></p>"},{"location":"blog/presentation/ros4manager/#what","title":"What","text":"<ul> <li>Open source software development kit for robotics applications.</li> <li>Standard</li> <li>From research and prototyping through to deployment and production</li> </ul>"},{"location":"blog/presentation/ros4manager/#why","title":"Why","text":"<ul> <li>For me it a STANDARD</li> </ul>"},{"location":"blog/presentation/ros4manager/#verbs","title":"Verbs","text":"<ul> <li>DDS</li> <li>Node</li> <li>Pub / Sub</li> <li>Service</li> <li>Action</li> <li>Parameters</li> </ul>"},{"location":"blog/presentation/ros4manager/#tools","title":"Tools","text":"<ul> <li>Rqt</li> <li>Rviz</li> <li>Gazebo</li> </ul>"},{"location":"blog/presentation/ros4manager/#what-to-remember","title":"What to remember","text":"<ul> <li>ROS2 is a standard</li> <li>Don\u2019t invite the wheel</li> <li>It\u2019s all about Nodes and messages</li> </ul>"},{"location":"blog/presentation/ros4manager/#dds","title":"DDS","text":"<p>DDS (Data Distribution Service) is an open-standard connectivity framework for real-time systems</p> <p></p>"},{"location":"blog/presentation/ros4manager/#node-message-and-topic","title":"Node message and topic","text":"<p>Node: A node is an executable that uses ROS to communicate with other nodes. Message: ROS data type Topics: ROS2 topic is a way of communication between ROS2 nodes</p>"},{"location":"blog/presentation/ros4manager/#pub--sub","title":"Pub / Sub","text":""},{"location":"blog/presentation/ros4manager/#service","title":"Service","text":""},{"location":"blog/presentation/ros4manager/#action","title":"Action","text":""},{"location":"blog/presentation/ros4manager/#demo","title":"Demo","text":""},{"location":"blog/presentation/ros4manager/#rqt","title":"Rqt","text":"<p>RQT is a Qt-based framework for GUI development for ROS</p> <p></p>"},{"location":"blog/presentation/ros4manager/#rviz","title":"Rviz","text":"<ul> <li>Rviz is a 3D visualization tool for ROS</li> <li>It allows you to visualize sensor data and other information from your robot in real-time</li> </ul>"},{"location":"blog/presentation/ros4manager/#gazebo--ignition","title":"Gazebo / Ignition","text":""},{"location":"blog/presentation/ros4manager/#without-words","title":"Without words","text":"<p>video link</p>"},{"location":"blog/presentation/ros4manager/#final","title":"Final","text":"<ul> <li>ROS is a standard </li> <li>Way of thinking</li> <li>SDK for develop robotics application</li> </ul>"},{"location":"blog/robotics/control/","title":"Reference","text":"<ul> <li>41013 Robotics</li> <li>Fundamentals of Robotics</li> </ul>","tags":["robotics"]},{"location":"blog/robotics/control/kalman_filter/","title":"Reference","text":"<ul> <li>Kalman Filters: A step by step implementation guide in python</li> <li>Object Tracking: Simple Implementation of Kalman Filter in Python</li> </ul>","tags":["kalman_filter"]},{"location":"blog/robotics/control/kalman_filter/michel_van_biezen_course/","title":"The Kalman Filter","text":"<p>Michel van biezen Kalman filter course</p> <p>Kalman filter is an iterative math process that use a set of equations and consecutive data input  to quickly ESTIMATE the True value of the object begin measured when the measure values contain random error / uncertainty / variation</p>","tags":["kalman","filter"]},{"location":"blog/robotics/control/kalman_filter/michel_van_biezen_course/#single-measured-value","title":"Single measured value","text":"","tags":["kalman","filter"]},{"location":"blog/robotics/control/pid/hello_pid/","title":"Reference","text":"<ul> <li>Intro to Control Theory</li> </ul>","tags":["control","pid",101]},{"location":"blog/vscode/","title":"VSCode","text":"<ul> <li>Variables Reference</li> </ul>","tags":["vscode","code"]},{"location":"blog/vscode/my_extension_list/","title":"My VSCode extensions list","text":"<p>For python , C++ and dev helper</p> category autoDocstring python Generates python docstrings automatically Git Graph git View a Git Graph of your repository, and perform Git actions from the graph. Auto close tag xml Automatically add HTML/XML close tag Auto Snippet dev insert a snippet when opening an empty file C/C++ C++ C/C++ IntelliSense, debugging C++ TestMate CMake CMake langage support CMake Tools Code Runner dev Code Spell Checker dev Draw.io Paste Image doc paste image from clipboard directly Path Intellisense dev Project manager Pylance Pylint Python TabOut dev Tab out of quotes, brackets, etc Task dev Load VSCode Tasks into Status Bar TODO Highlight dev highlight TODOs, FIXMEs, and any keywords, annotations XML xml YAML Language Support XML Tools xml XML Formatting, XQuery, and XPath Tools YAML yaml YAML Language Support ROS2 ros Syntax highlighting for ros2 interface files docker dev-container","tags":["vscode","extensions"]},{"location":"blog/vscode/my_extension_list/#todo-tree","title":"todo tree","text":"<p>todo-tree</p> <p></p>","tags":["vscode","extensions"]},{"location":"blog/vscode/my_extension_list/#settings","title":"Settings","text":"<ul> <li>todo-tree.filtering.excludeGlobs: Exclude files or folder from search</li> <li>todo-tree.general.tags: Add custom tags</li> <li>todo-tree.highlights.customHighlight: Set tags settings</li> <li>type: line : highlights the entire line containing the tag</li> <li>foreground: </li> <li>gutterIcon: Set icon in gutter ruler</li> <li>iconColour: Set the colour of the icon in the tree</li> </ul> settings.json<pre><code>   \"todo-tree.filtering.excludeGlobs\": [\n\"**/node_modules/*/**\"\n],\n\"todo-tree.general.tags\": [\n\"BUG\",\n\"HACK\",\n\"FIXME\",\n\"TODO\",\n\"XXX\",\n\"[ ]\",\n\"[x]\",\n\"CUSTOM\"\n],\n\"todo-tree.highlights.customHighlight\": {\n\"CUSTOM\": {\n\"iconColour\": \"#00ff00\",\n\"type\": \"line\",\n\"foreground\": \"#00ff00\"\n},\n\"FIXME\": {\n\"iconColour\": \"#fff200\",\n\"gutterIcon\": true\n},\n\"BUG\": {\n\"iconColour\": \"#ff0000\",\n\"gutterIcon\": true,\n\"foreground\": \"#ff0000\",\n\"type\": \"line\"\n}\n}\n</code></pre>","tags":["vscode","extensions"]},{"location":"blog/vscode/my_extension_list/#demo","title":"demo","text":"<pre><code>\"\"\"python\nTODO: todo line\n- [ ]: check\n- [x]: done check\n- FIXME: fixme line\nBUG: bug to fix\nXXX:\nCUSTOM: \n\"\"\"\ndef hello_todo():\n\n    print(\"hello todo\")\n</code></pre>","tags":["vscode","extensions"]},{"location":"blog/vscode/tips/","title":"VSCode tips and settings","text":"","tags":["vscode","tips"]},{"location":"blog/vscode/tips/#editor","title":"editor","text":"","tags":["vscode","tips"]},{"location":"blog/vscode/tips/#xml-region","title":"XML Region","text":"<pre><code>&lt;!-- #region --&gt;\n...\n&lt;!-- #endregion --&gt;\n</code></pre>","tags":["vscode","tips"]},{"location":"blog/vscode/tips/#tasks","title":"tasks","text":"","tags":["vscode","tips"]},{"location":"blog/vscode/tips/#global-tasks","title":"Global tasks","text":"<p>Place task file at <code>~/.config/Code/User/tasks.json</code></p>","tags":["vscode","tips"]},{"location":"blog/vscode/tips/#xml-region_1","title":"XML Region","text":"","tags":["vscode","tips"]},{"location":"blog/vscode/tips/#wrap-selection","title":"Wrap selection","text":"<p>using snippet</p>","tags":["vscode","tips"]},{"location":"blog/vscode/tips/#use-case","title":"use case","text":"<p>Add mkdocs text highlight on selection</p> snippet<pre><code>\"mk_text_highlight\": {\n\"prefix\": \"mk_h\",\n\"body\": [\n\"==${TM_SELECTED_TEXT}==\"\n],\n\"description\": \"highlight text\"\n}\n</code></pre> <ul> <li>Add shortcut </li> </ul> keyboard shortcut<pre><code>{\n\"key\": \"ctrl+h\",\n\"command\": \"editor.action.insertSnippet\",\n\"when\": \"editorTextFocus\",\n\"args\": {\n\"name\": \"mk_text_highlight\",\n\"langId\": \"markdown\"\n}\n}\n</code></pre>","tags":["vscode","tips"]},{"location":"blog/vscode/tips/#extensions","title":"Extensions","text":"","tags":["vscode","tips"]},{"location":"blog/vscode/tips/#ignore-recommendation","title":"ignore recommendation","text":"<p>Stop VSCode to check and suggest recommendation ext.</p> <pre><code>\"extensions.ignoreRecommendations\": true\n</code></pre>","tags":["vscode","tips"]},{"location":"blog/vscode/yaml_json_schema/","title":"yaml json files and json-schema","text":"<p>VSCode has the ability to display autocomplete suggestions for JSON and YAML format out of the box. It\u2019s use <code>JSON schema</code> to do it</p>","tags":["json","yaml","json","schema","vscode"]},{"location":"blog/vscode/yaml_json_schema/#json-schema","title":"JSON Schema","text":"<p>JSON Schema is a specification that allows you to describe the structure of a JSON document and validate documents against that schema.</p>","tags":["json","yaml","json","schema","vscode"]},{"location":"blog/vscode/yaml_json_schema/#vscode","title":"VSCode","text":"<ul> <li>Install YAML red hat</li> </ul>","tags":["json","yaml","json","schema","vscode"]},{"location":"blog/vscode/yaml_json_schema/#settings","title":"settings","text":"<pre><code>\"yaml.schemas\": {\n\"&lt;shema file location&gt;.json\": \"&lt;file useage by schema&gt;.yaml\",\n\"&lt;shema file location&gt;.json\": \"&lt;file useage by schema&gt;.json\"\n},\n</code></pre>","tags":["json","yaml","json","schema","vscode"]},{"location":"blog/vscode/yaml_json_schema/#references","title":"References","text":"<ul> <li>How to create your own auto-completion for JSON and YAML files on VS Code with the help of JSON Schema</li> </ul>","tags":["json","yaml","json","schema","vscode"]},{"location":"blog/vscode/dev_container/","title":"VSCode dev containers","text":"<p>devcontainer for python project</p>","tags":["vscode","dev","docker","dev container"]},{"location":"blog/vscode/dev_container/#docker-tips","title":"docker tips","text":"","tags":["vscode","dev","docker","dev container"]},{"location":"blog/vscode/dev_container/#installing-non-root-user","title":"Installing non-root user","text":"<pre><code>ARG USERNAME=user\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Create a non-root user\nRUN groupadd --gid $USER_GID $USERNAME \\\n&amp;&amp; useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n# [Optional] Add sudo support for the non-root user\n  &amp;&amp; apt-get update \\\n&amp;&amp; apt-get install -y sudo git-core bash-completion \\\n&amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n&amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n# Cleanup\n  &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nUSER $USERNAME\nWORKDIR /home/$USERNAME\n</code></pre>","tags":["vscode","dev","docker","dev container"]},{"location":"blog/vscode/dev_container/#dev-container-tips","title":"dev container Tips","text":"","tags":["vscode","dev","docker","dev container"]},{"location":"blog/vscode/dev_container/#set-non-root-user","title":"set non root user","text":"<pre><code>\"remoteUser\": \"nonroot\"\n</code></pre> <pre><code>\"containerUser\": \"nonroot\"\n</code></pre>","tags":["vscode","dev","docker","dev container"]},{"location":"blog/vscode/dev_container/#reference","title":"Reference","text":"<ul> <li>Use a Docker container as a development environment with Visual Studio Code</li> <li>Dev Container metadata reference</li> </ul>","tags":["vscode","dev","docker","dev container"]},{"location":"blog/vscode/dev_container/dev_container/","title":"References","text":"<ul> <li>install vscode server</li> </ul>","tags":["vscode","dev"]},{"location":"blog/vscode/dev_container/python_project/","title":"Reference","text":"<ul> <li>How to create a Devcontainer for your Python project</li> </ul>","tags":["vscode","dev","docker"]},{"location":"blog/yocto/part1_hello_yocto/","title":"Part1 - Yocto tutorial","text":"","tags":["yocto",101]},{"location":"blog/yocto/part1_hello_yocto/#elements-of-embedded-linux","title":"Elements of embedded linux","text":"<ul> <li>Toolchain: Compiler and other tools needed to build code for target device</li> <li>Bootloader: The program that init the board and load the linux kernel</li> <li>Kernel</li> <li>Root F.S: Contain all programs and libraries for our system</li> </ul>","tags":["yocto",101]},{"location":"blog/yocto/part1_hello_yocto/#yocto","title":"Yocto","text":"<p>Yocto project provide tools for create custom linux distributions for any H.W</p> <p></p>","tags":["yocto",101]},{"location":"blog/yocto/part1_hello_yocto/#poky","title":"Poky","text":"<p>Poky is a reference/example linux distribution create by yocto  </p> <p>The poky repository is an aggregation of several repositories:  - openembedded-core - bitbake - meta-poky - yocto-docs</p> <p>Poky = Bitback + Metadata</p> <p>Note</p> <ul> <li>Yocto is a origination like <code>canonical</code></li> <li>Poky is like <code>ubuntu</code></li> </ul> <p>Note</p> <p>the \u2018meta\u2019 folder in the poky repository corresponds to the Openembedded Core layer, e.g. https://git.openembedded.org/openembedded-core/. OE Core includes the main components/recipes that are widely used for any configuration.</p>","tags":["yocto",101]},{"location":"blog/yocto/part1_hello_yocto/#metadata","title":"Metadata","text":"<ul> <li>Build instructions</li> <li>From where obtain sources </li> <li>Changes / additions to sources</li> </ul> <p>Metadata in yocto is collection of - configuration file (.conf) - Recipes (.bb and .bbappend) - Class (.bbclass) - Includes (.inc)</p> <p>Note</p> <p>he \u2018meta-oe\u2019 folder in meta-openembedded is another layer typically called the \u2018openembedded\u2019 layer. meta-oe contains a large amount of additional recipes.</p>","tags":["yocto",101]},{"location":"blog/yocto/part1_hello_yocto/#bitback","title":"Bitback","text":"<ul> <li>Task scheduler</li> </ul>","tags":["yocto",101]},{"location":"blog/yocto/part1_hello_yocto/#bsp-board-support-package","title":"BSP: Board Support Package","text":"<p>BSP is collection of information that defines how to support particular HW</p> <ul> <li>HW futures</li> <li>Kernel configuration</li> <li>Additional S.W</li> </ul> <p>Note</p> <p>poky support by default x86, x86-64, BeagleBone devices (has BSP for each H.W type)</p>","tags":["yocto",101]},{"location":"blog/yocto/part1_hello_yocto/#reference","title":"Reference","text":"<ul> <li>udemy yocto</li> </ul>","tags":["yocto",101]},{"location":"blog/yocto/part2_hello_poky/","title":"Part2 - Yocto tutorial","text":"","tags":["yocto","poky",101]},{"location":"blog/yocto/part2_hello_poky/#init-environment","title":"init environment","text":"<pre><code># from poky folder\nsource oe-init-build-env &lt;location of build folder&gt;\n</code></pre> <p>create folder and files under chosen <code>build</code> location</p> <p>local.conf bblayers.conf</p>","tags":["yocto","poky",101]},{"location":"blog/yocto/part2_hello_poky/#build","title":"Build","text":"<p>Building custom linux distribution</p> <pre><code># bitbake &lt;image name&gt;\nbitbake core-image-minimal\n</code></pre> <p>Fix</p> <p>If bitbake failed to resolve URI set CONNECTIVITY_CHECK_URIS field in <code>conf/local.conf</code></p> <p>```bash title=\u201dso 52395512\u201d</p> <p>CONNECTIVITY_CHECK_URIS = \u201chttps://www.google.com/\u201d</p>","tags":["yocto","poky",101]},{"location":"blog/yocto/part2_hello_poky/#check-connectivity-using-google","title":"check connectivity using google","text":"","tags":["yocto","poky",101]},{"location":"blog/yocto/part2_hello_poky/#skip-connectivity-checks","title":"skip connectivity checks","text":"<p>CONNECTIVITY_CHECK_URIS = \u201c\u201d     ```</p>","tags":["yocto","poky",101]},{"location":"blog/yocto/part3_run_qemu/","title":"Part3 - Yocto tutorial","text":"<pre><code>runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-20220406114623.qemuboot.conf\n</code></pre> <pre><code>runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-20220406114623.qemuboot.conf nographic\n</code></pre> <p>Note</p> <p>quit <code>QEMU</code> nographic mode by press <code>ctrl-a</code> then <code>x</code></p>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/","title":"Yocto project tree","text":"<ul> <li>meta-external</li> <li>meta-openembedded</li> <li>poky</li> </ul> meta-external share git project across multiple yocto project <p>Help</p> <ul> <li>git submodule</li> <li>git submodule add  <li>git submodule update \u2013init \u2013recursive</li>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#meta-external","title":"meta-external","text":"<p>Collection of yocto git repositories from git</p> meta-openembedded<pre><code>git submodule add https://github.com/openembedded/meta-openembedded.git\n</code></pre>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#layers","title":"layers","text":"<p>Add layers to <code>bblayers.conf</code> file</p> <pre><code>bitbake-layers show-layers\nNOTE: Starting bitbake server...\nlayer                 path                                      priority\n==========================================================================\nmeta                  /home/user/yocto/poky/meta                5\nmeta-poky             /home/user/yocto/poky/meta-poky           5\nmeta-yocto-bsp        /home/user/yocto/poky/meta-yocto-bsp      5\nmeta-oe               /home/user/yocto/meta-external/meta-openembedded/meta-oe  6\nmeta-python           /home/user/yocto/meta-external/meta-openembedded/meta-python  7\n</code></pre>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#add-dropbear-ssh","title":"Add dropbear ssh","text":"","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#openembedded","title":"OpenEmbedded","text":"<p>Search for dropbear recipe in openembedded Layer index</p> <p></p> <p>Check</p> <p>openembedded-core is part of poky meta ? Yes  I found dropbear under <code>meta/recipes-core/dropbear</code></p>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#setup","title":"setup","text":"<ul> <li>Add  to <code>local.conf</code></li> </ul> append to local.conf<pre><code>CORE_IMAGE_EXTRA_INSTALL += \"dropbear\"\n</code></pre> <p>Note</p> <ul> <li>IMAGE_INSTALL is the variable that controls what is included in any image.</li> <li>CORE_IMAGE_EXTRA_INSTALL is a convenience variable that enable you to add extra packages to an image based on the core-image class</li> </ul>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#create-image","title":"Create image","text":"<pre><code># from build folder\nbitbake core-image-minimal\n</code></pre>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#check","title":"Check","text":"<pre><code># under build folder\nll tmp/work/qemux86_64-poky-linux/core-image-minimal/1.0-r0/rootfs/usr/sbin/dropbear\n</code></pre>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#run-image-with-qemu","title":"run image with qemu","text":"run image<pre><code>runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-&lt;build number&gt;.qemuboot.conf nographic\n</code></pre> check dropbear is running<pre><code>ps | grep drop\n  259 root      3020 S    /usr/sbin/dropbear -r /etc/dropbear/dropbear_rsa_host_key -p 22 -B\n  293 root      4224 S    grep drop\n</code></pre>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#ssh-from-host","title":"ssh from host","text":"<pre><code>ssh root@192.168.7.2\n</code></pre>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#check-recipe-location","title":"check recipe location","text":"","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#bitbake--e-dropbear--grep-file-resultfilehomeuseryoctopokymetarecipes-coredropbeardropbear_202081bb","title":"<pre><code>bitbake -e dropbear | grep ^FILE=\n# Result\nFILE=\"/home/user/yocto/poky/meta/recipes-core/dropbear/dropbear_2020.81.bb\"\n</code></pre>","text":"","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#add-python3","title":"Add python3","text":"<ul> <li> <p>Search recipe </p> </li> <li> <p>Show recipe more info </p> </li> </ul>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#setup_1","title":"setup","text":"<ul> <li>Add  to <code>local.conf</code></li> </ul> append to local.conf<pre><code>CORE_IMAGE_EXTRA_INSTALL += \"dropbear python3\"\n</code></pre>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#check-recipe-location_1","title":"check recipe location","text":"<pre><code>bitbake -e python3 | grep ^FILE=\nFILE=\"/home/user/yocto/poky/meta/recipes-devtools/python/python3_3.9.9.bb\"\n</code></pre>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part4_add_ssh/#create-image_1","title":"Create image","text":"<pre><code># from build folder\nbitbake core-image-minimal\n</code></pre>","tags":["yocto","qemu",101]},{"location":"blog/yocto/part5-terminology/","title":"Recipe","text":"<p>A recipe is a set of instructions that is read and processed by the bitbake (file with <code>.bb</code> extension)</p> <p>A recipe describes: - Where to fetch source code - Which patch to apply - Configuration options - Compile options - Install - License  </p>","tags":["yocto",101]},{"location":"blog/yocto/part5-terminology/#configuration","title":"Configuration","text":"<p>Tell the build system what to build and put into the image (file with <code>.conf</code> extension)</p>","tags":["yocto",101]},{"location":"blog/yocto/part5-terminology/#types","title":"Types","text":"<ul> <li>Machine configuration option</li> <li>Distribution option</li> <li>Compiler tuning options</li> <li>General Common configuration options</li> <li>User options (local.conf)</li> </ul>","tags":["yocto",101]},{"location":"blog/yocto/part5-terminology/#example-machine-config","title":"Example machine config","text":"<p>User <code>local.conf</code> we set the machine for example <code>MACHINE ??= \"qemux86-64\"</code></p> <p>This setting tell the system to load machine configuration option <code>meta/conf/machine/qemux86-64.conf</code></p>","tags":["yocto",101]},{"location":"blog/yocto/part5-terminology/#class","title":"Class","text":"<p>Class files are used to share common functionality across recipes (file with <code>.bbclsss</code> extension)</p> <p>Note</p> <p>classes useally locate in <code>classes</code> directory inside the <code>meta*</code> directory</p>","tags":["yocto",101]},{"location":"blog/yocto/part5-terminology/#usage-from-recipe","title":"usage from recipe","text":"<pre><code>inherit classname\n</code></pre>","tags":["yocto",101]},{"location":"blog/yocto/part5-terminology/#layers","title":"Layers","text":"<p>A collection of related recipes. layer isolate meta data according to functionality recipes are folders under layer folder</p> <p>Note</p> <p>name convention for layer <code>meta-layername</code></p> name description meta-poky Distro metadata meta-yocto-bsp BSP metadata <p><code>BBLAYERS</code> variable present in <code>build/conf/bblayers.conf</code></p> show layers<pre><code>bitbake-layers show-layers\n</code></pre>","tags":["yocto",101]},{"location":"blog/yocto/part5-terminology/#find-a-layer","title":"Find a layer","text":"<p>OpenEmbedded Layer Index</p> <p> </p> raspberrypi <p> </p> ros2 layers","tags":["yocto",101]},{"location":"blog/yocto/part5-terminology/#image","title":"Image","text":"<p>An image is the top level recipe image define how the root filesystem is built , with what packages.</p> list all images<pre><code>ls meta*/recipes*/images/*.bb\n</code></pre>","tags":["yocto",101]},{"location":"blog/yocto/part5-terminology/#packages","title":"Packages","text":"<p>A package is a binary file with name .deb, .rpm Packages are produces by recipe A signal recipe produces many packages. all recipe packages describe is <code>PACKAGES</code> variable</p>","tags":["yocto",101]},{"location":"blog/yocto/part6-tips/","title":"Sharing downloads","text":"<pre><code>DL_DIR ?= \"/home/user/yocto/downloads/\"\n</code></pre>","tags":["yocto",101]},{"location":"blog/yocto/part6-tips/#fix-resolve","title":"Fix Resolve","text":"<pre><code>CONNECTIVITY_CHECK_URIS = \"https://www.google.com/\"\n</code></pre>","tags":["yocto",101]},{"location":"blog/yocto/part6-tips/#parallel","title":"parallel","text":"<pre><code># Determines the number of tasks that BitBake will perform in parallel (for bitbake command)\nBB_NUMBER_THREADS = \"6\"\n# Determine the number of processes that make can run in parallel (for make command)\nPARALLEL_MAKE = \"-j 6\"\n</code></pre>","tags":["yocto",101]},{"location":"blog/yocto/part7-operators/","title":"Variables","text":"<p>Variables can assign in conf and recipe files</p> <pre><code>VARIABLE = \"value\"\n</code></pre> variable in conf<pre><code># This command display variable value after config file are parsed\nbitbake -e | grep ^&lt;VARIABLENAME&gt;=\n\n# Example\nbitbake -e | grep ^BBPATH=\n# Result\nBBPATH=\"/home/user/yocto/poky/meta-poky:/home/user/yocto/poky/build:/home/user/yocto/poky/meta:/home/user/yocto/poky/meta-yocto-bsp:/home/user/yocto/meta-external/meta-openembedded/meta-oe:/home/user/yocto/meta-external/meta-openembedded/meta-python\"\n\nbitbake -e | grep ^TOPDIR=\nTOPDIR=\"/home/user/yocto/poky/build\"\n</code></pre> variable from recipe<pre><code>bitbake -e &lt;recipe&gt;&lt;/recipe&gt; | grep ^&lt;VARIABLE&gt;=\n\n# Example\nbitbake -e dropbear | grep ^DEPENDS=\nDEPENDS=\"autoconf-native automake-native libtool-native libtool-cross  virtual/x86_64-poky-linux-gcc virtual/x86_64-poky-linux-compilerlibs virtual/libc zlib virtual/crypt  update-rc.d initscripts virtual/update-alternatives\"\n</code></pre>","tags":["yocto",101]},{"location":"blog/yocto/part7-operators/#variable-soft-assignment-","title":"Variable soft assignment (?=)","text":"<p>if variable assign as hard assignment the value is lost if no hard assignment this value are the default one</p> <pre><code>MACHINE ?= \"qemuarm\"\n</code></pre> <p>Note</p> <p>if ww have multiple soft assignment the first one is hold/assign</p>","tags":["yocto",101]},{"location":"blog/yocto/part7-operators/#weaker-default-value-","title":"Weaker default value (??=)","text":"<p>Assignment is made at the end of the parsing process, rather then immediately</p> <p>if variable assign as hard assignment the weaker value is lost if variable assign as default assignment the weaker value is lost</p> <p>Note</p> <p>if ww have multiple weak assignment the last one is hold/assign</p>","tags":["yocto",101]},{"location":"blog/yocto/part7-operators/#variable-expansion","title":"Variable Expansion","text":"<p>Variable can reference the content of other variable using the <code>${variable_name}</code> syntax</p> <pre><code>A = \"${B} hello\"\nB = \"${C} world\"\nC = \"linux\"\n</code></pre> <p>Waring</p> <p>if variable not declare no expansion will happen the string is keep as is</p>","tags":["yocto",101]},{"location":"blog/yocto/part8-custom_layer/","title":"Custom layer","text":"<pre><code>bitbake-layers create-layer &lt;layer name&gt;\n</code></pre> <pre><code>tree meta-mylayer\n/home/user/yocto/meta-mylayer/\n\u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 layer.conf\n\u251c\u2500\u2500 COPYING.MIT\n\u251c\u2500\u2500 README\n\u2514\u2500\u2500 recipes-example\n    \u2514\u2500\u2500 example\n        \u2514\u2500\u2500 example_0.1.bb\n</code></pre>","tags":["yocto","custom"]},{"location":"blog/yocto/part8-custom_layer/#add-layer-to-project","title":"Add layer to project","text":"<pre><code># Add\nbitbake-layers add-layer ~/yocto/meta-mylayer/\n\n# Show\nbitbake-layers show-layers\nNOTE: Starting bitbake server...\nlayer                 path                                      priority\n==========================================================================\nmeta                  /home/user/yocto/poky/meta                5\nmeta-poky             /home/user/yocto/poky/meta-poky           5\nmeta-yocto-bsp        /home/user/yocto/poky/meta-yocto-bsp      5\nmeta-mylayer          /home/user/yocto/meta-mylayer             6\n</code></pre> <p>Note</p> <p>Priority: This is the value used by BitBake to decide which recipe to use and the order in which the .bbappend files should be joined. It means that if two layers include the same recipe (.bb) file, the one with the higher priority is used.</p>","tags":["yocto","custom"]},{"location":"blog/yocto/part8-custom_layer/#add-custom-recipe","title":"Add custom recipe","text":"<pre><code>meta-mylayer/\n\u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 layer.conf\n\u251c\u2500\u2500 COPYING.MIT\n\u251c\u2500\u2500 README\n\u251c\u2500\u2500 recipes-example\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 example\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 example_0.1.bb\n\u2514\u2500\u2500 recipes-hello\n    \u2514\u2500\u2500 hello\n        \u251c\u2500\u2500 files\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 hello.c\n        \u2514\u2500\u2500 hello_1.0.bb\n</code></pre>","tags":["yocto","custom"]},{"location":"blog/yocto/part8-custom_layer/#files","title":"files","text":"recipes-hello.bb<pre><code>DESCRIPTION = \"Hello-my first recipe\"\nSECTION = \"Mywork\"\nLICENSE=\"CLOSED\"\nLIC_FILES_CHKSUM = \"file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4f302\"\nSRC_URI = \"file://hello.c\"\nS = \"${WORKDIR}\"\nTARGET_CC_ARCH += \"${LDFLAGS}\"\n\ndo_compile() {\n${CC} hello.c -o hello\n}\n\ndo_install() {\ninstall -d ${D}${bindir}\ninstall -m 0755 hello ${D}${bindir}\n}\n</code></pre>","tags":["yocto","custom"]},{"location":"blog/yocto/part8-custom_layer/#variables","title":"variables","text":"<p>meta/conf/bitbake.conf</p> <pre><code>export exec_prefix = \"/usr\"\nexport bindir = \"${exec_prefix}/bin\"\n\nTMPDIR ?= \"${TOPDIR}/tmp\"\nWORKDIR = \"${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PF}\"\nD = \"${WORKDIR}/image\"\n</code></pre> <p><pre><code># TOPDIR\nbitbake -e | grep ^TOPDIR=\nTOPDIR=\"/home/user/yocto/poky/build\"\n</code></pre> hello.c<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\nprintf(\"Hello yocto\\n\");\nreturn 0;\n}\n</code></pre></p> conf/local.conf<pre><code>CORE_IMAGE_EXTRA_INSTALL += \"dropbear \\\n    python3 \\\n    hello \\\n\"\n</code></pre>","tags":["yocto","custom"]},{"location":"blog/yocto/part8-custom_layer/#build","title":"Build","text":"<pre><code>bitbake core-image-minimal\n</code></pre>","tags":["yocto","custom"]},{"location":"blog/yocto/part8-custom_layer/#test","title":"Test","text":"<pre><code># Run qemu\nrunqemu qemux86-64 nographic\n# login\n$ ls -l /usr/bin/hello \n-rwxr-xr-x    1 root     root         14376 Mar  9  2018 /usr/bin/hello\n\n# run program\n$ hello\nHello yocto\n</code></pre>","tags":["yocto","custom"]},{"location":"blog/yocto/part8-custom_layer/#reference","title":"Reference","text":"<ul> <li>Yocto : Lab 02_Creating Custom layer and writing Recipe for Hello world</li> </ul>","tags":["yocto","custom"]},{"location":"blog/yocto/yocto-rpi-1/","title":"Yocto RPI part 1","text":"","tags":["rpi","yocto"]},{"location":"blog/yocto/yocto-rpi-1/#clone-meta-raspberrypi","title":"clone meta-raspberrypi","text":"<pre><code>cd meta-external\ngit submodule add git://git.yoctoproject.org/meta-raspberrypi\n# checkout hardknott\n</code></pre>","tags":["rpi","yocto"]},{"location":"blog/yocto/yocto-rpi-1/#config","title":"config","text":"bblayers.conf<pre><code>POKY_BBLAYERS_CONF_VERSION = \"2\"\n\nBBPATH = \"${TOPDIR}\"\nBBFILES ?= \"\"\n\nBBLAYERS ?= \" \\\n  /home/user/yocto/poky/meta \\\n  /home/user/yocto/poky/meta-poky \\\n  /home/user/yocto/poky/meta-yocto-bsp \\\n  /home/user/yocto/meta-external/meta-raspberrypi \\\n  \"\n</code></pre> local.conf<pre><code>CONF_VERSION = \"1\"\nMACHINE ?= \"raspberrypi4\"\nBB_NUMBER_THREADS = \"6\"\nPARALLEL_MAKE = \"-j 6\"\nDL_DIR ?= \"/home/user/yocto/downloads/\"\nCONNECTIVITY_CHECK_URIS = \"https://www.google.com/\"\nIMAGE_FSTYPES = \"ext4.xz rpi-sdimg\" # for SD-CARD\nSDIMG_ROOTFS_TYPE = \"ext4.xz\"\n</code></pre>","tags":["rpi","yocto"]},{"location":"blog/yocto/yocto-rpi-1/#build-image","title":"build image","text":"<pre><code># rpi-basic-image deprecated\nbitbake core-image-base\n</code></pre>","tags":["rpi","yocto"]},{"location":"blog/yocto/yocto-rpi-1/#other-packages","title":"other packages","text":"<pre><code>IMAGE_INSTALL_append = \" nano\"\n</code></pre>","tags":["rpi","yocto"]},{"location":"projects/","title":"Index","text":"","tags":["projects","courses to follow"]},{"location":"projects/#courses","title":"Courses","text":"<ul> <li>Visual Navigation for Flying Robots</li> </ul>","tags":["projects","courses to follow"]},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/","title":"Simple world plugin","text":"projects<pre><code>rrbot_gazebo\n    \u251c\u2500\u2500 CMakeLists.txt\n    \u251c\u2500\u2500 launch\n    \u2502   \u2514\u2500\u2500 world_plug.launch.py\n    \u251c\u2500\u2500 package.xml\n    \u251c\u2500\u2500 src\n    \u2502   \u2514\u2500\u2500 simple_world_plugin.cpp\n    \u2514\u2500\u2500 worlds\n        \u2514\u2500\u2500 world_plug.world </code></pre>","tags":["gazebo","world","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/#worlds","title":"Worlds","text":"world_plug.world<pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;sdf version=\"1.4\"&gt;\n&lt;!-- We use a custom world for the rrbot so that the camera angle is launched correctly --&gt;\n&lt;world name=\"default\"&gt;\n&lt;include&gt;\n&lt;uri&gt;model://ground_plane&lt;/uri&gt;\n&lt;/include&gt;\n&lt;!-- Global light source --&gt;\n&lt;include&gt;\n&lt;uri&gt;model://sun&lt;/uri&gt;\n&lt;/include&gt;\n&lt;plugin name=\"simple\" filename=\"libsimple_world_plugin.so\"/&gt;\n&lt;/world&gt;\n&lt;/sdf&gt;\n</code></pre>","tags":["gazebo","world","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/#packagexml","title":"package.xml","text":"<pre><code>&lt;export&gt;\n&lt;build_type&gt;ament_cmake&lt;/build_type&gt;\n&lt;gazebo_ros plugin_path=\"${prefix}\"&gt;&lt;/gazebo_ros&gt;\n&lt;/export&gt;\n</code></pre>","tags":["gazebo","world","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/#plugin-source","title":"plugin source","text":"simple_world_plugin.cpp<pre><code>#include &lt;gazebo/common/Plugin.hh&gt;\n#include &lt;rclcpp/rclcpp.hpp&gt;\n#include &lt;iostream&gt;\n\nnamespace gazebo\n{\nclass WorldPluginTutorial : public WorldPlugin\n{\npublic:\nWorldPluginTutorial() : WorldPlugin()\n{\n// gazebo log\ngzmsg &lt;&lt; \"gazebo message\" &lt;&lt; std::endl;\ngzwarn &lt;&lt; \"gazebo warning\" &lt;&lt; std::endl;\ngzerr &lt;&lt; \"gazebo error\" &lt;&lt; std::endl;\n\n// ROS log\nRCLCPP_INFO(rclcpp::get_logger(\"world_plug\"),\" ------ Hello World! ------ \");\nRCLCPP_WARN(rclcpp::get_logger(\"world_plug\"),\" ------ warning! ------ \");\nRCLCPP_ERROR(rclcpp::get_logger(\"world_plug\"),\" ------ Error! ------ \");\n}\n\nvoid Load(physics::WorldPtr _world, sdf::ElementPtr _sdf)\n{\n}\n\n};\nGZ_REGISTER_WORLD_PLUGIN(WorldPluginTutorial)\n}\n</code></pre>","tags":["gazebo","world","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/#cmakelists","title":"CMakeLists","text":"<pre><code>cmake_minimum_required(VERSION 3.5)\nproject(rrbot_gazebo)\n# Default to C++14\nif(NOT CMAKE_CXX_STANDARD)\nset(CMAKE_CXX_STANDARD 14)\nendif()\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\nadd_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(gazebo REQUIRED)\nfind_package(gazebo_ros REQUIRED)\nfind_package(rclcpp REQUIRED)\nadd_library(simple_world_plugin SHARED src/simple_world_plugin.cpp)\ntarget_include_directories(simple_world_plugin PUBLIC\n$&lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include&gt;\n$&lt;INSTALL_INTERFACE:include&gt;)\nament_target_dependencies(simple_world_plugin\n\"gazebo_ros\"\n\"rclcpp\"\n)\ninstall(TARGETS\nsimple_world_plugin\nDESTINATION share/${PROJECT_NAME})\ninstall(DIRECTORY\nworlds\nDESTINATION share/${PROJECT_NAME}\n)\ninstall(DIRECTORY\nlaunch\nDESTINATION share/${PROJECT_NAME}\n)\nament_package()\n</code></pre>","tags":["gazebo","world","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/#launch","title":"launch","text":"world_plug.launch.py<pre><code>import os\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\npackage_name = 'rrbot_gazebo'\nworld_file = 'world_plug.world'\ndef generate_launch_description():\npkg_gazebo_ros = get_package_share_directory('gazebo_ros')\npkg_simulation = get_package_share_directory(package_name)\n# launch Gazebo by including its definition\ngazebo = IncludeLaunchDescription(\nPythonLaunchDescriptionSource(\nos.path.join(pkg_gazebo_ros, 'launch', 'gazebo.launch.py'),\n)\n)\nverbose_arg = DeclareLaunchArgument(\n'verbose', default_value='true',\ndescription='Set \"true\" to increase messages written to terminal.'\n)\n# load the world file\nworld_arg = DeclareLaunchArgument(\n'world',\ndefault_value=[os.path.join(pkg_simulation, 'worlds', world_file), ''],\ndescription='SDF world file')\nreturn LaunchDescription([\nworld_arg,\nverbose_arg,\ngazebo,\n])\n</code></pre>","tags":["gazebo","world","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/simple_world_plugin/#usage-and-run","title":"Usage and Run","text":"<pre><code>ros2 launch rrbot_gazebo world_plug.launch.py\n</code></pre> <ul> <li>The first three log line came from gazebo log API</li> <li>The Other three came from ROS log API</li> </ul>","tags":["gazebo","world","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/","title":"ROS2 module plugin template","text":"<p>Module plugin minimal template show how to</p> <ul> <li>subscribe message from ROS</li> <li>publish message to ROS</li> <li>logging</li> </ul> <p>The minimal project include two projects</p> <ul> <li>Plugin (demo_gazebo_plugin)</li> <li>Tester (demo_gazebo_plugin_sim)</li> </ul>","tags":["ros2","gazebo","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#projects","title":"Projects","text":"<pre><code># Plugin\ndemo_gazebo_plugin\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 demo_gazebo_plugin\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 demo_gazebo_plugin.hpp\n\u251c\u2500\u2500 package.xml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 demo_gazebo_plugin.cpp\n\n# Tester\ndemo_gazebo_plugin_sim/\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 include\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 demo_gazebo_plugin_sim\n\u251c\u2500\u2500 launch\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sim_bringup.launch.py\n\u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 demo_model\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 model.config\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 model.sdf\n\u251c\u2500\u2500 package.xml\n\u2514\u2500\u2500 src\n</code></pre>","tags":["ros2","gazebo","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#plugin","title":"Plugin","text":"<pre><code>ros2 pkg create demo_gazebo_plugin \\\n--build-type ament_cmake \\\n--dependencies rclcpp std_msgs gazebo_ros\n</code></pre>","tags":["ros2","gazebo","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#header","title":"header","text":"demo_gazebo_plugin.hpp<pre><code>#ifndef DEMO_GAZEBO_PLUGIN_HPP\n#define DEMO_GAZEBO_PLUGIN_HPP\n\n#include &lt;gazebo/common/PID.hh&gt;\n#include &lt;gazebo/common/Plugin.hh&gt;\n#include &lt;rclcpp/rclcpp.hpp&gt;\n#include \"std_msgs/msg/string.hpp\"\n\nnamespace demo_gazebo_plugin\n{\nclass DemoGazeboPlugin : public gazebo::ModelPlugin\n{\npublic:\nDemoGazeboPlugin();\nvoid Load(gazebo::physics::ModelPtr model, sdf::ElementPtr sdf);\n\nprivate:\nrclcpp::Node::SharedPtr ros_node_;\nrclcpp::Subscription&lt;std_msgs::msg::String&gt;::SharedPtr command_sub_;\nrclcpp::Publisher&lt;std_msgs::msg::String&gt;::SharedPtr command_pub_;\nvoid sub_handler(const std_msgs::msg::String::SharedPtr msg);\n};\n}\n\n#endif\n</code></pre>","tags":["ros2","gazebo","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#plugin_1","title":"plugin","text":"demo_gazebo_plugin.cpp<pre><code>#include \"demo_gazebo_plugin/demo_gazebo_plugin.hpp\"\n#include &lt;gazebo_ros/node.hpp&gt;\n#include &lt;std_msgs/msg/string.hpp&gt;\n\nusing namespace std::placeholders;\n\nnamespace demo_gazebo_plugin\n{   const std::string SUB_TOPIC = \"/demo_gazebo_cmd\";\nconst std::string PUB_TOPIC = \"/demo_gazebo_echo\";\n\nDemoGazeboPlugin::DemoGazeboPlugin()\n{\n\n}\n\nvoid DemoGazeboPlugin::Load(gazebo::physics::ModelPtr model, sdf::ElementPtr sdf){\nros_node_ = gazebo_ros::Node::Get(sdf);\nRCLCPP_INFO(ros_node_-&gt;get_logger(), \"info Demo Gazebo Plugin\");\nRCLCPP_WARN(ros_node_-&gt;get_logger(), \"warning Demo Gazebo Plugin\");\nRCLCPP_ERROR(ros_node_-&gt;get_logger(), \"error Demo Gazebo Plugin\");\n// gzmsg &lt;&lt; \"gz message\\n\";\n// gzerr &lt;&lt; \"gz error message\\n\";\n\ncommand_pub_ = ros_node_-&gt;create_publisher&lt;std_msgs::msg::String&gt;(PUB_TOPIC, 10);\ncommand_sub_ = ros_node_-&gt;create_subscription&lt;std_msgs::msg::String&gt;(\nSUB_TOPIC,\n10,\nstd::bind(&amp;DemoGazeboPlugin::sub_handler, this, _1)\n);\n}\n\nvoid DemoGazeboPlugin::sub_handler(const std_msgs::msg::String::SharedPtr msg){\nRCLCPP_WARN(ros_node_-&gt;get_logger(), \"------ %s ------\", msg-&gt;data.c_str());\nauto echo_msg = std_msgs::msg::String();\necho_msg.data = msg-&gt;data + \"_echo\";\ncommand_pub_-&gt;publish(echo_msg);\n}\n\nGZ_REGISTER_MODEL_PLUGIN(DemoGazeboPlugin)\n}\n</code></pre>","tags":["ros2","gazebo","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#cmakeliststxt","title":"CmakeLists.txt","text":"CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(demo_gazebo_plugin)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\nadd_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(gazebo_ros REQUIRED)\nfind_package(rclcpp REQUIRED)\nfind_package(std_msgs REQUIRED)\n\nadd_library(demo_gazebo_plugin SHARED src/demo_gazebo_plugin.cpp)\n\ntarget_include_directories(demo_gazebo_plugin PUBLIC\n$&lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include&gt;\n$&lt;INSTALL_INTERFACE:include&gt;)\n\nament_target_dependencies(demo_gazebo_plugin\n\"gazebo_ros\"\n\"rclcpp\"\n\"std_msgs\")\n\ninstall(TARGETS\ndemo_gazebo_plugin\nDESTINATION share/${PROJECT_NAME})\n\nament_package()\n</code></pre>","tags":["ros2","gazebo","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#test-project","title":"Test Project","text":"<pre><code>ros2 pkg create demo_gazebo_plugin \\\n--build-type ament_cmake \\\n--dependencies demo_gazebo_plugin\n</code></pre> <ul> <li>Add plugin to model <pre><code>&lt;plugin name=\"demo_gazebo_plugin\" filename=\"libdemo_gazebo_plugin.so\"/&gt;\n</code></pre></li> </ul>","tags":["ros2","gazebo","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#launch","title":"launch","text":"<ul> <li>Set plugin path</li> <li>Launch gazebo</li> <li>Spawn model</li> </ul> sim_bringup.launch.py<pre><code>from launch import LaunchDescription\nimport os\nfrom launch_ros.actions import Node\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch.actions import (\n    AppendEnvironmentVariable, \n    DeclareLaunchArgument)\nfrom launch.substitutions import LaunchConfiguration\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nimport xacro\n\n\nPACKAGE = \"demo_gazebo_plugin_sim\"\nWORLD = \"empty.world\"\nMODEL = \"demo_model\"\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg = get_package_share_directory(PACKAGE)\n    pkg_plugin = get_package_share_directory(\"demo_gazebo_plugin\")\n    gazebo_pkg = get_package_share_directory('gazebo_ros')\n\n    verbose = LaunchConfiguration(\"verbose\")\n    arg_gazebo_verbose = DeclareLaunchArgument(\"verbose\", default_value=\"true\")\n    world = LaunchConfiguration(\"world\")\n    arg_gazebo_world = DeclareLaunchArgument(\"world\", default_value=WORLD)\n    sim_time = LaunchConfiguration(\"sim_time\")\n    arg_sim_time = DeclareLaunchArgument(\"sim_time\", default_value=\"true\")\n\n    resources = [os.path.join(pkg, \"worlds\")]\n\n    resource_env = AppendEnvironmentVariable(\n        name=\"GAZEBO_RESOURCE_PATH\", value=\":\".join(resources)\n    )\n\n    plugins = [pkg_plugin]\n\n    plugin_env = AppendEnvironmentVariable(\n        name=\"GAZEBO_PLUGIN_PATH\", value=\":\".join(plugins)\n    )\n\n    robot_description_path = os.path.join(pkg, \"models\", MODEL, \"model.sdf\")\n    doc = xacro.parse(open(robot_description_path))\n    xacro.process_doc(doc)\n    robot_description = doc.toxml()\n\n    robot_state_publisher = Node(\n        package=\"robot_state_publisher\",\n        executable=\"robot_state_publisher\",\n        parameters=[{\"use_sim_time\": sim_time, \"robot_description\": robot_description}],\n    )\n\n    gazebo = IncludeLaunchDescription(\n                PythonLaunchDescriptionSource([os.path.join(\n                    gazebo_pkg, 'launch', 'gazebo.launch.py')]),\n                    launch_arguments={'verbose': verbose, \"world\": world}.items()\n             )\n    spawn_entity = Node(\n        package=\"gazebo_ros\",\n        executable=\"spawn_entity.py\",\n        arguments=[\"-entity\", \"demo\", \"-topic\", \"robot_description\", \"-z\", \"0.0\"],\n        output=\"screen\",\n    )\n\n    ld.add_action(resource_env)\n    ld.add_action(plugin_env)\n    ld.add_action(arg_gazebo_verbose)\n    ld.add_action(arg_gazebo_world)\n    ld.add_action(arg_sim_time)\n    ld.add_action(robot_state_publisher)\n    ld.add_action(gazebo)\n    ld.add_action(spawn_entity)\n\n\n    return ld\n</code></pre>","tags":["ros2","gazebo","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#cmakeliststxt_1","title":"CMakeLists.txt","text":"CMakeLists.txt<pre><code>cmake_minimum_required(VERSION 3.8)\nproject(demo_gazebo_plugin_sim)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\nadd_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(demo_gazebo_plugin REQUIRED)\n\n\ninstall(DIRECTORY launch\nmodels\nDESTINATION share/${PROJECT_NAME})\n\n\nament_package()\n</code></pre>","tags":["ros2","gazebo","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#run--usage","title":"Run / Usage","text":"terminal1<pre><code># Run gazebo\nros2 launch demo_gazebo_plugin_sim sim_bringup.launch.py\n</code></pre> terminal2<pre><code># pub message to plugin\nros2 topic pub --once /demo_gazebo_cmd std_msgs/String \"data: hello\"\npublisher: beginning loop\npublishing #1: std_msgs.msg.String(data='hello')\n</code></pre> terminal2<pre><code># sub message from gazebo\nros2 topic echo /demo_gazebo_echo \ndata: hello_echo\n---\n</code></pre>","tags":["ros2","gazebo","plugin"]},{"location":"projects/ROS2%20mini%20projects/gazebo/module_plugin/#reference","title":"Reference","text":"<ul> <li>BoldBot gazebo plugin</li> <li>Debugging ROS2 Gazebo Plugins With VSCode</li> </ul>","tags":["ros2","gazebo","plugin"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/","title":"Robot and control2","text":"<p>Using ros_control2 to control joint position - Using gazebo hardware - Add gazebo control section and plugin - Launch and run   - position command   - get joint status</p>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#gazebo-control-hardware-and-plugin","title":"Gazebo control hardware and plugin","text":"","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#config-hardware","title":"config hardware","text":"<ul> <li>load gazebo hardware</li> <li>config joint command and state</li> </ul> <pre><code>&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n&lt;hardware&gt;\n&lt;plugin&gt;gazebo_ros2_control/GazeboSystem&lt;/plugin&gt;\n&lt;/hardware&gt;\n&lt;joint name=\"base_to_second_joint\"&gt;\n&lt;command_interface name=\"position\"/&gt;\n&lt;state_interface name=\"position\"/&gt;\n&lt;state_interface name=\"velocity\"/&gt;\n&lt;state_interface name=\"effort\"/&gt;\n&lt;/joint&gt;\n&lt;/ros2_control&gt;\n</code></pre>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#plugin","title":"plugin","text":"<pre><code>&lt;gazebo&gt;\n&lt;plugin filename=\"libgazebo_ros2_control.so\" name=\"gazebo_ros2_control\"&gt;\n&lt;parameters&gt;$(find simple_joint)/config/position.yaml&lt;/parameters&gt;\n&lt;/plugin&gt;\n&lt;/gazebo&gt;\n</code></pre>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#plugin-yaml","title":"plugin yaml","text":"position.yaml<pre><code>controller_manager:\nros__parameters:\nupdate_rate: 100  # Hz\n\nposition_controller:\ntype: position_controllers/JointGroupPositionController\n\njoint_state_broadcaster:\ntype: joint_state_broadcaster/JointStateBroadcaster\n\nposition_controller:\nros__parameters:\njoints:\n- base_to_second_joint\ninterface_name: position\ncommand_interfaces:\n- position\nstate_interfaces:\n- position\n- velocity\n</code></pre>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#demo","title":"Demo","text":"<ul> <li>Launch gazebo</li> <li>Load controllers</li> <li>Set position command</li> <li>Get state</li> </ul>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#gazebo-log","title":"gazebo log","text":"<ul> <li>load plugin</li> <li>Init hardware</li> <li>Loading controller manager</li> </ul> <pre><code>[gazebo_ros2_control]: Loading gazebo_ros2_control plugin\n[gazebo_ros2_control]: Starting gazebo_ros2_control plugin in namespace: /\n[gazebo_ros2_control]: Starting gazebo_ros2_control plugin in ros 2 node: gazebo_ros2_control\n[gazebo_ros2_control]: Loading parameter file /home/user/ros2_ws/install/simple_joint/share/simple_joint/config/position.yaml\n[gazebo_ros2_control]: connected to service!! robot_state_publisher\n[gazebo_ros2_control]: Recieved urdf from param server, parsing...\n[gazebo_ros2_control]: Loading joint: base_to_second_joint\n[gazebo_ros2_control]:  State:\n[gazebo_ros2_control]:       position\n[gazebo_ros2_control]:       velocity\n[gazebo_ros2_control]:       effort\n[gazebo_ros2_control]:  Command:\n[gazebo_ros2_control]:       position\n[resource_manager]: Initialize hardware 'GazeboSystem' \n[resource_manager]: Successful initialization of hardware 'GazeboSystem'\n[resource_manager]: 'configure' hardware 'GazeboSystem' \n[resource_manager]: Successful 'configure' of hardware 'GazeboSystem'\n[resource_manager]: 'activate' hardware 'GazeboSystem' \n[resource_manager]: Successful 'activate' of hardware 'GazeboSystem'\n[gazebo_ros2_control]: Loading controller_manager\n[gazebo_ros2_control]:  Desired controller update period (0.01 s) is slower than the gazebo simulation period (0.001 s).\n[gazebo_ros2_control]: Loaded gazebo_ros2_control.\n</code></pre>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#load-controllers","title":"load controllers","text":"","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#joint-state-controller","title":"joint state controller","text":"<pre><code>ros2 run controller_manager spawner joint_state_broadcaster\n</code></pre>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#position-controller","title":"position controller","text":"<pre><code>ros2 run controller_manager spawner position_controller\n</code></pre>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#usage","title":"usage","text":"<pre><code>ros2 control list_controllers\nposition_controller [position_controllers/JointGroupPositionController] active    \njoint_state_broadcaster[joint_state_broadcaster/JointStateBroadcaster] active\n</code></pre> <pre><code>ros2 topic list\n#\n/joint_state_broadcaster/transition_event\n/joint_states\n...\n/position_controller/commands\n/position_controller/transition_event\n/robot_description\n/rosout\n/tf\n/tf_static\n</code></pre>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#position_controllercommand","title":"position_controller/command","text":"<pre><code>ros2 topic info /position_controller/commands \nType: std_msgs/msg/Float64MultiArray\nPublisher count: 0\nSubscription count: 1\n</code></pre> <pre><code>ros2 topic pub --once \\\n/position_controller/commands  \\\nstd_msgs/msg/Float64MultiArray \\\n\"{data: [1.57]}\"\n</code></pre>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#joint_states","title":"joint_states","text":"<p><pre><code>ros2 topic echo --once /joint_states\nA message was lost!!!\n    total count change:1\n    total count: 1---\nheader:\n  stamp:\n    sec: 776\nnanosec: 550000000\nframe_id: ''\nname:\n- base_to_second_joint\nposition:\n- 1.5700000000000003\nvelocity:\n- 0.0\neffort:\n- 0.0\n---\n</code></pre> </p>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#source","title":"source","text":"","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#urdf","title":"urdf","text":"<p>```xml title=\u201drobot_v2.urdf</p> <p> <pre><code>&lt;material name=\"blue\"&gt;\n    &lt;color rgba=\"0 0 0.8 1\"/&gt;\n&lt;/material&gt;\n\n&lt;material name=\"black\"&gt;\n    &lt;color rgba=\"0 0 0 1\"/&gt;\n&lt;/material&gt;\n\n&lt;joint name=\"word2base\" type=\"fixed\"&gt;\n    &lt;parent link=\"world\"/&gt;\n    &lt;child link=\"base_link\"/&gt;\n    &lt;origin xyz=\"0.0 0.0 0.12\" rpy=\"0.0 0.0 0.0\"/&gt;\n&lt;/joint&gt;\n\n&lt;link name=\"base_link\"&gt;\n    &lt;inertial&gt;\n        &lt;mass value=\"10\" /&gt;\n        &lt;inertia ixx=\"0.4\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.4\" iyz=\"0.0\" izz=\"0.2\"/&gt;\n    &lt;/inertial&gt;\n    &lt;collision&gt;\n        &lt;geometry&gt;\n            &lt;cylinder radius=\"0.05\" length=\"0.24\" /&gt;\n        &lt;/geometry&gt;\n    &lt;/collision&gt;\n    &lt;visual&gt;\n        &lt;geometry&gt;\n            &lt;cylinder radius=\"0.05\" length=\"0.24\" /&gt;\n        &lt;/geometry&gt;\n        &lt;material name=\"black\"/&gt;\n    &lt;/visual&gt;\n&lt;/link&gt;\n\n&lt;link name=\"second_link\"&gt;\n    &lt;inertial&gt;\n        &lt;mass value=\"0.18\" /&gt;\n        &lt;inertia ixx=\"0.0002835\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.0002835\" iyz=\"0.0\" izz=\"0.000324\" /&gt;\n    &lt;/inertial&gt;\n    &lt;origin rpy=\"0.0 0.0 0.0\" xyz=\"0.0 0.0 0.0\" /&gt;\n    &lt;collision&gt;\n        &lt;geometry&gt;\n            &lt;box size=\"0.15 0.05 0.05\" /&gt;\n        &lt;/geometry&gt;\n    &lt;/collision&gt;\n    &lt;visual&gt;\n        &lt;geometry&gt;\n            &lt;box size=\"0.15 0.05 0.05\" /&gt;\n        &lt;/geometry&gt;\n        &lt;material name=\"blue\"/&gt;\n    &lt;/visual&gt;\n&lt;/link&gt;\n\n&lt;joint name=\"base_to_second_joint\" type=\"continuous\"&gt;\n    &lt;parent link=\"base_link\"/&gt;\n    &lt;child link=\"second_link\"/&gt;\n    &lt;axis xyz=\"0 0 1\"/&gt;\n    &lt;origin xyz=\"0.0 0.0 0.2\" rpy=\"0.0 0.0 0.0\"/&gt;\n    &lt;dynamics damping=\"0.1\" friction=\"1\"/&gt;\n&lt;/joint&gt;\n\n&lt;gazebo reference=\"base_link\"&gt;\n    &lt;material&gt;Gazebo/Black&lt;/material&gt;\n&lt;/gazebo&gt;\n&lt;gazebo reference=\"second_link\"&gt;\n    &lt;material&gt;Gazebo/Red&lt;/material&gt;\n&lt;/gazebo&gt;\n\n&lt;!-- Position Config --&gt;\n&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n    &lt;hardware&gt;\n        &lt;plugin&gt;gazebo_ros2_control/GazeboSystem&lt;/plugin&gt;\n    &lt;/hardware&gt;\n    &lt;joint name=\"base_to_second_joint\"&gt;\n        &lt;command_interface name=\"position\"/&gt;\n        &lt;state_interface name=\"position\"/&gt;\n        &lt;state_interface name=\"velocity\"/&gt;\n        &lt;state_interface name=\"effort\"/&gt;\n    &lt;/joint&gt;\n&lt;/ros2_control&gt;\n\n&lt;gazebo&gt;\n    &lt;plugin filename=\"libgazebo_ros2_control.so\" name=\"gazebo_ros2_control\"&gt;\n        &lt;parameters&gt;$(find simple_joint)/config/position.yaml&lt;/parameters&gt;\n        &lt;!-- &lt;parameters&gt;$(find simple_joint)/config/velocity.yaml&lt;/parameters&gt; --&gt;\n        &lt;!-- &lt;parameters&gt;$(find simple_joint)/config/effort.yaml&lt;/parameters&gt; --&gt;\n    &lt;/plugin&gt;\n&lt;/gazebo&gt;\n</code></pre> <p> ``` </p>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2/#launch","title":"launch","text":"<p><code>python title=\"position_control.launch.py\" from launch import LaunchDescription import os from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable, DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource import xacro  PACKAGE = \"simple_joint\" WORLD = \"empty.world\" URDF = \"robot_v2.urdf\"  def generate_launch_description():     ld = LaunchDescription()      pkg = get_package_share_directory(PACKAGE)     gazebo_pkg = get_package_share_directory('gazebo_ros')      verbose = LaunchConfiguration(\"verbose\")     arg_gazebo_verbose = DeclareLaunchArgument(\"verbose\", default_value=\"true\")     world = LaunchConfiguration(\"world\")     arg_gazebo_world = DeclareLaunchArgument(\"world\", default_value=WORLD)       resources = [os.path.join(pkg, \"worlds\")]      resource_env = AppendEnvironmentVariable(         name=\"GAZEBO_RESOURCE_PATH\", value=\":\".join(resources)     )      sim_time = LaunchConfiguration(\"sim_time\")     arg_sim_time = DeclareLaunchArgument(\"sim_time\", default_value=\"true\")      robot_description_path = os.path.join(pkg, \"urdf\", URDF)     doc = xacro.parse(open(robot_description_path))     xacro.process_doc(doc)     robot_description = doc.toxml()      robot_state_publisher = Node(         package=\"robot_state_publisher\",         executable=\"robot_state_publisher\",         parameters=[{\"use_sim_time\": sim_time, \"robot_description\": robot_description}],     )      gazebo = IncludeLaunchDescription(                 PythonLaunchDescriptionSource([os.path.join(                     gazebo_pkg, 'launch', 'gazebo.launch.py')]),                     launch_arguments={'verbose': verbose, \"world\": world}.items()              )      spawn_entity = Node(         package=\"gazebo_ros\",         executable=\"spawn_entity.py\",         arguments=[\"-entity\", \"demo\", \"-topic\", \"robot_description\", \"-z\", \"0.0\"],         output=\"screen\",     )      ld.add_action(resource_env)     ld.add_action(arg_gazebo_verbose)     ld.add_action(arg_gazebo_world)     ld.add_action(arg_sim_time)     ld.add_action(robot_state_publisher)     ld.add_action(gazebo)     ld.add_action(spawn_entity)     return ld</code></p>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_2/","title":"Robot and control2","text":"<p>Run controllers from launch file</p>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_2/#load-controllers-from-launch-file","title":"load controllers from launch file","text":"<ul> <li>Spawn controller with <code>controller_manager</code></li> <li>Spawn <code>joint_state_broadcaster</code> </li> <li>Spawn <code>position_controller</code></li> <li>Register to OnProcessExit event to load controller after controller</li> <li><code>join_states</code> load after robot_spawn</li> <li><code>position controller</code> load after <code>joint_states</code></li> </ul> <p>Tip</p> <p>Name set by <code>YAML</code> file</p>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_2/#controller-manager","title":"controller manager","text":"<pre><code>joint_state_broadcaster_spawner = Node(\n    package=\"controller_manager\",\n    executable=\"spawner\",\n    arguments=[\n        \"joint_state_broadcaster\",\n        \"--controller-manager\",\n        \"/controller_manager\",\n    ],\n)\n\nrobot_controller_spawner = Node(\n    package=\"controller_manager\",\n    executable=\"spawner\",\n    arguments=[\n        \"position_controller\", \n        \"--controller-manager\",\n        \"/controller_manager\"\n    ],\n)\n</code></pre>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_2/#events","title":"events","text":"<pre><code>spawn_entity_event = RegisterEventHandler(\n    event_handler=OnProcessExit(\n        target_action=spawn_entity,\n        on_exit=[joint_state_broadcaster_spawner],\n    )\n)\n\njoint_state_event = RegisterEventHandler(\n    event_handler=OnProcessExit(\n        target_action=joint_state_broadcaster_spawner,\n        on_exit=[robot_controller_spawner],\n    )\n)\n</code></pre>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_2/#source","title":"source","text":"control_v2.launch.py<pre><code>from launch import LaunchDescription\nimport os\nfrom launch_ros.actions import Node\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch.actions import (AppendEnvironmentVariable, \n    DeclareLaunchArgument,\n    RegisterEventHandler)\nfrom launch.event_handlers import OnProcessExit\nfrom launch.substitutions import LaunchConfiguration\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nimport xacro\n\nPACKAGE = \"simple_joint\"\nWORLD = \"empty.world\"\nURDF = \"robot_v2.urdf\"\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg = get_package_share_directory(PACKAGE)\n    gazebo_pkg = get_package_share_directory('gazebo_ros')\n\n    verbose = LaunchConfiguration(\"verbose\")\n    arg_gazebo_verbose = DeclareLaunchArgument(\"verbose\", default_value=\"true\")\n    world = LaunchConfiguration(\"world\")\n    arg_gazebo_world = DeclareLaunchArgument(\"world\", default_value=WORLD)\n\n\n    resources = [os.path.join(pkg, \"worlds\")]\n\n    resource_env = AppendEnvironmentVariable(\n        name=\"GAZEBO_RESOURCE_PATH\", value=\":\".join(resources)\n    )\n\n    sim_time = LaunchConfiguration(\"sim_time\")\n    arg_sim_time = DeclareLaunchArgument(\"sim_time\", default_value=\"true\")\n\n    robot_description_path = os.path.join(pkg, \"urdf\", URDF)\n    doc = xacro.parse(open(robot_description_path))\n    xacro.process_doc(doc)\n    robot_description = doc.toxml()\n\n    robot_state_publisher = Node(\n        package=\"robot_state_publisher\",\n        executable=\"robot_state_publisher\",\n        parameters=[{\"use_sim_time\": sim_time, \"robot_description\": robot_description}],\n    )\n\n    gazebo = IncludeLaunchDescription(\n                PythonLaunchDescriptionSource([os.path.join(\n                    gazebo_pkg, 'launch', 'gazebo.launch.py')]),\n                    launch_arguments={'verbose': verbose, \"world\": world}.items()\n             )\n\n    spawn_entity = Node(\n        package=\"gazebo_ros\",\n        executable=\"spawn_entity.py\",\n        arguments=[\"-entity\", \"demo\", \"-topic\", \"robot_description\", \"-z\", \"0.0\"],\n        output=\"screen\",\n    )\n\n    joint_state_broadcaster_spawner = Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\n            \"joint_state_broadcaster\",\n            \"--controller-manager\",\n            \"/controller_manager\",\n        ],\n    )\n\n    robot_controller_spawner = Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\n            \"position_controller\", \n            \"--controller-manager\",\n            \"/controller_manager\"\n        ],\n    )\n\n    spawn_entity_event = RegisterEventHandler(\n        event_handler=OnProcessExit(\n            target_action=spawn_entity,\n            on_exit=[joint_state_broadcaster_spawner],\n        )\n    )\n\n    joint_state_event = RegisterEventHandler(\n        event_handler=OnProcessExit(\n            target_action=joint_state_broadcaster_spawner,\n            on_exit=[robot_controller_spawner],\n        )\n    )\n\n    ld.add_action(resource_env)\n    ld.add_action(arg_gazebo_verbose)\n    ld.add_action(arg_gazebo_world)\n    ld.add_action(arg_sim_time)\n    ld.add_action(robot_state_publisher)\n    ld.add_action(gazebo)\n    ld.add_action(spawn_entity_event)\n    ld.add_action(joint_state_event)\n    ld.add_action(spawn_entity)\n    return ld\n</code></pre>","tags":["control","gazebo_ros2_control","gazebo","position_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/","title":"Control2 joint effort","text":"<p>Load and use effort controller</p>","tags":["control","gazebo_ros2_control","effort_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#launch-load-controllers","title":"launch: load controllers","text":"launch<pre><code>robot_controller_spawner = Node(\n    package=\"controller_manager\",\n    executable=\"spawner\",\n    arguments=[\n        \"joint_effort_controller\", \n        \"--controller-manager\",\n        \"/controller_manager\"\n    ],\n)\n</code></pre>","tags":["control","gazebo_ros2_control","effort_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#urdf-control-section","title":"urdf control section","text":"urdf<pre><code>&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n&lt;hardware&gt;\n&lt;plugin&gt;gazebo_ros2_control/GazeboSystem&lt;/plugin&gt;\n&lt;/hardware&gt;\n&lt;joint name=\"base_to_second_joint\"&gt;\n&lt;command_interface name=\"effort\"/&gt;\n&lt;state_interface name=\"position\"/&gt;\n&lt;state_interface name=\"velocity\"/&gt;\n&lt;state_interface name=\"effort\"/&gt;\n&lt;/joint&gt;\n&lt;/ros2_control&gt;\n\n&lt;gazebo&gt;\n&lt;plugin filename=\"libgazebo_ros2_control.so\" name=\"gazebo_ros2_control\"&gt;\n&lt;parameters&gt;$(find simple_joint)/config/effort.yaml&lt;/parameters&gt;\n&lt;/plugin&gt;\n&lt;/gazebo&gt;\n</code></pre>","tags":["control","gazebo_ros2_control","effort_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#usage","title":"usage","text":"<pre><code>ros2 topic list\n..\n/joint_effort_controller/commands\n/joint_effort_controller/transition_event\n/joint_state_broadcaster/transition_event\n/joint_states\n/parameter_events\n/performance_metrics\n/robot_description\n/rosout\n/tf\n/tf_static\n\n# more info about the controller\nros2 topic info /joint_effort_controller/commands\nType: std_msgs/msg/Float64MultiArray\nPublisher count: 0\nSubscription count: 1\n</code></pre> <pre><code>ros2 topic pub --once \\\n/joint_effort_controller/commands  \\\nstd_msgs/msg/Float64MultiArray \\\n\"{data: [1.1]}\"\n</code></pre>","tags":["control","gazebo_ros2_control","effort_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#source","title":"source","text":"","tags":["control","gazebo_ros2_control","effort_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#yaml-config-file","title":"yaml config file","text":"effort.yaml<pre><code>controller_manager:\nros__parameters:\nupdate_rate: 100  # Hz\n\njoint_effort_controller:\ntype: effort_controllers/JointGroupEffortController\n\njoint_state_broadcaster:\ntype: joint_state_broadcaster/JointStateBroadcaster\n\njoint_effort_controller:\nros__parameters:\njoints:\n- base_to_second_joint\ninterface_name: effort\ncommand_interfaces:\n- effort\nstate_interfaces:\n- position\n- velocity\n</code></pre>","tags":["control","gazebo_ros2_control","effort_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#roboturdf","title":"robot.urdf","text":"<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"simple_example\"&gt;\n&lt;link name=\"world\"/&gt;\n\n&lt;material name=\"blue\"&gt;\n&lt;color rgba=\"0 0 0.8 1\"/&gt;\n&lt;/material&gt;\n\n&lt;material name=\"black\"&gt;\n&lt;color rgba=\"0 0 0 1\"/&gt;\n&lt;/material&gt;\n\n&lt;joint name=\"word2base\" type=\"fixed\"&gt;\n&lt;parent link=\"world\"/&gt;\n&lt;child link=\"base_link\"/&gt;\n&lt;origin xyz=\"0.0 0.0 0.12\" rpy=\"0.0 0.0 0.0\"/&gt;\n&lt;/joint&gt;\n\n&lt;link name=\"base_link\"&gt;\n&lt;inertial&gt;\n&lt;mass value=\"10\" /&gt;\n&lt;inertia ixx=\"0.4\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.4\" iyz=\"0.0\" izz=\"0.2\"/&gt;\n&lt;/inertial&gt;\n&lt;collision&gt;\n&lt;geometry&gt;\n&lt;cylinder radius=\"0.05\" length=\"0.24\" /&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual&gt;\n&lt;geometry&gt;\n&lt;cylinder radius=\"0.05\" length=\"0.24\" /&gt;\n&lt;/geometry&gt;\n&lt;material name=\"black\"/&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n\n&lt;link name=\"second_link\"&gt;\n&lt;inertial&gt;\n&lt;mass value=\"0.18\" /&gt;\n&lt;inertia ixx=\"0.0002835\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.0002835\" iyz=\"0.0\" izz=\"0.000324\" /&gt;\n&lt;/inertial&gt;\n&lt;origin rpy=\"0.0 0.0 0.0\" xyz=\"0.0 0.0 0.0\" /&gt;\n&lt;collision&gt;\n&lt;geometry&gt;\n&lt;box size=\"0.15 0.05 0.05\" /&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual&gt;\n&lt;geometry&gt;\n&lt;box size=\"0.15 0.05 0.05\" /&gt;\n&lt;/geometry&gt;\n&lt;material name=\"blue\"/&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n\n&lt;joint name=\"base_to_second_joint\" type=\"continuous\"&gt;\n&lt;parent link=\"base_link\"/&gt;\n&lt;child link=\"second_link\"/&gt;\n&lt;axis xyz=\"0 0 1\"/&gt;\n&lt;origin xyz=\"0.0 0.0 0.2\" rpy=\"0.0 0.0 0.0\"/&gt;\n&lt;dynamics damping=\"0.1\" friction=\"1\"/&gt;\n&lt;/joint&gt;\n\n&lt;gazebo reference=\"base_link\"&gt;\n&lt;material&gt;Gazebo/Black&lt;/material&gt;\n&lt;/gazebo&gt;\n&lt;gazebo reference=\"second_link\"&gt;\n&lt;material&gt;Gazebo/Red&lt;/material&gt;\n&lt;/gazebo&gt;\n\n&lt;!-- Position Config --&gt;\n&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n&lt;hardware&gt;\n&lt;plugin&gt;gazebo_ros2_control/GazeboSystem&lt;/plugin&gt;\n&lt;/hardware&gt;\n&lt;joint name=\"base_to_second_joint\"&gt;\n&lt;command_interface name=\"effort\"/&gt;\n&lt;state_interface name=\"position\"/&gt;\n&lt;state_interface name=\"velocity\"/&gt;\n&lt;state_interface name=\"effort\"/&gt;\n&lt;/joint&gt;\n&lt;/ros2_control&gt;\n\n&lt;gazebo&gt;\n&lt;plugin filename=\"libgazebo_ros2_control.so\" name=\"gazebo_ros2_control\"&gt;\n&lt;parameters&gt;$(find simple_joint)/config/effort.yaml&lt;/parameters&gt;\n&lt;/plugin&gt;\n&lt;/gazebo&gt;\n&lt;/robot&gt;\n</code></pre>","tags":["control","gazebo_ros2_control","effort_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_effort/#launch","title":"launch","text":"<pre><code>from launch import LaunchDescription\nimport os\nfrom launch_ros.actions import Node\nfrom ament_index_python.packages import get_package_share_directory\nfrom launch.actions import (AppendEnvironmentVariable, \n    DeclareLaunchArgument,\n    RegisterEventHandler)\nfrom launch.event_handlers import OnProcessExit\nfrom launch.substitutions import LaunchConfiguration\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nimport xacro\n\nPACKAGE = \"simple_joint\"\nWORLD = \"empty.world\"\nURDF = \"robot_effort.urdf\"\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n\n    pkg = get_package_share_directory(PACKAGE)\n    gazebo_pkg = get_package_share_directory('gazebo_ros')\n\n    verbose = LaunchConfiguration(\"verbose\")\n    arg_gazebo_verbose = DeclareLaunchArgument(\"verbose\", default_value=\"true\")\n    world = LaunchConfiguration(\"world\")\n    arg_gazebo_world = DeclareLaunchArgument(\"world\", default_value=WORLD)\n\n\n    resources = [os.path.join(pkg, \"worlds\")]\n\n    resource_env = AppendEnvironmentVariable(\n        name=\"GAZEBO_RESOURCE_PATH\", value=\":\".join(resources)\n    )\n\n    sim_time = LaunchConfiguration(\"sim_time\")\n    arg_sim_time = DeclareLaunchArgument(\"sim_time\", default_value=\"true\")\n\n    robot_description_path = os.path.join(pkg, \"urdf\", URDF)\n    doc = xacro.parse(open(robot_description_path))\n    xacro.process_doc(doc)\n    robot_description = doc.toxml()\n\n    robot_state_publisher = Node(\n        package=\"robot_state_publisher\",\n        executable=\"robot_state_publisher\",\n        parameters=[{\"use_sim_time\": sim_time, \"robot_description\": robot_description}],\n    )\n\n    gazebo = IncludeLaunchDescription(\n                PythonLaunchDescriptionSource([os.path.join(\n                    gazebo_pkg, 'launch', 'gazebo.launch.py')]),\n                    launch_arguments={'verbose': verbose, \"world\": world}.items()\n             )\n\n    spawn_entity = Node(\n        package=\"gazebo_ros\",\n        executable=\"spawn_entity.py\",\n        arguments=[\"-entity\", \"demo\", \"-topic\", \"robot_description\", \"-z\", \"0.0\"],\n        output=\"screen\",\n    )\n\n    joint_state_broadcaster_spawner = Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\n            \"joint_state_broadcaster\",\n            \"--controller-manager\",\n            \"/controller_manager\",\n        ],\n    )\n\n    robot_controller_spawner = Node(\n        package=\"controller_manager\",\n        executable=\"spawner\",\n        arguments=[\n            \"joint_effort_controller\", \n            \"--controller-manager\",\n            \"/controller_manager\"\n        ],\n    )\n\n    spawn_entity_event = RegisterEventHandler(\n        event_handler=OnProcessExit(\n            target_action=spawn_entity,\n            on_exit=[joint_state_broadcaster_spawner],\n        )\n    )\n\n    joint_state_event = RegisterEventHandler(\n        event_handler=OnProcessExit(\n            target_action=joint_state_broadcaster_spawner,\n            on_exit=[robot_controller_spawner],\n        )\n    )\n\n    ld.add_action(resource_env)\n    ld.add_action(arg_gazebo_verbose)\n    ld.add_action(arg_gazebo_world)\n    ld.add_action(arg_sim_time)\n    ld.add_action(robot_state_publisher)\n    ld.add_action(gazebo)\n    ld.add_action(spawn_entity_event)\n    ld.add_action(joint_state_event)\n    ld.add_action(spawn_entity)\n    return ld\n</code></pre>","tags":["control","gazebo_ros2_control","effort_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_velocity/","title":"Control2 joint velocity","text":"<p>Load and use velocity controller</p>","tags":["control","gazebo_ros2_control","velocity_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_velocity/#launch-load-controllers","title":"launch: load controllers","text":"<pre><code>robot_controller_spawner = Node(\n    package=\"controller_manager\",\n    executable=\"spawner\",\n    arguments=[\n        \"joint_velocity_controller\", \n        \"--controller-manager\",\n        \"/controller_manager\"\n    ],\n)\n</code></pre>","tags":["control","gazebo_ros2_control","velocity_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_velocity/#urdf-control-section","title":"urdf control section","text":"<pre><code>&lt;ros2_control name=\"GazeboSystem\" type=\"system\"&gt;\n&lt;hardware&gt;\n&lt;plugin&gt;gazebo_ros2_control/GazeboSystem&lt;/plugin&gt;\n&lt;/hardware&gt;\n&lt;joint name=\"base_to_second_joint\"&gt;\n&lt;command_interface name=\"velocity\"/&gt;\n&lt;state_interface name=\"position\"/&gt;\n&lt;state_interface name=\"velocity\"/&gt;\n&lt;state_interface name=\"effort\"/&gt;\n&lt;/joint&gt;\n&lt;/ros2_control&gt;\n\n&lt;gazebo&gt;\n&lt;plugin filename=\"libgazebo_ros2_control.so\" name=\"gazebo_ros2_control\"&gt;\n&lt;parameters&gt;$(find simple_joint)/config/velocity.yaml&lt;/parameters&gt;\n&lt;/plugin&gt;\n&lt;/gazebo&gt;\n</code></pre>","tags":["control","gazebo_ros2_control","velocity_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_velocity/#usage","title":"usage","text":"<pre><code>ros2 topic pub --once \\\n/joint_velocity_controller/commands  \\\nstd_msgs/msg/Float64MultiArray \\\n\"{data: [6.28]}\"\n</code></pre>","tags":["control","gazebo_ros2_control","velocity_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/control2_velocity/#source","title":"source","text":"velocity.yaml<pre><code>controller_manager:\nros__parameters:\nupdate_rate: 100  # Hz\n\njoint_velocity_controller:\ntype: velocity_controllers/JointGroupVelocityController\n\njoint_state_broadcaster:\ntype: joint_state_broadcaster/JointStateBroadcaster\n\njoint_velocity_controller:\nros__parameters:\njoints:\n- base_to_second_joint\ninterface_name: velocity\ncommand_interfaces:\n- velocity\nstate_interfaces:\n- position\n- velocity\n</code></pre>","tags":["control","gazebo_ros2_control","velocity_controller"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/","title":"Simple joint gazebo simulation","text":"<p>launch gazebo and spawn our <code>simple_joint</code> robot - apply torque to link from gazebo gui - Add <code>gazebo_force</code> plugin - apply torque from command line</p>","tags":["urdf","gazebo","launch","gazebo_ros_force","gazebo_ros_joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/#launch-gazebo","title":"launch gazebo","text":"","tags":["urdf","gazebo","launch","gazebo_ros_force","gazebo_ros_joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/#urdf","title":"urdf","text":"<p>```xml title=\u201drobot_v1.urdf|</p> <p> <pre><code>&lt;material name=\"blue\"&gt;\n    &lt;color rgba=\"0 0 0.8 1\"/&gt;\n&lt;/material&gt;\n\n&lt;material name=\"black\"&gt;\n    &lt;color rgba=\"0 0 0 1\"/&gt;\n&lt;/material&gt;\n\n&lt;joint name=\"word2base\" type=\"fixed\"&gt;\n    &lt;parent link=\"world\"/&gt;\n    &lt;child link=\"base_link\"/&gt;\n    &lt;origin xyz=\"0.0 0.0 0.12\" rpy=\"0.0 0.0 0.0\"/&gt;\n&lt;/joint&gt;\n&lt;link name=\"base_link\"&gt;\n    &lt;inertial&gt;\n        &lt;mass value=\"10\" /&gt;\n        &lt;inertia ixx=\"0.4\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.4\" iyz=\"0.0\" izz=\"0.2\"/&gt;\n    &lt;/inertial&gt;\n    &lt;collision&gt;\n        &lt;geometry&gt;\n            &lt;cylinder radius=\"0.05\" length=\"0.24\" /&gt;\n        &lt;/geometry&gt;\n    &lt;/collision&gt;\n    &lt;visual&gt;\n        &lt;geometry&gt;\n            &lt;cylinder radius=\"0.05\" length=\"0.24\" /&gt;\n        &lt;/geometry&gt;\n        &lt;material name=\"black\"/&gt;\n    &lt;/visual&gt;\n&lt;/link&gt;\n\n&lt;link name=\"second_link\"&gt;\n    &lt;inertial&gt;\n        &lt;mass value=\"0.18\" /&gt;\n        &lt;inertia ixx=\"0.0002835\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.0002835\" iyz=\"0.0\" izz=\"0.000324\" /&gt;\n    &lt;/inertial&gt;\n    &lt;origin rpy=\"0.0 0.0 0.0\" xyz=\"0.0 0.0 0.0\" /&gt;\n    &lt;collision&gt;\n        &lt;geometry&gt;\n            &lt;box size=\"0.05 0.05 0.15\" /&gt;\n        &lt;/geometry&gt;\n    &lt;/collision&gt;\n    &lt;visual&gt;\n        &lt;geometry&gt;\n            &lt;box size=\"0.05 0.05 0.15\" /&gt;\n        &lt;/geometry&gt;\n        &lt;material name=\"blue\"/&gt;\n    &lt;/visual&gt;\n&lt;/link&gt;\n\n&lt;joint name=\"base_to_second_joint\" type=\"continuous\"&gt;\n    &lt;parent link=\"base_link\"/&gt;\n    &lt;child link=\"second_link\"/&gt;\n    &lt;axis xyz=\"0 0 1\"/&gt;\n    &lt;origin xyz=\"0.0 0.0 0.2\" rpy=\"0.0 0.0 0.0\"/&gt;\n&lt;/joint&gt;\n\n&lt;gazebo&gt;\n    &lt;plugin name=\"gazebo_ros_joint_state_publisher\" filename=\"libgazebo_ros_joint_state_publisher.so\"&gt;\n        &lt;update_rate&gt;50&lt;/update_rate&gt;\n        &lt;joint_name&gt;base_to_second_joint&lt;/joint_name&gt;\n    &lt;/plugin&gt;\n&lt;/gazebo&gt;\n\n&lt;gazebo reference=\"base_link\"&gt;\n    &lt;material&gt;Gazebo/Black&lt;/material&gt;\n&lt;/gazebo&gt;\n&lt;gazebo reference=\"second_link\"&gt;\n    &lt;material&gt;Gazebo/Red&lt;/material&gt;\n&lt;/gazebo&gt;\n</code></pre> <p> ``` </p>","tags":["urdf","gazebo","launch","gazebo_ros_force","gazebo_ros_joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/#launch","title":"launch","text":"<p><code>python title=\"gz_sim.launch.py\" from launch import LaunchDescription import os from launch_ros.actions import Node from ament_index_python.packages import get_package_share_directory from launch.actions import AppendEnvironmentVariable, DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource import xacro  PACKAGE = \"simple_joint\" WORLD = \"empty.world\" URDF = \"robot_v1.urdf\"  def generate_launch_description():     ld = LaunchDescription()      pkg = get_package_share_directory(PACKAGE)     gazebo_pkg = get_package_share_directory('gazebo_ros')      verbose = LaunchConfiguration(\"verbose\")     arg_gazebo_verbose = DeclareLaunchArgument(\"verbose\", default_value=\"true\")     world = LaunchConfiguration(\"world\")     arg_gazebo_world = DeclareLaunchArgument(\"world\", default_value=WORLD)       resources = [os.path.join(pkg, \"worlds\")]      resource_env = AppendEnvironmentVariable(         name=\"GAZEBO_RESOURCE_PATH\", value=\":\".join(resources)     )      sim_time = LaunchConfiguration(\"sim_time\")     arg_sim_time = DeclareLaunchArgument(\"sim_time\", default_value=\"true\")      robot_description_path = os.path.join(pkg, \"urdf\", URDF)     doc = xacro.parse(open(robot_description_path))     xacro.process_doc(doc)     robot_description = doc.toxml()      robot_state_publisher = Node(         package=\"robot_state_publisher\",         executable=\"robot_state_publisher\",         parameters=[{\"use_sim_time\": sim_time, \"robot_description\": robot_description}],     )      gazebo = IncludeLaunchDescription(                 PythonLaunchDescriptionSource([os.path.join(                     gazebo_pkg, 'launch', 'gazebo.launch.py')]),                     launch_arguments={'verbose': verbose, \"world\": world}.items()              )      spawn_entity = Node(         package=\"gazebo_ros\",         executable=\"spawn_entity.py\",         arguments=[\"-entity\", \"demo\", \"-topic\", \"robot_description\", \"-z\", \"0.0\"],         output=\"screen\",     )      ld.add_action(resource_env)     ld.add_action(arg_gazebo_verbose)     ld.add_action(arg_gazebo_world)     ld.add_action(arg_sim_time)     ld.add_action(robot_state_publisher)     ld.add_action(gazebo)     ld.add_action(spawn_entity)     return ld</code></p>","tags":["urdf","gazebo","launch","gazebo_ros_force","gazebo_ros_joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/#apply-torque","title":"Apply torque","text":"<ul> <li>Apply torque to joint</li> </ul> <p>gazebo joint state plugin</p> <pre><code>&lt;gazebo&gt;\n    &lt;plugin name=\"gazebo_ros_joint_state_publisher\" filename=\"libgazebo_ros_joint_state_publisher.so\"&gt;\n        &lt;update_rate&gt;50&lt;/update_rate&gt;\n        &lt;joint_name&gt;base_to_second_joint&lt;/joint_name&gt;\n    &lt;/plugin&gt;\n&lt;/gazebo&gt;\n</code></pre> <p></p>","tags":["urdf","gazebo","launch","gazebo_ros_force","gazebo_ros_joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/#apply-force-torque-using-wrench-msg","title":"Apply Force/ Torque using Wrench msg","text":"<p>Create topic with <code>Wrench</code> message</p> <p>Note</p> <p><code>xml  &lt;joint name=\"base_to_second_joint\" type=\"continuous\"&gt;     &lt;parent link=\"base_link\"/&gt;     &lt;child link=\"second_link\"/&gt;     &lt;axis xyz=\"0 0 1\"/&gt;     &lt;origin xyz=\"0.0 0.0 0.2\" rpy=\"0.0 0.0 0.0\"/&gt;     &lt;dynamics damping=\"0.1\" friction=\"1\"/&gt; &lt;/joint&gt;</code></p> <p><code>xml &lt;gazebo&gt;     &lt;plugin name=\"gazebo_ros_force\" filename=\"libgazebo_ros_force.so\"&gt;         &lt;link_name&gt;second_link&lt;/link_name&gt;         &lt;force_frame&gt;world&lt;/force_frame&gt;     &lt;/plugin&gt; &lt;/gazebo&gt; <pre><code>### Wrench msg\n</code></pre> ros2 topic pub --once /gazebo_ros_force geometry_msgs/msg/Wrench \"{force: {x: 0.0, y: 0.0, z: 0.0}, torque: {x: 0.0,y: 0.0,z: 1.1}}\"</code></p>","tags":["urdf","gazebo","launch","gazebo_ros_force","gazebo_ros_joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_gazebo/#reference","title":"Reference","text":"<ul> <li>urdf joint</li> <li>gazebo-ros-force</li> </ul>","tags":["urdf","gazebo","launch","gazebo_ros_force","gazebo_ros_joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/","title":"Robot URDF tf and joints position","text":"<p>launch robot and control it\u2019s joint using - joint_state_publisher - joint_state_publisher using preset position (param and yaml file) - joint_state_publisher_gui</p>","tags":["urdf","rviz","launch","robot_state_publisher","joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#urdf","title":"urdf","text":"robot.urdf<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"simple_example\"&gt;\n&lt;link name=\"world\"/&gt;\n\n&lt;material name=\"blue\"&gt;\n&lt;color rgba=\"0 0 0.8 1\"/&gt;\n&lt;/material&gt;\n\n&lt;material name=\"black\"&gt;\n&lt;color rgba=\"0 0 0 1\"/&gt;\n&lt;/material&gt;\n\n&lt;joint name=\"word2base\" type=\"fixed\"&gt;\n&lt;parent link=\"world\"/&gt;\n&lt;child link=\"base_link\"/&gt;\n&lt;origin xyz=\"0.0 0.0 0.12\" rpy=\"0.0 0.0 0.0\"/&gt;\n&lt;/joint&gt;\n\n&lt;link name=\"base_link\"&gt;\n&lt;inertial&gt;\n&lt;mass value=\"10\" /&gt;\n&lt;inertia ixx=\"0.4\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.4\" iyz=\"0.0\" izz=\"0.2\"/&gt;\n&lt;/inertial&gt;\n&lt;collision&gt;\n&lt;geometry&gt;\n&lt;cylinder radius=\"0.05\" length=\"0.24\" /&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual&gt;\n&lt;geometry&gt;\n&lt;cylinder radius=\"0.05\" length=\"0.24\" /&gt;\n&lt;/geometry&gt;\n&lt;material name=\"black\"/&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n\n&lt;link name=\"second_link\"&gt;\n&lt;inertial&gt;\n&lt;mass value=\"0.18\" /&gt;\n&lt;inertia ixx=\"0.0002835\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"0.0002835\" iyz=\"0.0\" izz=\"0.000324\" /&gt;\n&lt;/inertial&gt;\n&lt;origin rpy=\"0.0 0.0 0.0\" xyz=\"0.0 0.0 0.0\" /&gt;\n&lt;collision&gt;\n&lt;geometry&gt;\n&lt;box size=\"0.05 0.05 0.15\" /&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;visual&gt;\n&lt;geometry&gt;\n&lt;box size=\"0.05 0.05 0.15\" /&gt;\n&lt;/geometry&gt;\n&lt;material name=\"blue\"/&gt;\n&lt;/visual&gt;\n&lt;/link&gt;\n\n&lt;joint name=\"base_to_second_joint\" type=\"continuous\"&gt;\n&lt;parent link=\"base_link\"/&gt;\n&lt;child link=\"second_link\"/&gt;\n&lt;axis xyz=\"0 0 1\"/&gt;\n&lt;origin xyz=\"0.0 0.0 0.2\" rpy=\"0.0 0.0 0.0\"/&gt;\n&lt;/joint&gt;\n\n&lt;/robot&gt;\n</code></pre>","tags":["urdf","rviz","launch","robot_state_publisher","joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#launch","title":"launch","text":"<ul> <li>load robot urdf </li> <li>run <code>robot_state_publisher</code></li> <li>run <code>joint_state_publisher</code></li> <li>run rviz to check <code>robot_description</code> and joints</li> </ul> sim_visual_v1.launch.py<pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\nfrom ament_index_python.packages import get_package_share_directory\nimport os\nimport xacro\n\nPACKAGE = \"simple_joint\"\nURDF = \"robot.urdf\"\n\n\ndef generate_launch_description():\n    ld = LaunchDescription()\n    pkg = get_package_share_directory(PACKAGE)\n\n    robot_description_path = os.path.join(pkg, \"urdf\", URDF)\n    doc = xacro.parse(open(robot_description_path))\n    xacro.process_doc(doc)\n\n    robot_state_publisher = Node(\n        package=\"robot_state_publisher\",\n        executable=\"robot_state_publisher\",\n        parameters=[{\"robot_description\": doc.toxml()}],\n    )\n\n    joint_state_publisher_node = Node(\n        package=\"joint_state_publisher\",\n        executable=\"joint_state_publisher\",\n        name=\"joint_state_publisher\"\n    )\n\n    rviz_node = Node(\n        package=\"rviz2\",\n        namespace=\"\",\n        executable=\"rviz2\",\n        name=\"rviz2\",\n        arguments=[\"-d\" + os.path.join(pkg, \"config\", \"rviz.rviz\")],\n    )\n\n    ld.add_action(joint_state_publisher_node)\n    ld.add_action(robot_state_publisher)\n    ld.add_action(rviz_node)\n    return ld\n</code></pre>","tags":["urdf","rviz","launch","robot_state_publisher","joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#topics-and-nodes","title":"topics and nodes","text":"<pre><code>ros2 topic list\n#\n...\n/joint_states\n/robot_description\n/rosout\n/tf\n/tf_static\n</code></pre>","tags":["urdf","rviz","launch","robot_state_publisher","joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#rviz","title":"rviz","text":"","tags":["urdf","rviz","launch","robot_state_publisher","joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#tf-tree","title":"tf tree","text":"","tags":["urdf","rviz","launch","robot_state_publisher","joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#joint-preset","title":"joint preset","text":"<ul> <li>using <code>joint_state_publisher</code> to set joint position</li> </ul> <pre><code>joint_state_publisher_node = Node(\n        package=\"joint_state_publisher\",\n        executable=\"joint_state_publisher\",\n        name=\"joint_state_publisher\",\n        parameters=[{'zeros.base_to_second_joint': 1.5}]\n    )\n</code></pre> <p>or using <code>yaml</code></p> <pre><code>config = os.path.join(\n    pkg,\n    'config',\n    'init_position.yaml'\n    )\n\njoint_state_publisher_node = Node(\n    package=\"joint_state_publisher\",\n    executable=\"joint_state_publisher\",\n    name=\"joint_state_publisher\",\n    parameters=[config]\n)\n</code></pre> config/init_position.yaml<pre><code>joint_state_publisher:\nros__parameters:\nzeros:\nbase_to_second_joint: 1.57\n</code></pre>","tags":["urdf","rviz","launch","robot_state_publisher","joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#joint_state_gui","title":"joint_state_gui","text":"<p>joint_state_publisher_gui<pre><code>joint_state_publisher_node = Node(\n    package=\"joint_state_publisher_gui\",\n    executable=\"joint_state_publisher_gui\",\n    name=\"joint_state_publisher_gui\",\n    parameters=[config]\n)\n</code></pre> </p>","tags":["urdf","rviz","launch","robot_state_publisher","joint_state_publisher"]},{"location":"projects/ROS2%20mini%20projects/simple_joint/urdf_rviz/#reference","title":"Reference","text":"<ul> <li>Getting Ready for ROS Part 6: The Transform System</li> </ul>","tags":["urdf","rviz","launch","robot_state_publisher","joint_state_publisher"]},{"location":"projects/follow_the_line/","title":"Follow the line","text":"","tags":["ros2","projects"]},{"location":"projects/follow_the_line/#project","title":"Project","text":"<pre><code>\u251c\u2500\u2500 basic_mobile_robot\n\u2502   \u251c\u2500\u2500 follow_line.py\n\u2502   \u251c\u2500\u2500 follow.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 viewer.py\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 config\n\u2502   \u2514\u2500\u2500 rviz.rviz\n\u251c\u2500\u2500 description\n\u2502   \u251c\u2500\u2500 camera.xacro\n\u2502   \u251c\u2500\u2500 depth_camera.xacro\n\u2502   \u251c\u2500\u2500 face.xacro\n\u2502   \u251c\u2500\u2500 gazebo_control.xacro\n\u2502   \u251c\u2500\u2500 inertial_macros.xacro\n\u2502   \u251c\u2500\u2500 lidar.xacro\n\u2502   \u251c\u2500\u2500 robot_core.xacro\n\u2502   \u251c\u2500\u2500 robot.urdf.xacro\n\u2502   \u2514\u2500\u2500 ros2_control.xacro\n\u251c\u2500\u2500 launch\n\u2502   \u251c\u2500\u2500 articubot_one\n\u2502   \u2502   \u251c\u2500\u2500 articubot_one.launch.py\n\u2502   \u2502   \u2514\u2500\u2500 rsp.launch.py\n\u2502   \u2514\u2500\u2500 follow\n\u2502       \u2514\u2500\u2500 follow.launch.py\n\u251c\u2500\u2500 models\n\u2502   \u2514\u2500\u2500 ground_course\n\u2502       \u251c\u2500\u2500 materials\n\u2502       \u2502   \u251c\u2500\u2500 scripts\n\u2502       \u2502   \u2502   \u2514\u2500\u2500 course.material\n\u2502       \u2502   \u2514\u2500\u2500 textures\n\u2502       \u2502       \u2514\u2500\u2500 course.png\n\u2502       \u251c\u2500\u2500 model.config\n\u2502       \u2514\u2500\u2500 model.sdf\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 src\n\u2514\u2500\u2500 worlds\n    \u2514\u2500\u2500 course.world\n</code></pre>","tags":["ros2","projects"]},{"location":"projects/follow_the_line/#demo","title":"Demo","text":"<pre><code>ros2 launch basic_mobile_robot follow.launch.py\n</code></pre>","tags":["ros2","projects"]},{"location":"projects/ros2_project_from_dev_to_prod/","title":"Objective","text":"<ul> <li>write basic python package</li> <li>with external dependencies</li> <li>git hook</li> <li>run lint</li> <li>run tests</li> <li>pack the package</li> <li>deploy as <code>DEB</code> package</li> <li>check deploy package with docker</li> <li>multi arch (x86, arm)</li> </ul>","tags":["ros2","projects","deploy"]},{"location":"projects/ros2_project_from_dev_to_prod/#steps","title":"steps","text":"<ul> <li>minimal python package with pub sub nodes</li> <li>create debian package</li> <li>create docker image</li> <li>run with docker compose</li> </ul>","tags":["ros2","projects","deploy"]},{"location":"projects/ros2_project_from_dev_to_prod/create_deb_package/","title":"Create debian package from ROS package","text":"","tags":["ros2","projects","deploy"]},{"location":"projects/ros2_project_from_dev_to_prod/create_deb_package/#prerequisites","title":"Prerequisites","text":"<ul> <li>Set <code>package.xml</code> with all dependencies</li> <li>Init rosdep and install all package dependencies</li> </ul> <p>rosdep</p> <p>rosdep is a command-line tool for installing system dependencies. </p>","tags":["ros2","projects","deploy"]},{"location":"projects/ros2_project_from_dev_to_prod/create_deb_package/#install","title":"install","text":"<pre><code>sudo apt install \\\npython3-bloom \\\npython3-rosdep \\\nfakeroot \\\ndebhelper \\\ndh-python\n</code></pre>","tags":["ros2","projects","deploy"]},{"location":"projects/ros2_project_from_dev_to_prod/create_deb_package/#init-rosdep","title":"init rosdep","text":"<pre><code>sudo rosdep init\nresdep update\n</code></pre>","tags":["ros2","projects","deploy"]},{"location":"projects/ros2_project_from_dev_to_prod/create_deb_package/#usage","title":"usage","text":"<pre><code>cd &lt;package root folder&gt;\n# run \nbloom-generate rosdebian\n# run\nfakeroot debian/rules binary\n</code></pre> <p>Assuming that all required dependencies are available and that compilation succeeds, the new package will be available in the parent directory of this directory.</p>","tags":["ros2","projects","deploy"]},{"location":"projects/ros2_project_from_dev_to_prod/create_deb_package/#reference","title":"Reference","text":"<ul> <li>Building a custom Debian package</li> </ul>","tags":["ros2","projects","deploy"]},{"location":"projects/ros2_project_from_dev_to_prod/make_docker/","title":"Create ROS2 Docker image","text":"<p>Following the ROS install instructions - Base on ubuntu 22.04 - Install language - Install timezone - Install common application - Create new source.list for ROS and install <code>humble-base</code></p> <p>Additional installs and settings - Install some DEV tools like compiler, debugger and python pip - Add user <code>ros</code></p> <pre><code>FROM ubuntu:22.04 AS base\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install language\nRUN apt-get update &amp;&amp; apt-get install -y \\\nlocales \\\n&amp;&amp; locale-gen en_US.UTF-8 \\\n&amp;&amp; update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\nENV LANG en_US.UTF-8\n\n# Install timezone\nRUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime \\\n&amp;&amp; export DEBIAN_FRONTEND=noninteractive \\\n&amp;&amp; apt-get update \\\n&amp;&amp; apt-get install -y tzdata \\\n&amp;&amp; dpkg-reconfigure --frontend noninteractive tzdata \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n\nRUN apt-get update &amp;&amp; apt-get -y upgrade \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install common programs\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\ncurl \\\ngnupg2 \\\nlsb-release \\\nsudo \\\nsoftware-properties-common \\\nwget \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install ROS2\nRUN sudo add-apt-repository universe \\\n&amp;&amp; curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \\\n&amp;&amp; echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null \\\n&amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\nros-humble-ros-base \\\npython3-argcomplete \\\n&amp;&amp; rm -rf /var/lib/apt/lists/*\n\nENV ROS_DISTRO=humble\nENV AMENT_PREFIX_PATH=/opt/ros/humble\nENV COLCON_PREFIX_PATH=/opt/ros/humble\nENV LD_LIBRARY_PATH=/opt/ros/humble/lib\nENV PATH=/opt/ros/humble/bin:$PATH\nENV PYTHONPATH=/opt/ros/humble/lib/python3.10/site-packages\nENV ROS_PYTHON_VERSION=3\nENV ROS_VERSION=2\nENV DEBIAN_FRONTEND=\n\n###########################################\n#  Develop image \n###########################################\nFROM base AS dev\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\nbash-completion \\\nbuild-essential \\\ncmake \\\ngdb \\\ngit \\\nopenssh-client \\\npython3-argcomplete \\\npython3-pip \\\nros-dev-tools \\\nvim \\\n&amp;&amp; rm -rf /var/lib/apt/lists/* \\\n&amp;&amp; rosdep init || echo \"rosdep already initialized\"\n\nARG USERNAME=ros\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Create a non-root user\nRUN groupadd --gid $USER_GID $USERNAME \\\n&amp;&amp; useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n# [Optional] Add sudo support for the non-root user\n  &amp;&amp; apt-get update \\\n&amp;&amp; apt-get install -y sudo git-core bash-completion \\\n&amp;&amp; echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\\\n&amp;&amp; chmod 0440 /etc/sudoers.d/$USERNAME \\\n# Cleanup\n  &amp;&amp; rm -rf /var/lib/apt/lists/* \\\n&amp;&amp; echo \"if [ -f /opt/ros/${ROS_DISTRO}/setup.bash ]; then source /opt/ros/${ROS_DISTRO}/setup.bash; fi\" &gt;&gt; /home/$USERNAME/.bashrc\n\nENV DEBIAN_FRONTEND=\nENV AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS=1\n</code></pre>","tags":["ros2","projects","deploy","docker"]},{"location":"projects/ros2_project_from_dev_to_prod/make_docker/#reference","title":"Reference","text":"<ul> <li>Allison github</li> </ul>","tags":["ros2","projects","deploy","docker"]},{"location":"projects/ros2_project_from_dev_to_prod/minimal_python_package/","title":"ROS2 python project deploy minimal package","text":"<pre><code>import rclpy\nfrom rclpy.node import Node\nfrom rclpy.qos import qos_profile_system_default\nfrom std_msgs.msg import Int32\n\nTOPIC = \"my_topic\"\nPERIOD = 1.0\n\n\nclass MyNode(Node):\n    def __init__(self) -&gt; None:\n        node_name = \"minimal_pub\"\n        super().__init__(node_name)\n        self.__pub = self.create_publisher(\n            Int32, TOPIC, qos_profile=qos_profile_system_default\n        )\n        self.__timer = self.create_timer(PERIOD, self.__timer_handler)\n        self.__counter = 0\n        self.get_logger().info(\"start minimal pub\")\n\n    def __timer_handler(self) -&gt; int:\n        msg = Int32()\n        msg.data = self.__counter\n        self.__pub.publish(msg)\n        self.__counter += 1\n        self.get_logger().info(f\"publish message count: {self.__counter}\")\n\n\ndef main(args=None) -&gt; None:\n    rclpy.init(args=args)\n    node = MyNode()\n    try:\n        rclpy.spin(node)\n    except KeyboardInterrupt:\n        print(\"User exit\")\n    finally:\n        node.destroy_node()\n        rclpy.try_shutdown()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["ros2","projects","deploy"]},{"location":"projects/ros2_project_from_dev_to_prod/run_with_docker_compose/","title":"Run with docker compose","text":"<pre><code>version: '3'\nservices:\nros:\nimage: humble:dev\nvolumes:\n- /home/user/projects/py_cook_ws/src:/tmp\n</code></pre>","tags":["ros2","projects","deploy"]},{"location":"projects/vrx/buoyancy_plugin/","title":"vrx buoyancy plugin","text":"<p>vrx  buoyancy plugin demo plugin code and world from vrx project usv_gazebo_plugins buoyancy_gazebo_plugin depend on <code>wave_gazebo_plugins</code> project also from vrx project</p>","tags":["vrx","buoyancy"]},{"location":"projects/vrx/buoyancy_plugin/#plugin","title":"Plugin","text":"<ul> <li>linear drag</li> </ul> \\[ F_d = \\beta_l m \\frac{V}{V_T} (\\boldsymbol{v_w} - \\boldsymbol{v_c}) \\] <ul> <li>angular drag (torque)</li> </ul> \\[ T_d = \\beta_a m \\frac{V}{V_T} L^2 \\omega \\] <pre><code>&lt;model name=\"2_box\"&gt;\n&lt;pose&gt;0.1 0.5 0.5 1.0 0 0&lt;/pose&gt;\n&lt;static&gt;False&lt;/static&gt;\n&lt;link name=\"link\"&gt;\n&lt;visual name=\"visual\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;0.171 0.171 0.171&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/visual&gt;\n&lt;collision name=\"collision\"&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;0.171 0.171 0.171&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/collision&gt;\n&lt;inertial&gt;\n&lt;mass&gt;2&lt;/mass&gt;\n&lt;inertia&gt;\n&lt;ixx&gt;0.009708012000000002&lt;/ixx&gt;\n&lt;ixy&gt;0&lt;/ixy&gt;\n&lt;ixz&gt;0&lt;/ixz&gt;\n&lt;iyy&gt;0.009708012000000002&lt;/iyy&gt;\n&lt;iyz&gt;0&lt;/iyz&gt;\n&lt;izz&gt;0.009708012000000002&lt;/izz&gt;\n&lt;/inertia&gt;\n&lt;/inertial&gt;\n&lt;/link&gt;\n&lt;plugin filename=\"libbuoyancy_gazebo_plugin.so\" name=\"BuoyancyPlugin\"&gt;\n&lt;fluid_density&gt;1000&lt;/fluid_density&gt;\n&lt;fluid_level&gt;0.0&lt;/fluid_level&gt;\n&lt;linear_drag&gt;10.0&lt;/linear_drag&gt;\n&lt;angular_drag&gt;4.0&lt;/angular_drag&gt;\n&lt;buoyancy name=\"buoyancy\"&gt;\n&lt;link_name&gt;link&lt;/link_name&gt;\n&lt;geometry&gt;\n&lt;box&gt;\n&lt;size&gt;0.171 0.171 0.171&lt;/size&gt;\n&lt;/box&gt;\n&lt;/geometry&gt;\n&lt;/buoyancy&gt;\n&lt;/plugin&gt;\n&lt;/model&gt;\n</code></pre> <p>Note</p> <p>The above code is part of <code>buoyancy_plugin_demo.world</code></p>","tags":["vrx","buoyancy"]},{"location":"projects/vrx/buoyancy_plugin/#references","title":"References","text":"<p>-vrx github -vrx buoyancy_plugin</p>","tags":["vrx","buoyancy"]}]}