{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".md-typeset .cover { display: none; } .md-typeset .cover + hr { display: none; } .md-typeset h1, .md-typeset h2 { color: orangered; } .md-typeset .cards .card { border-radius: 1em; padding: 1em; } .md-typeset .cards .col:first-of-type { margin-left: -1em; } .md-typeset .cards .col:last-of-type { margin-right: -1em; } .md-typeset .cards .card h2 { margin-top: 0; } Robots Inside # First steps in robotics Systems. From hardware to applications. Step by step. ::: row cards ::: col ::: card ## :material-book: Blog Each post is what I've learned, and I wrote them down to share. Hope you'll find something interesting there. [Read news](blog/index.md){.md-button} ::: col ::: card ## :material-file-code: Projects A list of my projects which are done for learning and practicing in free time. [See projects](projects/index.md){.md-button}","title":"Home"},{"location":"#robots-inside","text":"First steps in robotics Systems. From hardware to applications. Step by step. ::: row cards ::: col ::: card ## :material-book: Blog Each post is what I've learned, and I wrote them down to share. Hope you'll find something interesting there. [Read news](blog/index.md){.md-button} ::: col ::: card ## :material-file-code: Projects A list of my projects which are done for learning and practicing in free time. [See projects](projects/index.md){.md-button}","title":"Robots Inside"},{"location":"blog/","text":"","title":"Recent posts"},{"location":"blog/ROS2/colcon/","tags":["ros2","colcon"],"text":"Colcon # colcon is a command line tool to improve the workflow of building, testing and using multiple software packages. It automates the process, handles the ordering and sets up the environment to use the packages. Build tools # Build tools are programs that automate the creation of executable applications from source code - Compiling - Linking - Packaging Build system # Repeatable: ensure that that the project is built exactly the same way every time it builds Reproducible: easily recreate (reproduce) the steps that are required to perform a build Standard ensure that all of your projects follow the same steps and implement best practices Note Make Ninja Generator # CMake: create build system for specific O.S or system Meta build # Install # sudo apt install python3-colcon-common-extensions Usage # In the root of the workspace run colcon build References # ROS2 foxy Using colcon to build packages\uf0c1","title":"Colcon build system"},{"location":"blog/ROS2/colcon/#colcon","text":"colcon is a command line tool to improve the workflow of building, testing and using multiple software packages. It automates the process, handles the ordering and sets up the environment to use the packages.","title":"Colcon"},{"location":"blog/ROS2/colcon/#build-tools","text":"Build tools are programs that automate the creation of executable applications from source code - Compiling - Linking - Packaging","title":"Build tools"},{"location":"blog/ROS2/colcon/#build-system","text":"Repeatable: ensure that that the project is built exactly the same way every time it builds Reproducible: easily recreate (reproduce) the steps that are required to perform a build Standard ensure that all of your projects follow the same steps and implement best practices Note Make Ninja","title":"Build system"},{"location":"blog/ROS2/colcon/#generator","text":"CMake: create build system for specific O.S or system","title":"Generator"},{"location":"blog/ROS2/colcon/#meta-build","text":"","title":"Meta build"},{"location":"blog/ROS2/colcon/#install","text":"sudo apt install python3-colcon-common-extensions","title":"Install"},{"location":"blog/ROS2/colcon/#usage","text":"In the root of the workspace run colcon build","title":"Usage"},{"location":"blog/ROS2/colcon/#references","text":"ROS2 foxy Using colcon to build packages\uf0c1","title":"References"},{"location":"blog/ROS2/tutorial/launch_hello/","tags":["ros2","launch",101],"text":"launch source code # hello.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () talker_node = Node ( package = \"basic\" , executable = \"simple_pub\" , ) listener_node = Node ( package = \"basic\" , executable = \"simple_sub\" ) ld . add_action ( talker_node ) ld . add_action ( listener_node ) return ld Note Your launch file must contain this function: generate_launch_description(), and must return a LaunchDescription object. setup.py # Add entry to data_files copy the launch folder to package install folder setup.py data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( \"share\" , package_name ), glob ( \"launch/*.launch.py\" )) ], Note copy launch files using CMakeLists.txt ... install ( DIRECTORY launch DESTINATION share/ ${ PROJECT_NAME } ) usage # terminal1 ros2 launch basic hello.launch.py # Result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-08-52-59-435522-lap2-73549 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ simple_pub-1 ] : process started with pid [ 73551 ] [ INFO ] [ simple_sub-2 ] : process started with pid [ 73553 ] [ simple_pub-1 ] [ INFO ] [ 1649224380 .693329543 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ simple_sub-2 ] [ INFO ] [ 1649224380 .693398516 ] [ minimal_subscriber ] : I heard: pub simple: 0 [ simple_pub-1 ] [ INFO ] [ 1649224381 .683970139 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ simple_sub-2 ] [ INFO ] [ 1649224381 .684546630 ] [ minimal_subscriber ] : I heard: pub simple: 1 References # ROS2 Launch File Example \u2013 How to Start All Your Nodes at Once","title":"Part2 - Launch file"},{"location":"blog/ROS2/tutorial/launch_hello/#launch-source-code","text":"hello.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () talker_node = Node ( package = \"basic\" , executable = \"simple_pub\" , ) listener_node = Node ( package = \"basic\" , executable = \"simple_sub\" ) ld . add_action ( talker_node ) ld . add_action ( listener_node ) return ld Note Your launch file must contain this function: generate_launch_description(), and must return a LaunchDescription object.","title":"launch source code"},{"location":"blog/ROS2/tutorial/launch_hello/#setuppy","text":"Add entry to data_files copy the launch folder to package install folder setup.py data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( \"share\" , package_name ), glob ( \"launch/*.launch.py\" )) ], Note copy launch files using CMakeLists.txt ... install ( DIRECTORY launch DESTINATION share/ ${ PROJECT_NAME } )","title":"setup.py"},{"location":"blog/ROS2/tutorial/launch_hello/#usage","text":"terminal1 ros2 launch basic hello.launch.py # Result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-08-52-59-435522-lap2-73549 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ simple_pub-1 ] : process started with pid [ 73551 ] [ INFO ] [ simple_sub-2 ] : process started with pid [ 73553 ] [ simple_pub-1 ] [ INFO ] [ 1649224380 .693329543 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ simple_sub-2 ] [ INFO ] [ 1649224380 .693398516 ] [ minimal_subscriber ] : I heard: pub simple: 0 [ simple_pub-1 ] [ INFO ] [ 1649224381 .683970139 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ simple_sub-2 ] [ INFO ] [ 1649224381 .684546630 ] [ minimal_subscriber ] : I heard: pub simple: 1","title":"usage"},{"location":"blog/ROS2/tutorial/launch_hello/#references","text":"ROS2 Launch File Example \u2013 How to Start All Your Nodes at Once","title":"References"},{"location":"blog/ROS2/tutorial/launch_with_arguments/","tags":["ros2","param","parameter","launch",101],"text":"# LaunchConfiguration is local to the launch file and scoped. DeclareLaunchArgument allows you to expose the argument outside of your launch file. Allowing them to be listed, set, or marked as required when a user launches it from the command line (using ros2 launch) or when including it from another launch file (using IncludeLaunchDescription). basic_demo_args.launch.py import launch def generate_launch_description (): return launch . LaunchDescription ([ launch . actions . DeclareLaunchArgument ( 'msg' , default_value = 'hello world' ), launch . actions . DeclareLaunchArgument ( 'other' ), launch . actions . LogInfo ( msg = launch . substitutions . LaunchConfiguration ( 'msg' )), launch . actions . LogInfo ( msg = launch . substitutions . LaunchConfiguration ( 'other' )), ]) ros2 launch basic demo_args.launch.py other: = \"other message\" # Result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-11-27-22-383934-lap2-90291 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ launch.user ] : hello world [ INFO ] [ launch.user ] : other message Warning other argument is mandatory because has no default value cli # ros2 launch -s basic demo_args.launch.py # Result Arguments ( pass arguments as '<name>:=<value>' ) : 'msg' : no description given ( default: 'hello world' ) 'other' : no description given demo: launch with arguments # simple_param_args.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , LogInfo from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () my_str_arg = DeclareLaunchArgument ( \"my_str\" , default_value = \"world\" ) my_str = LaunchConfiguration ( \"my_str\" ) node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ { \"my_str\" : my_str }, { \"my_int\" : 1000 }, { \"my_double_array\" : [ 1.0 , 10.0 ]} ] ) ld . add_action ( my_str_arg ) ld . add_action ( node ) return ld Usage # ros2 launch basic simple_param_args.launch.py my_str: = worlddddddddddddd # result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-14-10-00-346206-lap2-93999 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ simple_param-1 ] : process started with pid [ 94001 ] [ simple_param-1 ] [ INFO ] [ 1649243402 .580006387 ] [ simple_params ] : Hello worlddddddddddddd! with int data: 1000 [ simple_param-1 ] [ INFO ] [ 1649243402 .580249948 ] [ simple_params ] : array ( 'd' , [ 1 .0, 10 .0 ]) # References # what is different between DeclareLaunchArgument and LaunchConfiguration","title":"Part4 - Launch with arguments"},{"location":"blog/ROS2/tutorial/launch_with_arguments/#_1","text":"LaunchConfiguration is local to the launch file and scoped. DeclareLaunchArgument allows you to expose the argument outside of your launch file. Allowing them to be listed, set, or marked as required when a user launches it from the command line (using ros2 launch) or when including it from another launch file (using IncludeLaunchDescription). basic_demo_args.launch.py import launch def generate_launch_description (): return launch . LaunchDescription ([ launch . actions . DeclareLaunchArgument ( 'msg' , default_value = 'hello world' ), launch . actions . DeclareLaunchArgument ( 'other' ), launch . actions . LogInfo ( msg = launch . substitutions . LaunchConfiguration ( 'msg' )), launch . actions . LogInfo ( msg = launch . substitutions . LaunchConfiguration ( 'other' )), ]) ros2 launch basic demo_args.launch.py other: = \"other message\" # Result [ INFO ] [ launch ] : All log files can be found below /home/user/.ros/log/2022-04-06-11-27-22-383934-lap2-90291 [ INFO ] [ launch ] : Default logging verbosity is set to INFO [ INFO ] [ launch.user ] : hello world [ INFO ] [ launch.user ] : other message Warning other argument is mandatory because has no default value","title":""},{"location":"blog/ROS2/tutorial/launch_with_arguments/#cli","text":"ros2 launch -s basic demo_args.launch.py # Result Arguments ( pass arguments as '<name>:=<value>' ) : 'msg' : no description given ( default: 'hello world' ) 'other' : no description given","title":"cli"},{"location":"blog/ROS2/tutorial/launch_with_arguments/#demo-launch-with-arguments","text":"simple_param_args.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , LogInfo from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () my_str_arg = DeclareLaunchArgument ( \"my_str\" , default_value = \"world\" ) my_str = LaunchConfiguration ( \"my_str\" ) node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ { \"my_str\" : my_str }, { \"my_int\" : 1000 }, { \"my_double_array\" : [ 1.0 , 10.0 ]} ] ) ld . add_action ( my_str_arg ) ld . add_action ( node ) return ld","title":"demo: launch with arguments"},{"location":"blog/ROS2/tutorial/launch_with_arguments/#usage","text":"","title":"Usage"},{"location":"blog/ROS2/tutorial/launch_with_arguments/#ros2-launch-basic-simple_param_argslaunchpy-my_strworlddddddddddddd-resultinfo-launch-all-log-files-can-be-found-below-homeuserroslog2022-04-06-14-10-00-346206-lap2-93999info-launch-default-logging-verbosity-is-set-to-infoinfo-simple_param-1-process-started-with-pid-94001simple_param-1-info-1649243402580006387-simple_params-hello-worlddddddddddddd-with-int-data-1000simple_param-1-info-1649243402580249948-simple_params-arrayd-10-100","text":"","title":"ros2 launch basic simple_param_args.launch.py my_str:=worlddddddddddddd\n# result\n[INFO] [launch]: All log files can be found below /home/user/.ros/log/2022-04-06-14-10-00-346206-lap2-93999\n[INFO] [launch]: Default logging verbosity is set to INFO\n[INFO] [simple_param-1]: process started with pid [94001]\n[simple_param-1] [INFO] [1649243402.580006387] [simple_params]: Hello worlddddddddddddd! with int data: 1000\n[simple_param-1] [INFO] [1649243402.580249948] [simple_params]: array(&#39;d&#39;, [1.0, 10.0])\n"},{"location":"blog/ROS2/tutorial/launch_with_arguments/#references","text":"what is different between DeclareLaunchArgument and LaunchConfiguration","title":"References"},{"location":"blog/ROS2/tutorial/part5_simple_service/","tags":["ros2","service",101],"text":"Service # simple_service import rclpy from rclpy.node import Node from std_srvs.srv import SetBool class MinimalService ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_service' ) self . srv = self . create_service ( SetBool , 'echo_service' , self . echo_callback ) def echo_callback ( self , request , response : SetBool . Response ): self . get_logger () . info ( str ( type ( request ))) self . get_logger () . info ( str ( type ( response ))) self . get_logger () . info ( \"Incoming request\" ) response . success = True response . message = \"success\" return response def main ( args = None ): rclpy . init ( args = args ) minimal_service = MinimalService () rclpy . spin ( minimal_service ) rclpy . shutdown () if __name__ == '__main__' : main () Usage # list ros2 service list # Result /echo_service /minimal_service/describe_parameters /minimal_service/get_parameter_types /minimal_service/get_parameters /minimal_service/list_parameters /minimal_service/set_parameters /minimal_service/set_parameters_atomically ros2 service type /echo_service # Result std_srvs/srv/SetBool show interface ros2 interface show std_srvs/srv/SetBool # Result bool data # e.g. for hardware enabling / disabling --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages call # service call ros2 service call /echo_service std_srvs/srv/SetBool \"{data: True}\" # Result requester: making request: std_srvs.srv.SetBool_Request ( data = True ) response: std_srvs.srv.SetBool_Response ( success = True, message = 'success' ) Warning Space are mandatory between data and the value Example: {data: True} from service call Reference # ros2 service Command Line Tool","title":"Part5 - Simple Service"},{"location":"blog/ROS2/tutorial/part5_simple_service/#service","text":"simple_service import rclpy from rclpy.node import Node from std_srvs.srv import SetBool class MinimalService ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_service' ) self . srv = self . create_service ( SetBool , 'echo_service' , self . echo_callback ) def echo_callback ( self , request , response : SetBool . Response ): self . get_logger () . info ( str ( type ( request ))) self . get_logger () . info ( str ( type ( response ))) self . get_logger () . info ( \"Incoming request\" ) response . success = True response . message = \"success\" return response def main ( args = None ): rclpy . init ( args = args ) minimal_service = MinimalService () rclpy . spin ( minimal_service ) rclpy . shutdown () if __name__ == '__main__' : main ()","title":"Service"},{"location":"blog/ROS2/tutorial/part5_simple_service/#usage","text":"list ros2 service list # Result /echo_service /minimal_service/describe_parameters /minimal_service/get_parameter_types /minimal_service/get_parameters /minimal_service/list_parameters /minimal_service/set_parameters /minimal_service/set_parameters_atomically ros2 service type /echo_service # Result std_srvs/srv/SetBool show interface ros2 interface show std_srvs/srv/SetBool # Result bool data # e.g. for hardware enabling / disabling --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages","title":"Usage"},{"location":"blog/ROS2/tutorial/part5_simple_service/#call","text":"service call ros2 service call /echo_service std_srvs/srv/SetBool \"{data: True}\" # Result requester: making request: std_srvs.srv.SetBool_Request ( data = True ) response: std_srvs.srv.SetBool_Response ( success = True, message = 'success' ) Warning Space are mandatory between data and the value Example: {data: True} from service call","title":"call"},{"location":"blog/ROS2/tutorial/part5_simple_service/#reference","text":"ros2 service Command Line Tool","title":"Reference"},{"location":"blog/ROS2/tutorial/part6_parameter_handler/","tags":["ros2","parameters","param",101],"text":"source code # params with callback import rclpy from rclpy.node import Node from rcl_interfaces.msg import SetParametersResult class TestParams ( Node ): def __init__ ( self ): super () . __init__ ( 'simple_params' ) self . declare_parameter ( 'my_str' ) self . declare_parameter ( 'my_int' , value = 10 ) self . declare_parameter ( 'my_double_array' ) self . add_on_set_parameters_callback ( self . parameter_callback ) timer_period = 2 self . timer = self . create_timer ( timer_period , self . timer_callback ) def parameter_callback ( self , params ): print ( type ( params )) for param in params : self . get_logger () . info ( param . name ) self . get_logger () . info ( str ( param . value )) self . get_logger () . info ( str ( param . type_ )) return SetParametersResult ( successful = True ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_str' ) . get_parameter_value () . string_value my_param_int = self . get_parameter ( \"my_int\" ) . get_parameter_value () . integer_value my_param_array = self . get_parameter ( \"my_double_array\" ) . get_parameter_value () . double_array_value self . get_logger () . info ( f \"Hello { my_param } ! with int data: { my_param_int } \" ) self . get_logger () . info ( str ( my_param_array )) def main ( args = None ): rclpy . init ( args = args ) node = TestParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () Run # List # ros2 param list /simple_params: my_double_array my_int my_str use_sim_time get / set # get # my_str ros2 param get /simple_params my_str Parameter not set. # my_int ros2 param get /simple_params my_int Integer value is: 10 set # my_int ros2 param set /simple_params my_int 20 # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649395615 .004278881 ] [ simple_params ] : my_int [ INFO ] [ 1649395615 .004490765 ] [ simple_params ] : 20 [ INFO ] [ 1649395615 .004679396 ] [ simple_params ] : Type.INTEGER # my_str ros2 param set /simple_params my_str \"world world\" # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649395751 .117007430 ] [ simple_params ] : my_str [ INFO ] [ 1649395751 .117735309 ] [ simple_params ] : world world [ INFO ] [ 1649395751 .118404909 ] [ simple_params ] : Type.STRING # my_double_array ros2 param set /simple_params my_double_array \"[1.0, 2.0, 3.0]\" # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649396032 .647319212 ] [ simple_params ] : my_double_array [ INFO ] [ 1649396032 .648079309 ] [ simple_params ] : array ( 'd' , [ 1 .0, 2 .0, 3 .0 ]) [ INFO ] [ 1649396032 .648748882 ] [ simple_params ] : Type.DOUBLE_ARRAY Dump / Load # dump #ros2 param dump /simple_params --output-dir /tmp # ros2 param dump /simple_params --print ros2 param dump /simple_params # Result Saving to: ./simple_params.yaml load ros2 param load /simple_params simple_params.yaml # Result Set parameter my_double_array successful Set parameter my_int successful Set parameter my_str successful Set parameter use_sim_time successful Note ros2 param load run the same param callback function like param set","title":"Part6 - Simple parameter handler"},{"location":"blog/ROS2/tutorial/part6_parameter_handler/#source-code","text":"params with callback import rclpy from rclpy.node import Node from rcl_interfaces.msg import SetParametersResult class TestParams ( Node ): def __init__ ( self ): super () . __init__ ( 'simple_params' ) self . declare_parameter ( 'my_str' ) self . declare_parameter ( 'my_int' , value = 10 ) self . declare_parameter ( 'my_double_array' ) self . add_on_set_parameters_callback ( self . parameter_callback ) timer_period = 2 self . timer = self . create_timer ( timer_period , self . timer_callback ) def parameter_callback ( self , params ): print ( type ( params )) for param in params : self . get_logger () . info ( param . name ) self . get_logger () . info ( str ( param . value )) self . get_logger () . info ( str ( param . type_ )) return SetParametersResult ( successful = True ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_str' ) . get_parameter_value () . string_value my_param_int = self . get_parameter ( \"my_int\" ) . get_parameter_value () . integer_value my_param_array = self . get_parameter ( \"my_double_array\" ) . get_parameter_value () . double_array_value self . get_logger () . info ( f \"Hello { my_param } ! with int data: { my_param_int } \" ) self . get_logger () . info ( str ( my_param_array )) def main ( args = None ): rclpy . init ( args = args ) node = TestParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"source code"},{"location":"blog/ROS2/tutorial/part6_parameter_handler/#run","text":"","title":"Run"},{"location":"blog/ROS2/tutorial/part6_parameter_handler/#list","text":"ros2 param list /simple_params: my_double_array my_int my_str use_sim_time","title":"List"},{"location":"blog/ROS2/tutorial/part6_parameter_handler/#get--set","text":"get # my_str ros2 param get /simple_params my_str Parameter not set. # my_int ros2 param get /simple_params my_int Integer value is: 10 set # my_int ros2 param set /simple_params my_int 20 # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649395615 .004278881 ] [ simple_params ] : my_int [ INFO ] [ 1649395615 .004490765 ] [ simple_params ] : 20 [ INFO ] [ 1649395615 .004679396 ] [ simple_params ] : Type.INTEGER # my_str ros2 param set /simple_params my_str \"world world\" # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649395751 .117007430 ] [ simple_params ] : my_str [ INFO ] [ 1649395751 .117735309 ] [ simple_params ] : world world [ INFO ] [ 1649395751 .118404909 ] [ simple_params ] : Type.STRING # my_double_array ros2 param set /simple_params my_double_array \"[1.0, 2.0, 3.0]\" # result Set parameter successful # output log from node callback param function (name, value, type) [ INFO ] [ 1649396032 .647319212 ] [ simple_params ] : my_double_array [ INFO ] [ 1649396032 .648079309 ] [ simple_params ] : array ( 'd' , [ 1 .0, 2 .0, 3 .0 ]) [ INFO ] [ 1649396032 .648748882 ] [ simple_params ] : Type.DOUBLE_ARRAY","title":"get / set"},{"location":"blog/ROS2/tutorial/part6_parameter_handler/#dump--load","text":"dump #ros2 param dump /simple_params --output-dir /tmp # ros2 param dump /simple_params --print ros2 param dump /simple_params # Result Saving to: ./simple_params.yaml load ros2 param load /simple_params simple_params.yaml # Result Set parameter my_double_array successful Set parameter my_int successful Set parameter my_str successful Set parameter use_sim_time successful Note ros2 param load run the same param callback function like param set","title":"Dump / Load"},{"location":"blog/ROS2/tutorial/part7_custom_msgs/","tags":["ros2","custom","msgs",101],"text":"Note End/Suffix package name with _interfaces or _msgs Create pkg # Create cpp package # Default build type ament cmake ros pkg create rosmav_msgs package.xml # Add lines <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> CMakeLists.txt # CMakeLists.txt cmake_minimum_required ( VERSION 3.5 ) project ( my_robot_interfaces ) # Default to C++14 if ( NOT CMAKE_CXX_STANDARD ) set ( CMAKE_CXX_STANDARD 14 ) endif () if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( -Wall -Wextra -Wpedantic ) endif () find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"your custom interfaces will be here\" msgs/Attitude.msg ) ament_package () VSCode tips # Add msgs path to python.analysis.extraPaths pylance \"python.analysis.extraPaths\" : [ \"/home/user/dev_ws/install/rosmav_msgs/lib/python3.8/site-packages\" ] interface cli # Show information about ROS interfaces list: List all interface types available package: Output a list of available interface types within one package show: Output the interface definition ros2 interface package rosmav_msgs # Result rosmav_msgs/msg/Attitude # Show # --- separate between request response ros2 interface show std_srvs/srv/Trigger --- bool success # indicate successful run of triggered service string message # informational, e.g. for error messages # References # ROS2 Create Custom Message (Msg/Srv)","title":"Part7 - Custom msgs and srvs"},{"location":"blog/ROS2/tutorial/part7_custom_msgs/#create-pkg","text":"Create cpp package # Default build type ament cmake ros pkg create rosmav_msgs","title":"Create pkg"},{"location":"blog/ROS2/tutorial/part7_custom_msgs/#packagexml","text":"Add lines <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group>","title":"package.xml"},{"location":"blog/ROS2/tutorial/part7_custom_msgs/#cmakeliststxt","text":"CMakeLists.txt cmake_minimum_required ( VERSION 3.5 ) project ( my_robot_interfaces ) # Default to C++14 if ( NOT CMAKE_CXX_STANDARD ) set ( CMAKE_CXX_STANDARD 14 ) endif () if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) add_compile_options ( -Wall -Wextra -Wpedantic ) endif () find_package ( ament_cmake REQUIRED ) find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"your custom interfaces will be here\" msgs/Attitude.msg ) ament_package ()","title":"CMakeLists.txt"},{"location":"blog/ROS2/tutorial/part7_custom_msgs/#vscode-tips","text":"Add msgs path to python.analysis.extraPaths pylance \"python.analysis.extraPaths\" : [ \"/home/user/dev_ws/install/rosmav_msgs/lib/python3.8/site-packages\" ]","title":"VSCode tips"},{"location":"blog/ROS2/tutorial/part7_custom_msgs/#interface-cli","text":"Show information about ROS interfaces list: List all interface types available package: Output a list of available interface types within one package show: Output the interface definition","title":"interface cli"},{"location":"blog/ROS2/tutorial/part7_custom_msgs/#ros2-interface--package-rosmav_msgs--resultrosmav_msgsmsgattitude-show------separate-between-request-responseros2-interface-show-std_srvssrvtrigger----bool-success----indicate-successful-run-of-triggered-servicestring-message--informational-eg-for-error-messages","text":"","title":"ros2 interface  package rosmav_msgs \n# Result\nrosmav_msgs/msg/Attitude\n\n# Show \n# --- separate between request response\nros2 interface show std_srvs/srv/Trigger \n---\nbool success   # indicate successful run of triggered service\nstring message # informational, e.g. for error messages\n"},{"location":"blog/ROS2/tutorial/part7_custom_msgs/#references","text":"ROS2 Create Custom Message (Msg/Srv)","title":"References"},{"location":"blog/ROS2/tutorial/pub_sub/","tags":["ros2","pub","sub",101],"text":"Publisher # node source code # Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_publisher\" ) self . publisher_ = self . create_publisher ( String , \"minimal\" , 10 ) timer_period = 1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = f \"pub simple: { self . i } \" self . publisher_ . publish ( msg ) self . get_logger () . info ( f 'Publishing: \" { msg . data } \"' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () # Spin the node so the callback function is called. rclpy . spin ( minimal_publisher ) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () setup.py # Add entry point <node name>.<module name>:<entry func> entry_points = { 'console_scripts' : [ \"simple_pub = basic.simple_pub:main\" ], } package.xml # Add this lines before <export> tag <exec_depend> rclpy </exec_depend> <exec_depend> std_msgs </exec_depend> Note exec_depend Declares a rosdep key or ROS package name that this package needs at execution-time build and run # Build colcon build --symlink-install --packages-select basic Source it source install/setup.bash Run ros2 run basic simple_pub output [ INFO ] [ 1649181441 .732282742 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ INFO ] [ 1649181442 .713229723 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ INFO ] [ 1649181443 .713351778 ] [ minimal_publisher ] : Publishing: \"pub simple: 2\" cli # ros2 topic # # list ros2 topic list #result /parameter_events /rosout /minimal # info ros2 topic info /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Subscription count: 0 # Echo ros2 topic echo /minimal # Result data: 'pub simple: 110' --- data: 'pub simple: 111' --- topic verbose info # verbose info ros2 topic info -v /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Node name: minimal_publisher Node namespace: / Topic type: std_msgs/msg/String Endpoint type: PUBLISHER GID: 01 .0f.d1.c7.10.ba.23.e1.01.00.00.00.00.00.11.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE Durability: RMW_QOS_POLICY_DURABILITY_VOLATILE Lifespan: 2147483651294967295 nanoseconds Deadline: 2147483651294967295 nanoseconds Liveliness: RMW_QOS_POLICY_LIVELINESS_AUTOMATIC Liveliness lease duration: 2147483651294967295 nanoseconds Subscription count: 0 Subscriber # node source code # MinimalSubscriber Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalSubscriber ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_subscriber\" ) # The node subscribes to messages of type std_msgs/String, # over a topic named: /minimal # The callback function is called as soon as a message is received. # The maximum number of queued messages is 10. self . subscription = self . create_subscription ( String , \"minimal\" , self . __sub_callback , 10 ) def __sub_callback ( self , msg ): self . get_logger () . info ( f \"I heard: { msg . data } \" ) def main ( args = None ): rclpy . init ( args = args ) minimal_subscriber = MinimalSubscriber () rclpy . spin ( minimal_subscriber ) minimal_subscriber . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () setup.py # Add entry point entry_points = { 'console_scripts' : [ \"simple_sub = basic.simple_sub:main\" ], } build and run # Build colcon build --symlink-install --packages-select basic cli # Run subscriber node Terminal1 ros2 run basic simple_sub # Result after pub from terminal 2 [ INFO ] [ 1649213924 .055190916 ] [ minimal_subscriber ] : I heard: hello [ INFO ] [ 1649213925 .036938799 ] [ minimal_subscriber ] : I heard: hello Terminal2 # pub message ros2 topic pub /minimal std_msgs/msg/String \"{data: 'hello'}\" # pub only one message ros2 topic pub -1 /minimal std_msgs/msg/String \"{data: 'hello'}\" References # package.xml specification ros2 topic Command Line Tool \u2013 Debug ROS2 Topics From the Terminal Create a Basic Publisher and Subscriber (Python) | ROS2 Foxy","title":"Part1 - Simple PUB / SUB"},{"location":"blog/ROS2/tutorial/pub_sub/#publisher","text":"","title":"Publisher"},{"location":"blog/ROS2/tutorial/pub_sub/#node-source-code","text":"Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_publisher\" ) self . publisher_ = self . create_publisher ( String , \"minimal\" , 10 ) timer_period = 1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = f \"pub simple: { self . i } \" self . publisher_ . publish ( msg ) self . get_logger () . info ( f 'Publishing: \" { msg . data } \"' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () # Spin the node so the callback function is called. rclpy . spin ( minimal_publisher ) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"node source code"},{"location":"blog/ROS2/tutorial/pub_sub/#setuppy","text":"Add entry point <node name>.<module name>:<entry func> entry_points = { 'console_scripts' : [ \"simple_pub = basic.simple_pub:main\" ], }","title":"setup.py"},{"location":"blog/ROS2/tutorial/pub_sub/#packagexml","text":"Add this lines before <export> tag <exec_depend> rclpy </exec_depend> <exec_depend> std_msgs </exec_depend> Note exec_depend Declares a rosdep key or ROS package name that this package needs at execution-time","title":"package.xml"},{"location":"blog/ROS2/tutorial/pub_sub/#build-and-run","text":"Build colcon build --symlink-install --packages-select basic Source it source install/setup.bash Run ros2 run basic simple_pub output [ INFO ] [ 1649181441 .732282742 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ INFO ] [ 1649181442 .713229723 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ INFO ] [ 1649181443 .713351778 ] [ minimal_publisher ] : Publishing: \"pub simple: 2\"","title":"build and run"},{"location":"blog/ROS2/tutorial/pub_sub/#cli","text":"","title":"cli"},{"location":"blog/ROS2/tutorial/pub_sub/#ros2-topic","text":"# list ros2 topic list #result /parameter_events /rosout /minimal # info ros2 topic info /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Subscription count: 0 # Echo ros2 topic echo /minimal # Result data: 'pub simple: 110' --- data: 'pub simple: 111' ---","title":"ros2 topic"},{"location":"blog/ROS2/tutorial/pub_sub/#topic-verbose-info","text":"verbose info ros2 topic info -v /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Node name: minimal_publisher Node namespace: / Topic type: std_msgs/msg/String Endpoint type: PUBLISHER GID: 01 .0f.d1.c7.10.ba.23.e1.01.00.00.00.00.00.11.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE Durability: RMW_QOS_POLICY_DURABILITY_VOLATILE Lifespan: 2147483651294967295 nanoseconds Deadline: 2147483651294967295 nanoseconds Liveliness: RMW_QOS_POLICY_LIVELINESS_AUTOMATIC Liveliness lease duration: 2147483651294967295 nanoseconds Subscription count: 0","title":"topic verbose info"},{"location":"blog/ROS2/tutorial/pub_sub/#subscriber","text":"","title":"Subscriber"},{"location":"blog/ROS2/tutorial/pub_sub/#node-source-code_1","text":"MinimalSubscriber Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalSubscriber ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_subscriber\" ) # The node subscribes to messages of type std_msgs/String, # over a topic named: /minimal # The callback function is called as soon as a message is received. # The maximum number of queued messages is 10. self . subscription = self . create_subscription ( String , \"minimal\" , self . __sub_callback , 10 ) def __sub_callback ( self , msg ): self . get_logger () . info ( f \"I heard: { msg . data } \" ) def main ( args = None ): rclpy . init ( args = args ) minimal_subscriber = MinimalSubscriber () rclpy . spin ( minimal_subscriber ) minimal_subscriber . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"node source code"},{"location":"blog/ROS2/tutorial/pub_sub/#setuppy_1","text":"Add entry point entry_points = { 'console_scripts' : [ \"simple_sub = basic.simple_sub:main\" ], }","title":"setup.py"},{"location":"blog/ROS2/tutorial/pub_sub/#build-and-run_1","text":"Build colcon build --symlink-install --packages-select basic","title":"build and run"},{"location":"blog/ROS2/tutorial/pub_sub/#cli_1","text":"Run subscriber node Terminal1 ros2 run basic simple_sub # Result after pub from terminal 2 [ INFO ] [ 1649213924 .055190916 ] [ minimal_subscriber ] : I heard: hello [ INFO ] [ 1649213925 .036938799 ] [ minimal_subscriber ] : I heard: hello Terminal2 # pub message ros2 topic pub /minimal std_msgs/msg/String \"{data: 'hello'}\" # pub only one message ros2 topic pub -1 /minimal std_msgs/msg/String \"{data: 'hello'}\"","title":"cli"},{"location":"blog/ROS2/tutorial/pub_sub/#references","text":"package.xml specification ros2 topic Command Line Tool \u2013 Debug ROS2 Topics From the Terminal Create a Basic Publisher and Subscriber (Python) | ROS2 Foxy","title":"References"},{"location":"blog/ROS2/tutorial/py_node_with_param/","tags":["ros2","param","parameter",101],"text":"node source code # source code import rclpy from rclpy.node import Node class TestParams ( Node ): def __init__ ( self ): super () . __init__ ( 'test_params_rclpy' ) self . declare_parameter ( 'my_str' ) self . declare_parameter ( 'my_int' , value = 10 ) self . declare_parameter ( 'my_double_array' ) timer_period = 2 self . timer = self . create_timer ( timer_period , self . timer_callback ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_str' ) . get_parameter_value () . string_value my_param_int = self . get_parameter ( \"my_int\" ) . get_parameter_value () . integer_value self . get_logger () . info ( f \"Hello { my_param } ! with int data: { my_param_int } \" ) def main ( args = None ): rclpy . init ( args = args ) node = TestParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () usage # run # Note Run node with arguments from CLI `\u2013ros-args -p := ros2 run basic simple_param --ros-args -p my_str: = world # Result [ INFO ] [ 1649226981 .611616597 ] [ test_params_rclpy ] : Hello world! with int data: 10 [ INFO ] [ 1649226983 .604038327 ] [ test_params_rclpy ] : Hello world! with int data: 10 # list params from all running nodes ros2 param list # Result /simple_params: my_double_array my_int my_str use_sim_time Run with yaml file # simple.yaml simple_params : ros__parameters : my_str : \"world from yaml\" my_int : 100 my_double_array : [ 1.0 , 2.0 , 3.0 ] Warning ros__parameters with double underline Run with yaml # terminal1 ros2 run basic simple_param --ros-args --params-file /home/user/dev_ws/src/basic/config/simple.yaml [ INFO ] [ 1649227913 .033306747 ] [ simple_params ] : Hello world from yaml! with int data: 100 [ INFO ] [ 1649227915 .025466940 ] [ simple_params ] : Hello world from yaml! with int data: 100 Params yaml and launch file # place yaml file in config syb folder copy config folder to output folder using setup.py yaml copy data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( \"share\" , package_name ), glob ( \"launch/*.launch.py\" )), ( os . path . join ( \"share\" , package_name , \"config\" ), glob ( \"config/*\" )), ], simple_param_yaml.launch.py # with yaml file import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'basic' ), 'config' , 'simple.yaml' ) node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ config ] ) ld . add_action ( node ) return ld Warning The name argument in the launch Node object must be the same in the param yaml file simple_param.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ { \"my_str\" : \"hello from launch\" }, { \"my_int\" : 1000 }, { \"my_double_array\" : [ 1.0 , 10.0 ]} ] ) ld . add_action ( node ) return ld References # rclpy Params Tutorial \u2013 Get and Set ROS2 Params with Python ROS2 YAML For Parameters","title":"Part3 - Simple python Node with parameter"},{"location":"blog/ROS2/tutorial/py_node_with_param/#node-source-code","text":"source code import rclpy from rclpy.node import Node class TestParams ( Node ): def __init__ ( self ): super () . __init__ ( 'test_params_rclpy' ) self . declare_parameter ( 'my_str' ) self . declare_parameter ( 'my_int' , value = 10 ) self . declare_parameter ( 'my_double_array' ) timer_period = 2 self . timer = self . create_timer ( timer_period , self . timer_callback ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_str' ) . get_parameter_value () . string_value my_param_int = self . get_parameter ( \"my_int\" ) . get_parameter_value () . integer_value self . get_logger () . info ( f \"Hello { my_param } ! with int data: { my_param_int } \" ) def main ( args = None ): rclpy . init ( args = args ) node = TestParams () rclpy . spin ( node ) node . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"node source code"},{"location":"blog/ROS2/tutorial/py_node_with_param/#usage","text":"","title":"usage"},{"location":"blog/ROS2/tutorial/py_node_with_param/#run","text":"Note Run node with arguments from CLI `\u2013ros-args -p := ros2 run basic simple_param --ros-args -p my_str: = world # Result [ INFO ] [ 1649226981 .611616597 ] [ test_params_rclpy ] : Hello world! with int data: 10 [ INFO ] [ 1649226983 .604038327 ] [ test_params_rclpy ] : Hello world! with int data: 10 # list params from all running nodes ros2 param list # Result /simple_params: my_double_array my_int my_str use_sim_time","title":"run"},{"location":"blog/ROS2/tutorial/py_node_with_param/#run-with-yaml-file","text":"simple.yaml simple_params : ros__parameters : my_str : \"world from yaml\" my_int : 100 my_double_array : [ 1.0 , 2.0 , 3.0 ] Warning ros__parameters with double underline","title":"Run with yaml file"},{"location":"blog/ROS2/tutorial/py_node_with_param/#run-with-yaml","text":"terminal1 ros2 run basic simple_param --ros-args --params-file /home/user/dev_ws/src/basic/config/simple.yaml [ INFO ] [ 1649227913 .033306747 ] [ simple_params ] : Hello world from yaml! with int data: 100 [ INFO ] [ 1649227915 .025466940 ] [ simple_params ] : Hello world from yaml! with int data: 100","title":"Run with yaml"},{"location":"blog/ROS2/tutorial/py_node_with_param/#params-yaml-and-launch-file","text":"place yaml file in config syb folder copy config folder to output folder using setup.py yaml copy data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( \"share\" , package_name ), glob ( \"launch/*.launch.py\" )), ( os . path . join ( \"share\" , package_name , \"config\" ), glob ( \"config/*\" )), ], simple_param_yaml.launch.py # with yaml file import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () config = os . path . join ( get_package_share_directory ( 'basic' ), 'config' , 'simple.yaml' ) node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ config ] ) ld . add_action ( node ) return ld Warning The name argument in the launch Node object must be the same in the param yaml file simple_param.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): ld = LaunchDescription () node = Node ( name = \"simple_params\" , package = 'basic' , executable = 'simple_param' , parameters = [ { \"my_str\" : \"hello from launch\" }, { \"my_int\" : 1000 }, { \"my_double_array\" : [ 1.0 , 10.0 ]} ] ) ld . add_action ( node ) return ld","title":"Params yaml and launch file"},{"location":"blog/ROS2/tutorial/py_node_with_param/#references","text":"rclpy Params Tutorial \u2013 Get and Set ROS2 Params with Python ROS2 YAML For Parameters","title":"References"},{"location":"blog/video/examples/","tags":["video","ffmpeg","gstreamer","cheat-sheet"],"text":"jpeg # Stream jpeg stream over udp using gstreamer Play stream using FFPlay and sdp file Terminal1: gstreamer udp stream gst-launch-1.0 -v videotestsrc \\ ! video/x-raw,width=640,height=480 \\ ! timeoverlay \\ ! tee name=\"local\" \\ ! queue \\ ! videoconvert \\ ! autovideosink sync=false\\ local. \\ ! queue \\ ! jpegenc \\ ! rtpjpegpay \\ ! udpsink host=127.0.0.1 port= 5000 udp.sdp m=video 5000 RTP/AVP 26 a=rtpmap:26 JPEG/90000; c=IN IP4 127.0.0.1 Terminal 2: ffplay ffplay \\ -protocol_whitelist file,rtp,udp \\ -fflags nobuffer \\ -flags low_delay \\ -framedrop \\ -i udp.sdp","title":"FFMpeg and Gstreamer Examples"},{"location":"blog/video/examples/#jpeg","text":"Stream jpeg stream over udp using gstreamer Play stream using FFPlay and sdp file Terminal1: gstreamer udp stream gst-launch-1.0 -v videotestsrc \\ ! video/x-raw,width=640,height=480 \\ ! timeoverlay \\ ! tee name=\"local\" \\ ! queue \\ ! videoconvert \\ ! autovideosink sync=false\\ local. \\ ! queue \\ ! jpegenc \\ ! rtpjpegpay \\ ! udpsink host=127.0.0.1 port= 5000 udp.sdp m=video 5000 RTP/AVP 26 a=rtpmap:26 JPEG/90000; c=IN IP4 127.0.0.1 Terminal 2: ffplay ffplay \\ -protocol_whitelist file,rtp,udp \\ -fflags nobuffer \\ -flags low_delay \\ -framedrop \\ -i udp.sdp","title":"jpeg"},{"location":"blog/video/ffmpeg/","tags":["video","ffmpeg","sdp"],"text":"SDP # Session Description Protocol Refernces # RTP (I): Intro to RTP and SDP","title":"FFMpeg"},{"location":"blog/video/ffmpeg/#sdp","text":"Session Description Protocol","title":"SDP"},{"location":"blog/video/ffmpeg/#refernces","text":"RTP (I): Intro to RTP and SDP","title":"Refernces"},{"location":"blog/video/gstreamer/","tags":["video","gstreamer"],"text":"rtsp client # ffprob ffprobe rtsp : //wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 # ffprobe ffprobe < rtsp url > # Result Stream # 0 : 0 : Audio : aac ( LC ), 12000 Hz , stereo , fltp Stream # 0 : 1 : Video : h264 ( High ), yuv420p ( progressive ), 240 x160 [ SAR 32 : 27 DAR 16 : 9 ], 24 fps , 24.08 tbr , 90 k tbn , 48 tbc pipe # gst-launch-1.0 rtspsrc location = rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 latency = 100 \\ ! queue \\ ! rtph264depay \\ ! h264parse \\ ! avdec_h264 \\ ! videoconvert \\ ! videoscale ! video/x-raw,width = 640 ,height = 480 \\ ! autovideosink gst-launch-1.0 rtspsrc location=rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 latency=0 buffer-mode=auto \\ ! decodebin \\ ! autovideosink sync=false Send and play # pppppppppppppppp","title":"Gstreamer"},{"location":"blog/video/gstreamer/#rtsp-client","text":"ffprob ffprobe rtsp : //wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 # ffprobe ffprobe < rtsp url > # Result Stream # 0 : 0 : Audio : aac ( LC ), 12000 Hz , stereo , fltp Stream # 0 : 1 : Video : h264 ( High ), yuv420p ( progressive ), 240 x160 [ SAR 32 : 27 DAR 16 : 9 ], 24 fps , 24.08 tbr , 90 k tbn , 48 tbc pipe # gst-launch-1.0 rtspsrc location = rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 latency = 100 \\ ! queue \\ ! rtph264depay \\ ! h264parse \\ ! avdec_h264 \\ ! videoconvert \\ ! videoscale ! video/x-raw,width = 640 ,height = 480 \\ ! autovideosink gst-launch-1.0 rtspsrc location=rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 latency=0 buffer-mode=auto \\ ! decodebin \\ ! autovideosink sync=false","title":"rtsp client"},{"location":"blog/video/gstreamer/#send-and-play","text":"pppppppppppppppp","title":"Send and play"},{"location":"blog/vscode/todo/","tags":["vscode","todo","vscode-ext"],"text":"Priority: (A) capital letter first in line Project: +project anywhere in line non-whitespace Context: @context anywhere in line non-whitespace tag: key:value x as first character mark task completion github todo primer VSCode ext # Commands and decorators for managing todo.txt files marketplace Note ctrl+shift+x: Toggle completion References # todotxt todo spec vscode todotxt-mode","title":"todo.txt"},{"location":"blog/vscode/todo/#vscode-ext","text":"Commands and decorators for managing todo.txt files marketplace Note ctrl+shift+x: Toggle completion","title":"VSCode ext"},{"location":"blog/vscode/todo/#references","text":"todotxt todo spec vscode todotxt-mode","title":"References"},{"location":"blog/yocto/part1_hello_yocto/","tags":["yocto",101],"text":"Elements of embedded linux # Toolchain: Compiler and other tools needed to build code for target device Bootloader: The program that init the board and load the linux kernel Kernel Root F.S: Contain all programs and libraries for our system Yocto # Yocto project provide tools for create custom linux distributions for any H.W Poky # Poky is a reference/example linux distribution create by yocto The poky repository is an aggregation of several repositories: - openembedded-core - bitbake - meta-poky - yocto-docs Poky = Bitback + Metadata Note Yocto is a origination like canonical Poky is like ubuntu Note the \u2018meta\u2019 folder in the poky repository corresponds to the Openembedded Core layer, e.g. https://git.openembedded.org/openembedded-core/. OE Core includes the main components/recipes that are widely used for any configuration. Metadata # Build instructions From where obtain sources Changes / additions to sources Metadata in yocto is collection of - configuration file (.conf) - Recipes (.bb and .bbappend) - Class (.bbclass) - Includes (.inc) Note he \u2018meta-oe\u2019 folder in meta-openembedded is another layer typically called the \u2018openembedded\u2019 layer. meta-oe contains a large amount of additional recipes. Bitback # Task scheduler BSP: Board Support Package # BSP is collection of information that defines how to support particular HW HW futures Kernel configuration Additional S.W Note poky support by default x86, x86-64, BeagleBone devices (has BSP for each H.W type) Reference # udemy yocto","title":"Part1 - Yocto tutorial"},{"location":"blog/yocto/part1_hello_yocto/#elements-of-embedded-linux","text":"Toolchain: Compiler and other tools needed to build code for target device Bootloader: The program that init the board and load the linux kernel Kernel Root F.S: Contain all programs and libraries for our system","title":"Elements of embedded linux"},{"location":"blog/yocto/part1_hello_yocto/#yocto","text":"Yocto project provide tools for create custom linux distributions for any H.W","title":"Yocto"},{"location":"blog/yocto/part1_hello_yocto/#poky","text":"Poky is a reference/example linux distribution create by yocto The poky repository is an aggregation of several repositories: - openembedded-core - bitbake - meta-poky - yocto-docs Poky = Bitback + Metadata Note Yocto is a origination like canonical Poky is like ubuntu Note the \u2018meta\u2019 folder in the poky repository corresponds to the Openembedded Core layer, e.g. https://git.openembedded.org/openembedded-core/. OE Core includes the main components/recipes that are widely used for any configuration.","title":"Poky"},{"location":"blog/yocto/part1_hello_yocto/#metadata","text":"Build instructions From where obtain sources Changes / additions to sources Metadata in yocto is collection of - configuration file (.conf) - Recipes (.bb and .bbappend) - Class (.bbclass) - Includes (.inc) Note he \u2018meta-oe\u2019 folder in meta-openembedded is another layer typically called the \u2018openembedded\u2019 layer. meta-oe contains a large amount of additional recipes.","title":"Metadata"},{"location":"blog/yocto/part1_hello_yocto/#bitback","text":"Task scheduler","title":"Bitback"},{"location":"blog/yocto/part1_hello_yocto/#bsp-board-support-package","text":"BSP is collection of information that defines how to support particular HW HW futures Kernel configuration Additional S.W Note poky support by default x86, x86-64, BeagleBone devices (has BSP for each H.W type)","title":"BSP: Board Support Package"},{"location":"blog/yocto/part1_hello_yocto/#reference","text":"udemy yocto","title":"Reference"},{"location":"blog/yocto/part2_hello_poky/","tags":["yocto","poky",101],"text":"init environment # # from poky folder source oe-init-build-env <location of build folder> create folder and files under chosen build location local.conf bblayers.conf Build # Building custom linux distribution # bitbake <image name> bitbake core-image-minimal Fix If bitbake failed to resolve URI set CONNECTIVITY_CHECK_URIS field in conf/local.conf ```bash title=\u201dso 52395512\u201d check connectivity using google # CONNECTIVITY_CHECK_URIS = \u201chttps://www.google.com/\u201d skip connectivity checks # CONNECTIVITY_CHECK_URIS = \u201c\u201d ```","title":"Part2 - Yocto tutorial"},{"location":"blog/yocto/part2_hello_poky/#init-environment","text":"# from poky folder source oe-init-build-env <location of build folder> create folder and files under chosen build location local.conf bblayers.conf","title":"init environment"},{"location":"blog/yocto/part2_hello_poky/#build","text":"Building custom linux distribution # bitbake <image name> bitbake core-image-minimal Fix If bitbake failed to resolve URI set CONNECTIVITY_CHECK_URIS field in conf/local.conf ```bash title=\u201dso 52395512\u201d","title":"Build"},{"location":"blog/yocto/part2_hello_poky/#check-connectivity-using-google","text":"CONNECTIVITY_CHECK_URIS = \u201chttps://www.google.com/\u201d","title":"check connectivity using google"},{"location":"blog/yocto/part2_hello_poky/#skip-connectivity-checks","text":"CONNECTIVITY_CHECK_URIS = \u201c\u201d ```","title":"skip connectivity checks"},{"location":"blog/yocto/part3_run_qemu/","tags":["yocto","qemu",101],"text":"runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-20220406114623.qemuboot.conf runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-20220406114623.qemuboot.conf nographic Note quit QEMU nographic mode by press ctrl-a then x","title":"Part3 - Yocto tutorial"},{"location":"blog/yocto/part4_add_ssh/","tags":["yocto","qemu",101],"text":"Yocto project tree # meta-external meta-openembedded poky meta-external share git project across multiple yocto project Help git submodule git submodule add git submodule update \u2013init \u2013recursive meta-external # Collection of yocto git repositories from git meta-openembedded git submodule add https://github.com/openembedded/meta-openembedded.git layers # Add layers to bblayers.conf file bitbake-layers show-layers NOTE: Starting bitbake server... layer path priority ========================================================================== meta /home/user/yocto/poky/meta 5 meta-poky /home/user/yocto/poky/meta-poky 5 meta-yocto-bsp /home/user/yocto/poky/meta-yocto-bsp 5 meta-oe /home/user/yocto/meta-external/meta-openembedded/meta-oe 6 meta-python /home/user/yocto/meta-external/meta-openembedded/meta-python 7 Add dropbear ssh # OpenEmbedded # Search for dropbear recipe in openembedded Layer index Check openembedded-core is part of poky meta ? Yes I found dropbear under meta/recipes-core/dropbear setup # Add to local.conf append to local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear\" Note IMAGE_INSTALL is the variable that controls what is included in any image. CORE_IMAGE_EXTRA_INSTALL is a convenience variable that enable you to add extra packages to an image based on the core-image class Create image # # from build folder bitbake core-image-minimal Check # # under build folder ll tmp/work/qemux86_64-poky-linux/core-image-minimal/1.0-r0/rootfs/usr/sbin/dropbear run image with qemu # run image runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-<build number>.qemuboot.conf nographic check dropbear is running ps | grep drop 259 root 3020 S /usr/sbin/dropbear -r /etc/dropbear/dropbear_rsa_host_key -p 22 -B 293 root 4224 S grep drop ssh from host # ssh root@192.168.7.2 check recipe location # bitbake -e dropbear | grep ^FILE = # Result FILE = \"/home/user/yocto/poky/meta/recipes-core/dropbear/dropbear_2020.81.bb\" # Add python3 # Search recipe Show recipe more info setup # Add to local.conf append to local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear python3\" check recipe location # bitbake -e python3 | grep ^FILE = FILE = \"/home/user/yocto/poky/meta/recipes-devtools/python/python3_3.9.9.bb\" Create image # # from build folder bitbake core-image-minimal","title":"Part4 - Yocto tutorial"},{"location":"blog/yocto/part4_add_ssh/#yocto-project-tree","text":"meta-external meta-openembedded poky meta-external share git project across multiple yocto project Help git submodule git submodule add git submodule update \u2013init \u2013recursive","title":"Yocto project tree"},{"location":"blog/yocto/part4_add_ssh/#meta-external","text":"Collection of yocto git repositories from git meta-openembedded git submodule add https://github.com/openembedded/meta-openembedded.git","title":"meta-external"},{"location":"blog/yocto/part4_add_ssh/#layers","text":"Add layers to bblayers.conf file bitbake-layers show-layers NOTE: Starting bitbake server... layer path priority ========================================================================== meta /home/user/yocto/poky/meta 5 meta-poky /home/user/yocto/poky/meta-poky 5 meta-yocto-bsp /home/user/yocto/poky/meta-yocto-bsp 5 meta-oe /home/user/yocto/meta-external/meta-openembedded/meta-oe 6 meta-python /home/user/yocto/meta-external/meta-openembedded/meta-python 7","title":"layers"},{"location":"blog/yocto/part4_add_ssh/#add-dropbear-ssh","text":"","title":"Add dropbear ssh"},{"location":"blog/yocto/part4_add_ssh/#openembedded","text":"Search for dropbear recipe in openembedded Layer index Check openembedded-core is part of poky meta ? Yes I found dropbear under meta/recipes-core/dropbear","title":"OpenEmbedded"},{"location":"blog/yocto/part4_add_ssh/#setup","text":"Add to local.conf append to local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear\" Note IMAGE_INSTALL is the variable that controls what is included in any image. CORE_IMAGE_EXTRA_INSTALL is a convenience variable that enable you to add extra packages to an image based on the core-image class","title":"setup"},{"location":"blog/yocto/part4_add_ssh/#create-image","text":"# from build folder bitbake core-image-minimal","title":"Create image"},{"location":"blog/yocto/part4_add_ssh/#check","text":"# under build folder ll tmp/work/qemux86_64-poky-linux/core-image-minimal/1.0-r0/rootfs/usr/sbin/dropbear","title":"Check"},{"location":"blog/yocto/part4_add_ssh/#run-image-with-qemu","text":"run image runqemu tmp/deploy/images/qemux86-64/core-image-minimal-qemux86-64-<build number>.qemuboot.conf nographic check dropbear is running ps | grep drop 259 root 3020 S /usr/sbin/dropbear -r /etc/dropbear/dropbear_rsa_host_key -p 22 -B 293 root 4224 S grep drop","title":"run image with qemu"},{"location":"blog/yocto/part4_add_ssh/#ssh-from-host","text":"ssh root@192.168.7.2","title":"ssh from host"},{"location":"blog/yocto/part4_add_ssh/#check-recipe-location","text":"","title":"check recipe location"},{"location":"blog/yocto/part4_add_ssh/#bitbake--e-dropbear--grep-file-resultfilehomeuseryoctopokymetarecipes-coredropbeardropbear_202081bb","text":"","title":"bitbake -e dropbear | grep ^FILE=\n# Result\nFILE=&quot;/home/user/yocto/poky/meta/recipes-core/dropbear/dropbear_2020.81.bb&quot;\n"},{"location":"blog/yocto/part4_add_ssh/#add-python3","text":"Search recipe Show recipe more info","title":"Add python3"},{"location":"blog/yocto/part4_add_ssh/#setup_1","text":"Add to local.conf append to local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear python3\"","title":"setup"},{"location":"blog/yocto/part4_add_ssh/#check-recipe-location_1","text":"bitbake -e python3 | grep ^FILE = FILE = \"/home/user/yocto/poky/meta/recipes-devtools/python/python3_3.9.9.bb\"","title":"check recipe location"},{"location":"blog/yocto/part4_add_ssh/#create-image_1","text":"# from build folder bitbake core-image-minimal","title":"Create image"},{"location":"blog/yocto/part5-terminology/","tags":["yocto",101],"text":"Recipe # A recipe is a set of instructions that is read and processed by the bitbake (file with .bb extension) A recipe describes: - Where to fetch source code - Which patch to apply - Configuration options - Compile options - Install - License Configuration # Tell the build system what to build and put into the image (file with .conf extension) Types # Machine configuration option Distribution option Compiler tuning options General Common configuration options User options (local.conf) Example machine config # User local.conf we set the machine for example MACHINE ??= \"qemux86-64\" This setting tell the system to load machine configuration option meta/conf/machine/qemux86-64.conf Class # Class files are used to share common functionality across recipes (file with .bbclsss extension) Note classes useally locate in classes directory inside the meta* directory usage from recipe # inherit classname Layers # A collection of related recipes. layer isolate meta data according to functionality recipes are folders under layer folder Note name convention for layer meta-layername name description meta-poky Distro metadata meta-yocto-bsp BSP metadata BBLAYERS variable present in build/conf/bblayers.conf show layers bitbake-layers show-layers Find a layer # OpenEmbedded Layer Index raspberrypi ros2 layers Image # An image is the top level recipe image define how the root filesystem is built , with what packages. list all images ls meta*/recipes*/images/*.bb Packages # A package is a binary file with name .deb, .rpm Packages are produces by recipe A signal recipe produces many packages. all recipe packages describe is PACKAGES variable","title":"Part5 - Yocto terminology"},{"location":"blog/yocto/part5-terminology/#recipe","text":"A recipe is a set of instructions that is read and processed by the bitbake (file with .bb extension) A recipe describes: - Where to fetch source code - Which patch to apply - Configuration options - Compile options - Install - License","title":"Recipe"},{"location":"blog/yocto/part5-terminology/#configuration","text":"Tell the build system what to build and put into the image (file with .conf extension)","title":"Configuration"},{"location":"blog/yocto/part5-terminology/#types","text":"Machine configuration option Distribution option Compiler tuning options General Common configuration options User options (local.conf)","title":"Types"},{"location":"blog/yocto/part5-terminology/#example-machine-config","text":"User local.conf we set the machine for example MACHINE ??= \"qemux86-64\" This setting tell the system to load machine configuration option meta/conf/machine/qemux86-64.conf","title":"Example machine config"},{"location":"blog/yocto/part5-terminology/#class","text":"Class files are used to share common functionality across recipes (file with .bbclsss extension) Note classes useally locate in classes directory inside the meta* directory","title":"Class"},{"location":"blog/yocto/part5-terminology/#usage-from-recipe","text":"inherit classname","title":"usage from recipe"},{"location":"blog/yocto/part5-terminology/#layers","text":"A collection of related recipes. layer isolate meta data according to functionality recipes are folders under layer folder Note name convention for layer meta-layername name description meta-poky Distro metadata meta-yocto-bsp BSP metadata BBLAYERS variable present in build/conf/bblayers.conf show layers bitbake-layers show-layers","title":"Layers"},{"location":"blog/yocto/part5-terminology/#find-a-layer","text":"OpenEmbedded Layer Index raspberrypi ros2 layers","title":"Find a layer"},{"location":"blog/yocto/part5-terminology/#image","text":"An image is the top level recipe image define how the root filesystem is built , with what packages. list all images ls meta*/recipes*/images/*.bb","title":"Image"},{"location":"blog/yocto/part5-terminology/#packages","text":"A package is a binary file with name .deb, .rpm Packages are produces by recipe A signal recipe produces many packages. all recipe packages describe is PACKAGES variable","title":"Packages"},{"location":"blog/yocto/part6-tips/","tags":["yocto",101],"text":"Sharing downloads # DL_DIR ?= \"/home/user/yocto/downloads/\" Fix Resolve # CONNECTIVITY_CHECK_URIS = \"https://www.google.com/\" parallel # # Determines the number of tasks that BitBake will perform in parallel (for bitbake command) BB_NUMBER_THREADS = \"6\" # Determine the number of processes that make can run in parallel (for make command) PARALLEL_MAKE = \"-j 6\"","title":"Part6 - Tips"},{"location":"blog/yocto/part6-tips/#sharing-downloads","text":"DL_DIR ?= \"/home/user/yocto/downloads/\"","title":"Sharing downloads"},{"location":"blog/yocto/part6-tips/#fix-resolve","text":"CONNECTIVITY_CHECK_URIS = \"https://www.google.com/\"","title":"Fix Resolve"},{"location":"blog/yocto/part6-tips/#parallel","text":"# Determines the number of tasks that BitBake will perform in parallel (for bitbake command) BB_NUMBER_THREADS = \"6\" # Determine the number of processes that make can run in parallel (for make command) PARALLEL_MAKE = \"-j 6\"","title":"parallel"},{"location":"blog/yocto/part7-operators/","tags":["yocto",101],"text":"Variables # Variables can assign in conf and recipe files VARIABLE = \"value\" variable in conf # This command display variable value after config file are parsed bitbake -e | grep ^<VARIABLENAME> = # Example bitbake -e | grep ^BBPATH = # Result BBPATH = \"/home/user/yocto/poky/meta-poky:/home/user/yocto/poky/build:/home/user/yocto/poky/meta:/home/user/yocto/poky/meta-yocto-bsp:/home/user/yocto/meta-external/meta-openembedded/meta-oe:/home/user/yocto/meta-external/meta-openembedded/meta-python\" bitbake -e | grep ^TOPDIR = TOPDIR = \"/home/user/yocto/poky/build\" variable from recipe bitbake -e <recipe></recipe> | grep ^<VARIABLE> = # Example bitbake -e dropbear | grep ^DEPENDS = DEPENDS = \"autoconf-native automake-native libtool-native libtool-cross virtual/x86_64-poky-linux-gcc virtual/x86_64-poky-linux-compilerlibs virtual/libc zlib virtual/crypt update-rc.d initscripts virtual/update-alternatives\" Variable soft assignment (?=) # if variable assign as hard assignment the value is lost if no hard assignment this value are the default one MACHINE ?= \"qemuarm\" Note if ww have multiple soft assignment the first one is hold/assign Weaker default value (??=) # Assignment is made at the end of the parsing process, rather then immediately if variable assign as hard assignment the weaker value is lost if variable assign as default assignment the weaker value is lost Note if ww have multiple weak assignment the last one is hold/assign Variable Expansion # Variable can reference the content of other variable using the ${variable_name} syntax A = \"${B} hello\" B = \"${C} world\" C = \"linux\" Waring if variable not declare no expansion will happen the string is keep as is","title":"Part7 - Operators"},{"location":"blog/yocto/part7-operators/#variables","text":"Variables can assign in conf and recipe files VARIABLE = \"value\" variable in conf # This command display variable value after config file are parsed bitbake -e | grep ^<VARIABLENAME> = # Example bitbake -e | grep ^BBPATH = # Result BBPATH = \"/home/user/yocto/poky/meta-poky:/home/user/yocto/poky/build:/home/user/yocto/poky/meta:/home/user/yocto/poky/meta-yocto-bsp:/home/user/yocto/meta-external/meta-openembedded/meta-oe:/home/user/yocto/meta-external/meta-openembedded/meta-python\" bitbake -e | grep ^TOPDIR = TOPDIR = \"/home/user/yocto/poky/build\" variable from recipe bitbake -e <recipe></recipe> | grep ^<VARIABLE> = # Example bitbake -e dropbear | grep ^DEPENDS = DEPENDS = \"autoconf-native automake-native libtool-native libtool-cross virtual/x86_64-poky-linux-gcc virtual/x86_64-poky-linux-compilerlibs virtual/libc zlib virtual/crypt update-rc.d initscripts virtual/update-alternatives\"","title":"Variables"},{"location":"blog/yocto/part7-operators/#variable-soft-assignment-","text":"if variable assign as hard assignment the value is lost if no hard assignment this value are the default one MACHINE ?= \"qemuarm\" Note if ww have multiple soft assignment the first one is hold/assign","title":"Variable soft assignment (?=)"},{"location":"blog/yocto/part7-operators/#weaker-default-value-","text":"Assignment is made at the end of the parsing process, rather then immediately if variable assign as hard assignment the weaker value is lost if variable assign as default assignment the weaker value is lost Note if ww have multiple weak assignment the last one is hold/assign","title":"Weaker default value (??=)"},{"location":"blog/yocto/part7-operators/#variable-expansion","text":"Variable can reference the content of other variable using the ${variable_name} syntax A = \"${B} hello\" B = \"${C} world\" C = \"linux\" Waring if variable not declare no expansion will happen the string is keep as is","title":"Variable Expansion"},{"location":"blog/yocto/part8-custom_layer/","tags":["yocto","custom"],"text":"Custom layer # bitbake-layers create-layer <layer name> tree meta-mylayer /home/user/yocto/meta-mylayer/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 layer.conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u2514\u2500\u2500 recipes-example \u2514\u2500\u2500 example \u2514\u2500\u2500 example_0.1.bb Add layer to project # # Add bitbake-layers add-layer ~/yocto/meta-mylayer/ # Show bitbake-layers show-layers NOTE: Starting bitbake server... layer path priority ========================================================================== meta /home/user/yocto/poky/meta 5 meta-poky /home/user/yocto/poky/meta-poky 5 meta-yocto-bsp /home/user/yocto/poky/meta-yocto-bsp 5 meta-mylayer /home/user/yocto/meta-mylayer 6 Note Priority : This is the value used by BitBake to decide which recipe to use and the order in which the .bbappend files should be joined. It means that if two layers include the same recipe (.bb) file, the one with the higher priority is used. Add custom recipe # meta-mylayer/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 layer.conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u251c\u2500\u2500 recipes-example \u2502 \u2514\u2500\u2500 example \u2502 \u2514\u2500\u2500 example_0.1.bb \u2514\u2500\u2500 recipes-hello \u2514\u2500\u2500 hello \u251c\u2500\u2500 files \u2502 \u2514\u2500\u2500 hello.c \u2514\u2500\u2500 hello_1.0.bb files # recipes-hello.bb DESCRIPTION = \"Hello-my first recipe\" SECTION = \"Mywork\" LICENSE = \"CLOSED\" LIC_FILES_CHKSUM = \"file:// ${ COMMON_LICENSE_DIR } /MIT;md5=0835ade698e0bcf8506ecda2f7b4f302\" SRC_URI = \"file://hello.c\" S = \" ${ WORKDIR } \" TARGET_CC_ARCH += \" ${ LDFLAGS } \" do_compile () { ${ CC } hello.c -o hello } do_install () { install -d ${ D }${ bindir } install -m 0755 hello ${ D }${ bindir } } variables # meta/conf/bitbake.conf export exec_prefix = \"/usr\" export bindir = \"${exec_prefix}/bin\" TMPDIR ?= \"${TOPDIR}/tmp\" WORKDIR = \"${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PF}\" D = \"${WORKDIR}/image\" # TOPDIR bitbake -e | grep ^TOPDIR = TOPDIR = \"/home/user/yocto/poky/build\" hello.c #include <stdio.h> int main () { printf ( \"Hello yocto \\n \" ); return 0 ; } conf/local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear \\ python3 \\ hello \\ \" Build # bitbake core-image-minimal Test # # Run qemu runqemu qemux86-64 nographic # login $ ls -l /usr/bin/hello -rwxr-xr-x 1 root root 14376 Mar 9 2018 /usr/bin/hello # run program $ hello Hello yocto Reference # Yocto : Lab 02_Creating Custom layer and writing Recipe for Hello world","title":"Part8 - Custom layer"},{"location":"blog/yocto/part8-custom_layer/#custom-layer","text":"bitbake-layers create-layer <layer name> tree meta-mylayer /home/user/yocto/meta-mylayer/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 layer.conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u2514\u2500\u2500 recipes-example \u2514\u2500\u2500 example \u2514\u2500\u2500 example_0.1.bb","title":"Custom layer"},{"location":"blog/yocto/part8-custom_layer/#add-layer-to-project","text":"# Add bitbake-layers add-layer ~/yocto/meta-mylayer/ # Show bitbake-layers show-layers NOTE: Starting bitbake server... layer path priority ========================================================================== meta /home/user/yocto/poky/meta 5 meta-poky /home/user/yocto/poky/meta-poky 5 meta-yocto-bsp /home/user/yocto/poky/meta-yocto-bsp 5 meta-mylayer /home/user/yocto/meta-mylayer 6 Note Priority : This is the value used by BitBake to decide which recipe to use and the order in which the .bbappend files should be joined. It means that if two layers include the same recipe (.bb) file, the one with the higher priority is used.","title":"Add layer to project"},{"location":"blog/yocto/part8-custom_layer/#add-custom-recipe","text":"meta-mylayer/ \u251c\u2500\u2500 conf \u2502 \u2514\u2500\u2500 layer.conf \u251c\u2500\u2500 COPYING.MIT \u251c\u2500\u2500 README \u251c\u2500\u2500 recipes-example \u2502 \u2514\u2500\u2500 example \u2502 \u2514\u2500\u2500 example_0.1.bb \u2514\u2500\u2500 recipes-hello \u2514\u2500\u2500 hello \u251c\u2500\u2500 files \u2502 \u2514\u2500\u2500 hello.c \u2514\u2500\u2500 hello_1.0.bb","title":"Add custom recipe"},{"location":"blog/yocto/part8-custom_layer/#files","text":"recipes-hello.bb DESCRIPTION = \"Hello-my first recipe\" SECTION = \"Mywork\" LICENSE = \"CLOSED\" LIC_FILES_CHKSUM = \"file:// ${ COMMON_LICENSE_DIR } /MIT;md5=0835ade698e0bcf8506ecda2f7b4f302\" SRC_URI = \"file://hello.c\" S = \" ${ WORKDIR } \" TARGET_CC_ARCH += \" ${ LDFLAGS } \" do_compile () { ${ CC } hello.c -o hello } do_install () { install -d ${ D }${ bindir } install -m 0755 hello ${ D }${ bindir } }","title":"files"},{"location":"blog/yocto/part8-custom_layer/#variables","text":"meta/conf/bitbake.conf export exec_prefix = \"/usr\" export bindir = \"${exec_prefix}/bin\" TMPDIR ?= \"${TOPDIR}/tmp\" WORKDIR = \"${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PF}\" D = \"${WORKDIR}/image\" # TOPDIR bitbake -e | grep ^TOPDIR = TOPDIR = \"/home/user/yocto/poky/build\" hello.c #include <stdio.h> int main () { printf ( \"Hello yocto \\n \" ); return 0 ; } conf/local.conf CORE_IMAGE_EXTRA_INSTALL += \"dropbear \\ python3 \\ hello \\ \"","title":"variables"},{"location":"blog/yocto/part8-custom_layer/#build","text":"bitbake core-image-minimal","title":"Build"},{"location":"blog/yocto/part8-custom_layer/#test","text":"# Run qemu runqemu qemux86-64 nographic # login $ ls -l /usr/bin/hello -rwxr-xr-x 1 root root 14376 Mar 9 2018 /usr/bin/hello # run program $ hello Hello yocto","title":"Test"},{"location":"blog/yocto/part8-custom_layer/#reference","text":"Yocto : Lab 02_Creating Custom layer and writing Recipe for Hello world","title":"Reference"},{"location":"blog/yocto/yocto-rpi-1/","tags":["rpi","yocto"],"text":"clone meta-raspberrypi # cd meta-external git submodule add git://git.yoctoproject.org/meta-raspberrypi # checkout hardknott config # bblayers.conf POKY_BBLAYERS_CONF_VERSION = \"2\" BBPATH = \" ${ TOPDIR } \" BBFILES ? = \"\" BBLAYERS ? = \" \\ /home/user/yocto/poky/meta \\ /home/user/yocto/poky/meta-poky \\ /home/user/yocto/poky/meta-yocto-bsp \\ /home/user/yocto/meta-external/meta-raspberrypi \\ \" local.conf CONF_VERSION = \"1\" MACHINE ? = \"raspberrypi4\" BB_NUMBER_THREADS = \"6\" PARALLEL_MAKE = \"-j 6\" DL_DIR ? = \"/home/user/yocto/downloads/\" CONNECTIVITY_CHECK_URIS = \"https://www.google.com/\" IMAGE_FSTYPES = \"ext4.xz rpi-sdimg\" # for SD-CARD SDIMG_ROOTFS_TYPE = \"ext4.xz\" build image # # rpi-basic-image deprecated bitbake core-image-base other packages # IMAGE_INSTALL_append = \" nano\"","title":"Yocto RPI part 1"},{"location":"blog/yocto/yocto-rpi-1/#clone-meta-raspberrypi","text":"cd meta-external git submodule add git://git.yoctoproject.org/meta-raspberrypi # checkout hardknott","title":"clone meta-raspberrypi"},{"location":"blog/yocto/yocto-rpi-1/#config","text":"bblayers.conf POKY_BBLAYERS_CONF_VERSION = \"2\" BBPATH = \" ${ TOPDIR } \" BBFILES ? = \"\" BBLAYERS ? = \" \\ /home/user/yocto/poky/meta \\ /home/user/yocto/poky/meta-poky \\ /home/user/yocto/poky/meta-yocto-bsp \\ /home/user/yocto/meta-external/meta-raspberrypi \\ \" local.conf CONF_VERSION = \"1\" MACHINE ? = \"raspberrypi4\" BB_NUMBER_THREADS = \"6\" PARALLEL_MAKE = \"-j 6\" DL_DIR ? = \"/home/user/yocto/downloads/\" CONNECTIVITY_CHECK_URIS = \"https://www.google.com/\" IMAGE_FSTYPES = \"ext4.xz rpi-sdimg\" # for SD-CARD SDIMG_ROOTFS_TYPE = \"ext4.xz\"","title":"config"},{"location":"blog/yocto/yocto-rpi-1/#build-image","text":"# rpi-basic-image deprecated bitbake core-image-base","title":"build image"},{"location":"blog/yocto/yocto-rpi-1/#other-packages","text":"IMAGE_INSTALL_append = \" nano\"","title":"other packages"},{"location":"projects/","text":"","title":"Projects"},{"location":"tags/","text":"","title":"Tags"}]}