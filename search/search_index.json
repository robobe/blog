{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".md-typeset .cover { display: none; } .md-typeset .cover + hr { display: none; } .md-typeset h1, .md-typeset h2 { color: orangered; } .md-typeset .cards .card { border-radius: 1em; padding: 1em; } .md-typeset .cards .col:first-of-type { margin-left: -1em; } .md-typeset .cards .col:last-of-type { margin-right: -1em; } .md-typeset .cards .card h2 { margin-top: 0; } Robots Inside # First steps in robotics Systems. From hardware to applications. Step by step. Blog # Each post is what I\u2019ve learned, and I wrote them down to share. Hope you\u2019ll find something interesting there. Read news Projects # A list of my projects which are done for learning and practicing in free time. See projects","title":"Home"},{"location":"#robots-inside","text":"First steps in robotics Systems. From hardware to applications. Step by step.","title":"Robots Inside"},{"location":"#blog","text":"Each post is what I\u2019ve learned, and I wrote them down to share. Hope you\u2019ll find something interesting there. Read news","title":" Blog"},{"location":"#projects","text":"A list of my projects which are done for learning and practicing in free time. See projects","title":" Projects"},{"location":"blog/","text":"","title":"Recent posts"},{"location":"blog/ROS2/colcon/","tags":["ros2","colcon"],"text":"Colcon # colcon is a command line tool to improve the workflow of building, testing and using multiple software packages. It automates the process, handles the ordering and sets up the environment to use the packages. Build tools # Build tools are programs that automate the creation of executable applications from source code - Compiling - Linking - Packaging Build system # Repeatable: ensure that that the project is built exactly the same way every time it builds Reproducible: easily recreate (reproduce) the steps that are required to perform a build Standard ensure that all of your projects follow the same steps and implement best practices Note Make Ninja Generator # CMake: create build system for specific O.S or system Meta build # Install # sudo apt install python3-colcon-common-extensions Usage # In the root of the workspace run colcon build References # ROS2 foxy Using colcon to build packages\uf0c1","title":"Colcon build system"},{"location":"blog/ROS2/colcon/#colcon","text":"colcon is a command line tool to improve the workflow of building, testing and using multiple software packages. It automates the process, handles the ordering and sets up the environment to use the packages.","title":"Colcon"},{"location":"blog/ROS2/colcon/#build-tools","text":"Build tools are programs that automate the creation of executable applications from source code - Compiling - Linking - Packaging","title":"Build tools"},{"location":"blog/ROS2/colcon/#build-system","text":"Repeatable: ensure that that the project is built exactly the same way every time it builds Reproducible: easily recreate (reproduce) the steps that are required to perform a build Standard ensure that all of your projects follow the same steps and implement best practices Note Make Ninja","title":"Build system"},{"location":"blog/ROS2/colcon/#generator","text":"CMake: create build system for specific O.S or system","title":"Generator"},{"location":"blog/ROS2/colcon/#meta-build","text":"","title":"Meta build"},{"location":"blog/ROS2/colcon/#install","text":"sudo apt install python3-colcon-common-extensions","title":"Install"},{"location":"blog/ROS2/colcon/#usage","text":"In the root of the workspace run colcon build","title":"Usage"},{"location":"blog/ROS2/colcon/#references","text":"ROS2 foxy Using colcon to build packages\uf0c1","title":"References"},{"location":"blog/ROS2/tutorial/pub_sub/","tags":["ros2","pub","sub",101],"text":"Publisher # node source code # Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_publisher\" ) self . publisher_ = self . create_publisher ( String , \"minimal\" , 10 ) timer_period = 1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = f \"pub simple: { self . i } \" self . publisher_ . publish ( msg ) self . get_logger () . info ( f 'Publishing: \" { msg . data } \"' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () # Spin the node so the callback function is called. rclpy . spin ( minimal_publisher ) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () setup.py # Add entry point <node name>.<module name>:<entry func> entry_points = { 'console_scripts' : [ \"simple_pub = basic.simple_pub:main\" ], } package.xml # Add this lines before <export> tag <exec_depend> rclpy </exec_depend> <exec_depend> std_msgs </exec_depend> Note exec_depend Declares a rosdep key or ROS package name that this package needs at execution-time build and run # Build colcon build --symlink-install --packages-select basic Source it source install/setup.bash Run ros2 run basic simple_pub output [ INFO ] [ 1649181441 .732282742 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ INFO ] [ 1649181442 .713229723 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ INFO ] [ 1649181443 .713351778 ] [ minimal_publisher ] : Publishing: \"pub simple: 2\" cli # ros2 topic # # list ros2 topic list #result /parameter_events /rosout /minimal # info ros2 topic info /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Subscription count: 0 # Echo ros2 topic echo /minimal # Result data: 'pub simple: 110' --- data: 'pub simple: 111' --- topic verbose info # verbose info ros2 topic info -v /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Node name: minimal_publisher Node namespace: / Topic type: std_msgs/msg/String Endpoint type: PUBLISHER GID: 01 .0f.d1.c7.10.ba.23.e1.01.00.00.00.00.00.11.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE Durability: RMW_QOS_POLICY_DURABILITY_VOLATILE Lifespan: 2147483651294967295 nanoseconds Deadline: 2147483651294967295 nanoseconds Liveliness: RMW_QOS_POLICY_LIVELINESS_AUTOMATIC Liveliness lease duration: 2147483651294967295 nanoseconds Subscription count: 0 Subscriber # node source code # MinimalSubscriber Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalSubscriber ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_subscriber\" ) # The node subscribes to messages of type std_msgs/String, # over a topic named: /minimal # The callback function is called as soon as a message is received. # The maximum number of queued messages is 10. self . subscription = self . create_subscription ( String , \"minimal\" , self . __sub_callback , 10 ) def __sub_callback ( self , msg ): self . get_logger () . info ( f \"I heard: { msg . data } \" ) def main ( args = None ): rclpy . init ( args = args ) minimal_subscriber = MinimalSubscriber () rclpy . spin ( minimal_subscriber ) minimal_subscriber . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main () setup.py # Add entry point entry_points = { 'console_scripts' : [ \"simple_sub = basic.simple_sub:main\" ], } build and run # Build colcon build --symlink-install --packages-select basic cli # Run subscriber node Terminal1 ros2 run basic simple_sub # Result after pub from terminal 2 [ INFO ] [ 1649213924 .055190916 ] [ minimal_subscriber ] : I heard: hello [ INFO ] [ 1649213925 .036938799 ] [ minimal_subscriber ] : I heard: hello Terminal2 # pub message ros2 topic pub /minimal std_msgs/msg/String \"{data: 'hello'}\" # pub only one message ros2 topic pub -1 /minimal std_msgs/msg/String \"{data: 'hello'}\" References # package.xml specification","title":"Part1 - Simple PUB / SUB"},{"location":"blog/ROS2/tutorial/pub_sub/#publisher","text":"","title":"Publisher"},{"location":"blog/ROS2/tutorial/pub_sub/#node-source-code","text":"Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_publisher\" ) self . publisher_ = self . create_publisher ( String , \"minimal\" , 10 ) timer_period = 1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = f \"pub simple: { self . i } \" self . publisher_ . publish ( msg ) self . get_logger () . info ( f 'Publishing: \" { msg . data } \"' ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () # Spin the node so the callback function is called. rclpy . spin ( minimal_publisher ) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"node source code"},{"location":"blog/ROS2/tutorial/pub_sub/#setuppy","text":"Add entry point <node name>.<module name>:<entry func> entry_points = { 'console_scripts' : [ \"simple_pub = basic.simple_pub:main\" ], }","title":"setup.py"},{"location":"blog/ROS2/tutorial/pub_sub/#packagexml","text":"Add this lines before <export> tag <exec_depend> rclpy </exec_depend> <exec_depend> std_msgs </exec_depend> Note exec_depend Declares a rosdep key or ROS package name that this package needs at execution-time","title":"package.xml"},{"location":"blog/ROS2/tutorial/pub_sub/#build-and-run","text":"Build colcon build --symlink-install --packages-select basic Source it source install/setup.bash Run ros2 run basic simple_pub output [ INFO ] [ 1649181441 .732282742 ] [ minimal_publisher ] : Publishing: \"pub simple: 0\" [ INFO ] [ 1649181442 .713229723 ] [ minimal_publisher ] : Publishing: \"pub simple: 1\" [ INFO ] [ 1649181443 .713351778 ] [ minimal_publisher ] : Publishing: \"pub simple: 2\"","title":"build and run"},{"location":"blog/ROS2/tutorial/pub_sub/#cli","text":"","title":"cli"},{"location":"blog/ROS2/tutorial/pub_sub/#ros2-topic","text":"# list ros2 topic list #result /parameter_events /rosout /minimal # info ros2 topic info /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Subscription count: 0 # Echo ros2 topic echo /minimal # Result data: 'pub simple: 110' --- data: 'pub simple: 111' ---","title":"ros2 topic"},{"location":"blog/ROS2/tutorial/pub_sub/#topic-verbose-info","text":"verbose info ros2 topic info -v /minimal # Result Type: std_msgs/msg/String Publisher count: 1 Node name: minimal_publisher Node namespace: / Topic type: std_msgs/msg/String Endpoint type: PUBLISHER GID: 01 .0f.d1.c7.10.ba.23.e1.01.00.00.00.00.00.11.03.00.00.00.00.00.00.00.00 QoS profile: Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE Durability: RMW_QOS_POLICY_DURABILITY_VOLATILE Lifespan: 2147483651294967295 nanoseconds Deadline: 2147483651294967295 nanoseconds Liveliness: RMW_QOS_POLICY_LIVELINESS_AUTOMATIC Liveliness lease duration: 2147483651294967295 nanoseconds Subscription count: 0","title":"topic verbose info"},{"location":"blog/ROS2/tutorial/pub_sub/#subscriber","text":"","title":"Subscriber"},{"location":"blog/ROS2/tutorial/pub_sub/#node-source-code_1","text":"MinimalSubscriber Node source code import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalSubscriber ( Node ): def __init__ ( self ): super () . __init__ ( \"minimal_subscriber\" ) # The node subscribes to messages of type std_msgs/String, # over a topic named: /minimal # The callback function is called as soon as a message is received. # The maximum number of queued messages is 10. self . subscription = self . create_subscription ( String , \"minimal\" , self . __sub_callback , 10 ) def __sub_callback ( self , msg ): self . get_logger () . info ( f \"I heard: { msg . data } \" ) def main ( args = None ): rclpy . init ( args = args ) minimal_subscriber = MinimalSubscriber () rclpy . spin ( minimal_subscriber ) minimal_subscriber . destroy_node () rclpy . shutdown () if __name__ == \"__main__\" : main ()","title":"node source code"},{"location":"blog/ROS2/tutorial/pub_sub/#setuppy_1","text":"Add entry point entry_points = { 'console_scripts' : [ \"simple_sub = basic.simple_sub:main\" ], }","title":"setup.py"},{"location":"blog/ROS2/tutorial/pub_sub/#build-and-run_1","text":"Build colcon build --symlink-install --packages-select basic","title":"build and run"},{"location":"blog/ROS2/tutorial/pub_sub/#cli_1","text":"Run subscriber node Terminal1 ros2 run basic simple_sub # Result after pub from terminal 2 [ INFO ] [ 1649213924 .055190916 ] [ minimal_subscriber ] : I heard: hello [ INFO ] [ 1649213925 .036938799 ] [ minimal_subscriber ] : I heard: hello Terminal2 # pub message ros2 topic pub /minimal std_msgs/msg/String \"{data: 'hello'}\" # pub only one message ros2 topic pub -1 /minimal std_msgs/msg/String \"{data: 'hello'}\"","title":"cli"},{"location":"blog/ROS2/tutorial/pub_sub/#references","text":"package.xml specification","title":"References"},{"location":"blog/video/examples/","tags":["video","ffmpeg","gstreamer","cheat-sheet"],"text":"jpeg # Stream jpeg stream over udp using gstreamer Play stream using FFPlay and sdp file Terminal1: gstreamer udp stream gst-launch-1.0 -v videotestsrc \\ ! video/x-raw,width=640,height=480 \\ ! timeoverlay \\ ! tee name=\"local\" \\ ! queue \\ ! videoconvert \\ ! autovideosink sync=false\\ local. \\ ! queue \\ ! jpegenc \\ ! rtpjpegpay \\ ! udpsink host=127.0.0.1 port= 5000 udp.sdp m=video 5000 RTP/AVP 26 a=rtpmap:26 JPEG/90000; c=IN IP4 127.0.0.1 Terminal 2: ffplay ffplay \\ -protocol_whitelist file,rtp,udp \\ -fflags nobuffer \\ -flags low_delay \\ -framedrop \\ -i udp.sdp","title":"FFMpeg and Gstreamer Examples"},{"location":"blog/video/examples/#jpeg","text":"Stream jpeg stream over udp using gstreamer Play stream using FFPlay and sdp file Terminal1: gstreamer udp stream gst-launch-1.0 -v videotestsrc \\ ! video/x-raw,width=640,height=480 \\ ! timeoverlay \\ ! tee name=\"local\" \\ ! queue \\ ! videoconvert \\ ! autovideosink sync=false\\ local. \\ ! queue \\ ! jpegenc \\ ! rtpjpegpay \\ ! udpsink host=127.0.0.1 port= 5000 udp.sdp m=video 5000 RTP/AVP 26 a=rtpmap:26 JPEG/90000; c=IN IP4 127.0.0.1 Terminal 2: ffplay ffplay \\ -protocol_whitelist file,rtp,udp \\ -fflags nobuffer \\ -flags low_delay \\ -framedrop \\ -i udp.sdp","title":"jpeg"},{"location":"blog/video/ffmpeg/","tags":["video","ffmpeg","sdp"],"text":"SDP # Session Description Protocol Refernces # RTP (I): Intro to RTP and SDP","title":"FFMpeg"},{"location":"blog/video/ffmpeg/#sdp","text":"Session Description Protocol","title":"SDP"},{"location":"blog/video/ffmpeg/#refernces","text":"RTP (I): Intro to RTP and SDP","title":"Refernces"},{"location":"blog/video/gstreamer/","tags":["video","gstreamer"],"text":"rtsp client # ffprob ffprobe rtsp : //wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 # ffprobe ffprobe < rtsp url > # Result Stream # 0 : 0 : Audio : aac ( LC ), 12000 Hz , stereo , fltp Stream # 0 : 1 : Video : h264 ( High ), yuv420p ( progressive ), 240 x160 [ SAR 32 : 27 DAR 16 : 9 ], 24 fps , 24.08 tbr , 90 k tbn , 48 tbc pipe # gst-launch-1.0 rtspsrc location = rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 latency = 100 \\ ! queue \\ ! rtph264depay \\ ! h264parse \\ ! avdec_h264 \\ ! videoconvert \\ ! videoscale ! video/x-raw,width = 640 ,height = 480 \\ ! autovideosink gst-launch-1.0 rtspsrc location=rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 latency=0 buffer-mode=auto \\ ! decodebin \\ ! autovideosink sync=false Send and play # pppppppppppppppp","title":"Gstreamer"},{"location":"blog/video/gstreamer/#rtsp-client","text":"ffprob ffprobe rtsp : //wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 # ffprobe ffprobe < rtsp url > # Result Stream # 0 : 0 : Audio : aac ( LC ), 12000 Hz , stereo , fltp Stream # 0 : 1 : Video : h264 ( High ), yuv420p ( progressive ), 240 x160 [ SAR 32 : 27 DAR 16 : 9 ], 24 fps , 24.08 tbr , 90 k tbn , 48 tbc pipe # gst-launch-1.0 rtspsrc location = rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 latency = 100 \\ ! queue \\ ! rtph264depay \\ ! h264parse \\ ! avdec_h264 \\ ! videoconvert \\ ! videoscale ! video/x-raw,width = 640 ,height = 480 \\ ! autovideosink gst-launch-1.0 rtspsrc location=rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4 latency=0 buffer-mode=auto \\ ! decodebin \\ ! autovideosink sync=false","title":"rtsp client"},{"location":"blog/video/gstreamer/#send-and-play","text":"pppppppppppppppp","title":"Send and play"},{"location":"blog/vscode/","tags":["vscode","todo"],"text":"Priority: (A) capital letter first in line Project: +project anywhere in line non-whitespace Context: @context anywhere in line non-whitespace tag: key:value x as first character mark task completion github todo primer VSCode ext # Commands and decorators for managing todo.txt files marketplace Note ctrl+shift+x: Toggle completion References # todotxt todo spec vscode todotxt-mode","title":"todo.txt"},{"location":"blog/vscode/#vscode-ext","text":"Commands and decorators for managing todo.txt files marketplace Note ctrl+shift+x: Toggle completion","title":"VSCode ext"},{"location":"blog/vscode/#references","text":"todotxt todo spec vscode todotxt-mode","title":"References"},{"location":"projects/","text":"","title":"Projects"},{"location":"tags/","text":"","title":"Tags"}]}